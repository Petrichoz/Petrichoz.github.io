<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0、准备相关软件环境</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC0%E7%AB%A0_%E5%87%86%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC0%E7%AB%A0_%E5%87%86%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="准备相关软件环境"><a href="#准备相关软件环境" class="headerlink" title="准备相关软件环境"></a>准备相关软件环境</h2><h3 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h3><p>环境安装：</p><blockquote><p>yum -y install gcc-c++</p></blockquote><p>第一步：安装必要的一些系统工具</p><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p></blockquote><p>第二步：添加软件源信息</p><blockquote><p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" title="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><p>第三步：更新并安装Docker-CE</p><blockquote><p>yum makecache fast<br>yum -y install docker-ce</p></blockquote><p>第四步：开启Docker服务</p><blockquote><p>service docker start<br>systemctl enable docker</p></blockquote><p>第五步：测试是否安装成功</p><blockquote><p>docker -v</p></blockquote><p><strong>第六步：配置镜像加速器</strong></p><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p><blockquote><p>sudo mkdir -p &#x2F;etc&#x2F;docker</p></blockquote><p>新建daemon.json文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://registry.dockermirror.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>sudo systemctl daemon-reload<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p></blockquote><h3 id="2、安装mysql"><a href="#2、安装mysql" class="headerlink" title="2、安装mysql"></a>2、安装mysql</h3><p><strong>已安装的忽略</strong></p><p>第一步：拉取镜像</p><blockquote><p>docker pull mysql:8.0.29</p></blockquote><p>第二步：启动</p><blockquote><p>docker run –name mysql –restart&#x3D;always -v mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;root -d mysql:8.0.29</p></blockquote><p>第三步：测试mysql</p><p>进入容器：</p><blockquote><p>docker exec -it mysql  &#x2F;bin&#x2F;bash</p></blockquote><p>登录mysql：</p><blockquote><p>mysql -u root -p</p><p>输入密码：root</p></blockquote><p>如果顺利进入，安装成功</p><blockquote><p>#修改默认密码校验方式<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;</p></blockquote><h3 id="3、按照Redis"><a href="#3、按照Redis" class="headerlink" title="3、按照Redis"></a>3、按照Redis</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><blockquote><p>docker pull redis:7.0.10</p></blockquote><p>第二步：启动</p><blockquote><p>docker run –name&#x3D;redis -d -p 6379:6379  –restart&#x3D;always redis:7.0.10</p></blockquote><h3 id="4、安装nacos"><a href="#4、安装nacos" class="headerlink" title="4、安装nacos"></a>4、安装nacos</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><blockquote><p>docker pull nacos&#x2F;nacos-server:v2.1.1</p></blockquote><p>第二步：启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-e MODE=standalone \<br>-p 8848:8848 \<br>-p 9848:9848 \<br>-p 9849:9849 \<br>--name nacos2.1.1 \<br>--restart=always \<br>nacos/nacos-server:v2.1.1<br></code></pre></td></tr></table></figure><h3 id="5、安装minio"><a href="#5、安装minio" class="headerlink" title="5、安装minio"></a>5、安装minio</h3><h4 id="5-1-Minio介绍"><a href="#5-1-Minio介绍" class="headerlink" title="5.1 Minio介绍"></a>5.1 Minio介绍</h4><p>官网：<a href="https://www.minio.org.cn/">https://www.minio.org.cn/</a></p><p>MinIO是一个开源的分布式对象存储服务器，支持S3协议并且可以在多节点上实现数据的高可用和容错。它采用Go语言开发，拥有轻量级、高性能、</p><p>易部署等特点，并且可以自由选择底层存储介质。</p><p>MinIO的主要特点包括：</p><p>1、高性能：MinIO基于GO语言编写，具有高速、轻量级、高并发等性能特点，还支持多线程和缓存等机制进行优化，可以快速地处理大规模数据。</p><p>2、可扩展性：MinIO采用分布式存储模式，支持水平扩展，通过增加节点数量来扩展存储容量和性能，支持自动数据迁移和负载均衡。</p><p>3、安全性：MinIO提供了多种安全策略，如访问控制列表（ACL）、服务端加密（SSE）、传输层安全性（TLS）等，可以保障数据安全和隐私。</p><p>4、兼容性：MinIO兼容AWS S3 API，还支持其他云服务提供商的API，比如GCP、Azure等，可以通过简单的配置实现互操作性。</p><p>5、简单易用：MinIO的部署和管理非常简单，只需要运行一个二进制包即可启动服务，同时提供了Web界面和命令行工具等方便的管理工具。</p><p><strong>S3协议</strong>是Amazon Web Services (AWS) 提供的对象存储服务（Simple Storage Service）的API协议。它是一种 RESTful风格的Web服务接口，使</p><p>用HTTP&#x2F;HTTPS协议进行通信，支持多种编程语言和操作系统，并实现了数据的可靠存储、高扩展性以及良好的可用性。</p><p>已安装或能访问忽略</p><h4 id="5-2-Minio安装"><a href="#5-2-Minio安装" class="headerlink" title="5.2 Minio安装"></a>5.2 Minio安装</h4><p>第一步：拉取镜像</p><blockquote><p>docker pull minio&#x2F;minio</p></blockquote><p>第二步：启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run \<br>-p 9000:9000 \<br>-p 9001:9001 \<br>--name=minio \<br>-d --restart=always \<br>-e &quot;MINIO_ROOT_USER=admin&quot; \<br>-e &quot;MINIO_ROOT_PASSWORD=admin123456&quot; \<br>-v minio-data:/data \<br>-v minio-config:/root/.minio \<br>minio/minio server /data --console-address &quot;:9001&quot;<br></code></pre></td></tr></table></figure><p>浏览器访问：<a href="http://ip:9001/minio/login%EF%BC%8C%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81admin/admin123456%E7%99%BB%E5%BD%95" title="http://IP:9001/minio/login，登录使用自定义账户密码admin/admin123456登录">http://IP:9001/minio/login，登录使用自定义账户密码admin/admin123456登录</a></p><p><strong>注意</strong>：文件上传时，需要调整一下linux 服务器的时间与windows 时间一致！</p><blockquote><p>第一步：安装ntp服务<br>yum -y install ntp<br>第二步：开启开机启动服务<br>systemctl enable ntpd<br>第三步：启动服务<br>systemctl start ntpd<br>第四步：更改时区<br>timedatectl set-timezone Asia&#x2F;Shanghai<br>第五步：启用ntp同步<br>timedatectl set-ntp yes<br>第六步：同步时间<br>ntpq -p</p></blockquote><h3 id="6、安装rabbitmq"><a href="#6、安装rabbitmq" class="headerlink" title="6、安装rabbitmq"></a>6、安装rabbitmq</h3><p>第一步：拉取镜像</p><blockquote><p>docker pull rabbitmq:3.12.0-management</p></blockquote><p>第二步：启动</p><blockquote><p>docker run -d –name&#x3D;rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12.0-management</p></blockquote><p>第三步：安装延迟队列插件 </p><ol><li><p>首先下载rabbitmq_delayed_message_exchange-3.12.0.ez文件上传到RabbitMQ所在服务器，下载地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a>         </p><p><strong>注意：也可以使用课件资料&#x2F;rabbitmq插件目录中下载好的</strong></p></li><li><p>切换到插件所在目录，执行<code>docker cp rabbitmq_delayed_message_exchange-3.12.0.ez rabbitmq:/plugins</code>命令，将刚插件拷贝到容器内plugins目录下</p></li><li><p>执行<code>docker exec -it rabbitmq /bin/bash</code>命令进入到容器内部</p></li><li><p>执行<code>cd plugins</code>进入plugins目录,然后执行<code>ls -l|grep delay </code>命令查看插件是否copy成功</p></li><li><p>在容器内plugins目录下，执行<code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange </code>命令启用插件</p></li><li><p>exit命令退出RabbitMQ容器内部，然后执行<code> docker restart rabbitmq</code>命令重启RabbitMQ容器</p></li></ol><h3 id="7、环境测试"><a href="#7、环境测试" class="headerlink" title="7、环境测试"></a>7、环境测试</h3><p>使用mysql&#x2F;redis客户端工具远程连接mysql&#x2F;redis测试</p><p>nacos控制台访问测试:  <code>http://虚拟机IP:8848/nacos      </code>   账号密码：nacos&#x2F;nacos</p><p>rabbitmq控制台访问测试：<code>http://虚拟机IP:15672 </code> 账号密码：guest&#x2F;guest</p><p>minio控制台访问测试：<code>http://虚拟机IP:9001</code>  账号密码：admin&#x2F;admin123456</p><p><strong>注意：如果访问失败</strong></p><p>1、检查容器是否创建启动成功，可能是端口号占用导致，需要先关闭占用端口号的进程或修改当前容器的端口号</p><p>2、检查防火墙是否关闭，如果未关闭，可以执行<code>systemctl  stop firewalld.service </code>, <code>systemctl disable firewalld.service</code> 关闭</p><p>3、配置虚拟机允许IPv4地址跳转</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 修改配置文件：</span><br>vim /usr/lib/sysctl.d/<span class="hljs-number">00</span>-<span class="hljs-params">system</span>.conf<br><span class="hljs-comment"># 添加</span><br>net.ipv4.ip_forward=<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 保存退出 重启网络</span><br><span class="hljs-params">system</span>ctl restart network<br><span class="hljs-comment"># 重启docker</span><br><span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5、支付</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章-支付"><a href="#第5章-支付" class="headerlink" title="第5章 支付"></a>第5章 支付</h1><h2 id="5-1-支付宝支付"><a href="#5-1-支付宝支付" class="headerlink" title="5.1 支付宝支付"></a>5.1 支付宝支付</h2><h3 id="5-1-1-需求说明"><a href="#5-1-1-需求说明" class="headerlink" title="5.1.1 需求说明"></a>5.1.1 需求说明</h3><p>订单支付如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/pay.gif" alt="pay" style="zoom:67%;"> <p>在支付页面点击<strong>确认支付</strong>按钮此时就需要对接第三方支付系统，给用户展示出第三方支付系统的收银台。</p><p><strong>查看接口文档：</strong></p><p>支付接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">get /payment/alipay/submitAlipay/<span class="hljs-punctuation">&#123;</span>orderNo<span class="hljs-punctuation">&#125;</span><br>返回结果：<br>支付宝支付H5表单<br></code></pre></td></tr></table></figure><h3 id="5-1-2-支付宝支付"><a href="#5-1-2-支付宝支付" class="headerlink" title="5.1.2 支付宝支付"></a>5.1.2 支付宝支付</h3><p>官网地址：<a href="https://open.alipay.com/">https://open.alipay.com/</a></p><p><a href="https://baike.baidu.com/item/%E6%94%AF%E4%BB%98%E5%AE%9D%EF%BC%88%E4%B8%AD%E5%9B%BD%EF%BC%89%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/23241708">支付宝（中国）网络技术有限公司</a> [1] 是国内的第三方支付平台，致力于提供“简单、安全、快速”的支付解决方案 [2] 。支付宝公司从2004年建立开始，始终以“信任”作为产品和服务的核心。旗下有“支付宝”与“支付宝钱包”两个独立品牌。自2014年第二季度开始成为当前全球最大的<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E6%94%AF%E4%BB%98/565488">移动支付</a>厂商。</p><h4 id="1、产品介绍"><a href="#1、产品介绍" class="headerlink" title="1、产品介绍"></a>1、产品介绍</h4><p>（1）产品特色</p><p>选择手机网站支付：<a href="https://open.alipay.com/api/detail?code=I1080300001000041949">https://open.alipay.com/api/detail?code=I1080300001000041949</a></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-0998.png"> </p><p>手机网站支付是指商家在移动端网页展示商品或服务，用户在商家页面确认使用支付宝支付后，浏览器自动跳转支付宝 App 或支付宝网页完成付款的支付产品。该产品在签约完成后，需要技术集成方可使用。</p><p>（2）使用示例</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-0075.png"></p><p>（3）申请条件</p><p>支持的账号类型：<a href="https://opendocs.alipay.com/common/02kkum">支付宝企业账号</a>、<a href="https://opendocs.alipay.com/common/02kg61">支付宝个人账号</a>。</p><p>签约申请提交材料要求：</p><ul><li>提供网站地址，网站能正常访问且页面显示完整，网站需要明确经营内容且有完整的商品信息。</li><li>网站必须通过 ICP 备案，且备案主体需与支付宝账号主体一致。若网站备案主体与当前账号主体不同时需上传授权函。</li><li>个人账号申请，需提供营业执照，且支付宝账号名称需与营业执照主体一致。</li></ul><p><strong>注意</strong>：需按照要求提交材料，若部分材料不合格，收款额度将受到限制（单笔收款 ≤ 2000 元，单日收款 ≤ 20000 元）。若签约时未能提供相关材料（如营业执照），请在合约生效后的 30 天内补全，否则会影响正常收款。</p><p>（4）费率</p><table><thead><tr><th><strong>收费模式</strong></th><th><strong>费率</strong></th></tr></thead><tbody><tr><td>单笔收费</td><td>0.6%-1.0%</td></tr></tbody></table><p>特殊行业费率为 1.0%，非特殊行业费率为 0.6%。特殊行业包含：休闲游戏、网络游戏点卡、游戏渠道代理、游戏系统商、网游周边服务、交易平台、网游运营商（含网页游戏）等。</p><h4 id="2、接入准备"><a href="#2、接入准备" class="headerlink" title="2、接入准备"></a>2、接入准备</h4><p>官方文档：<a href="https://opendocs.alipay.com/open/203/107084?pathHash=a33de091">https://opendocs.alipay.com/open/203/107084?pathHash=a33de091</a></p><p>整体流程：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-8020.png"> </p><p>为了提供数据传输的安全性，在进行传输的时候需要对数据进行加密：</p><p>常见的加密方式： </p><p>1、不可逆加密：只能对数据进行加密不能解密</p><p>2、可逆加密：可以对数据加密也可以解密</p><p>可逆加密可以再细分为：</p><p>1、对称加密： 加密和解密使用同一个秘钥</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-6255.png"> </p><p>2、非对称加密：加密和解密使用的是不同的秘钥</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-3058.png"> </p><p>支付宝为了提供数据传输的安全性使用了两个秘钥对：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-0260.png"> </p><h4 id="3、手机网站支付快速接入"><a href="#3、手机网站支付快速接入" class="headerlink" title="3、手机网站支付快速接入"></a>3、手机网站支付快速接入</h4><p>官方文档：<a href="https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b">https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b</a></p><p>系统交互流程图：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-3985.png"> </p><p>作为我们的项目来讲只需要将支付宝的收银台展示给用户即可，后续支付的动作和我们的系统就没有关系了。支付成功以后，支付宝开放平台会请求我们系统的接口通知支付结果，我们的系统也可以调用支付宝交易查询接口获取支付结果。</p><h4 id="4、官方demo研究"><a href="#4、官方demo研究" class="headerlink" title="4、官方demo研究"></a>4、官方demo研究</h4><p>步骤：</p><ul><li><p>官方demo下载地址：<a href="https://opendocs.alipay.com/open/203/105910?pathHash=1a2e3a94">https://opendocs.alipay.com/open/203/105910?pathHash=1a2e3a94</a></p></li><li><p>将访问demo的eclipse项目更改为idea的maven项目(jdk8)</p></li><li><p>在AlipayConfig类中填写参数信息</p></li><li><p>启动项目进行测试</p></li></ul><h3 id="5-1-3-搭建支付模块"><a href="#5-1-3-搭建支付模块" class="headerlink" title="5.1.3 搭建支付模块"></a>5.1.3 搭建支付模块</h3><h4 id="1、新建模块"><a href="#1、新建模块" class="headerlink" title="1、新建模块"></a>1、新建模块</h4><p>在modules模块下新建子模块payment</p><h4 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>modules<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>payment<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        payment支付模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos Config --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Sentinel --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringBoot Actuator --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Mysql Connector --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Common DataScope --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-datascope<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Common Log --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-log<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、banner-txt"><a href="#3、banner-txt" class="headerlink" title="3、banner.txt"></a>3、banner.txt</h4><p>在resources目录下新建banner.txt</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Spring Boot Version: $&#123;spring-boot.version&#125;<br>Spring Application Name: $&#123;spring.application.name&#125;<br>                            _                           _                    <br>                           (_)                         | |                   <br> _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  <br>| &#x27;__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| &#x27;_ ` _ \ <br>| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |<br>|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|<br>                      __/ |                  __/ |                           <br>                     |___/                  |___/                            <br></code></pre></td></tr></table></figure><h4 id="4、bootstrap-yml"><a href="#4、bootstrap-yml" class="headerlink" title="4、bootstrap.yml"></a>4、bootstrap.yml</h4><p>在resources目录下新建bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Tomcat</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9210</span><br><br><span class="hljs-comment"># Spring</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">payment</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境配置</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment"># 服务注册地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 配置中心地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment"># 配置文件格式</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-comment"># 共享配置</span><br>        <span class="hljs-attr">shared-configs:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5、payment-dev-yml"><a href="#5、payment-dev-yml" class="headerlink" title="5、payment-dev.yml"></a>5、payment-dev.yml</h4><p>在nacos上添加商品服务配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/**/*Mapper.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.**.domain</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment"># 查看日志</span><br><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379333</span><br>      <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">cknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#默认情况下消息消费者是自动确认消息的，如果要手动确认消息则需要修改确认模式为manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 消费者每次从队列获取的消息数量。此属性当不设置时为：轮询分发，设置为1为：公平分发</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/payment?characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">connection-test-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">idle-timeout:</span> <span class="hljs-number">500000</span><br>      <span class="hljs-attr">max-lifetime:</span> <span class="hljs-number">540000</span><br>      <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">pool-name:</span> <span class="hljs-string">GuliHikariPool</span><br></code></pre></td></tr></table></figure><h4 id="6、logback-xml"><a href="#6、logback-xml" class="headerlink" title="6、logback.xml"></a>6、logback.xml</h4><p>在resources目录下新建logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志存放路径 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs/payment&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 日志输出格式 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;20&#125; - [%method,%line] - %msg%n&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统日志输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统模块日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- Spring日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> /&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--系统操作日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_info&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_error&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7、PaymentApplication"><a href="#7、PaymentApplication" class="headerlink" title="7、PaymentApplication"></a>7、PaymentApplication</h4><p>添加启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付模块</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableCustomConfig</span><br><span class="hljs-meta">@EnableRyFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentApplication</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        SpringApplication.run(PaymentApplication.class, args);<br>        System.out.println(<span class="hljs-string">&quot;(♥◠‿◠)ﾉﾞ  系统模块启动成功   ლ(´ڡ`ლ)ﾞ  \n&quot;</span> +<br>                <span class="hljs-string">&quot; .-------.       ____     __        \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  _ _   \\      \\   \\   /  /    \n&quot;</span> +<br>                <span class="hljs-string">&quot; | ( &#x27; )  |       \\  _. /  &#x27;       \n&quot;</span> +<br>                <span class="hljs-string">&quot; |(_ o _) /        _( )_ .&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; | (_,_).&#x27; __  ___(_ o _)&#x27;          \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |\\ \\  |  ||   |(_,_)&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  | \\ `&#x27;   /|   `-&#x27;  /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |  \\    /  \\      /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; &#x27;&#x27;-&#x27;   `&#x27;-&#x27;    `-..-&#x27;              &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8、配置网关"><a href="#8、配置网关" class="headerlink" title="8、配置网关"></a>8、配置网关</h4><p>在gateway-dev.yml配置文件中添加会员服务的网关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 支付服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://payment</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><h3 id="5-1-4-搭建远程调用模块"><a href="#5-1-4-搭建远程调用模块" class="headerlink" title="5.1.4 搭建远程调用模块"></a>5.1.4 搭建远程调用模块</h3><p>订单支付需要调用订单服务接口</p><p>参考：api-system模块</p><h4 id="1、新建模块-1"><a href="#1、新建模块-1" class="headerlink" title="1、新建模块"></a>1、新建模块</h4><p>在api模块下新建子模块api-order</p><h4 id="2、pom-xml-1"><a href="#2、pom-xml-1" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        api-order订单接口模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Common Core--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、modules模块引入api依赖"><a href="#3、modules模块引入api依赖" class="headerlink" title="3、modules模块引入api依赖"></a>3、modules模块引入api依赖</h4><p>modules模块引入api依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-1-5-根据订单号获取订单信息"><a href="#5-1-5-根据订单号获取订单信息" class="headerlink" title="5.1.5 根据订单号获取订单信息"></a>5.1.5 根据订单号获取订单信息</h3><p>操作模块：<code>order</code></p><h4 id="1、远程调用接口开发"><a href="#1、远程调用接口开发" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）OrderInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;根据订单号获取订单信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;getByOrderNo/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;OrderInfo&gt; <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderNo)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoService.getByOrderNo(orderNo);<br>    <span class="hljs-keyword">return</span> R.ok(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）IOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">OrderInfo <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>（3）OrderInfoServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> OrderInfo <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;OrderInfo&gt;().eq(OrderInfo::getOrderNo, orderNo));<br>    List&lt;OrderItem&gt; orderItemList = orderItemMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;OrderItem&gt;().eq(OrderItem::getOrderId, orderInfo.getId()));<br>    orderInfo.setOrderItemList(orderItemList);<br>    <span class="hljs-keyword">return</span> orderInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义"><a href="#2、openFeign接口定义" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：<code>api-order</code></p><p><strong>注意：</strong>先将order模块中的OrderInfo类和OrderItem类移动到api-order 模块 </p><p>（1）RemoteOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.api;<br><br><span class="hljs-meta">@FeignClient(contextId = &quot;remoteUserInfoService&quot;, value = ServiceNameConstants.ORDER_SERVICE, fallbackFactory = RemoteOrderInfoFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteOrderInfoService</span><br>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/orderInfo/getByOrderNo/&#123;orderNo&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;OrderInfo&gt; <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderNo&quot;)</span> String orderNo, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ServiceNameConstants</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 订单服务的serviceid</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ORDER_SERVICE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br></code></pre></td></tr></table></figure><p>（3）RemoteOrderInfoFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.api.factory;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteOrderInfoFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;RemoteOrderInfoService&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RemoteOrderInfoFallbackFactory.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RemoteOrderInfoService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span><br>    &#123;<br>        log.error(<span class="hljs-string">&quot;订单服务调用失败:&#123;&#125;&quot;</span>, throwable.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteOrderInfoService</span>()<br>        &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> R&lt;OrderInfo&gt; <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(String orderNo, String source)</span> &#123;<br>                <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;根据订单号获取订单信息失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（5）加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.order</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.factory</span>.RemoteOrderInfoFallbackFactory<br></code></pre></td></tr></table></figure><h3 id="5-1-6-创建payment-info表代码"><a href="#5-1-6-创建payment-info表代码" class="headerlink" title="5.1.6 创建payment_info表代码"></a>5.1.6 创建payment_info表代码</h3><p><strong>在<code>payment</code>模块创建</strong></p><ul><li><strong>PaymentInfo.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.domain;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> com.common.core.annotation.Excel;<br><span class="hljs-keyword">import</span> com.common.core.web.domain.BaseEntity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息对象 payment_info</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;付款信息&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 用户id */</span><br>    <span class="hljs-meta">@Excel(name = &quot;用户id&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;用户id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-comment">/** 订单号 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;订单号&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;订单号&quot;)</span><br>    <span class="hljs-keyword">private</span> String orderNo;<br><br>    <span class="hljs-comment">/** 付款方式：1-微信 2-支付宝 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;付款方式：1-微信 2-支付宝&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;付款方式：1-微信 2-支付宝&quot;)</span><br>    <span class="hljs-keyword">private</span> Long payType;<br><br>    <span class="hljs-comment">/** 交易编号（微信或支付） */</span><br>    <span class="hljs-meta">@Excel(name = &quot;交易编号&quot;, readConverterExp = &quot;微=信或支付&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;交易编号&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br><br>    <span class="hljs-comment">/** 支付金额 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;支付金额&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;支付金额&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal amount;<br><br>    <span class="hljs-comment">/** 交易内容 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;交易内容&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;交易内容&quot;)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-comment">/** 支付状态：0-未支付 1-已支付 -1-关闭 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;支付状态：0-未支付 1-已支付 -1-关闭&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;支付状态：0-未支付 1-已支付 -1-关闭&quot;)</span><br>    <span class="hljs-keyword">private</span> String paymentStatus;<br><br>    <span class="hljs-comment">/** 回调时间 */</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br>    <span class="hljs-meta">@Excel(name = &quot;回调时间&quot;, width = 30, dateFormat = &quot;yyyy-MM-dd&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;回调时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date callbackTime;<br><br>    <span class="hljs-comment">/** 回调信息 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;回调信息&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;回调信息&quot;)</span><br>    <span class="hljs-keyword">private</span> String callbackContent;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>IPaymentInfoService.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息Service接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPaymentInfoService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;PaymentInfo&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>PaymentInfoServiceImpl.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service.impl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息Service业务层处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentInfoServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;PaymentInfoMapper, PaymentInfo&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPaymentInfoService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>PaymentInfoMapper.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.mapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息Mapper接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentInfoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;PaymentInfo&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-7-支付接口"><a href="#5-1-7-支付接口" class="headerlink" title="5.1.7 支付接口"></a>5.1.7 支付接口</h3><p>操作模块：<code>payment</code></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、payment-dev-yml"><a href="#2、payment-dev-yml" class="headerlink" title="2、payment-dev.yml"></a>2、payment-dev.yml</h4><p>支付宝示例demo：<a href="https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b">https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b</a></p><p>将支付宝所需要的参数定义配置文件中，以提高代码的维护性</p><p>在nacos上添加支付宝服务配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">alipay:</span><br>  <span class="hljs-attr">alipay_url:</span> <span class="hljs-string">https://openapi.alipay.com/gateway.do</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-number">2021001163617452</span><br>  <span class="hljs-attr">app_private_key:</span> <span class="hljs-string">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC8Z7EZmanxyFGsK4LrIUeKKrrGxWAHIgPmUV8TtZDs+jeplJSw1ckSY63QhEU444D5qd6xruJHBuB33HG+ik4n8N8nRWi3AtMgpC061oq2DcgtIKMmQHO7/poYDwbpDZrOWXIyiNshFfUOSTUpnrS8UvEks6n6xR/G72r2FG07oZzO7g3XsPMr73wpYajMYC/bhTm6CJGEWZikONNDFkQpVHa+zgitwsqlBuvBvVwGwOHA9B8aRfokwAMl6BDXKoH8BNnSEMpWSTRSwbssayXAQWNU7XKDKGozbn4U2dEbl8GCFzikI/T7ybTNm5gs46ZZBGlq/YB4+v4D3t74Vl6nAgMBAAECggEAOidzhehliYkAlLk1huhV0bMQxewEkQ8RzxTM2SORIWS2q7R+FPtYPkHgU92QFFg85lNltsi5dZ0MylKUFXFRYIi8CL4m7V6E1q12fJPeawVkBXHuig8Y6i1TWRvCUUtuvkTjt++AW/0QECHOtBMVzI95eY+vZwVToq8h/+UcNmxKyVt66Qpo4+r+cUvlvGX5mXgQVC5Ftf/MtHA1i+kjtzBITC0xAvmSXKzjN1YhtcS9rXyMHXBiFhXLdmvOXjkn0Okosr2+tmesXfSwDGhH3ZlOdHzit4D602RNl0nTA1dOUWHuCncs1TrWbriax86P/EYvmzMiHWCVTmmNJC0bMQKBgQD0HAXKNsYsdjCQOV4t3SMqOKaul67x/KA20PmMZVfQ2sQkyjyFgWpL8C16Rzf3zI7df+zF5SkvhFY4+LRZVwX5okEFYTzAZ/NYouj1/DABYOPq0E0sY18/xtq7FJ/CIk8qmCqcczqoyaoxoaC1zAt9E4CYE89iEOnO+GhcI3H3LwKBgQDFlQzvbXhWRyRFkeft/a52XLnyj6t9iP7wNGbGCSeoMDrAu3ZgoqacUPWj5MgSFZdT48H9rF4pPixXoe3jfUNsWBUHqD1F2drDz7lpL0PbpSsgy6ei+D4RwTADsuyXwrkvrWrGro+h6pNJFyly3nea/gloDtJTzfhFFwtNfmqyCQKBgBXzMx4UwMscsY82aV6MZO4V+/71CrkdszZaoiXaswPHuB1qxfhnQ6yiYyR8pO62SR5ns120Fnj8WFh1HJpv9cyVp20ZakIO1tXgiDweOh7VnIjvxBC6usTcV6y81QS62w2Ec0hwIBUvVQtzciUGvP25NDX4igxSYwPGWHP4h/XnAoGAcQN2aKTnBgKfPqPcU4ac+drECXggESgBGof+mRu3cT5U/NS9Oz0Nq6+rMVm1DpMHAdbuqRikq1aCqoVWup51qE0hikWy9ndL6GCynvWIDOSGrLWQZ2kyp5kmy5bWOWAJ6Ll6r7Y9NdIk+NOkw614IFFaNAj2STUw4uPxdRvwD3ECgYEArwOZxR3zl/FZfsvVCXfK8/fhuZXMOp6Huwqky4tNpVLvOyihpOJOcIFj6ZJhoVdmiL8p1/1S+Sm/75gx1tpFurKMNcmYZbisEC7Ukx7RQohZhZTqMPgizlVBTu5nR3xkheaJC9odvyjrWQJ569efXo30gkW04aBp7A15VNG5Z/U=</span><br>  <span class="hljs-attr">alipay_public_key:</span> <span class="hljs-string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkWs+3gXMosiWG+EbfRyotWB0waqU3t7qMQSBxU0r3JZoND53jvWQfzrGZ8W+obMc+OgwupODDVxhG/DEKVBIptuUQYdvAjCSH98m2hclFcksspuCy9xS7PyflPE47pVzS6vA3Slvw5OFQ2qUcku4paWnBxguLUGPjEncij5NcyFyk+/k57MmrVJwCZaI+lFOS3Eq2IXc07tWXO4s/2SWr3EJiwJutOGBdA1ddvv1Urrl0pWpEFg30pJB6J7YteuxdEL90kuO5ed/vnTK5qgQRvEelROkUW44xONk1784v28OJXmGICmNL1+KyM/SFbFOSgJZSV1tEXUzvL/xvzFpLwIDAQAB</span><br>  <span class="hljs-attr">return_payment_url:</span> <span class="hljs-string">http://ry-api.atguigu.cn/payment/alipay/callback/return</span><br>  <span class="hljs-attr">notify_payment_url:</span> <span class="hljs-string">http://ry-api.atguigu.cn/payment/alipay/callback/notify</span><br>  <span class="hljs-attr">return_order_url:</span> <span class="hljs-string">http://ry-atguigu.cn/#/pages/money/paySuccess</span><br></code></pre></td></tr></table></figure><h4 id="3、AlipayConfig"><a href="#3、AlipayConfig" class="headerlink" title="3、AlipayConfig"></a>3、AlipayConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.configure;<br><br><span class="hljs-keyword">import</span> com.alipay.api.AlipayClient;<br><span class="hljs-keyword">import</span> com.alipay.api.DefaultAlipayClient;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.alipay_url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String alipay_url;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.app_private_key&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String app_private_key;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.app_id&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String app_id;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String format=<span class="hljs-string">&quot;json&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String charset=<span class="hljs-string">&quot;utf-8&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String sign_type=<span class="hljs-string">&quot;RSA2&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String return_payment_url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String notify_payment_url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String return_order_url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String alipay_public_key;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.alipay_public_key&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAlipay_public_key</span><span class="hljs-params">(String alipay_public_key)</span> &#123;<br>        AlipayConfig.alipay_public_key = alipay_public_key;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.return_payment_url&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReturn_url</span><span class="hljs-params">(String return_payment_url)</span> &#123;<br>        AlipayConfig.return_payment_url = return_payment_url;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.notify_payment_url&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNotify_url</span><span class="hljs-params">(String notify_payment_url)</span> &#123;<br>        AlipayConfig.notify_payment_url = notify_payment_url;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.return_order_url&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReturn_order_url</span><span class="hljs-params">(String return_order_url)</span> &#123;<br>        AlipayConfig.return_order_url = return_order_url;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AlipayClient <span class="hljs-title function_">alipayClient</span><span class="hljs-params">()</span>&#123;<br>        AlipayClient alipayClient=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(alipay_url,app_id,app_private_key,format,charset, alipay_public_key,sign_type );<br>        <span class="hljs-keyword">return</span> alipayClient;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、AlipayController"><a href="#4、AlipayController" class="headerlink" title="4、AlipayController"></a>4、AlipayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/alipay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAlipayService alipayService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;支付宝下单&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@RequestMapping(&quot;submitAlipay/&#123;orderNo&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">submitAlipay</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;orderNo&quot;)</span> String orderNo)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">form</span> <span class="hljs-operator">=</span> alipayService.submitAlipay(orderNo);<br>        <span class="hljs-keyword">return</span> success(form);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、IAlipayService"><a href="#5、IAlipayService" class="headerlink" title="5、IAlipayService"></a>5、IAlipayService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAlipayService</span>&#123;<br>    String <span class="hljs-title function_">submitAlipay</span><span class="hljs-params">(String orderNo)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、AlipayServiceImpl"><a href="#6、AlipayServiceImpl" class="headerlink" title="6、AlipayServiceImpl"></a>6、AlipayServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAlipayService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayClient alipayClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IPaymentInfoService paymentInfoService;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">submitAlipay</span><span class="hljs-params">(String orderNo)</span> &#123;<br>        <span class="hljs-comment">//保存支付记录</span><br>        <span class="hljs-type">PaymentInfo</span> <span class="hljs-variable">paymentInfo</span> <span class="hljs-operator">=</span> paymentInfoService.savePaymentInfo(orderNo);<br>        <span class="hljs-comment">// 生产二维码</span><br>        <span class="hljs-type">AlipayTradeWapPayRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradeWapPayRequest</span>();<span class="hljs-comment">//创建API对应的request</span><br>        <span class="hljs-comment">// 同步回调</span><br>        <span class="hljs-comment">// return_payment_url=http://sph-payment.atguigu.cn/alipay/callback/return</span><br>        alipayRequest.setReturnUrl(AlipayConfig.return_payment_url);<br>        <span class="hljs-comment">// 异步回调</span><br>        alipayRequest.setNotifyUrl(AlipayConfig.notify_payment_url);<span class="hljs-comment">//在公共参数中设置回跳和通知地址</span><br>        <span class="hljs-comment">// 参数</span><br>        <span class="hljs-comment">// 声明一个map 集合</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,paymentInfo.getOrderNo());<br>        map.put(<span class="hljs-string">&quot;product_code&quot;</span>,<span class="hljs-string">&quot;QUICK_WAP_WAY&quot;</span>);<br>        <span class="hljs-comment">//map.put(&quot;total_amount&quot;,orderInfo.getTotalAmount());</span><br>        map.put(<span class="hljs-string">&quot;total_amount&quot;</span>,<span class="hljs-string">&quot;0.01&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;subject&quot;</span>,paymentInfo.getContent());<br><br>        alipayRequest.setBizContent(JSON.toJSONString(map));<br><br>        <span class="hljs-keyword">return</span> alipayClient.pageExecute(alipayRequest).getBody(); <span class="hljs-comment">//调用SDK生成表单;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、IPaymentInfoService"><a href="#7、IPaymentInfoService" class="headerlink" title="7、IPaymentInfoService"></a>7、IPaymentInfoService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PaymentInfo <span class="hljs-title function_">savePaymentInfo</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><h4 id="8、PaymentInfoServiceImpl"><a href="#8、PaymentInfoServiceImpl" class="headerlink" title="8、PaymentInfoServiceImpl"></a>8、PaymentInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> PaymentInfoMapper paymentInfoMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteOrderInfoService remoteOrderInfoService;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PaymentInfo <span class="hljs-title function_">savePaymentInfo</span><span class="hljs-params">(String orderNo)</span> &#123;<br>   <span class="hljs-type">PaymentInfo</span> <span class="hljs-variable">paymentInfo</span> <span class="hljs-operator">=</span> paymentInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;PaymentInfo&gt;().eq(PaymentInfo::getOrderNo, orderNo));<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == paymentInfo) &#123;<br>      R&lt;OrderInfo&gt; orderInfoResult = remoteOrderInfoService.getByOrderNo(orderNo, SecurityConstants.INNER);<br>      <span class="hljs-keyword">if</span> (R.FAIL == orderInfoResult.getCode()) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(orderInfoResult.getMsg());<br>      &#125;<br>      <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoResult.getData();<br>      <br>      paymentInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentInfo</span>();<br>      paymentInfo.setUserId(orderInfo.getUserId());<br>      <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">for</span>(OrderItem item : orderInfo.getOrderItemList()) &#123;<br>         content += item.getSkuName() + <span class="hljs-string">&quot; &quot;</span>;<br>      &#125;<br>      paymentInfo.setContent(content);<br>      paymentInfo.setAmount(orderInfo.getTotalAmount());<br>      paymentInfo.setOrderNo(orderNo);<br>      paymentInfo.setPaymentStatus(<span class="hljs-number">0</span>);<br>      paymentInfoMapper.insert(paymentInfo);<br>   &#125;<br>   <span class="hljs-keyword">return</span> paymentInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-8-支付宝同步回调"><a href="#5-1-8-支付宝同步回调" class="headerlink" title="5.1.8 支付宝同步回调"></a>5.1.8 支付宝同步回调</h3><p>支付成功后点击完成会自动跳转回商家页面地址</p><h4 id="1、AlipayController"><a href="#1、AlipayController" class="headerlink" title="1、AlipayController"></a>1、AlipayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝同步回调</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Operation(summary = &quot;支付宝同步回调&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;callback/return&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 同步回调给用户展示信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + AlipayConfig.return_order_url;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、配置网关"><a href="#2、配置网关" class="headerlink" title="2、配置网关"></a>2、配置网关</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 不校验白名单</span><br><span class="hljs-attr">ignore:</span><br>  <span class="hljs-attr">whites:</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/payment/alipay/callback/*</span><br></code></pre></td></tr></table></figure><h3 id="5-1-9-支付宝异步回调"><a href="#5-1-9-支付宝异步回调" class="headerlink" title="5.1.9 支付宝异步回调"></a>5.1.9 支付宝异步回调</h3><p>操作模块：<code>payment</code></p><h4 id="1、异步通知说明"><a href="#1、异步通知说明" class="headerlink" title="1、异步通知说明"></a>1、异步通知说明</h4><p>官网地址：<a href="https://opendocs.alipay.com/open/203/105286?pathHash=022a439c&ref=api">https://opendocs.alipay.com/open/203/105286?pathHash=022a439c&amp;ref=api</a></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-7583.png"> </p><p>当用户支付成功以后，支付宝系统会调用我们系统的接口通知支付结果 </p><h4 id="2、AlipayController"><a href="#2、AlipayController" class="headerlink" title="2、AlipayController"></a>2、AlipayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;callback/notify&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alipayNotify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; paramMap, HttpServletRequest request)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;AlipayController...alipayNotify方法执行了...&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、内网穿透介绍"><a href="#3、内网穿透介绍" class="headerlink" title="3、内网穿透介绍"></a>3、内网穿透介绍</h4><p>当支付成功以后支付宝无法调用本地接口，因为本地接口是位于一个私有IP地址范围内，并且被路由器或防火墙等设备保护起来。这个私有的网络设备无法直接从公共网络访问，该问题的解决可以使用内网穿透技术。</p><p><strong>内网穿透</strong>：内网穿透（Intranet Port Forwarding）是一种将本地网络中的服务暴露给公共网络访问的技术。</p><p>内网穿透通过在公共网络上建立一个中转服务器，使得公共网络上的设备可以通过该中转服务器访问内网中的设备和服务。具体而言，内网穿透技术允</p><p>许您在公共网络上使用一个公网IP地址和端口号来映射到内网中的某个设备或服务的私有IP地址和端口号。</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-9318.png"> </p><p>常见的内网穿透工具包括<strong>natapp</strong>、Ngrok、frp、花生壳等。</p><p>官网地址：<a href="https://natapp.cn/">https://natapp.cn/</a></p><p>试用步骤：</p><p>1、注册用户</p><p>2、购买隧道</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-5784.png" alt style="zoom:67%;"><p>3、购买二级域名，绑定隧道</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-6186.png"></p><p>4、下载客户端</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-7316.png"></p><p>5、客户端使用教程：<a href="https://natapp.cn/article/nohup">https://natapp.cn/article/nohup</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">natapp.exe -authtoken=xxxxx<br></code></pre></td></tr></table></figure><p>authtoken信息获取:</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-6742.png"></p><h4 id="4、验证签名"><a href="#4、验证签名" class="headerlink" title="4、验证签名"></a>4、验证签名</h4><p>AlipayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> IPaymentInfoService paymentInfoService;<br><br><span class="hljs-meta">@RequestMapping(&quot;callback/notify&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alipayNotify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; paramMap, HttpServletRequest request)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;AlipayController...alipayNotify方法执行了...&quot;</span>);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">signVerified</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//调用SDK验证签名</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        signVerified = AlipaySignature.rsaCheckV1(paramMap, AlipayConfig.alipay_public_key, AlipayConfig.charset, AlipayConfig.sign_type);<br>        <br>    &#125; <span class="hljs-keyword">catch</span> (AlipayApiException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// 交易状态</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">trade_status</span> <span class="hljs-operator">=</span> paramMap.get(<span class="hljs-string">&quot;trade_status&quot;</span>);<br><br>    <span class="hljs-comment">// true</span><br>    <span class="hljs-keyword">if</span> (signVerified) &#123;<br>        <span class="hljs-comment">// TODO 验签成功后，按照支付结果异步通知中的描述，对支付结果中的业务内容进行二次校验，校验成功后在response中返回success并继续商户自身业务处理，校验失败返回failure</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;TRADE_SUCCESS&quot;</span>.equals(trade_status) || <span class="hljs-string">&quot;TRADE_FINISHED&quot;</span>.equals(trade_status)) &#123;<br>            <span class="hljs-comment">// 正常的支付成功，我们应该更新交易记录状态</span><br>            paymentInfoService.updatePaymentStatus(paramMap, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// TODO 验签失败则记录异常日志，并在response中返回failure.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;failure&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;failure&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、IPaymentInfoService"><a href="#5、IPaymentInfoService" class="headerlink" title="5、IPaymentInfoService"></a>5、IPaymentInfoService</h4><p>更新支付信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePaymentStatus</span><span class="hljs-params">(Map&lt;String, String&gt; map, Integer payType)</span>;<br></code></pre></td></tr></table></figure><h4 id="6、PaymentInfoServiceImpl"><a href="#6、PaymentInfoServiceImpl" class="headerlink" title="6、PaymentInfoServiceImpl"></a>6、PaymentInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePaymentStatus</span><span class="hljs-params">(Map&lt;String, String&gt; map, Integer payType)</span> &#123;<br>   <span class="hljs-type">PaymentInfo</span> <span class="hljs-variable">paymentInfo</span> <span class="hljs-operator">=</span> paymentInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;PaymentInfo&gt;().eq(PaymentInfo::getOrderNo, map.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>)));<br>   <span class="hljs-keyword">if</span> (paymentInfo.getPaymentStatus() == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br><br>   <span class="hljs-comment">//更新支付信息</span><br>   paymentInfo.setPayType(payType);<br>   paymentInfo.setPaymentStatus(<span class="hljs-number">1</span>);<br>   paymentInfo.setTradeNo(map.get(<span class="hljs-string">&quot;trade_no&quot;</span>));<br>   paymentInfo.setCallbackTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>   paymentInfo.setCallbackContent(JSON.toJSONString(map));<br>   paymentInfoMapper.updateById(paymentInfo);<br><br>   <span class="hljs-comment">//基于MQ通知订单系统，修改订单状态</span><br>   rabbitService.sendMessage(MqConst.EXCHANGE_PAYMENT_PAY, MqConst.ROUTING_PAYMENT_PAY, paymentInfo.getOrderNo());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-支付成功处理"><a href="#5-2-支付成功处理" class="headerlink" title="5.2 支付成功处理"></a>5.2 支付成功处理</h2><h3 id="5-2-1-更改订单状态"><a href="#5-2-1-更改订单状态" class="headerlink" title="5.2.1 更改订单状态"></a>5.2.1 更改订单状态</h3><p>操作模块：<code>order</code></p><p>订单支付成功后，我们已经更改了订单支付记录状态，接下来我还有<strong>更改订单状态</strong>，因为他们是不同的微服务模块，所以我们采用<strong>消息队列</strong>的方式，保证<strong>数据最终一致性</strong>；</p><p>1、OrderReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听订单支付成功消息；更新订单状态</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = MqConst.ROUTING_PAYMENT_PAY</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo, Message message, Channel channel)</span> &#123;<br>    <span class="hljs-comment">//业务处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo)) &#123;<br>        log.info(<span class="hljs-string">&quot;[订单服务]监听订单支付成功消息：&#123;&#125;&quot;</span>, orderNo);<br>        <span class="hljs-comment">//更改订单支付状态</span><br>        orderInfoService.processPaySucess(orderNo);<br>    &#125;<br>    <span class="hljs-comment">//手动应答</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、IOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>3、OrderInfoServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-comment">//获取订单信息</span><br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;OrderInfo&gt;().eq(OrderInfo::getOrderNo, orderNo).select(OrderInfo::getId, OrderInfo::getOrderStatus));<br>    <span class="hljs-comment">//未支付</span><br>    <span class="hljs-keyword">if</span>(orderInfo.getOrderStatus().intValue() == <span class="hljs-number">0</span>) &#123;<br>        orderInfo.setOrderStatus(<span class="hljs-number">1</span>);<br>        orderInfo.setPaymentTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        orderInfoMapper.updateById(orderInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-2-扣减商品库存"><a href="#5-2-2-扣减商品库存" class="headerlink" title="5.2.2 扣减商品库存"></a>5.2.2 扣减商品库存</h3><p>订单模块除了更改订单支付状态，还要发送消息通知商品服务模块扣减库存</p><p>OrderReceiver类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听订单支付成功消息：更新订单状态；扣减商品库存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = MqConst.ROUTING_PAYMENT_PAY</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo, Message message, Channel channel)</span> &#123;<br>    <span class="hljs-comment">//业务处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo)) &#123;<br>        log.info(<span class="hljs-string">&quot;[订单服务]监听订单支付成功消息：&#123;&#125;&quot;</span>, orderNo);<br>        <span class="hljs-comment">//更改订单支付状态</span><br>        orderInfoService.processPaySucess(orderNo);<br><br>        <span class="hljs-comment">//基于MQ通知扣减库存</span><br>        rabbitService.sendMessage(MqConst.EXCHANGE_PRODUCT, MqConst.ROUTING_MINUS, orderNo);<br>    &#125;<br>    <span class="hljs-comment">//手动应答</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：扣减库存的mq接口前面已经提供，我们只需要发送消息即可。</strong></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4、订单</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章-订单"><a href="#第4章-订单" class="headerlink" title="第4章 订单"></a>第4章 订单</h1><h2 id="4-1-商品结算"><a href="#4-1-商品结算" class="headerlink" title="4.1 商品结算"></a>4.1 商品结算</h2><h3 id="4-1-1-需求说明"><a href="#4-1-1-需求说明" class="headerlink" title="4.1.1 需求说明"></a>4.1.1 需求说明</h3><p>入口：购物车点击去结算按钮 ，进入结算页面(订单确认页面)，如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/trade.gif" alt style="zoom:67%;"> <p>分析页面需要的数据：</p><p>1、 用户地址信息列表管理（增删改查），结算页选中默认地址</p><p>2、 购物车中选择的商品列表，及商品的总金额</p><p><strong>查看接口文档：</strong></p><p>用户地址信息接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs json">#用户地址列表<br>get /user/userAddress/list<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;晴天&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15023656352&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;provinceCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cityCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;districtCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110101&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;东直门1号&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;fullAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市北京市东城区东直门1号&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        ...<br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br> <br>#添加用户地址<br>post /user/userAddress<br>参数：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cs&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15090909090&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;provinceCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cityCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;districtCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110102&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span>     <br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br>        <br>#修改用户地址<br>put /user/userAddress<br>参数：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cs&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15090909090&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;provinceCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cityCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;districtCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110102&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span>     <br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span>     <br>        <br>#删除用户地址<br>delete /user/userAddress/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结算接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">get /order/orderInfo/trade<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;totalAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8998.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;orderId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为笔记本 32G&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/c8f2eae0d36b6270.jpg.avif&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5999.00</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            ...<br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tradeNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1d76f36b59414e869e843fc742e21469&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-1-2-地址管理接口"><a href="#4-1-2-地址管理接口" class="headerlink" title="4.1.2 地址管理接口"></a>4.1.2 地址管理接口</h3><p>操作模块：user</p><h4 id="1、UserAddressController"><a href="#1、UserAddressController" class="headerlink" title="1、UserAddressController"></a>1、UserAddressController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/userAddress&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAddressController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserAddressService userAddressService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户地址列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;查询用户地址列表&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">list</span><span class="hljs-params">()</span><br>    &#123;<br>        List&lt;UserAddress&gt; list = userAddressService.selectUserAddressList();<br>        <span class="hljs-keyword">return</span> success(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;新增用户地址&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAddress userAddress)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(userAddressService.insertUserAddress(userAddress));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;修改用户地址&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAddress userAddress)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(userAddressService.updateUserAddress(userAddress));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;删除用户地址&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(userAddressService.removeById(id));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、IUserAddressService"><a href="#2、IUserAddressService" class="headerlink" title="2、IUserAddressService"></a>2、IUserAddressService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserAddressService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;UserAddress&gt;<br>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户地址列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户地址集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">selectUserAddressList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、UserAddressServiceImpl"><a href="#3、UserAddressServiceImpl" class="headerlink" title="3、UserAddressServiceImpl"></a>3、UserAddressServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAddressServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserAddressMapper, UserAddress&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserAddressService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserAddressMapper userAddressMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IRegionService regionService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户地址列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">selectUserAddressList</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// 获取当前登录用户的id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>        <span class="hljs-keyword">return</span> userAddressMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserAddress&gt;().eq(UserAddress::getUserId, userId));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span><br>    &#123;<br>        userAddress.setUserId(SecurityContextHolder.getUserId());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">provinceName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getProvinceCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cityName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getCityCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">districtName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getDistrictCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullAddress</span> <span class="hljs-operator">=</span> provinceName + cityName + districtName + userAddress.getAddress();<br>        userAddress.setFullAddress(fullAddress);<br>        userAddress.setCreateTime(DateUtils.getNowDate());<br><br>        <span class="hljs-comment">//如果是默认地址，其他地址更新为非默认地址</span><br>        <span class="hljs-keyword">if</span>(userAddress.getIsDefault().intValue() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">UserAddress</span> <span class="hljs-variable">updateUserAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>();<br>            updateUserAddress.setIsDefault(<span class="hljs-number">0L</span>);<br>            userAddressMapper.update(updateUserAddress, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserAddress&gt;().eq(UserAddress::getUserId, userAddress.getUserId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> userAddressMapper.insert(userAddress);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">provinceName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getProvinceCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cityName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getCityCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">districtName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getDistrictCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullAddress</span> <span class="hljs-operator">=</span> provinceName + cityName + districtName + userAddress.getAddress();<br>        userAddress.setFullAddress(fullAddress);<br>        userAddress.setUpdateTime(DateUtils.getNowDate());<br>        <span class="hljs-comment">//如果是默认地址，其他地址更新为非默认地址</span><br>        <span class="hljs-keyword">if</span>(userAddress.getIsDefault().intValue() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">UserAddress</span> <span class="hljs-variable">updateUserAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>();<br>            updateUserAddress.setIsDefault(<span class="hljs-number">0L</span>);<br>            userAddressMapper.update(updateUserAddress, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserAddress&gt;().eq(UserAddress::getUserId, userAddress.getUserId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> userAddressMapper.updateById(userAddress);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、IRegionService"><a href="#4、IRegionService" class="headerlink" title="4、IRegionService"></a>4、IRegionService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据code获取地区名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span>;<br></code></pre></td></tr></table></figure><h4 id="5、RegionServiceImpl"><a href="#5、RegionServiceImpl" class="headerlink" title="5、RegionServiceImpl"></a>5、RegionServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(code)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">Region</span> <span class="hljs-variable">region</span> <span class="hljs-operator">=</span> regionMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;Region&gt;().eq(Region::getCode,code).select(Region::getName));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != region) &#123;<br>        <span class="hljs-keyword">return</span> region.getName();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-3-获取选中购物项数据接口"><a href="#4-1-3-获取选中购物项数据接口" class="headerlink" title="4.1.3 获取选中购物项数据接口"></a>4.1.3 获取选中购物项数据接口</h3><h4 id="1、远程调用接口开发"><a href="#1、远程调用接口开发" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>操作模块：cart</p><p>（1）CartController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;查询用户购物车列表中选中商品列表&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;/getCartCheckedList/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;CartInfo&gt;&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;userId&quot;, description = &quot;会员id&quot;, required = true)</span> <span class="hljs-meta">@PathVariable</span> Long userId)</span>&#123;<br><span class="hljs-keyword">return</span> R.ok(cartService.getCartCheckedList(userId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ICartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CartInfo&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>（3）CartServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartInfo&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(Long userId)</span> &#123;<br>    List&lt;CartInfo&gt; cartInfoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCartKey(userId);<br>    List&lt;CartInfo&gt; cartCachInfoList = redisTemplate.opsForHash().values(cartKey);<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartCachInfoList)) &#123;<br>        <span class="hljs-keyword">for</span> (CartInfo cartInfo : cartCachInfoList) &#123;<br>            <span class="hljs-comment">// 获取选中的商品！</span><br>            <span class="hljs-keyword">if</span> (cartInfo.getIsChecked().intValue() == <span class="hljs-number">1</span>) &#123;<br>                cartInfoList.add(cartInfo);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cartInfoList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义"><a href="#2、openFeign接口定义" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-cart</p><p>（1）RemoteCartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.api;<br><br><span class="hljs-meta">@FeignClient(value = ServiceNameConstants.CART_SERVICE, fallbackFactory = RemoteCartFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteCartService</span><br>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getCartCheckedList/&#123;userId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;List&lt;CartInfo&gt;&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span>String source)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ServiceNameConstants</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车服务的serviceid</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CART_SERVICE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cart&quot;</span>;<br></code></pre></td></tr></table></figure><p>（3）RemoteCartFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.api.factory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车降级处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> atguigu</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteCartFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;RemoteCartService&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RemoteCartFallbackFactory.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RemoteCartService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span><br>    &#123;<br>        log.error(<span class="hljs-string">&quot;购物车服务调用失败:&#123;&#125;&quot;</span>, throwable.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteCartService</span>()<br>        &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> R&lt;List&lt;CartInfo&gt;&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(Long userId, String source)</span> &#123;<br>                <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取用户购物车选中数据失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br><br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.cart.api.factory.RemoteCartFallbackFactory<br></code></pre></td></tr></table></figure><h3 id="4-1-4-后端业务接口"><a href="#4-1-4-后端业务接口" class="headerlink" title="4.1.4 后端业务接口"></a>4.1.4 后端业务接口</h3><p>操作模块：order</p><h4 id="1、TradeVo"><a href="#1、TradeVo" class="headerlink" title="1、TradeVo"></a>1、TradeVo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;结算实体类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TradeVo</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;结算总金额&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal totalAmount;<br><br>    <span class="hljs-meta">@Schema(description = &quot;结算商品列表&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;OrderItem&gt; orderItemList;<br><br>    <span class="hljs-meta">@Schema(description = &quot;交易号&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、OrderInfoController"><a href="#2、OrderInfoController" class="headerlink" title="2、OrderInfoController"></a>2、OrderInfoController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;订单结算&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;/trade&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">orderTradeData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> success(orderInfoService.orderTradeData());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、IOrderInfoService"><a href="#3、IOrderInfoService" class="headerlink" title="3、IOrderInfoService"></a>3、IOrderInfoService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TradeVo <span class="hljs-title function_">orderTradeData</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="4、OrderInfoServiceImpl"><a href="#4、OrderInfoServiceImpl" class="headerlink" title="4、OrderInfoServiceImpl"></a>4、OrderInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteCartService remoteCartService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> TradeVo <span class="hljs-title function_">orderTradeData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br><br>    R&lt;List&lt;CartInfo&gt;&gt; cartInfoListResult = remoteCartService.getCartCheckedList(userId, SecurityConstants.INNER);<br>    <span class="hljs-keyword">if</span> (R.FAIL == cartInfoListResult.getCode()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(cartInfoListResult.getMsg());<br>    &#125;<br>    List&lt;CartInfo&gt; cartInfoList = cartInfoListResult.getData();<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(cartInfoList)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;购物车无选中商品&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//将集合泛型从购物车改为订单明细</span><br>    List&lt;OrderItem&gt; orderItemList = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">totalAmount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartInfoList)) &#123;<br>        orderItemList = cartInfoList.stream().map(cartInfo -&gt; &#123;<br>            <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>            BeanUtils.copyProperties(cartInfo, orderItem);<br>            orderItem.setSkuPrice(cartInfo.getSkuPrice());<br>            <span class="hljs-keyword">return</span> orderItem;<br>        &#125;).collect(Collectors.toList());<br><br>        <span class="hljs-comment">//订单总金额</span><br>        <span class="hljs-keyword">for</span>(OrderItem orderItem : orderItemList) &#123;<br>            totalAmount = totalAmount.add(orderItem.getSkuPrice().multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(orderItem.getSkuNum())));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//渲染订单确认页面-生成用户流水号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">tradeNo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.generateTradeNo(userId);<br><br>    <span class="hljs-type">TradeVo</span> <span class="hljs-variable">tradeVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TradeVo</span>();<br>    tradeVo.setTotalAmount(totalAmount);<br>    tradeVo.setOrderItemList(orderItemList);<br>    tradeVo.setTradeNo(tradeNo);<br>    <span class="hljs-keyword">return</span> tradeVo;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 渲染订单确认页面-生成用户流水号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateTradeNo</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-comment">//1.构建流水号Key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    <span class="hljs-comment">//2.构建流水号value</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">tradeNo</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//3.将流水号存入Redis 暂存5分钟</span><br>    redisTemplate.opsForValue().set(userTradeKey, tradeNo, <span class="hljs-number">5</span>, TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> tradeNo;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-商品下单"><a href="#4-2-商品下单" class="headerlink" title="4.2 商品下单"></a>4.2 商品下单</h2><h3 id="4-2-1-需求说明"><a href="#4-2-1-需求说明" class="headerlink" title="4.2.1 需求说明"></a>4.2.1 需求说明</h3><p>需求说明：用户在结算页面点击提交订单按钮，那么此时就需要保存订单信息(order_info)、订单项信息(order_item)及记录订单日志(order_log)，下单成功重定向到订单支付页面</p><p><strong>查看接口文档：</strong></p><p>下单接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">post /order/orderInfo/submitOrder<br>参数：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;orderItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机 颜色:黑色 内存:18G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-1_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2999</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        ...<br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userAddressId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;feightFee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赶快发货&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>返回结果(订单id)：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2-创建order-log表代码"><a href="#4-2-2-创建order-log表代码" class="headerlink" title="4.2.2 创建order_log表代码"></a>4.2.2 创建order_log表代码</h3><p>操作order模块</p><p><strong>OrderLog</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.domain;<br><br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> com.common.core.annotation.Excel;<br><span class="hljs-keyword">import</span> com.common.core.web.domain.BaseEntity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单操作日志记录对象 order_log</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;订单操作日志记录&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderLog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 订单id */</span><br>    <span class="hljs-meta">@Excel(name = &quot;订单id&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;订单id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long orderId;<br><br>    <span class="hljs-comment">/** 操作人：用户；系统；后台管理员 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;操作人：用户；系统；后台管理员&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;操作人：用户；系统；后台管理员&quot;)</span><br>    <span class="hljs-keyword">private</span> String operateUser;<br><br>    <span class="hljs-comment">/** 订单状态 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;订单状态&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;订单状态&quot;)</span><br>    <span class="hljs-keyword">private</span> Long processStatus;<br><br>    <span class="hljs-comment">/** 备注 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;备注&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;备注&quot;)</span><br>    <span class="hljs-keyword">private</span> String note;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>OrderLogMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.mapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderLogMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;OrderLog&gt;<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-3-批量获取商品价格接口"><a href="#4-2-3-批量获取商品价格接口" class="headerlink" title="4.2.3 批量获取商品价格接口"></a>4.2.3 批量获取商品价格接口</h3><p>获取最新商品sku价格与购物车价格比较，校验价格是否变化，价格变化就更新购物车价格</p><p>这个接口之前已经开发过了，这里直接使用。</p><h3 id="4-2-4-更新购物车最新价格"><a href="#4-2-4-更新购物车最新价格" class="headerlink" title="4.2.4 更新购物车最新价格"></a>4.2.4 更新购物车最新价格</h3><p>操作模块：cart</p><h4 id="1、远程调用接口开发-1"><a href="#1、远程调用接口开发-1" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）CartController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;更新用户购物车列表价格&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;/updateCartPrice/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(cartService.updateCartPrice(userId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ICartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Boolean <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>（3）CartServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    List&lt;CartInfo&gt; cartCachInfoList = hashOperations.values();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartCachInfoList)) &#123;<br>        <span class="hljs-keyword">for</span> (CartInfo cartInfo : cartCachInfoList) &#123;<br>            <span class="hljs-keyword">if</span> (cartInfo.getIsChecked().intValue() == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> remoteProductService.getSkuPrice(cartInfo.getSkuId(), SecurityConstants.INNER).getData();<br>                cartInfo.setCartPrice(skuPrice.getSalePrice());<br>                cartInfo.setSkuPrice(skuPrice.getSalePrice());<br>                hashOperations.put(cartInfo.getSkuId().toString(), cartInfo);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义-1"><a href="#2、openFeign接口定义-1" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-cart</p><p>（1）RemoteCartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/updateCartPrice/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span>String source)</span>;<br></code></pre></td></tr></table></figure><p>（2）RemoteCartFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(Long userId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;更新购物车价格失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-5-删除购物车选中商品"><a href="#4-2-5-删除购物车选中商品" class="headerlink" title="4.2.5 删除购物车选中商品"></a>4.2.5 删除购物车选中商品</h3><p>下单成功后，删除购物车选中的商品</p><p>操作模块：cart</p><h4 id="1、远程调用接口开发-2"><a href="#1、远程调用接口开发-2" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）CartController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;删除用户购物车列表中选中商品列表&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;/deleteCartCheckedList/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(cartService.deleteCartCheckedList(userId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ICartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Boolean <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>（3）CartServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    List&lt;CartInfo&gt; cartCachInfoList = hashOperations.values();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartCachInfoList)) &#123;<br>        <span class="hljs-keyword">for</span> (CartInfo cartInfo : cartCachInfoList) &#123;<br>            <span class="hljs-comment">// 获取选中的商品！</span><br>            <span class="hljs-keyword">if</span> (cartInfo.getIsChecked().intValue() == <span class="hljs-number">1</span>) &#123;<br>                hashOperations.delete(cartInfo.getSkuId().toString());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义-2"><a href="#2、openFeign接口定义-2" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-cart</p><p>（1）RemoteCartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/deleteCartCheckedList/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span>String source)</span>;<br></code></pre></td></tr></table></figure><p>（2）RemoteCartFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(Long userId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;删除用户购物车选中数据失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-6-获取用户地址信息"><a href="#4-2-6-获取用户地址信息" class="headerlink" title="4.2.6 获取用户地址信息"></a>4.2.6 获取用户地址信息</h3><h4 id="1、远程调用接口"><a href="#1、远程调用接口" class="headerlink" title="1、远程调用接口"></a>1、远程调用接口</h4><p>操作模块：user</p><p>（1）UserAddressController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getUserAddress/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddress</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(userAddressService.getById(id));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）UserAddress</p><p>将user模块UserAddress实体类，移动到api-user模块</p><h4 id="2、openFeign接口定义-3"><a href="#2、openFeign接口定义-3" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-user</p><p>（1）RemoteUserAddressService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.api;<br><br><span class="hljs-meta">@FeignClient(contextId = &quot;remoteUserAddressService&quot; , value = ServiceNameConstants.USER_SERVICE, fallbackFactory = RemoteUserAddressFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteUserAddressService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/userAddress/getUserAddress/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddress</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）RemoteUserAddressFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.api.factory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务降级处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteUserAddressFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;RemoteUserAddressService&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RemoteUserAddressFallbackFactory.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RemoteUserAddressService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span><br>    &#123;<br>        log.error(<span class="hljs-string">&quot;用户服务调用失败:&#123;&#125;&quot;</span>, throwable.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteUserAddressService</span>()<br>        &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> R&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddress</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>                <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取用户地址失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）加载配置类</p><p>resources&#x2F;META-INF.spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.user.api.factory.RemoteUserAddressFallbackFactory<br></code></pre></td></tr></table></figure><h3 id="4-2-7-后端业务接口"><a href="#4-2-7-后端业务接口" class="headerlink" title="4.2.7 后端业务接口"></a>4.2.7 后端业务接口</h3><p>操作模块：order</p><p>1、OrderForm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderForm</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;用户流水号&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br><br>    <span class="hljs-comment">//送货地址id</span><br>    <span class="hljs-meta">@Schema(description = &quot;送货地址id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long userAddressId;<br><br>    <span class="hljs-comment">//运费</span><br>    <span class="hljs-meta">@Schema(description = &quot;运费&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal feightFee;<br>    <br>    <span class="hljs-comment">//备注</span><br>    <span class="hljs-meta">@Schema(description = &quot;备注&quot;)</span><br>    <span class="hljs-keyword">private</span> String remark;<br>    <br>    <span class="hljs-meta">@Schema(description = &quot;结算商品列表&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;OrderItem&gt; orderItemList;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、OrderInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;用户提交订单&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@PostMapping(&quot;/submitOrder&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderForm orderForm)</span> &#123;<br>    <span class="hljs-keyword">return</span> success(orderInfoService.submitOrder(orderForm));<br>&#125;<br></code></pre></td></tr></table></figure><p>3、IOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Long <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderForm orderForm)</span>;<br></code></pre></td></tr></table></figure><p>4、OrderInfoServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteProductService remoteProductService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteUserAddressService remoteUserAddressService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderLogMapper orderLogMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证页面提交流水号是否有效</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tradeNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">checkTradeNo</span><span class="hljs-params">(String userId, String tradeNo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">redisTradeNo</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(userTradeKey);<br>    <span class="hljs-keyword">return</span> tradeNo.equals(redisTradeNo);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除流水号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteTradeNo</span><span class="hljs-params">(String userId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    redisTemplate.delete(userTradeKey);<br>&#125;<br><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderForm orderForm)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br><br>    <span class="hljs-comment">//1.验证用户是否通过浏览器回退进行重复提交订单</span><br>    <span class="hljs-comment">//1.1 获取Redis中存放流水号 跟用户提交比较</span><br>    <span class="hljs-comment">//Boolean flag = this.checkTradeNo(orderInfo.getUserId().toString(), tradeNo);</span><br>    <span class="hljs-comment">//if (!flag) &#123;</span><br>    <span class="hljs-comment">//    throw new RuntimeException(&quot;请勿重复提交订单，请尝试重试&quot;);</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//1.2 验证通过，将Redis中存放流水号删除</span><br>    <span class="hljs-comment">//this.deleteTradeNo(orderInfo.getUserId().toString());</span><br><br>    <span class="hljs-comment">//1.3 采用Lua脚本保证判断删除流水号原子性 KEYS[1]:流水号Key    ARGV[1]：用户流水号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">scriptText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>            <span class="hljs-string">&quot;then\n&quot;</span> +<br>            <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>            <span class="hljs-string">&quot;else\n&quot;</span> +<br>            <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>            <span class="hljs-string">&quot;end&quot;</span>;<br>    DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    redisScript.setScriptText(scriptText);<br>    redisScript.setResultType(Long.class);<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> (Long) redisTemplate.execute(redisScript, Arrays.asList(userTradeKey), orderForm.getTradeNo());<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;请勿重复提交订单，请尝试重试&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//2. 判断购物项</span><br>    List&lt;OrderItem&gt; orderItemList = orderForm.getOrderItemList();<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(orderItemList)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;请求不合法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//3.订单校验</span><br>    <span class="hljs-comment">//3.1.校验价格</span><br>    List&lt;Long&gt; skuIdList = orderItemList.stream().map(OrderItem::getSkuId).collect(Collectors.toList());<br>    <br>    R&lt;List&lt;SkuPrice&gt;&gt; skuPriceListResult = remoteProductService.getSkuPriceList(skuIdList, SecurityConstants.INNER);<br>    <span class="hljs-keyword">if</span> (R.FAIL == skuPriceListResult.getCode()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceListResult.getMsg());<br>    &#125;<br>    List&lt;SkuPrice&gt; skuPriceList = skuPriceListResult.getData();<br>    <br>    Map&lt;Long, BigDecimal&gt; skuIdToSalePriceMap = skuPriceList.stream().collect(Collectors.toMap(SkuPrice::getSkuId, SkuPrice::getSalePrice));<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">priceCheckResult</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        <span class="hljs-keyword">if</span> (orderItem.getSkuPrice().compareTo(skuIdToSalePriceMap.get(orderItem.getSkuId())) != <span class="hljs-number">0</span>) &#123;<br>            priceCheckResult += orderItem.getSkuName() + <span class="hljs-string">&quot;价格变化了; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(priceCheckResult)) &#123;<br>        <span class="hljs-comment">//更新购物车价格</span><br>        remoteCartService.updateCartPrice(userId, SecurityConstants.INNER);<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(priceCheckResult);<br>    &#125;<br><br>    <span class="hljs-comment">//3.2.校验库存并锁定库存</span><br>    <span class="hljs-comment">//TODO ...</span><br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//4 下单</span><br>        orderId = <span class="hljs-built_in">this</span>.saveOrder(orderForm);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-comment">//抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;下单失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//5 删除购物车选项</span><br>    remoteCartService.deleteCartCheckedList(userId, SecurityConstants.INNER);<br>    <span class="hljs-keyword">return</span> orderId;<br>&#125;<br><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(OrderForm orderForm)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserName();<br><br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderInfo</span>();<br>    orderInfo.setOrderNo(orderForm.getTradeNo());<br>    orderInfo.setUserId(userId);<br>    orderInfo.setNickName(userName);<br>orderInfo.setRemark(orderForm.getRemark());<br>    <span class="hljs-type">UserAddress</span> <span class="hljs-variable">userAddress</span> <span class="hljs-operator">=</span> remoteUserAddressService.getUserAddress(orderForm.getUserAddressId(), SecurityConstants.INNER).getData();<br>    orderInfo.setReceiverName(userAddress.getName());<br>    orderInfo.setReceiverPhone(userAddress.getPhone());<br>    orderInfo.setReceiverTagName(userAddress.getTagName());<br>    orderInfo.setReceiverProvince(userAddress.getProvinceCode());<br>    orderInfo.setReceiverCity(userAddress.getCityCode());<br>    orderInfo.setReceiverDistrict(userAddress.getDistrictCode());<br>    orderInfo.setReceiverAddress(userAddress.getFullAddress());<br><br>    List&lt;OrderItem&gt; orderItemList = orderForm.getOrderItemList();<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">totalAmount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        totalAmount = totalAmount.add(orderItem.getSkuPrice().multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(orderItem.getSkuNum())));<br>    &#125;<br>    orderInfo.setTotalAmount(totalAmount);<br>    orderInfo.setCouponAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>));<br>    orderInfo.setOriginalTotalAmount(totalAmount);<br>    orderInfo.setFeightFee(orderForm.getFeightFee());<br>    <span class="hljs-comment">//OrderInfo类的orderStatus属性的类型改为Integer</span><br>    orderInfo.setOrderStatus(<span class="hljs-number">0</span>);<br>    orderInfoMapper.insert(orderInfo);<br><br>    <span class="hljs-comment">//保存订单明细</span><br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        orderItem.setOrderId(orderInfo.getId());<br>        orderItemMapper.insert(orderItem);<br>    &#125;<br><br>    <span class="hljs-comment">//记录日志</span><br>    <span class="hljs-type">OrderLog</span> <span class="hljs-variable">orderLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderLog</span>();<br>    orderLog.setOrderId(orderInfo.getId());<br>    orderLog.setProcessStatus(<span class="hljs-number">0</span>);<br>    orderLog.setNote(<span class="hljs-string">&quot;提交订单&quot;</span>);<br>    orderLogMapper.insert(orderLog);<br>    <span class="hljs-keyword">return</span> orderInfo.getId();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-检查与锁定库存"><a href="#4-3-检查与锁定库存" class="headerlink" title="4.3 检查与锁定库存"></a>4.3 检查与锁定库存</h2><p>我们的商品不允许超卖，为了防止超卖，我们下单必须检查与锁定库存，下单失败或取消订单要解锁库存，支付成功扣减库存</p><h3 id="4-3-1-远程调用接口"><a href="#4-3-1-远程调用接口" class="headerlink" title="4.3.1 远程调用接口"></a>4.3.1 远程调用接口</h3><p>操作模块：product</p><p>1、ProductController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@Operation(summary = &quot;检查与锁定库存&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;checkAndLock/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderNo, <span class="hljs-meta">@RequestBody</span> List&lt;SkuLockVo&gt; skuLockVoList)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> R.ok(productService.checkAndLock(orderNo, skuLockVoList));<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.ok(e.getMessage());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、SkuLockVo</p><p>操作模块：api-product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuLockVo</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-keyword">private</span> Integer skuNum;<br><br>    <span class="hljs-comment">/** 是否有库存 **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">isHaveStock</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(String orderNo, List&lt;SkuLockVo&gt; skuLockVoList)</span>;<br></code></pre></td></tr></table></figure><p>4、ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(String orderNo, List&lt;SkuLockVo&gt; skuLockVoList)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:checkAndLock:&quot;</span> + orderNo;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:lock:data:&quot;</span> + orderNo;<br>    <span class="hljs-comment">//防止重复请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, orderNo, <span class="hljs-number">1</span>, TimeUnit.HOURS);<br>    <span class="hljs-keyword">if</span> (!isExist) &#123;<br>        <span class="hljs-comment">//如果存在，则已执行过库存锁定</span><br>        <span class="hljs-keyword">if</span>(redisTemplate.hasKey(dataKey)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;重复提交&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历所有商品，验库存并锁库存，要具备原子性</span><br>    skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>        <span class="hljs-comment">// 验库存：查询，返回的是满足要求的库存列表</span><br>        <span class="hljs-type">SkuStock</span> <span class="hljs-variable">skuStock</span> <span class="hljs-operator">=</span> skuStockMapper.check(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>        <span class="hljs-comment">// 如果没有一个商品满足要求，这里就验库存失败</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == skuStock) &#123;<br>            skuLockVo.setIsHaveStock(<span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            skuLockVo.setIsHaveStock(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 只要有一个商品锁定失败，所有锁定成功的商品要解锁库存</span><br>    <span class="hljs-keyword">if</span> (skuLockVoList.stream().anyMatch(skuLockVo -&gt; !skuLockVo.getIsHaveStock())) &#123;<br>        <span class="hljs-comment">// 获取所有锁定成功的商品，遍历解锁库存</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">//获取没有库存的对象列表</span><br>        List&lt;SkuLockVo&gt; noHaveStockSkuLockVoList = skuLockVoList.stream().filter(item -&gt; !item.getIsHaveStock()).collect(Collectors.toList());<br>        <span class="hljs-keyword">for</span>(SkuLockVo noHaveStockSkuLockVo : noHaveStockSkuLockVoList) &#123;<br>            <span class="hljs-comment">//解除去重</span><br>            <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>            result.append(<span class="hljs-string">&quot;商品: &quot;</span> + noHaveStockSkuLockVo.getSkuId() + <span class="hljs-string">&quot; 库存不足; &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//锁定失败，解除</span><br>        redisTemplate.delete(key);<br>        <span class="hljs-comment">// 响应锁定状态</span><br>        <span class="hljs-keyword">return</span> result.toString();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//锁定库存</span><br>        skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> skuStockMapper.lock(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>            <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//解除去重</span><br>                <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;库存锁定失败&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果所有商品都锁定成功的情况下，需要缓存锁定信息到redis。以方便将来解锁库存 或者 减库存</span><br>    <span class="hljs-built_in">this</span>.redisTemplate.opsForValue().set(dataKey, skuLockVoList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、SkuStockMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SkuStock <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br><br>Integer <span class="hljs-title function_">lock</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br></code></pre></td></tr></table></figure><p>6、SkuStockMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.product.mapper.SkuStockMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;SkuStock&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SkuStockResult&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;check&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SkuStockResult&quot;</span>&gt;</span><br>        select * from sku_stock where sku_id = #&#123;skuId&#125; and available_num &gt; #&#123;num&#125; for update<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lock&quot;</span>&gt;</span><br>        update sku_stock<br>        set lock_num = lock_num + #&#123;num&#125;, available_num = available_num - #&#123;num&#125;<br>        where sku_id = #&#123;skuId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>select for update 这个语句的作用是在读取数据时给数据行加锁，以防止其他事务并发修改相同的数据行。</p><h3 id="4-3-2-openFeign接口定义"><a href="#4-3-2-openFeign接口定义" class="headerlink" title="4.3.2 openFeign接口定义"></a>4.3.2 openFeign接口定义</h3><p>RemoteProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/product/checkAndLock/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderNo&quot;)</span> String orderNo, <span class="hljs-meta">@RequestBody</span> List&lt;SkuLockVo&gt; skuLockVoList, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br></code></pre></td></tr></table></figure><h2 id="4-4-RabbitMQ使用"><a href="#4-4-RabbitMQ使用" class="headerlink" title="4.4 RabbitMQ使用"></a>4.4 RabbitMQ使用</h2><h3 id="4-4-1-封装RabbitMQ"><a href="#4-4-1-封装RabbitMQ" class="headerlink" title="4.4.1 封装RabbitMQ"></a>4.4.1 封装RabbitMQ</h3><p>由于消息队列是公共模块，我们把mq的相关代码（生产者）封装到该模块，其他service微服务模块都可能使用，因此我们把他封装到一个单独的模块，需要使用mq的模块直接引用该模块即可</p><p>1、新建模块</p><p>在<code>common</code>模块下新建<code>common-rabbit</code>模块</p><p>2、pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        common-rabbit服务<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--rabbitmq消息队列--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 缓存服务 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、RabbitService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange   交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> routingKey 路由键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message    消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String exchange, String routingKey, Object message)</span> &#123;<br>        rabbitTemplate.convertAndSend(exchange, routingKey, message);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.common.rabbit.service.RabbitService<br></code></pre></td></tr></table></figure><p>5、MqConst</p><p>提供常量类 MqConst</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.constant;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConst</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_TEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_TEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_CONFIRM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_TEST</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_CONFIRM</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 库存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_PRODUCT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_UNLOCK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unlock&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_MINUS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;minus&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_UNLOCK</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unlock&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_MINUS</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;minus&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_PAYMENT_PAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_PAYMENT_PAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment.pay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_PAYMENT_CLOSE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment.close&quot;</span>;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_PAYMENT_PAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment.pay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_PAYMENT_CLOSE</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.payment.close&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消订单延迟消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_CANCEL_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cancel.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_CANCEL_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cancel.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_CANCEL_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cancel.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">CANCEL_ORDER_DELAY_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span> * <span class="hljs-number">60</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-2-RabbitMQ测试"><a href="#4-4-2-RabbitMQ测试" class="headerlink" title="4.4.2 RabbitMQ测试"></a>4.4.2 RabbitMQ测试</h3><p>我们在<code>order</code>模块测试mq消息</p><p>1、配置RabbitMQ</p><p>在nacos配置中心，order-dev.yml文件添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure><p>说明：host改为实际的IP</p><p>2、引入common-rabbit模块</p><p>在<code>order</code>模块pom.xml文件添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、MqController</p><p> 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;Mq接口管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/mq&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;发送消息&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span><br>    &#123;<br>        rabbitService.sendMessage(MqConst.EXCHANGE_TEST, MqConst.ROUTING_TEST, <span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-keyword">return</span> success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、TestReceiver</p><p>监听消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.receiver;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestReceiver</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            exchange = @Exchange(value = MqConst.EXCHANGE_TEST, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            value = @Queue(value = MqConst.QUEUE_TEST, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            key = MqConst.ROUTING_TEST</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String content, Message message)</span> &#123;<br>        <span class="hljs-comment">//都可以</span><br>        log.info(<span class="hljs-string">&quot;接收消息：&#123;&#125;&quot;</span>, content);<br>        <span class="hljs-comment">//log.info(&quot;接收消息：&#123;&#125;&quot;, new String(message.getBody()));</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、knife4j测试</p><p>发送消息</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/1709020757929.png"></p><p>监听消息：查看idea打印结果</p><h3 id="4-4-3-消息可靠性配置"><a href="#4-4-3-消息可靠性配置" class="headerlink" title="4.4.3 消息可靠性配置"></a>4.4.3 消息可靠性配置</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>MQ消息的可靠性，一般需要三个方面一起保证：</p><ol><li>生产者不丢数据</li><li>MQ服务器不丢数据</li><li>消费者不丢数据</li></ol><p>保证消息不丢失有两种实现方式：</p><ul><li>开启事务模式</li><li>消息确认模式（生产者，消费者）</li></ul><p><strong>说明：</strong>开启事务会大幅降低消息发送及接收效率，使用的相对较少，因此我们生产环境一般都采取消息确认模式，以下我们只是讲解消息确认模式</p><h4 id="2、消息发送确认配置"><a href="#2、消息发送确认配置" class="headerlink" title="2、消息发送确认配置"></a>2、消息发送确认配置</h4><p>消息发送确认可以保证生产者不丢数据</p><p>（1）封装发送端消息确认配置类</p><p>操作模块：<code>common-rabbit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.event.ApplicationReadyEvent;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationListener;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitInitConfigApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ApplicationReadyEvent event)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setupCallbacks();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupCallbacks</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 只确认消息是否正确到达 Exchange 中,成功与否都会回调</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> correlation 相关数据  非消息本身业务数据</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> ack             应答结果</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> reason           如果发送消息到交换器失败，错误原因</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setConfirmCallback((correlationData, ack, reason) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (ack) &#123;<br>                <span class="hljs-comment">//消息到交换器成功</span><br>                log.info(<span class="hljs-string">&quot;消息发送到Exchange成功：&#123;&#125;&quot;</span>, correlationData);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//消息到交换器失败</span><br>                log.error(<span class="hljs-string">&quot;消息发送到Exchange失败：&#123;&#125;&quot;</span>, reason);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 消息没有正确到达队列时触发回调，如果正确到达队列不执行</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setReturnsCallback(returned -&gt; &#123;<br>            log.error(<span class="hljs-string">&quot;Returned: &quot;</span> + returned.getMessage() + <span class="hljs-string">&quot;\nreplyCode: &quot;</span> + returned.getReplyCode()<br>                    + <span class="hljs-string">&quot;\nreplyText: &quot;</span> + returned.getReplyText() + <span class="hljs-string">&quot;\nexchange/rk: &quot;</span><br>                    + returned.getExchange() + <span class="hljs-string">&quot;/&quot;</span> + returned.getRoutingKey());<br><br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.common.rabbit.config.RabbitInitConfigApplicationListener<br></code></pre></td></tr></table></figure><p>（3）修改配置</p><p>在nacos配置中心，修改order-dev.yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span> <span class="hljs-comment">#发布消息成功到交换器后会触发回调方法</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 未投递到Queue退回模式</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">cknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#默认自动确认，手动确认manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 消费者每次从队列获取的消息数量。不设置：轮询分发，设置1：能者多劳</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/image-0610.png"></p><p>（4）MqController</p><p>发送确认消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;发送确认消息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/sendConfirmMessage&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendConfirmMessage</span><span class="hljs-params">()</span><br>&#123;<br>    rabbitService.sendMessage(MqConst.EXCHANGE_TEST, MqConst.ROUTING_CONFIRM, <span class="hljs-string">&quot;hello, confirm&quot;</span>);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><p>（5）TestReceiver</p><p>监听确认消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听确认消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_TEST, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_CONFIRM, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = MqConst.ROUTING_CONFIRM</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(String content, Message message, Channel channel)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;接收确认消息：&#123;&#125;&quot;</span>, content);<br><br>    <span class="hljs-comment">// false 确认一个消息，true 批量确认</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、消息发送失败后设置重发机制"><a href="#3、消息发送失败后设置重发机制" class="headerlink" title="3、消息发送失败后设置重发机制"></a>3、消息发送失败后设置重发机制</h4><p>实现思路：借助redis来实现重发机制</p><p>操作模块：<code>pzx-common-rabbit</code></p><p>（1）GmallCorrelationData</p><p>自定义一个实体类来接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiguCorrelationData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CorrelationData</span> &#123;<br><br>    <span class="hljs-comment">//消息体</span><br>    <span class="hljs-keyword">private</span> Object message;<br>    <span class="hljs-comment">//交换机</span><br>    <span class="hljs-keyword">private</span> String exchange;<br>    <span class="hljs-comment">//路由键</span><br>    <span class="hljs-keyword">private</span> String routingKey;<br>    <span class="hljs-comment">//重试次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//是否延迟消息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isDelay</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//延迟时长</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">delayTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）RabbitService</p><p>修改发送方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  发送消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange 交换机</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> routingKey 路由键</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message 消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String exchange, String routingKey, Object message)</span> &#123;<br>    <span class="hljs-comment">//1.创建自定义相关消息对象-包含业务数据本身，交换器名称，路由键，队列类型，延迟时间,重试次数</span><br>    <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguCorrelationData</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mq:&quot;</span> + UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    correlationData.setId(uuid);<br>    correlationData.setMessage(message);<br>    correlationData.setExchange(exchange);<br>    correlationData.setRoutingKey(routingKey);<br>    <br>    <span class="hljs-comment">//2.将相关消息存入Redis  Key：UUID  相关消息对象  10 分钟</span><br>    redisTemplate.opsForValue().set(uuid, JSON.toJSONString(correlationData), <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>    <br>    <span class="hljs-comment">//3.将相关消息封装到发送消息方法中（注意：步骤2和3的代码顺序）</span><br>    rabbitTemplate.convertAndSend(exchange, routingKey, message, correlationData);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）RabbitInitConfigApplicationListener</p><p>修改RabbitInitConfigApplicationListener类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.config;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitInitConfigApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ApplicationReadyEvent event)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setupCallbacks();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupCallbacks</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 只确认消息是否正确到达 Exchange 中,成功与否都会回调</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> correlation 相关数据  非消息本身业务数据</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> ack         应答结果</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> reason      如果发送消息到交换器失败，错误原因</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setConfirmCallback((correlationData, ack, reason) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (ack) &#123;<br>                <span class="hljs-comment">//消息到交换器成功</span><br>                log.info(<span class="hljs-string">&quot;消息发送到Exchange成功：&#123;&#125;&quot;</span>, correlationData);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//消息到交换器失败</span><br>                log.error(<span class="hljs-string">&quot;消息发送到Exchange失败：&#123;&#125;&quot;</span>, reason);<br><br>                <span class="hljs-comment">//执行消息重发</span><br>                <span class="hljs-built_in">this</span>.retrySendMsg(correlationData);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 消息没有正确到达队列时触发回调，如果正确到达队列不执行</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setReturnsCallback(returned -&gt; &#123;<br>            log.error(<span class="hljs-string">&quot;Returned: &quot;</span> + returned.getMessage() + <span class="hljs-string">&quot;\nreplyCode: &quot;</span> + returned.getReplyCode()<br>                    + <span class="hljs-string">&quot;\nreplyText: &quot;</span> + returned.getReplyText() + <span class="hljs-string">&quot;\nexchange/rk: &quot;</span><br>                    + returned.getExchange() + <span class="hljs-string">&quot;/&quot;</span> + returned.getRoutingKey());<br><br>            <span class="hljs-comment">//当路由队列失败 也需要重发</span><br>            <span class="hljs-comment">//1.构建相关数据对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> returned.getMessage().getMessageProperties().getHeader(<span class="hljs-string">&quot;spring_returned_message_correlation&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">correlationDataStr</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(redisKey);<br>            <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">guiguCorrelationData</span> <span class="hljs-operator">=</span> JSON.parseObject(correlationDataStr, GuiguCorrelationData.class);<br>            <span class="hljs-comment">//2.调用消息重发方法</span><br>            <span class="hljs-built_in">this</span>.retrySendMsg(guiguCorrelationData);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息重新发送</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> correlationData</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">retrySendMsg</span><span class="hljs-params">(CorrelationData correlationData)</span> &#123;<br>        <span class="hljs-comment">//1.获取相关数据</span><br>        <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">gmallCorrelationData</span> <span class="hljs-operator">=</span> (GuiguCorrelationData) correlationData;<br><br>        <span class="hljs-comment">//获取redis中存放重试次数</span><br>        <span class="hljs-comment">//先重发，在写会到redis中次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> gmallCorrelationData.getRetryCount();<br>        <span class="hljs-keyword">if</span> (retryCount &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-comment">//超过最大重试次数</span><br>            log.error(<span class="hljs-string">&quot;生产者超过最大重试次数，将失败的消息存入数据库用人工处理；给管理员发送邮件；给管理员发送短信；&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">//2.重发次数+1</span><br>        retryCount += <span class="hljs-number">1</span>;<br>        gmallCorrelationData.setRetryCount(retryCount);<br>        redisTemplate.opsForValue().set(gmallCorrelationData.getId(), JSON.toJSONString(gmallCorrelationData), <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>        <br>        <span class="hljs-comment">//3.重发消息（注意：步骤2和3的代码顺序）</span><br>        rabbitTemplate.convertAndSend(gmallCorrelationData.getExchange(), gmallCorrelationData.getRoutingKey(), gmallCorrelationData.getMessage(), gmallCorrelationData);<br><br>        log.info(<span class="hljs-string">&quot;进行消息重发！&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-4-延迟消息"><a href="#4-4-4-延迟消息" class="headerlink" title="4.4.4 延迟消息"></a>4.4.4 延迟消息</h3><p>延迟消息：生产者发送消息时指定一个时间，消费者不会立刻收到消息，而是在指定时间后才收到消息。</p><p>延迟消息有两种实现方案：</p><p>1，基于死信队列</p><p>2，集成延迟插件</p><h4 id="4-4-4-1-基于死信实现延迟消息"><a href="#4-4-4-1-基于死信实现延迟消息" class="headerlink" title="4.4.4.1 基于死信实现延迟消息"></a>4.4.4.1 基于死信实现延迟消息</h4><p>使用RabbitMQ来实现延迟消息必须先了解RabbitMQ的两个概念：消息的TTL和死信Exchange，通过这两者的组合来实现延迟队列</p><h5 id="1、消息的TTL（Time-To-Live）"><a href="#1、消息的TTL（Time-To-Live）" class="headerlink" title="1、消息的TTL（Time To Live）"></a>1、消息的TTL（Time To Live）</h5><p>消息的TTL就是消息的存活时间。RabbitMQ可以对队列和消息分别设置TTL。对队列设置就是队列没有消费者连着的保留时间，也可以对每一个单独的消息做单独的设置。超过了这个时间，我们认为这个消息就死了，称之为死信。</p><p>如何设置TTL：</p><p>我们创建一个队列queue.temp，在Arguments 中添加x-message-ttl 为5000 （单位是毫秒），那所有压在这个队列的消息在5秒后会消失。</p><h5 id="2、死信交换机-Dead-Letter-Exchanges"><a href="#2、死信交换机-Dead-Letter-Exchanges" class="headerlink" title="2、死信交换机  Dead Letter Exchanges"></a>2、死信交换机  Dead Letter Exchanges</h5><p>一个消息在满足如下条件下，会进死信路由，记住这里是路由而不是队列，一个路由可以对应很多队列。</p><p>（1） 一个消息被Consumer拒收了，并且reject方法的参数里requeue是false。也就是说不会被再次放在队列里，被其他消费者使用。</p><p>（2）<strong>上面的消息的TTL到了，消息过期了。</strong></p><p>（3）队列的长度限制满了。排在前面的消息会被丢弃或者扔到死信路由上。</p><p>Dead Letter Exchange其实就是一种普通的exchange，和创建其他exchange没有两样。只是在某一个设置Dead Letter Exchange的队列中有消息过期了，会自动触发消息的转发，发送到Dead Letter Exchange中去。</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/wps157.jpg"> </p><p>我们现在可以测试一下延迟队列。</p><p>（1）创建死信队列 </p><p>（2）创建交换机 </p><p>（3）建立交换器与队列之间的绑定 </p><p>（4）创建队列</p><h5 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h5><p>操作模块：<code>order</code></p><p>（1）DeadLetterMqConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.configure;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.DirectExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLetterMqConfig</span> &#123;<br>    <span class="hljs-comment">// 声明一些变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">exchange_dead</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.dead&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">routing_dead_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.dead.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">routing_dead_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.dead.2&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">queue_dead_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.dead.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">queue_dead_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.dead.2&quot;</span>;<br><br>    <span class="hljs-comment">// 定义交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">exchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(exchange_dead, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置如果队列一 出现问题，则通过参数转到exchange_dead，routing_dead_2 上！</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 参数绑定 此处的key 固定值，不能随意写</span><br>        map.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, exchange_dead);<br>        map.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, routing_dead_2);<br>        <span class="hljs-comment">// 设置延迟时间</span><br>        map.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 队列名称，是否持久化，是否独享、排外的【true:只可以在本次连接中访问】，是否自动删除，队列的其他属性参数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(queue_dead_1, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, map);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">binding</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 将队列一 通过routing_dead_1 key 绑定到exchange_dead 交换机上</span><br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue1()).to(exchange()).with(routing_dead_1);<br>    &#125;<br><br>    <span class="hljs-comment">// 这个队列二就是一个普通队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(queue_dead_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置队列二的绑定规则</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">binding2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 将队列二通过routing_dead_2 key 绑定到exchange_dead交换机上！</span><br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue2()).to(exchange()).with(routing_dead_2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）MqController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息发送延迟消息：基于死信实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Operation(summary = &quot;发送延迟消息：基于死信实现&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/sendDeadLetterMsg&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendDeadLetterMsg</span><span class="hljs-params">()</span> &#123;<br>    rabbitService.sendMessage(DeadLetterMqConfig.exchange_dead, DeadLetterMqConfig.routing_dead_1, <span class="hljs-string">&quot;我是延迟消息&quot;</span>);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）TestReceiver</p><p>接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听延迟消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(queues = &#123;DeadLetterMqConfig.queue_dead_2&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeadLetterMsg</span><span class="hljs-params">(String msg, Message message, Channel channel)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;死信消费者：&#123;&#125;&quot;</span>, msg);<br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-4-2-基于延迟插件实现延迟消息"><a href="#4-4-4-2-基于延迟插件实现延迟消息" class="headerlink" title="4.4.4.2 基于延迟插件实现延迟消息"></a>4.4.4.2 基于延迟插件实现延迟消息</h4><p>Rabbitmq实现了一个插件x-delay-message来实现延时队列</p><h5 id="1、插件安装"><a href="#1、插件安装" class="headerlink" title="1、插件安装"></a>1、插件安装</h5><p>参考<code>01-软件环境准备#6</code></p><h5 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h5><p>操作模块：<code>order</code></p><p>（1）DelayedMqConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.configure;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.CustomExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedMqConfig</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">exchange_delay</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.delay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">routing_delay</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.delay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">queue_delay_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.delay.1&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayQeue1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 第一个参数是创建的queue的名字，第二个参数是是否支持持久化</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(queue_delay_1, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">delayExchange</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        args.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(exchange_delay, <span class="hljs-string">&quot;x-delayed-message&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">delayBbinding1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(delayQeue1()).to(delayExchange()).with(routing_delay).noargs();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）MqController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;发送延迟消息：基于延迟插件&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/sendDelayMsg&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendDelayMsg</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//调用工具方法发送延迟消息</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">delayTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    rabbitService.sendDealyMessage(DelayedMqConfig.exchange_delay, DelayedMqConfig.routing_delay, <span class="hljs-string">&quot;我是延迟消息&quot;</span>, delayTime);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）RabbitService</p><p>封装到工具类模块</p><p>操作模块：<code>common-rabbit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送延迟消息方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange 交换机</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> routingKey 路由键</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message 消息数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> delayTime 延迟时间，单位为：秒</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendDealyMessage</span><span class="hljs-params">(String exchange, String routingKey, Object message, <span class="hljs-type">int</span> delayTime)</span> &#123;<br>    <span class="hljs-comment">//1.创建自定义相关消息对象-包含业务数据本身，交换器名称，路由键，队列类型，延迟时间,重试次数</span><br>    <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguCorrelationData</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mq:&quot;</span> + UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    correlationData.setId(uuid);<br>    correlationData.setMessage(message);<br>    correlationData.setExchange(exchange);<br>    correlationData.setRoutingKey(routingKey);<br>    correlationData.setDelay(<span class="hljs-literal">true</span>);<br>    correlationData.setDelayTime(delayTime);<br><br>    <span class="hljs-comment">//2.将相关消息封装到发送消息方法中</span><br>    rabbitTemplate.convertAndSend(exchange, routingKey, message,message1 -&gt; &#123;<br>        message1.getMessageProperties().setDelay(delayTime*<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">return</span> message1;<br>    &#125;, correlationData);<br><br>    <span class="hljs-comment">//3.将相关消息存入Redis  Key：UUID  相关消息对象  10 分钟</span><br>    redisTemplate.opsForValue().set(uuid, JSON.toJSONString(correlationData), <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、消费者端幂等性处理"><a href="#3、消费者端幂等性处理" class="headerlink" title="3、消费者端幂等性处理"></a>3、消费者端幂等性处理</h5><p>消费结果会发送多次，也被消费多次！</p><p>如何保证消息幂等性？</p><ol><li>使用数据库方式</li><li><strong>使用redis setnx 命令解决（推荐）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//监听延迟消息</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(queues = &#123;DeadLetterMqConfig.queue_dead_2&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeadLetterMsg</span><span class="hljs-params">(String msg, Message message, Channel channel)</span> &#123;<br>    <span class="hljs-comment">//接收消息，消费者端判断是否需要做幂等性处理，如果业务保证幂等性，基于redis setnx保证</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mq:&quot;</span> + msg;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">200</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>        <span class="hljs-comment">//说明该业务数据已经被执行</span><br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 执行业务</span><br>    <span class="hljs-comment">//  TODO </span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-库存接口"><a href="#4-5-库存接口" class="headerlink" title="4.5 库存接口"></a>4.5 库存接口</h2><h3 id="4-5-1-解锁库存"><a href="#4-5-1-解锁库存" class="headerlink" title="4.5.1 解锁库存"></a>4.5.1 解锁库存</h3><p>下单失败，接口抛出异常，解锁库存我们必须保证执行成功，那么怎么办呢？前面讲解了Rabbit，它能保证数据的最终一致性，因此我们提供一个mq接口解锁库存。</p><p>操作模块：<code>product</code></p><p>1、pom.xml</p><p><code>product</code>模块添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、product-dev.yml</p><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">cknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#默认情况下消息消费者是自动确认消息的，如果要手动确认消息则需要修改确认模式为manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 消费者每次从队列获取的消息数量。此属性当不设置时为：轮询分发，设置为1为：公平分发</span><br></code></pre></td></tr></table></figure><p>3、ProductReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.receiver;<br><br><span class="hljs-keyword">import</span> com.common.rabbit.constant.MqConst;<br><span class="hljs-keyword">import</span> com.product.service.IProductService;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductReceiver</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProductService productService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁库存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNo 订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            exchange = @Exchange(value = MqConst.EXCHANGE_PRODUCT, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            value = @Queue(value = MqConst.QUEUE_UNLOCK, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            key = &#123;MqConst.ROUTING_UNLOCK&#125;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String orderNo, Message message, Channel channel)</span> &#123;<br>        <span class="hljs-comment">//业务处理</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo))&#123;<br>            log.info(<span class="hljs-string">&quot;[商品服务]监听解锁库存消息：&#123;&#125;&quot;</span>, orderNo);<br>            <span class="hljs-comment">//解锁库存</span><br>            productService.unlock(orderNo);<br>        &#125;<br><br>        <span class="hljs-comment">//手动应答</span><br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>5、ProductServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:unlock:&quot;</span> + orderNo;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:lock:data:&quot;</span> + orderNo;<br>    <span class="hljs-comment">//业务去重，防止重复消费</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, orderNo, <span class="hljs-number">1</span>, TimeUnit.HOURS);<br>    <span class="hljs-keyword">if</span>(!isExist) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 获取锁定库存的缓存信息</span><br>    List&lt;SkuLockVo&gt; skuLockVoList = (List&lt;SkuLockVo&gt;)<span class="hljs-built_in">this</span>.redisTemplate.opsForValue().get(dataKey);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(skuLockVoList))&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 解锁库存</span><br>    skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> skuStockMapper.unlock(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>        <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//解除去重</span><br>            <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;解锁出库失败&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 解锁库存之后，删除锁定库存的缓存。以防止重复解锁库存</span><br>    <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>&#125;<br></code></pre></td></tr></table></figure><p>6、SkuStockMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">unlock</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br></code></pre></td></tr></table></figure><p>7、SkuStockMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;unlock&quot;</span>&gt;</span><br>    update sku_stock<br>    set lock_num = lock_num - #&#123;num&#125;, available_num = available_num + #&#123;num&#125;<br>    where sku_id = #&#123;skuId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-2-扣减库存"><a href="#4-5-2-扣减库存" class="headerlink" title="4.5.2 扣减库存"></a>4.5.2 扣减库存</h3><p>订单支付成功之后，通过发送mq消息，实现库存的真正去扣减</p><p>扣减库存跟解锁库存一样，提供mq接收端</p><p>1、ProductReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扣减库存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNo  订单号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_PRODUCT, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_MINUS, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = &#123;MqConst.ROUTING_MINUS&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">minus</span><span class="hljs-params">(String orderNo, Channel channel, Message message)</span> &#123;<br>    <span class="hljs-comment">//业务处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo))&#123;<br>        log.info(<span class="hljs-string">&quot;[商品服务]监听减库存消息：&#123;&#125;&quot;</span>, orderNo);<br>        <span class="hljs-comment">//扣减库存</span><br>        productService.minus(orderNo);<br>    &#125;<br><br>    <span class="hljs-comment">//手动应答</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">minus</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>3、ProductServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">minus</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:minus:&quot;</span> + orderNo;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:lock:data:&quot;</span> + orderNo;<br>    <span class="hljs-comment">//业务去重，防止重复消费</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, orderNo, <span class="hljs-number">1</span>, TimeUnit.HOURS);<br>    <span class="hljs-keyword">if</span>(!isExist) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 获取锁定库存的缓存信息</span><br>    List&lt;SkuLockVo&gt; skuLockVoList = (List&lt;SkuLockVo&gt;)<span class="hljs-built_in">this</span>.redisTemplate.opsForValue().get(dataKey);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(skuLockVoList))&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 减库存</span><br>    skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> skuStockMapper.minus(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>        <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//解除去重</span><br>            <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;减出库失败&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 解锁库存之后，删除锁定库存的缓存。以防止重复解锁库存</span><br>    <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、SkuStockMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">minus</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br></code></pre></td></tr></table></figure><p>5、SkuStockMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;minus&quot;</span>&gt;</span><br>    update sku_stock<br>    set lock_num = lock_num - #&#123;num&#125;, total_num = total_num - #&#123;num&#125;, sale_num = sale_num + #&#123;num&#125;<br>    where sku_id = #&#123;skuId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-3-下单接口改造"><a href="#4-5-3-下单接口改造" class="headerlink" title="4.5.3 下单接口改造"></a>4.5.3 下单接口改造</h3><p><strong>操作OrderInfoServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderForm orderForm)</span> &#123;<br>    ...<br><br>    <span class="hljs-comment">//3.2.校验库存并锁定库存</span><br>    List&lt;SkuLockVo&gt; skuLockVoList = orderItemList.stream().map(item -&gt; &#123;<br>        <span class="hljs-type">SkuLockVo</span> <span class="hljs-variable">skuLockVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuLockVo</span>();<br>        skuLockVo.setSkuId(item.getSkuId());<br>        skuLockVo.setSkuNum(item.getSkuNum());<br>        <span class="hljs-keyword">return</span> skuLockVo;<br>    &#125;).collect(Collectors.toList());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkAndLockResult</span> <span class="hljs-operator">=</span> remoteProductService.checkAndLock(orderForm.getTradeNo(), skuLockVoList, SecurityConstants.INNER).getData();<br>    <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(checkAndLockResult)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(checkAndLockResult);<br>    &#125;<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//4 下单</span><br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-comment">//4.1 下单失败，解锁库存</span><br>        rabbitService.sendMessage(MqConst.EXCHANGE_PRODUCT, MqConst.ROUTING_UNLOCK, orderForm.getTradeNo());<br>        <span class="hljs-comment">//抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;下单失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//5 删除购物车选项</span><br>    ...<br><br>    <span class="hljs-keyword">return</span> orderId;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-支付页"><a href="#4-6-支付页" class="headerlink" title="4.6 支付页"></a>4.6 支付页</h2><h3 id="4-6-1-需求说明"><a href="#4-6-1-需求说明" class="headerlink" title="4.6.1 需求说明"></a>4.6.1 需求说明</h3><p>提交订单成功，跳转到支付页面，根据订单id获取订单详细信息，展示订单支付信息</p><p><strong>查看接口文档：</strong></p><p>根据订单id获取订单信息接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">get /order/orderInfo/getOrderInfo/<span class="hljs-punctuation">&#123;</span>orderId<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-28 08:29:36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13700032456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;f1866bad38bc4627958542d72a15ca9c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;couponId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;totalAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9997.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;couponAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;originalTotalAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9997.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;feightFee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;晴天&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverPhone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15023656352&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverTagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverProvince&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverCity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverDistrict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110101&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市北京市东城区东直门1号&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;paymentTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deliveryTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiveTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cancelTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cancelReason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-2-后端业务接口"><a href="#4-6-2-后端业务接口" class="headerlink" title="4.6.2 后端业务接口"></a>4.6.2 后端业务接口</h3><p><strong>操作OrderInfoController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;获取订单信息&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;getOrderInfo/&#123;orderId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getOrderInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoService.getById(orderId);<br>    <span class="hljs-keyword">return</span> success(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3、购物车</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章-购物车"><a href="#第3章-购物车" class="headerlink" title="第3章 购物车"></a>第3章 购物车</h1><h2 id="3-1-购物车介绍"><a href="#3-1-购物车介绍" class="headerlink" title="3.1 购物车介绍"></a>3.1 购物车介绍</h2><p>在购物车中存储用户所选的的商品，记录下所选商品，当用户决定购买时，用户可以选择决定购买的商品进入结算页面。</p><p>购物车模块功能说明：</p><p>1、用户必须登录后才可以使用购物车 </p><p>2、添加商品到购物车</p><p>3、查询购物车列表数据</p><p>4、删除购物车商品数据</p><p>5、更新选中商品状态</p><p>6、完成购物车商品的全选</p><p>7、清空购物车商品数据</p><p>数据存储：为了提高对购物车数据操作的性能，可以使用Redis【HASH】存储购物车数据。</p><p>页面效果：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/1686635045559.png" alt style="zoom:67%;"><h2 id="3-2-环境搭建"><a href="#3-2-环境搭建" class="headerlink" title="3.2 环境搭建"></a>3.2 环境搭建</h2><h3 id="3-2-1-新建模块"><a href="#3-2-1-新建模块" class="headerlink" title="3.2.1 新建模块"></a>3.2.1 新建模块</h3><p>在modules模块下新建子模块<code>cart</code></p><h3 id="3-2-2-pom-xml"><a href="#3-2-2-pom-xml" class="headerlink" title="3.2.2 pom.xml"></a>3.2.2 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>modules<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        cart购物车模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos Config --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Sentinel --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringBoot Actuator --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Mysql Connector --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Common DataScope --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-datascope<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Common Log --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-log<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-3-banner-txt"><a href="#3-2-3-banner-txt" class="headerlink" title="3.2.3 banner.txt"></a>3.2.3 banner.txt</h3><p>在resources目录下新建banner.txt</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Spring Boot Version: $&#123;spring-boot.version&#125;<br>Spring Application Name: $&#123;spring.application.name&#125;<br>                            _                           _                    <br>                           (_)                         | |                   <br> _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  <br>| &#x27;__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| &#x27;_ ` _ \ <br>| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |<br>|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|<br>                      __/ |                  __/ |                           <br>                     |___/                  |___/                            <br></code></pre></td></tr></table></figure><h3 id="3-2-4-bootstrap-yml"><a href="#3-2-4-bootstrap-yml" class="headerlink" title="3.2.4 bootstrap.yml"></a>3.2.4 bootstrap.yml</h3><p>在resources目录下新建bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Tomcat</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9209</span><br><br><span class="hljs-comment"># Spring</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cart</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境配置</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment"># 服务注册地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 配置中心地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment"># 配置文件格式</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-comment"># 共享配置</span><br>        <span class="hljs-attr">shared-configs:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-5-cart-dev-yml"><a href="#3-2-5-cart-dev-yml" class="headerlink" title="3.2.5 cart-dev.yml"></a>3.2.5 cart-dev.yml</h3><p>在nacos上添加商品服务配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">password:</span><br></code></pre></td></tr></table></figure><h3 id="3-2-6-logback-xml"><a href="#3-2-6-logback-xml" class="headerlink" title="3.2.6 logback.xml"></a>3.2.6 logback.xml</h3><p>在resources目录下新建logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志存放路径 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs/cart&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 日志输出格式 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;20&#125; - [%method,%line] - %msg%n&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统日志输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统模块日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- Spring日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> /&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--系统操作日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_info&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_error&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-7-CartApplication"><a href="#3-2-7-CartApplication" class="headerlink" title="3.2.7 CartApplication"></a>3.2.7 CartApplication</h3><p>添加启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车模块</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableCustomConfig</span><br><span class="hljs-meta">@EnableRyFeignClients</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><span class="hljs-comment">//取消数据源自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartApplication</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        SpringApplication.run(CartApplication.class, args);<br>        System.out.println(<span class="hljs-string">&quot;(♥◠‿◠)ﾉﾞ  系统模块启动成功   ლ(´ڡ`ლ)ﾞ  \n&quot;</span> +<br>                <span class="hljs-string">&quot; .-------.       ____     __        \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  _ _   \\      \\   \\   /  /    \n&quot;</span> +<br>                <span class="hljs-string">&quot; | ( &#x27; )  |       \\  _. /  &#x27;       \n&quot;</span> +<br>                <span class="hljs-string">&quot; |(_ o _) /        _( )_ .&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; | (_,_).&#x27; __  ___(_ o _)&#x27;          \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |\\ \\  |  ||   |(_,_)&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  | \\ `&#x27;   /|   `-&#x27;  /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |  \\    /  \\      /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; &#x27;&#x27;-&#x27;   `&#x27;-&#x27;    `-..-&#x27;              &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-8-配置网关"><a href="#3-2-8-配置网关" class="headerlink" title="3.2.8 配置网关"></a>3.2.8 配置网关</h3><p>在gateway-dev.yml配置文件中添加会员服务的网关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 购物车服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">cart</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cart</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/cart/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><h2 id="3-3-添加购物车"><a href="#3-3-添加购物车" class="headerlink" title="3.3 添加购物车"></a>3.3 添加购物车</h2><h3 id="3-3-1-需求说明"><a href="#3-3-1-需求说明" class="headerlink" title="3.3.1 需求说明"></a>3.3.1 需求说明</h3><p>1、商品详情页加入购物车</p><p>2、加入购物车必须登录</p><p>3、购物车页面加减商品数量与商品详情页加入购物车是同一个接口</p><p>加入购物车功能如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/add.gif" alt style="zoom:67%;"><p><strong>查看接口文档：</strong></p><p>添加购物车接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/addToCart/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>skuNum<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-搭建购物车服务远程接口模块"><a href="#3-3-2-搭建购物车服务远程接口模块" class="headerlink" title="3.3.2 搭建购物车服务远程接口模块"></a>3.3.2 搭建购物车服务远程接口模块</h3><p>参考：api-system模块</p><h4 id="1、新建模块"><a href="#1、新建模块" class="headerlink" title="1、新建模块"></a>1、新建模块</h4><p>在api模块下新建子模块api-cart</p><h4 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-cart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        api-cart购物车接口模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Common Core--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、modules模块引入依赖"><a href="#3、modules模块引入依赖" class="headerlink" title="3、modules模块引入依赖"></a>3、modules模块引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-cart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-3-后端业务接口"><a href="#3-3-3-后端业务接口" class="headerlink" title="3.3.3 后端业务接口"></a>3.3.3 后端业务接口</h3><h4 id="1、CartInfo"><a href="#1、CartInfo" class="headerlink" title="1、CartInfo"></a>1、CartInfo</h4><p>操作模块：api-cart</p><p>定义一个实体类来封装购物车中的商品数据(购物项数据)，该实体类的定义依据：购物车列表页面需要展示的数据。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;购物车&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>   <span class="hljs-meta">@Schema(description = &quot;用户id&quot;)</span><br>   <span class="hljs-keyword">private</span> Long userId;<br><br>   <span class="hljs-meta">@Schema(description = &quot;skuid&quot;)</span><br>   <span class="hljs-keyword">private</span> Long skuId;<br><br>   <span class="hljs-meta">@Schema(description = &quot;放入购物车时价格&quot;)</span><br>   <span class="hljs-keyword">private</span> BigDecimal cartPrice;<br><br>   <span class="hljs-meta">@Schema(description = &quot;实时价格&quot;)</span><br>   <span class="hljs-keyword">private</span> BigDecimal skuPrice;  <br><br>   <span class="hljs-meta">@Schema(description = &quot;数量&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer skuNum;<br><br>   <span class="hljs-meta">@Schema(description = &quot;图片文件&quot;)</span><br>   <span class="hljs-keyword">private</span> String thumbImg;<br><br>   <span class="hljs-meta">@Schema(description = &quot;sku名称 (冗余)&quot;)</span><br>   <span class="hljs-keyword">private</span> String skuName;<br><br>   <span class="hljs-meta">@Schema(description = &quot;isChecked&quot;)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">isChecked</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、CartController"><a href="#2、CartController" class="headerlink" title="2、CartController"></a>2、CartController</h4><p>操作模块：cart</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;购物车接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;添加购物车&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@GetMapping(&quot;addToCart/&#123;skuId&#125;/&#123;skuNum&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addToCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;skuId&quot;, description = &quot;商品skuId&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId,</span><br><span class="hljs-params">                                <span class="hljs-meta">@Parameter(name = &quot;skuNum&quot;, description = &quot;数量&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(&quot;skuNum&quot;)</span> Integer skuNum)</span> &#123;<br>        cartService.addToCart(skuId, skuNum);<br>        <span class="hljs-keyword">return</span> success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、ICartService"><a href="#3、ICartService" class="headerlink" title="3、ICartService"></a>3、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICartService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Long skuId, Integer skuNum)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、CartServiceImpl"><a href="#4、CartServiceImpl" class="headerlink" title="4、CartServiceImpl"></a>4、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICartService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RemoteProductService remoteProductService;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getCartKey</span><span class="hljs-params">(Long userId)</span> &#123;<br>        <span class="hljs-comment">//定义key user:userId:cart</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user:cart:&quot;</span> + userId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Long skuId, Integer skuNum)</span> &#123;<br>        <span class="hljs-comment">// 获取当前登录用户的id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br><br>        <span class="hljs-comment">//1.构建“用户”购物车hash结构key  user：用户ID：cart</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br><br>        <span class="hljs-comment">//2.创建Hash结构绑定操作对象（方便对hash进行操作）</span><br>        BoundHashOperations&lt;String, String, CartInfo&gt; hashOps = redisTemplate.boundHashOps(cartKey);<br><br>        <span class="hljs-comment">//4.判断用户购物车中是否包含该商品 如果包含：数量进行累加(某件商品数量上限99) 不包含：新增购物车商品</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hashKey</span> <span class="hljs-operator">=</span> skuId.toString();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">threshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>        <span class="hljs-keyword">if</span> (hashOps.hasKey(hashKey)) &#123;<br>            <span class="hljs-comment">//4.1 说明该商品在购物车中已有，对数量进行累加 ，不能超过指定上限99</span><br>            <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfo</span> <span class="hljs-operator">=</span> hashOps.get(hashKey);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> cartInfo.getSkuNum() + skuNum;<br>            cartInfo.setSkuNum(totalCount &gt; threshold ? threshold : totalCount);<br>            hashOps.put(hashKey, cartInfo);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//3.判断购物车商品种类（不同SKU）总数大于50件</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> hashOps.size();<br>            <span class="hljs-keyword">if</span> (++count &gt; <span class="hljs-number">50</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;商品种类数量超过上限！&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//4. 说明购物车没有该商品，构建购物车对象，存入Redis</span><br>            <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CartInfo</span>();<br>            cartInfo.setUserId(userId);<br>            cartInfo.setSkuNum(skuNum &gt; threshold ? threshold : skuNum);<br>            cartInfo.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            cartInfo.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            <span class="hljs-comment">//4.1 远程调用商品服务获取商品sku基本信息</span><br>            R&lt;ProductSku&gt; productSkuResult = remoteProductService.getProductSku(skuId, SecurityConstants.INNER);<br>            <span class="hljs-keyword">if</span> (R.FAIL == productSkuResult.getCode()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productSkuResult.getMsg());<br>            &#125;<br>            <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuResult.getData();<br>            cartInfo.setSkuId(skuId);<br>            cartInfo.setSkuName(productSku.getSkuName());<br>            cartInfo.setThumbImg(productSku.getThumbImg());<br><br>            <span class="hljs-comment">//4.2 远程调用商品服务获取商品实时价格</span><br>            R&lt;SkuPrice&gt; skuPriceResult = remoteProductService.getSkuPrice(skuId, SecurityConstants.INNER);<br>            <span class="hljs-keyword">if</span> (R.FAIL == skuPriceResult.getCode()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceResult.getMsg());<br>            &#125;<br>            <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> skuPriceResult.getData();<br>            cartInfo.setCartPrice(skuPrice.getSalePrice());<br>            cartInfo.setSkuPrice(skuPrice.getSalePrice());<br><br>            <span class="hljs-comment">//4.3 将购物车商品存入Redis</span><br>            hashOps.put(hashKey, cartInfo);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-购物车列表查询"><a href="#3-4-购物车列表查询" class="headerlink" title="3.4 购物车列表查询"></a>3.4 购物车列表查询</h2><h3 id="3-4-1-需求说明"><a href="#3-4-1-需求说明" class="headerlink" title="3.4.1 需求说明"></a>3.4.1 需求说明</h3><p>当用户在商品详情页面点击<strong>购物车</strong>按钮的时候，那么此时就需要将当前登录用户的所对应的所有的购物车数据在购物车页面展出出来。如下图所示，<strong>当商品价格变化时，页面可以显示实时价格：</strong></p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/1709791602866.png" alt style="zoom: 67%;"><p><strong>查看接口文档：</strong></p><p>购物车列表接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/cartList<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-26 16:25:54&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-26 16:25:54&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cartPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-1_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机 黑色 + 8G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;isChecked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><br>        ...<br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-后端业务接口"><a href="#3-4-2-后端业务接口" class="headerlink" title="3.4.2 后端业务接口"></a>3.4.2 后端业务接口</h3><h4 id="1、批量查询商品实时价格"><a href="#1、批量查询商品实时价格" class="headerlink" title="1、批量查询商品实时价格"></a>1、批量查询商品实时价格</h4><p>操作模块：<code>product</code></p><p>（1）ProductController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;批量获取商品sku最新价格信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@PostMapping(value = &quot;/getSkuPriceList&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;SkuPrice&gt;&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Long&gt; skuIdList)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuPriceList(skuIdList));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(List&lt;Long&gt; skuIdList)</span>;<br></code></pre></td></tr></table></figure><p>（3）ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(List&lt;Long&gt; skuIdList)</span> &#123;<br>    List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;().in(ProductSku::getId, skuIdList).select(ProductSku::getId, ProductSku::getSalePrice));<br>    <span class="hljs-keyword">return</span> productSkuList.stream().map(item -&gt; &#123;<br>        <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuPrice</span>();<br>        skuPrice.setSkuId(item.getId());<br>        skuPrice.setSalePrice(item.getSalePrice());<br>        <span class="hljs-keyword">return</span> skuPrice;<br>    &#125;).collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、批量查询商品实时价格openFeign接口定义"><a href="#2、批量查询商品实时价格openFeign接口定义" class="headerlink" title="2、批量查询商品实时价格openFeign接口定义"></a>2、批量查询商品实时价格openFeign接口定义</h4><p>操作模块：<code>api-product</code></p><p>（1）RemoteProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/product/getSkuPriceList&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;SkuPrice&gt;&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Long&gt; skuIdList, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br></code></pre></td></tr></table></figure><p>（2）RemoteProductFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;SkuPrice&gt;&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(List&lt;Long&gt; skuIdList, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku价格列表失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、CartController"><a href="#3、CartController" class="headerlink" title="3、CartController"></a>3、CartController</h4><p>操作模块：<code>cart</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;查询购物车&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;cartList&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">cartList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> success(cartService.getCartList());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、ICartService"><a href="#4、ICartService" class="headerlink" title="4、ICartService"></a>4、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CartInfo&gt; <span class="hljs-title function_">getCartList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="5、CartServiceImpl"><a href="#5、CartServiceImpl" class="headerlink" title="5、CartServiceImpl"></a>5、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartInfo&gt; <span class="hljs-title function_">getCartList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCartKey(userId);<br>    <span class="hljs-comment">// 获取数据</span><br>    List&lt;CartInfo&gt; cartInfoList = redisTemplate.opsForHash().values(cartKey);<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartInfoList)) &#123;<br>        List&lt;CartInfo&gt; infoList = cartInfoList.stream()<br>            .sorted((o1, o2) -&gt; o2.getCreateTime().compareTo(o1.getCreateTime()))<br>            .collect(Collectors.toList());<br><br>        <span class="hljs-comment">//获取skuId列表</span><br>        List&lt;Long&gt; skuIdList = infoList.stream().map(CartInfo::getSkuId).collect(Collectors.toList());<br>        <span class="hljs-comment">//查询商品的实时价格</span><br>        R&lt;List&lt;SkuPrice&gt;&gt; SkuPriceListResult = remoteProductService.getSkuPriceList(skuIdList, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == SkuPriceListResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(SkuPriceListResult.getMsg());<br>        &#125;<br>        Map&lt;Long, BigDecimal&gt; skuIdToPriceMap = SkuPriceListResult.getData().stream().collect(Collectors.toMap(SkuPrice::getSkuId, SkuPrice::getSalePrice));<br>        <br>        infoList.forEach(item -&gt; &#123;<br>            <span class="hljs-comment">//设置实时价格</span><br>            item.setSkuPrice(skuIdToPriceMap.get(item.getSkuId()));<br>        &#125;);<br>        <span class="hljs-keyword">return</span> infoList ;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-删除购物车商品"><a href="#3-5-删除购物车商品" class="headerlink" title="3.5 删除购物车商品"></a>3.5 删除购物车商品</h2><h3 id="3-5-1-需求说明"><a href="#3-5-1-需求说明" class="headerlink" title="3.5.1 需求说明"></a>3.5.1 需求说明</h3><p>删除功能如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/delete.gif" alt style="zoom:67%;"> <p><strong>查看接口文档：</strong></p><p>删除购物车商品接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/deleteCart/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-2-后端业务接口"><a href="#3-5-2-后端业务接口" class="headerlink" title="3.5.2 后端业务接口"></a>3.5.2 后端业务接口</h3><h4 id="1、CartController"><a href="#1、CartController" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;删除购物车商品&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@DeleteMapping(&quot;deleteCart/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">deleteCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;skuId&quot;, description = &quot;商品skuId&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span> &#123;<br>    cartService.deleteCart(skuId);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService"><a href="#2、ICartService" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCart</span><span class="hljs-params">(Long skuId)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl"><a href="#3、CartServiceImpl" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCart</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    <span class="hljs-comment">//获取缓存对象</span><br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    hashOperations.delete(skuId.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-更新选中商品状态"><a href="#3-6-更新选中商品状态" class="headerlink" title="3.6 更新选中商品状态"></a>3.6 更新选中商品状态</h2><h3 id="3-6-1-需求说明"><a href="#3-6-1-需求说明" class="headerlink" title="3.6.1 需求说明"></a>3.6.1 需求说明</h3><p>更新选中商品状态功能如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/check.gif" alt style="zoom:67%;"> <p><strong>查看接口文档：</strong></p><p>更新选中商品状态接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/checkCart/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>isChecked<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-2-后端业务接口"><a href="#3-6-2-后端业务接口" class="headerlink" title="3.6.2 后端业务接口"></a>3.6.2 后端业务接口</h3><h4 id="1、CartController-1"><a href="#1、CartController-1" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;更新选中状态&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;checkCart/&#123;skuId&#125;/&#123;isChecked&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">checkCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;skuId&quot;, description = &quot;商品skuId&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(value = &quot;skuId&quot;)</span> Long skuId,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Parameter(name = &quot;isChecked&quot;, description = &quot;是否选中 1:选中 0:取消选中&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(value = &quot;isChecked&quot;)</span> Integer isChecked)</span> &#123;<br>    cartService.checkCart(skuId, isChecked);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService-1"><a href="#2、ICartService-1" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">checkCart</span><span class="hljs-params">(Long skuId, Integer isChecked)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl-1"><a href="#3、CartServiceImpl-1" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkCart</span><span class="hljs-params">(Long skuId, Integer isChecked)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-comment">// 修改缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    <span class="hljs-comment">// 先获取用户选择的商品</span><br>    <span class="hljs-keyword">if</span> (hashOperations.hasKey(skuId.toString())) &#123;<br>        <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfoUpd</span> <span class="hljs-operator">=</span> hashOperations.get(skuId.toString());<br>        <span class="hljs-comment">// cartInfoUpd 写会缓存</span><br>        cartInfoUpd.setIsChecked(isChecked);<br>        <span class="hljs-comment">// 更新缓存</span><br>        hashOperations.put(skuId.toString(), cartInfoUpd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-完成购物车商品的全选"><a href="#3-7-完成购物车商品的全选" class="headerlink" title="3.7 完成购物车商品的全选"></a>3.7 完成购物车商品的全选</h2><h3 id="3-7-1-需求说明"><a href="#3-7-1-需求说明" class="headerlink" title="3.7.1 需求说明"></a>3.7.1 需求说明</h3><p>更新购物车商品全部选中状态功能如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/checkAll.gif" alt style="zoom:67%;"> <p><strong>查看接口文档：</strong></p><p>更新购物车商品全部选中状态接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/allCheckCart/<span class="hljs-punctuation">&#123;</span>isChecked<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-7-2-后端业务接口"><a href="#3-7-2-后端业务接口" class="headerlink" title="3.7.2 后端业务接口"></a>3.7.2 后端业务接口</h3><h4 id="1、CartController-2"><a href="#1、CartController-2" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;更新购物车商品全部选中状态&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;allCheckCart/&#123;isChecked&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">allCheckCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;isChecked&quot;, description = &quot;是否选中 1:选中 0:取消选中&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(value = &quot;isChecked&quot;)</span> Integer isChecked)</span>&#123;<br>    cartService.allCheckCart(isChecked);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService-2"><a href="#2、ICartService-2" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">allCheckCart</span><span class="hljs-params">(Integer isChecked)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl-2"><a href="#3、CartServiceImpl-2" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allCheckCart</span><span class="hljs-params">(Integer isChecked)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    List&lt;CartInfo&gt; cartInfoList = hashOperations.values();<br>    <br>    <span class="hljs-comment">//redisTemplate.opsForHash().values(cartKey);</span><br>    cartInfoList.forEach(item -&gt; &#123;<br>        <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfoUpd</span> <span class="hljs-operator">=</span> hashOperations.get(item.getSkuId().toString());<br>        cartInfoUpd.setIsChecked(isChecked);<br><br>        <span class="hljs-comment">// 更新缓存</span><br>        hashOperations.put(item.getSkuId().toString(), cartInfoUpd);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-清空购物车"><a href="#3-8-清空购物车" class="headerlink" title="3.8 清空购物车"></a>3.8 清空购物车</h2><h3 id="3-8-1-需求说明"><a href="#3-8-1-需求说明" class="headerlink" title="3.8.1 需求说明"></a>3.8.1 需求说明</h3><p>清空购物车功能如图所示：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/clear.gif" alt style="zoom:67%;"> <p><strong>查看接口文档：</strong></p><p>清空购物车接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/clearCart<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-8-2-后端业务接口"><a href="#3-8-2-后端业务接口" class="headerlink" title="3.8.2 后端业务接口"></a>3.8.2 后端业务接口</h3><h4 id="1、CartController-3"><a href="#1、CartController-3" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;清空购物车&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;clearCart&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">clearCart</span><span class="hljs-params">()</span>&#123;<br>    cartService.clearCart();<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService-3"><a href="#2、ICartService-3" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCart</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl-3"><a href="#3、CartServiceImpl-3" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    <span class="hljs-comment">//获取缓存对象</span><br>    redisTemplate.delete(cartKey);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2、商品详情</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章-商品详情"><a href="#第2章-商品详情" class="headerlink" title="第2章 商品详情"></a>第2章 商品详情</h1><h2 id="2-1-商品详情"><a href="#2-1-商品详情" class="headerlink" title="2.1 商品详情"></a>2.1 商品详情</h2><h3 id="2-1-1-需求分析"><a href="#2-1-1-需求分析" class="headerlink" title="2.1.1 需求分析"></a>2.1.1 需求分析</h3><p>需求说明：当点击某一个商品的时候，此时就需要在商品详情页面展示出商品的详情数据，商品详情页所需数据：</p><p>1、商品的基本信息</p><p>2、当前商品sku的基本信息</p><p>3、商品sku最新价格信息</p><p>4、商品详情（详细为图片列表）</p><p>5、商品规格信息</p><p>6、商品库存信息</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/item.gif" alt style="zoom:50%;"><h3 id="2-1-2-接口文档"><a href="#2-1-2-接口文档" class="headerlink" title="2.1.2 接口文档"></a>2.1.2 接口文档</h3><p>商品详情数据接口以及示例数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs json">get  /channel/item/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;productSku&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1_4&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机 黑色 + 8G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;productId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-1_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;salePrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;marketPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2019.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;costPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1599.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑色 + 8G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stockNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;saleNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;product&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category1Id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category2Id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category3Id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;unitName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;个&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sliderUrls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;specValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;auditStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;auditMessage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;审批通过&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category1Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category2Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category3Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;productSkuList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detailsimagesUrlList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;salePrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;marketPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2019.00</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sliderUrlList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-5_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            ...<br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;detailsimagesUrlList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-5_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            ...<br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;specValueList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;valueList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;白色&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;红色&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;黑色&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;颜色&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;valueList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;8G&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;18G&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;内存&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skuStockVo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;availableNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">98</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;saleNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skuSpecValueMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;黑色 + 18G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;红色 + 18G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;白色 + 8G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;白色 + 18G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;黑色 + 8G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;红色 + 8G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-3-获取商品相关信息"><a href="#2-1-3-获取商品相关信息" class="headerlink" title="2.1.3 获取商品相关信息"></a>2.1.3 获取商品相关信息</h3><h4 id="1、远程调用接口开发"><a href="#1、远程调用接口开发" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）SkuPrice</p><p>操作模块：api-product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuPrice</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;skuId&quot;)</span><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-meta">@Schema(description = &quot;售价&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal salePrice;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 市场价</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(description = &quot;市场价&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal marketPrice;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）SkuStockVo</p><p>操作模块：api-product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuStockVo</span><br>&#123;<br>    <span class="hljs-comment">/** 商品ID */</span><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-comment">/** 可用库存数 */</span><br>    <span class="hljs-keyword">private</span> Integer availableNum;<br><br>    <span class="hljs-comment">/** 销量 */</span><br>    <span class="hljs-keyword">private</span> Integer saleNum;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）ProductController</p><p>操作模块：product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;获取商品sku信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getProductSku/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductSku&gt; <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getProductSku(skuId));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getProduct/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getProduct(id));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品sku最新价格信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getSkuPrice/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuPrice(skuId));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品详细信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getProductDetails/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductDetails&gt; <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getProductDetails(id));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品sku规则详细信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getSkuSpecValue/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String, Long&gt;&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuSpecValue(id));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品sku库存信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getSkuStock/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuStockVo&gt; <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuStock(skuId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ProductSku <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId)</span>;<br><br>Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(Long id)</span>;<br><br>SkuPrice <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(Long skuId)</span>;<br><br>ProductDetails <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(Long id)</span>;<br><br>Map&lt;String, Long&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(Long id)</span>;<br><br>SkuStockVo <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(Long skuId)</span>;<br></code></pre></td></tr></table></figure><p>（5）ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ProductSku <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-keyword">return</span> productSkuMapper.selectById(skuId);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> productMapper.selectById(id);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SkuPrice <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;().eq(ProductSku::getId, skuId).select(ProductSku::getSalePrice, ProductSku::getMarketPrice));<br>    <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuPrice</span>();<br>    BeanUtils.copyProperties(productSku, skuPrice);<br>    <span class="hljs-keyword">return</span> skuPrice;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ProductDetails <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> productDetailsMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductDetails&gt;().eq(ProductDetails::getProductId, id));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, Long&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(Long id)</span> &#123;<br>    List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;().eq(ProductSku::getProductId, id).select(ProductSku::getId, ProductSku::getSkuSpec));<br>    <br>    Map&lt;String,Long&gt; skuSpecValueMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    productSkuList.forEach(item -&gt; &#123;<br>        skuSpecValueMap.put(item.getSkuSpec(), item.getId());<br>    &#125;);<br>    <span class="hljs-keyword">return</span> skuSpecValueMap;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SkuStockVo <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-type">SkuStock</span> <span class="hljs-variable">skuStock</span> <span class="hljs-operator">=</span> skuStockMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;SkuStock&gt;().eq(SkuStock::getSkuId, skuId));<br>    <span class="hljs-type">SkuStockVo</span> <span class="hljs-variable">skuStockVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuStockVo</span>();<br>    BeanUtils.copyProperties(skuStock, skuStockVo);<br>    <span class="hljs-keyword">return</span> skuStockVo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义"><a href="#2、openFeign接口定义" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-product</p><p>（1）RemoteProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/product/getProductSku/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductSku&gt; <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getProduct/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getSkuPrice/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getProductDetails/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductDetails&gt; <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getSkuSpecValue/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String, Long&gt;&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getSkuStock/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuStockVo&gt; <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br></code></pre></td></tr></table></figure><p><strong>说明：将product模块Product、ProductDetails实体类移取到api-product模块</strong></p><p>（2）RemoteProductFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;ProductSku&gt; <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品信息失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(Long skuId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku价格失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;ProductDetails&gt; <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品详情失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String, Long&gt;&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku规格失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;SkuStockVo&gt; <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(Long skuId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku库存失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-4-业务接口开发"><a href="#2-1-4-业务接口开发" class="headerlink" title="2.1.4 业务接口开发"></a>2.1.4 业务接口开发</h3><h4 id="1、ItemController"><a href="#1、ItemController" class="headerlink" title="1、ItemController"></a>1、ItemController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;商品详情接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/item&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemService itemService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;商品详情&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;skuId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">item</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long skuId)</span> &#123;<br>        <span class="hljs-keyword">return</span> success(itemService.item(skuId));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ItemVo"><a href="#2、ItemVo" class="headerlink" title="2、ItemVo"></a>2、ItemVo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.channel.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;商品详情对象&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemVo</span> &#123;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品sku信息&quot;)</span><br>   <span class="hljs-keyword">private</span> ProductSku productSku;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品信息&quot;)</span><br>   <span class="hljs-keyword">private</span> Product product;<br><br>   <span class="hljs-meta">@Schema(description = &quot;最新价格信息&quot;)</span><br>   <span class="hljs-keyword">private</span> SkuPrice skuPrice;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品轮播图列表&quot;)</span><br>   <span class="hljs-keyword">private</span> List&lt;String&gt; sliderUrlList;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品详情图片列表&quot;)</span><br>   <span class="hljs-keyword">private</span> List&lt;String&gt; detailsimagesUrlList;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品规格信息&quot;)</span><br>   <span class="hljs-keyword">private</span> JSONArray specValueList;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品库存信息&quot;)</span><br>   <span class="hljs-keyword">private</span> SkuStockVo skuStockVo;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品规格对应商品skuId信息&quot;)</span><br>   <span class="hljs-keyword">private</span> Map&lt;String,Long&gt; skuSpecValueMap;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、IItemService"><a href="#3、IItemService" class="headerlink" title="3、IItemService"></a>3、IItemService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IItemService</span> &#123;<br>    ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、ItemServiceImpl"><a href="#4、ItemServiceImpl" class="headerlink" title="4、ItemServiceImpl"></a>4、ItemServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IItemService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RemoteProductService remoteProductService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span> &#123;<br>        <span class="hljs-type">ItemVo</span> <span class="hljs-variable">itemVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemVo</span>();<br><br>        <span class="hljs-comment">//获取sku信息</span><br>        R&lt;ProductSku&gt; productSkuResult = remoteProductService.getProductSku(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productSkuResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productSkuResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuResult.getData();<br>        itemVo.setProductSku(productSku);<br><br>        <span class="hljs-comment">//获取商品信息</span><br>        R&lt;Product&gt; productResult = remoteProductService.getProduct(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productResult.getData();<br>        itemVo.setProduct(product);<br>        itemVo.setSliderUrlList(Arrays.asList(product.getSliderUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br>        itemVo.setSpecValueList(JSON.parseArray(product.getSpecValue()));<br><br>        <span class="hljs-comment">//获取商品最新价格</span><br>        R&lt;SkuPrice&gt; skuPriceResult = remoteProductService.getSkuPrice(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuPriceResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> skuPriceResult.getData();<br>        itemVo.setSkuPrice(skuPrice);<br><br>        <span class="hljs-comment">//获取商品详情</span><br>        R&lt;ProductDetails&gt; productDetailsResult = remoteProductService.getProductDetails(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productDetailsResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productDetailsResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductDetails</span> <span class="hljs-variable">productDetails</span> <span class="hljs-operator">=</span> productDetailsResult.getData();<br>        itemVo.setDetailsimagesUrlList(Arrays.asList(productDetails.getimagesUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br><br>        <span class="hljs-comment">//获取商品规格对应商品skuId信息</span><br>        R&lt;Map&lt;String, Long&gt;&gt; skuSpecValueResult = remoteProductService.getSkuSpecValue(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuSpecValueResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuSpecValueResult.getMsg());<br>        &#125;<br>        Map&lt;String, Long&gt; skuSpecValueMap = skuSpecValueResult.getData();<br>        itemVo.setSkuSpecValueMap(skuSpecValueMap);<br><br>        <span class="hljs-comment">//获取商品库存信息</span><br>        R&lt;SkuStockVo&gt; skuStockResult = remoteProductService.getSkuStock(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuStockResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuStockResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuStockVo</span> <span class="hljs-variable">skuStockVo</span> <span class="hljs-operator">=</span> skuStockResult.getData();<br>        itemVo.setSkuStockVo(skuStockVo);<br><br>        <span class="hljs-keyword">return</span> itemVo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、接口测试"><a href="#5、接口测试" class="headerlink" title="5、接口测试"></a>5、接口测试</h4><p>测试方向：</p><p>1、后端接口单独测试</p><p>2、配合前端项目测试</p><h2 id="2-2-商品详情页面优化"><a href="#2-2-商品详情页面优化" class="headerlink" title="2.2 商品详情页面优化"></a>2.2 商品详情页面优化</h2><h3 id="2-2-1-思路"><a href="#2-2-1-思路" class="headerlink" title="2.2.1 思路"></a>2.2.1 思路</h3><p>虽然咱们实现了页面需要的功能，但是考虑到该页面是被用户高频访问的，所以性能需要优化。一般一个系统最大的性能瓶颈，就是数据库的io操作。从数据库入手也是调优性价比最高的切入点。</p><p>一般分为两个层面：</p><ul><li>一是提高数据库sql本身的性能</li><li>二是尽量避免直接查询数据库。</li></ul><p>重点要讲的是另外一个层面：尽量避免直接查询数据库。</p><p>解决办法就是：<strong>缓存</strong></p><h3 id="2-2-2-缓存常见问题"><a href="#2-2-2-缓存常见问题" class="headerlink" title="2.2.2 缓存常见问题"></a>2.2.2 缓存常见问题</h3><p>缓存最常见的4个问题： 面试</p><ol><li>缓存穿透</li><li>缓存雪崩</li><li>缓存击穿</li><li>数据一致性</li></ol><p><strong>缓存穿透</strong>: 是指查询一个不存在的数据，由于缓存无法命中，将去查询数据库，但是数据库也无此记录，并且出于容错考虑，我们没有将这次查询的null写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><ul><li><p>解决1 ：空结果也进行缓存，但它的过期时间会很短，最长不超过五分钟，但是不能防止随机穿透。</p></li><li><p>解决2 ：使用布隆过滤器或者Redis的Bitmap来解决随机穿透问题</p></li></ul><p><strong>缓存雪崩</strong>:是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><ul><li><p>解决1：原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li><li><p>解决2：如果单节点宕机，可以采用集群部署方式防止雪崩</p></li></ul><p><strong>缓存击穿</strong>: 是指对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：如果这个key在大量请求同时进来之前正好失效，那么所有对这个key的数据查询都落到db，我们称为缓存击穿。</p><p>与缓存雪崩的区别：</p><ol><li>击穿是一个热点key失效</li><li>雪崩是很多key集体失效</li></ol><ul><li>解决：锁</li></ul><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps2.jpg" alt style="zoom: 50%;">  <p><strong>数据一致性</strong>：在当前环境下，通常我们会首选redis缓存来减轻我们数据库访问压力。但是也会遇到以下这种情况：大量用户来访问我们系统，首先会去查询缓存， 如果缓存中没有数据，则去查询数据库，然后更新数据到缓存中，并且如果数据库中的数据发生了改变则需要同步到redis中，同步过程中需要保证 MySQL与redis数据一致性问题</p><ul><li>解决1：使用延时双删策略</li></ul><p>延时双删策略是一种常见的保证MySQL和Redis数据一致性的方法。其主要流程包括：先删除缓存，然后更新数据库。这个过程完成后，大约在数据库从库更新后再次删除缓存。具体的步骤如下：</p><p>第一步，先执行redis.del(key)操作删除缓存；</p><p>第二步，然后执行写数据库的操作；</p><p>第三步，休眠一段时间（例如500毫秒），根据具体的业务时间来定；</p><p>第四步，再次执行redis.del(key)操作删除缓存。</p><p>延时双删策略通过这种方式尝试达到最终的数据一致性，但是这并不是强一致性，因为MySQL和Redis主从节点数据的同步并不是实时的，所以需要等待一段时间以增强它们的数据一致性。同时，由于读写是并发的，可能出现缓存和数据库数据不一致的问题</p><ul><li>解决2：使用canal解决</li></ul><h2 id="2-3-数据一致性-延时双删策略"><a href="#2-3-数据一致性-延时双删策略" class="headerlink" title="2.3 数据一致性-延时双删策略"></a>2.3 数据一致性-延时双删策略</h2><h3 id="2-3-1-问题分析"><a href="#2-3-1-问题分析" class="headerlink" title="2.3.1 问题分析"></a>2.3.1 问题分析</h3><p>在查询商品详情数据时，为避免频繁io，提高查询效率，在详情数据获取的同时，利用缓存机制，将详情数据存储到redis实现的缓存机制中，但带来效率提升的同时也带来了问题，就是如果在商品修改之后，因为业务数据更新等原因，对于mysql中商品原数据进行了修改，将导致redis中缓存数据和mysql中原始数据不一致的问题，这里可以使用<strong>延迟双删</strong>来保证缓存与数据库数据一致性！</p><h3 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h3><p>在ProductServiceImpl类的修改商品方法添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(Product product)</span> &#123;<br>    <span class="hljs-comment">//1 删除缓存</span><br>    List&lt;Long&gt; skuIdList =  product.getProductSkuList().stream()<br>        .map(ProductSku::getId).collect(Collectors.toList());<br>    skuIdList.forEach(skuId -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:&quot;</span> + skuId;<br>        <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>    &#125;);<br><br>    <span class="hljs-comment">//2 之前的业务代码，执行更新商品操作.....</span><br><br><br>    <span class="hljs-comment">//3 休眠一段时间</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <br>    <span class="hljs-comment">//4 再次执行操作删除缓存</span><br>    skuIdList.forEach(skuId -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:&quot;</span> + skuId;<br>        <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-分布式锁"><a href="#2-4-分布式锁" class="headerlink" title="2.4 分布式锁"></a>2.4 分布式锁</h2><h3 id="2-4-1-本地锁的局限性"><a href="#2-4-1-本地锁的局限性" class="headerlink" title="2.4.1 本地锁的局限性"></a>2.4.1 本地锁的局限性</h3><p>之前，我们学习过synchronized 及lock锁，这些锁都是本地锁。接下来写一个案例，演示本地锁的问题</p><h4 id="1、编写测试代码"><a href="#1、编写测试代码" class="headerlink" title="1、编写测试代码"></a>1、编写测试代码</h4><p>在<code>product</code>中新建TestController中添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;测试接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;testLock&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>        testService.testLock();<br>        <span class="hljs-keyword">return</span> AjaxResult.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestService</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.service.impl;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestService</span> &#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 查询Redis中的num值</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String)<span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>      <span class="hljs-comment">// 没有该值return</span><br>      <span class="hljs-keyword">if</span> (StringUtils.isBlank(value))&#123;<br>         <span class="hljs-keyword">return</span> ;<br>      &#125;<br>      <span class="hljs-comment">// 有值就转成成int</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>      <span class="hljs-comment">// 把Redis中的num值+1</span><br>      <span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：通过reids客户端设置num&#x3D;0</p><p>重启<code>product</code>服务</p><h4 id="2、使用工具测试"><a href="#2、使用工具测试" class="headerlink" title="2、使用工具测试"></a>2、使用工具测试</h4><p>第一步：安装jmeter工具</p><p>第二步：配置网关并重启网关</p><p>配置本地锁测试接口为白名单</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 不校验白名单</span><br><span class="hljs-attr">ignore:</span><br>  <span class="hljs-attr">whites:</span><br>   <span class="hljs-string">...省略</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/product/test/**</span><br></code></pre></td></tr></table></figure><p><strong>重启网关</strong></p><p>第三步：测试</p><p><strong>注意：将Windows防火墙关闭！！！！！！！！！！</strong></p><ul><li>使用jmeter工具压力测试：并发100</li></ul><p>查看Redis中的结果：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-9578.png"></p><h4 id="3、使用本地锁"><a href="#3、使用本地锁" class="headerlink" title="3、使用本地锁"></a>3、使用本地锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// 查询Redis中的num值</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String)<span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>   <span class="hljs-comment">// 没有该值return</span><br>   <span class="hljs-keyword">if</span> (StringUtils.isBlank(value))&#123;<br>      <span class="hljs-keyword">return</span> ;<br>   &#125;<br>   <span class="hljs-comment">// 有值就转成成int</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>   <span class="hljs-comment">// 把Redis中的num值+1</span><br>   <span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用jmeter工具压力测试：并发100</li></ul><h4 id="4、本地锁问题演示"><a href="#4、本地锁问题演示" class="headerlink" title="4、本地锁问题演示"></a>4、本地锁问题演示</h4><p>接下来<code>product</code>启动9205 9215 9225三个运行实例：</p><p>第一步：拷贝配置</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528122174.png" alt style="zoom:50%;"><p>第二步：修改端口</p><p><strong>选择vm options</strong></p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528275403.png" alt style="zoom:50%;"><p><strong>添加命令行参数:</strong> </p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dserver</span>.<span class="hljs-keyword">port</span>=9215<br></code></pre></td></tr></table></figure><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528467470.png" alt style="zoom:50%;"><p><strong>同样的，再复制并配置一个实例，端口为9525</strong></p><p>第三步：启动product的三个实例</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528694339.png" alt style="zoom:67%;"><p>第四步：通过网关压力测试本地锁</p><p>以上测试，可以发现：</p><p>本地锁只能锁住同一工程内的资源，在分布式系统里面都存在局限性。</p><p>此时需要分布式锁。</p><h3 id="2-4-2-分布式锁实现的解决方案"><a href="#2-4-2-分布式锁实现的解决方案" class="headerlink" title="2.4.2 分布式锁实现的解决方案"></a>2.4.2 分布式锁实现的解决方案</h3><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li>基于数据库实现分布式锁</li><li>基于缓存（ Redis等）</li><li>基于Zookeeper</li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li>高性能：Redis最高</li><li>可靠性：zookeeper最高</li></ol><p>因为Redis具备高性能、高可用、高并发的特性，这里，我们就基于Redis实现分布式锁。</p><p> 分布式锁的关键是**多进程共享的内存标记(锁)**，因此只要我们在Redis中放置一个这样的标记(数据)就可以了。不过在实现过程中，不要忘了我们需要实现下列目标：</p><ul><li><strong>多进程可见</strong>：多进程可见，否则就无法实现分布式效果</li><li><strong>避免死锁</strong>：死锁的情况有很多，我们要思考各种异常导致死锁的情况，保证锁可以被释放</li><li><strong>排它</strong>：同一时刻，只能有一个进程获得锁</li><li><strong>高可用</strong>：避免锁服务宕机或处理好宕机的补救措施(redis集群架构：1.主从复制 2.哨兵 3.cluster集群)</li></ul><p>分布式锁使用的逻辑如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">尝试获取锁<br>成功：执行业务代码    <br>执行业务  <br><span class="hljs-keyword">try</span>&#123;<br>获取锁<br>业务代码-宕机<br>&#125; <span class="hljs-keyword">catch</span>()&#123;<br><br>&#125;<span class="hljs-keyword">finally</span>&#123; <br>释放锁<br>&#125;<br> 失败：等待；<br></code></pre></td></tr></table></figure><h3 id="2-4-3-使用Redis实现分布式锁"><a href="#2-4-3-使用Redis实现分布式锁" class="headerlink" title="2.4.3 使用Redis实现分布式锁"></a>2.4.3 使用Redis实现分布式锁</h3><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps10.jpg" alt style="zoom:67%;"><ol><li>多个客户端同时获取锁（setnx）</li><li>获取成功，执行业务逻辑：从db获取数据，放入缓存，执行完成释放锁（del）</li><li>其他客户端等待重试</li></ol><h4 id="1、分布式锁初版"><a href="#1、分布式锁初版" class="headerlink" title="1、分布式锁初版"></a>1、分布式锁初版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 采用SpringDataRedis实现分布式锁</span><br><span class="hljs-comment"> * 原理：执行业务方法前先尝试获取锁（setnx存入key val），如果获取锁成功再执行业务代码，业务执行完毕后将锁释放(del key)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-string">&quot;lock&quot;</span>);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-comment">//获取锁成功，执行业务代码</span><br>        <span class="hljs-comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>        <span class="hljs-comment">//2.如果值为空则非法直接返回即可</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(value)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.对num值进行自增加一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br><br>        <span class="hljs-comment">//4.将锁释放</span><br>        stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>);<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            <span class="hljs-built_in">this</span>.testLock();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启，服务集群，通过网关压力测试：</p><p>基本实现。</p><p><strong>问题：</strong>setnx刚好获取到锁，业务逻辑出现异常，导致锁无法释放</p><p>解决：设置过期时间，自动释放锁。</p><h4 id="2、优化之设置锁的过期时间"><a href="#2、优化之设置锁的过期时间" class="headerlink" title="2、优化之设置锁的过期时间"></a>2、优化之设置锁的过期时间</h4><p>设置过期时间有两种方式：</p><ol><li>首先想到通过expire设置过期时间（缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放）</li><li>在set时指定过期时间（推荐）</li></ol><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps13-17271638201541.jpg" alt style="zoom:67%;"> <p>设置过期时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS); <br></code></pre></td></tr></table></figure><p>压力测试肯定也没有问题。自行测试</p><p>问题：可能会释放其他服务器的锁。</p><p>场景：如果业务逻辑的执行时间是7s。执行流程如下</p><ol><li><p>index1业务逻辑没执行完，3秒后锁被自动释放。</p></li><li><p>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p></li><li><p>index3获取到锁，执行业务逻辑</p><p>. index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。</p></li></ol><p>最终等于没锁的情况。</p><p>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p><h4 id="3、优化之UUID防误删"><a href="#3、优化之UUID防误删" class="headerlink" title="3、优化之UUID防误删"></a>3、优化之UUID防误删</h4><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps15.jpg" alt style="zoom:67%;"> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, uuid, <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-comment">//获取锁成功，执行业务代码</span><br>        <span class="hljs-comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>        <span class="hljs-comment">//2.如果值为空则非法直接返回即可</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(value)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.对num值进行自增加一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br><br>        <span class="hljs-comment">//4.将锁释放</span><br>        <span class="hljs-keyword">if</span>(uuid.equals((String)stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;lock&quot;</span>))) &#123;<br>            stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            <span class="hljs-built_in">this</span>.testLock();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>问题：</strong>删除操作缺乏原子性。</p><p>场景：</p><p>​1、index1执行删除时，查询到的lock值确实和uuid相等</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps17.jpg" alt style="zoom:67%;"> <p>​2、index1执行删除前，lock刚好过期时间已到，被Redis自动释放，在Redis中没有了锁。</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps18.jpg" alt style="zoom: 67%;"> <p>​3、index2获取了lock,index2线程获取到了cpu的资源，开始执行方法</p><p>​4、index1执行删除，此时会把index2的lock删除。</p><p>index1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，开始执行</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps19.jpg" alt style="zoom:67%;"> <p>删除了index2的锁！</p><h4 id="4、优化之LUA脚本保证删除的原子性"><a href="#4、优化之LUA脚本保证删除的原子性" class="headerlink" title="4、优化之LUA脚本保证删除的原子性"></a>4、优化之LUA脚本保证删除的原子性</h4><p>释放锁的LUA脚本：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>redis java客户端使用LUA脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过execute可以执行LUA脚本，参数1：脚本字符串，参数2：脚本返回值类型,参数3：keys列表，参数4：argv列表</span><br>stringRedisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;(script , Boolean.class),list,args...)<br></code></pre></td></tr></table></figure><p>使用LUA脚本优化分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 采用SpringDataRedis实现分布式锁</span><br><span class="hljs-comment"> * 原理：执行业务方法前先尝试获取锁（setnx存入key val），如果获取锁成功再执行业务代码，业务执行完毕后将锁释放(del key)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br>    <span class="hljs-comment">//问题：锁可能存在线程间相互释放</span><br>    <span class="hljs-comment">//Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(&quot;lock&quot;, &quot;lock&quot;, 10, TimeUnit.SECONDS);</span><br>    <span class="hljs-comment">//解决：锁值设置为uuid</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, uuid, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br><br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-comment">//获取锁成功，执行业务代码</span><br>        <span class="hljs-comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>        <span class="hljs-comment">//2.如果值为空则非法直接返回即可</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(value)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.对num值进行自增加一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br><br>        <span class="hljs-comment">//4.将锁释放 判断uuid</span><br>        <span class="hljs-comment">//问题：删除操作缺乏原子性。</span><br>        <span class="hljs-comment">//if(uuid.equals(stringRedisTemplate.opsForValue().get(&quot;lock&quot;)))&#123; //线程一：判断是满足是当前线程锁的值</span><br>        <span class="hljs-comment">//    //条件满足，此时锁正好到期，redis锁自动释放了线程2获取锁成功，线程1将线程2的锁删除</span><br>        <span class="hljs-comment">//    stringRedisTemplate.delete(&quot;lock&quot;);</span><br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//解决：redis执行lua脚本保证原子，lua脚本执行会作为一个整体执行</span><br><br>        <span class="hljs-comment">//执行脚本参数 参数1：脚本对象封装lua脚本，参数二：lua脚本中需要key参数（KEYS[i]）  参数三：lua脚本中需要参数值 ARGV[i]</span><br>        <span class="hljs-comment">//4.1 先创建脚本对象 DefaultRedisScript泛型脚本语言返回值类型 Long 0：失败 1：成功</span><br>        DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        <span class="hljs-comment">//4.2设置脚本文本</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>                <span class="hljs-string">&quot;then\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>                <span class="hljs-string">&quot;else\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>                <span class="hljs-string">&quot;end&quot;</span>;<br>        redisScript.setScriptText(script);<br>        <span class="hljs-comment">//4.3 设置响应类型</span><br>        redisScript.setResultType(Long.class);<br>        stringRedisTemplate.execute(redisScript, Arrays.asList(<span class="hljs-string">&quot;lock&quot;</span>), uuid);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//睡眠</span><br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            <span class="hljs-comment">//自旋重试</span><br>            <span class="hljs-built_in">this</span>.testLock();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-4-分布式锁总结"><a href="#2-4-4-分布式锁总结" class="headerlink" title="2.4.4 分布式锁总结"></a>2.4.4 分布式锁总结</h3><p>为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下几个条件：</p><ul><li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p></li><li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li><li><p>加锁和解锁必须具有原子性。</p></li></ul><h3 id="2-4-5-改造获取商品详情信息"><a href="#2-4-5-改造获取商品详情信息" class="headerlink" title="2.4.5 改造获取商品详情信息"></a>2.4.5 改造获取商品详情信息</h3><p>操作模块：<code>product</code></p><p>操作类：com.product.service.impl.ProductServiceImpl#getProductSku</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 根据SkuID查询SKU商品信息</span><br><span class="hljs-comment"> * @param skuId</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ProductSku <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//1.优先从缓存中获取数据</span><br>        <span class="hljs-comment">//1.1 构建业务数据Key 形式：前缀+业务唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:&quot;</span> + skuId;<br>        <span class="hljs-comment">//1.2 查询Redis获取业务数据</span><br>        <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> (ProductSku) redisTemplate.opsForValue().get(dataKey);<br>        <span class="hljs-comment">//1.3 命中缓存则直接返回</span><br>        <span class="hljs-keyword">if</span> (productSku != <span class="hljs-literal">null</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;命中缓存，直接返回，线程ID：&#123;&#125;，线程名称：&#123;&#125;&quot;</span>, Thread.currentThread().getId(), Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> productSku;<br>        &#125;<br>        <span class="hljs-comment">//2.尝试获取分布式锁（set k v ex nx可能获取锁失败）</span><br>        <span class="hljs-comment">//2.1 构建锁key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:lock:&quot;</span> + skuId;<br>        <span class="hljs-comment">//2.2 采用UUID作为线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockVal</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//2.3 利用Redis提供set nx ex 获取分布式锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(lockKey, lockVal, <span class="hljs-number">5</span>, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-comment">//3.获取锁成功执行业务,将查询业务数据放入缓存Redis</span><br>            log.info(<span class="hljs-string">&quot;获取锁成功：&#123;&#125;，线程名称：&#123;&#125;&quot;</span>, Thread.currentThread().getId(), Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                productSku = <span class="hljs-built_in">this</span>.getProductSkuFromDB(skuId);<br>                <span class="hljs-type">long</span> <span class="hljs-variable">ttl</span> <span class="hljs-operator">=</span> productSku == <span class="hljs-literal">null</span> ? <span class="hljs-number">1</span> * <span class="hljs-number">60</span> : <span class="hljs-number">10</span> * <span class="hljs-number">60</span>;<br>                redisTemplate.opsForValue().set(dataKey, productSku, ttl, TimeUnit.SECONDS);<br>                <span class="hljs-keyword">return</span> productSku;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//4.业务执行完毕释放锁</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">scriptText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>                    <span class="hljs-string">&quot;then\n&quot;</span> +<br>                    <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>                    <span class="hljs-string">&quot;else\n&quot;</span> +<br>                    <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>                    <span class="hljs-string">&quot;end&quot;</span>;<br>                DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>                redisScript.setScriptText(scriptText);<br>                redisScript.setResultType(Long.class);<br>                redisTemplate.execute(redisScript, Arrays.asList(lockKey), lockVal);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//5.获取锁失败则自旋（业务要求必须执行）</span><br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            log.error(<span class="hljs-string">&quot;获取锁失败，自旋：&#123;&#125;，线程名称：&#123;&#125;&quot;</span>, Thread.currentThread().getId(), Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getProductSku(skuId);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">//兜底处理方案：Redis服务有问题，将业务数据获取自动从数据库获取</span><br>        log.error(<span class="hljs-string">&quot;[商品服务]查询商品信息异常：&#123;&#125;&quot;</span>, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getProductSkuFromDB(skuId);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> ProductSku <span class="hljs-title function_">getProductSkuFromDB</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-keyword">return</span> productSkuMapper.selectById(skuId);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-Redis的Bitmap解决缓存穿透"><a href="#2-5-Redis的Bitmap解决缓存穿透" class="headerlink" title="2.5 Redis的Bitmap解决缓存穿透"></a>2.5 Redis的Bitmap解决缓存穿透</h2><h3 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1 概述"></a>2.5.1 概述</h3><p>Redis 的 Bitmap（位图）是一种特殊的字符串数据类型，它利用字符串类型键（key）来存储一系列连续的二进制位（bits），每个位可以独立地表示一个布尔值（0 或 1）。这种数据结构非常适合用于存储和操作大量二值状态的数据，尤其在需要高效空间利用率和特定位操作场景中表现出色。</p><h3 id="2-5-2-常见操作命令"><a href="#2-5-2-常见操作命令" class="headerlink" title="2.5.2 常见操作命令"></a>2.5.2 常见操作命令</h3><ul><li><code>setbit key offset value</code>：设置或清除指定偏移量上的位（bit）。<code>offset</code> 是从0开始的位索引，<code>value</code> 可以为 0 或 1。</li><li><code>getbit key offset</code>：返回指定偏移量上的位值。</li></ul><h3 id="2-5-3-整合"><a href="#2-5-3-整合" class="headerlink" title="2.5.3 整合"></a>2.5.3 整合</h3><h4 id="1、初始化数据"><a href="#1、初始化数据" class="headerlink" title="1、初始化数据"></a>1、初始化数据</h4><p>在<code>product</code> 模块的启动类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCustomConfig</span><br><span class="hljs-meta">@EnableRyFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProductApplication.class,args);<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductSkuMapper productSkuMapper;<br><br>    <span class="hljs-comment">//商品功能</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:product:data&quot;</span>;<br>        <span class="hljs-comment">//查询mysql里面商品skuId</span><br>        List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="hljs-literal">null</span>);<br>        productSkuList.forEach(item -&gt; &#123;<br>            <span class="hljs-comment">//为了测试，添加到redis里面</span><br>            redisTemplate.opsForValue().setBit(key,item.getId(),<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、sku加入Bitmap"><a href="#2、sku加入Bitmap" class="headerlink" title="2、sku加入Bitmap"></a>2、sku加入Bitmap</h4><p>商品上架时将数据添加到Bitmap中</p><p>操作：ProductServiceImpl.updateStatus方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStatus</span><span class="hljs-params">(Long id, Integer status)</span> &#123;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    product.setId(id);<br>    <span class="hljs-keyword">if</span>(status == <span class="hljs-number">1</span>) &#123;<br>        product.setStatus(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:product:data&quot;</span>;<br>        List&lt;ProductSku&gt; productSkuList = productSkuMapper<br>                .selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;()<br>                        .eq(ProductSku::getProductId, id));<br>        productSkuList.forEach(item -&gt; &#123;<br>            redisTemplate.opsForValue().setBit(key,item.getId(),<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        product.setStatus(-<span class="hljs-number">1</span>);<br>    &#125;<br>    productMapper.updateById(product);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、sku详情页添加Bitmap"><a href="#3、sku详情页添加Bitmap" class="headerlink" title="3、sku详情页添加Bitmap"></a>3、sku详情页添加Bitmap</h4><p>操作模块：<code>channel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">//远程调用商品微服务接口之前 提前知道用户访问商品SKUID是否存在于bitmap中</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:product:data&quot;</span>;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().getBit(key, skuId);<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            log.error(<span class="hljs-string">&quot;用户查询商品sku不存在：&#123;&#125;&quot;</span>, skuId);<br>            <span class="hljs-comment">//查询数据不存在直接返回空对象</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;用户查询商品sku不存在&quot;</span>);<br>        &#125;<br> ...   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-异步编排"><a href="#2-6-异步编排" class="headerlink" title="2.6 异步编排"></a>2.6 异步编排</h2><h3 id="2-6-1-问题分析"><a href="#2-6-1-问题分析" class="headerlink" title="2.6.1 .问题分析"></a>2.6.1 .问题分析</h3><p>问题：查询商品详情页的逻辑非常复杂，数据的获取都需要远程调用，必然需要花费更多的时间。</p><p>假如商品详情页的每个查询，需要如下标注的时间才能完成</p><ol><li>获取sku的基本信息1s<br>. 获取商品信息 1.5s<br>. 商品最新价格 0.5s</li></ol><p>那么，用户需要3s后才能看到商品详情页的内容。很显然是不能接受的。如果有多个线程同时完成这4步操作，也许只需要1.5s即可完成响应。</p><p><code>CompletableFuture</code>可以使原本串行执行的代码，变为并行执行，提高代码执行速度。 </p><h3 id="2-6-2-优化商品详情页"><a href="#2-6-2-优化商品详情页" class="headerlink" title="2.6.2 优化商品详情页"></a>2.6.2 优化商品详情页</h3><h4 id="1、ThreadPoolConfig"><a href="#1、ThreadPoolConfig" class="headerlink" title="1、ThreadPoolConfig"></a>1、ThreadPoolConfig</h4><p>全局自定义线程池配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.configure;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ThreadPoolExecutor <span class="hljs-title function_">threadPoolExecutor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//当前系统可用的处理器数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">processorsCount</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                processorsCount * <span class="hljs-number">2</span>,<br>                processorsCount * <span class="hljs-number">2</span>,<br>                <span class="hljs-number">0</span>,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">200</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-comment">//new ThreadPoolExecutor.CallerRunsPolicy()</span><br>                <span class="hljs-comment">//自定义拒绝策略</span><br>                (runnable, executor) -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">200</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    &#125;<br>                    <span class="hljs-comment">//再次将拒绝任务提交给线程池执行</span><br>                    executor.submit(runnable);<br>                &#125;<br>        );<br>        <span class="hljs-comment">//线程池创建,核心线程同时创建</span><br>        <span class="hljs-comment">//threadPoolExecutor.prestartCoreThread();</span><br>        threadPoolExecutor.prestartAllCoreThreads();<br>        <span class="hljs-keyword">return</span> threadPoolExecutor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ItemServiceImpl"><a href="#2、ItemServiceImpl" class="headerlink" title="2、ItemServiceImpl"></a>2、ItemServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ThreadPoolExecutor threadPoolExecutor;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">//远程调用商品微服务接口之前 提前知道用户访问商品SKUID是否存在与布隆过滤器</span><br>    RBloomFilter&lt;Object&gt; bloomFilter = redissonClient.getBloomFilter(<span class="hljs-string">&quot;sku:bloom:filter&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!bloomFilter.contains(skuId)) &#123;<br>        <span class="hljs-comment">//查询数据不存在直接返回空对象</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;用户查询商品sku不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">ItemVo</span> <span class="hljs-variable">itemVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemVo</span>();<br>    <span class="hljs-comment">//获取sku信息</span><br>    CompletableFuture&lt;ProductSku&gt; skuCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        R&lt;ProductSku&gt; productSkuResult = remoteProductService.getProductSku(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productSkuResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productSkuResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuResult.getData();<br>        itemVo.setProductSku(productSku);<br>        <span class="hljs-keyword">return</span> productSku;<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品信息</span><br>    CompletableFuture&lt;Void&gt; productComCompletableFuture = skuCompletableFuture.thenAcceptAsync(productSku -&gt; &#123;<br>        R&lt;Product&gt; productResult = remoteProductService.getProduct(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productResult.getData();<br>        itemVo.setProduct(product);<br>        itemVo.setSliderUrlList(Arrays.asList(product.getSliderUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br>        itemVo.setSpecValueList(JSON.parseArray(product.getSpecValue()));<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品最新价格</span><br>    CompletableFuture&lt;Void&gt; skuPriceCompletableFuture = CompletableFuture.runAsync(() -&gt; &#123;<br>        R&lt;SkuPrice&gt; skuPriceResult = remoteProductService.getSkuPrice(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuPriceResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> skuPriceResult.getData();<br>        itemVo.setSkuPrice(skuPrice);<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品详情</span><br>    CompletableFuture&lt;Void&gt; productDetailsComCompletableFuture = skuCompletableFuture.thenAcceptAsync(productSku -&gt; &#123;<br>        R&lt;ProductDetails&gt; productDetailsResult = remoteProductService.getProductDetails(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productDetailsResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productDetailsResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductDetails</span> <span class="hljs-variable">productDetails</span> <span class="hljs-operator">=</span> productDetailsResult.getData();<br>        itemVo.setDetailsimagesUrlList(Arrays.asList(productDetails.getimagesUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品规格对应商品skuId信息</span><br>    CompletableFuture&lt;Void&gt; skuSpecValueComCompletableFuture = skuCompletableFuture.thenAcceptAsync(productSku -&gt; &#123;<br>        R&lt;Map&lt;String, Long&gt;&gt; skuSpecValueResult = remoteProductService.getSkuSpecValue(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuSpecValueResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuSpecValueResult.getMsg());<br>        &#125;<br>        Map&lt;String, Long&gt; skuSpecValueMap = skuSpecValueResult.getData();<br>        itemVo.setSkuSpecValueMap(skuSpecValueMap);<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品库存信息</span><br>    CompletableFuture&lt;Void&gt; skuStockVoComCompletableFuture = CompletableFuture.runAsync(() -&gt; &#123;<br>        R&lt;SkuStockVo&gt; skuStockResult = remoteProductService.getSkuStock(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuStockResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuStockResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuStockVo</span> <span class="hljs-variable">skuStockVo</span> <span class="hljs-operator">=</span> skuStockResult.getData();<br>        itemVo.setSkuStockVo(skuStockVo);<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//x.组合以上七个异步任务</span><br>    CompletableFuture.allOf(<br>            skuCompletableFuture,<br>            productComCompletableFuture,<br>            skuPriceCompletableFuture,<br>            productDetailsComCompletableFuture,<br>            skuSpecValueComCompletableFuture,<br>            skuStockVoComCompletableFuture<br>    ).join();<br>    <span class="hljs-keyword">return</span> itemVo;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1、项目搭建</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-项目搭建"><a href="#第1章-项目搭建" class="headerlink" title="第1章 项目搭建"></a>第1章 项目搭建</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>本项目是基于<code>若依</code>微服务版本框架开发的一个电商系统，项目包含平台管理端与手机H5端。有一套完善的电商业务流程：商品管理、商品详情、购物车、单点登录、订单、支付、库存管理等，其中覆盖了分布式文件系统、高速缓存、消息队列等多种业务场景和技术实现。</p><h3 id="1-1-1-为什么我们要讲电商？"><a href="#1-1-1-为什么我们要讲电商？" class="headerlink" title="1.1.1 为什么我们要讲电商？"></a>1.1.1 为什么我们要讲电商？</h3><p>因为就互联网平台来说，电商网站有很多典型的特征：</p><ul><li>访问量大</li><li>数据量大</li><li>有一定的业务复杂性</li><li>涉及支付考虑一定安全性{幂等性}</li></ul><h3 id="1-1-2-电商的主要模式"><a href="#1-1-2-电商的主要模式" class="headerlink" title="1.1.2 电商的主要模式"></a>1.1.2 电商的主要模式</h3><p><strong>1、B2B（Business to Business）</strong></p><p>  B2B （ Business to Business）是指进行电子商务交易的供需双方都是商家（或企业、公司），她（他）们使用了互联网的技术或各种商务网络平台，完成商务交易的过程。电子商务是现代 B2B marketing的一种具体主要的表现形式。</p><p>  案例：阿里巴巴1688</p><p><strong>2、C2C（Consumer to Customer）</strong></p><p>  C2C即 Customer（Consumer） to Customer（Consumer），意思就是消费者个人间的电子商务行为。比如一个消费者有一台电脑，通过网络进行交易，把它出售给另外一个消费者，此种交易类型就称为C2C电子商务。</p><p>案例：淘宝、易趣、瓜子二手车、闲鱼</p><p><strong>3、B2C（Business-to-Customer）</strong></p><p>  B2C是Business-to-Customer的缩写，而其中文简称为“商对客”。“商对客”是电子商务的一种模式，也就是通常说的直接面向消费者销售产品和服务商业零售模式。这种形式的电子商务一般以网络零售业为主，主要借助于互联网开展在线销售活动。B2C即企业通过互联网为消费者提供一个新型的购物环境——网上商店，消费者通过网络在网上购物、网上支付等消费行为。</p><p>  案例：唯品会、乐蜂网</p><p> <strong>4、B2B2C（Business to Business to Consumer）</strong>  </p><p>  B2B2C是一种电子商务类型的网络购物商业模式，B是BUSINESS的简称，C是CUSTOMER的简称，第一个B指的是商品或服务的供应商，第二个B指的是从事电子商务的企业，C则是表示消费者。</p><p>案例：京东商城、天猫商城</p><p><strong>5、C2B（Consumer to Business）</strong></p><p>  C2B（Consumer to Business，即消费者到企业），是互联网经济时代新的商业模式。这一模式改变了原有生产者（企业和机构）和消费者的关系，是一种消费者贡献价值（Create Value）， 企业和机构消费价值（Consume Value）。</p><p>  C2B模式和我们熟知的供需模式（DSM, Demand SupplyModel）恰恰相反，<strong>真正的C2B 应该先有消费者需求产生而后有企业生产，即先有消费者提出需求，后有生产企业按需求组织生产</strong>。通常情况为消费者根据自身需求定制产品和价格，或主动参与产品设计、生产和定价，产品、价格等彰显消费者的个性化需求，生产企业进行定制化生产。</p><p>案例：猪八戒   </p><p><strong>6、O2O（Online To Offline）</strong></p><p>  O2O即Online To Offline（在线离线&#x2F;线上到线下），是指将线下的商务机会与互联网结合，让互联网成为线下交易的平台，这个概念最早来源于美国。O2O的概念非常广泛，既可涉及到线上，又可涉及到线下,可以通称为O2O。主流商业管理课程均对O2O这种新型的商业模式有所介绍及关注。</p><p>  案例：美团、饿了么</p><h3 id="1-1-3-我们能从这个项目中学到什么？"><a href="#1-1-3-我们能从这个项目中学到什么？" class="headerlink" title="1.1.3 我们能从这个项目中学到什么？"></a>1.1.3 我们能从这个项目中学到什么？</h3><h4 id="1、温故知新"><a href="#1、温故知新" class="headerlink" title="1、温故知新"></a>1、温故知新</h4><p>尚品甄选作为一个前后端分离的项目，可以巩固以前的前端+后端知识，同时加入了新的技术点与技术点应用场景，<strong>掌握电商业务流程</strong></p><p>尚品甄选分为后台系统和前台系统。</p><p><strong>后台系统功能</strong>:(用户登录、系统管理员列表、角色管理、权限规则管理、商品管理、商品分类、商品规格、…)</p><p><strong>前台系统功能</strong>: (首页商品分类查询、分类模块：分类查询、根据分类查询商品数据、登录功能、用户收货地址管理、购物车模块、订单模块…)</p><h4 id="2、核心技术"><a href="#2、核心技术" class="headerlink" title="2、核心技术"></a>2、核心技术</h4><ul><li><strong>SpringBoot</strong>：简化新Spring应用的初始搭建以及开发过程；</li><li><strong>SpringCloud</strong>：基于Spring Boot实现的云原生应用开发工具，SpringCloud使用的技术：（Spring Cloud Gateway、Spring Cloud Alibaba Nacos、Spring Cloud Alibaba Sentinel、Spring Cloud Task和Spring Cloud Feign等）</li><li><strong>SpringBoot+SpringCloudAlibaba(Nacos，Sentinel)+Cloud OpenFeign</strong></li><li>MyBatis-Plus：持久层框架，也依赖mybatis</li><li>Redis：内存做缓存  </li><li>Redisson：基于redis的Java驻内存数据网格 - 框架；操作redis的框架</li><li>RabbitMQ：消息中间件；大型分布式项目是标配；分布式事务最终一致性</li><li>ThreadPoolExecutor：线程池来实现异步操作，提高效率</li><li>Knife4J：接口文档工具</li><li>MinIO（私有化对象存储集群）：分布式文件存储 类似于OSS（公有）</li><li>支付宝支付：alipay.com</li><li>MySQL：关系型数据库</li><li>Lombok: 实体类的中get&#x2F;set 生成的jar包</li><li>Ngrok&#x2F;natapp：内网穿透</li><li>Docker：容器化技术;  生产环境Redis（运维人员）；快速搭建环境Docker run</li></ul><p>前端技术栈</p><ul><li>Vue 3： Vue.js 的最新版本</li><li>Element Plus：一个基于 Vue.js 3.0 的组件库，它是 Element UI 的升级版本</li><li>Vite：一种新型前端构建工具</li><li>Node.js： JavaScript 运行环境</li></ul><h4 id="3、需要掌握的解决方案"><a href="#3、需要掌握的解决方案" class="headerlink" title="3、需要掌握的解决方案"></a>3、需要掌握的解决方案</h4><p>微服务架构、缓存解决方案、分布式事务、后台管理、文件管理系统等</p><p>课前说明：</p><ul><li><p>建议内存16个G以上</p></li><li><p>培养自己独立阅读代码的能力</p></li><li><p>帮助大家分析 解构业务需求</p></li><li><p>新的知识点，难点敲</p></li><li><p>重复的功能 自己开发</p></li></ul><h2 id="1-2-若依框架简介"><a href="#1-2-若依框架简介" class="headerlink" title="1.2 若依框架简介"></a>1.2 若依框架简介</h2><p>官网：<a href="https://doc.ruoyi.vip/">https://doc.ruoyi.vip/</a></p><p>微服务版本文档：<a href="https://doc.ruoyi.vip/ruoyi-cloud/">https://doc.ruoyi.vip/ruoyi-cloud/</a></p><h3 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h3><p><strong>RuoYi-Cloud</strong> 是一个 Java EE 分布式微服务架构平台，基于经典技术组合（Spring Boot、Spring Cloud &amp; Alibaba、Vue、Element），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源。</p><h3 id="1-2-2-架构图"><a href="#1-2-2-架构图" class="headerlink" title="1.2.2 架构图"></a>1.2.2 架构图</h3><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/fe8a5f53_1915710.png"></p><h3 id="1-2-3-在线体验"><a href="#1-2-3-在线体验" class="headerlink" title="1.2.3 在线体验"></a>1.2.3 在线体验</h3><ul><li><p>若依官网：<a href="http://ruoyi.vip/">http://ruoyi.vip(opens new window)</a></p></li><li><p>演示地址：<a href="http://cloud.ruoyi.vip/">http://cloud.ruoyi.vip(opens new window)</a></p></li><li><p>代码下载：<a href="https://gitee.com/y_project/RuoYi-Cloud">https://gitee.com/y_project/RuoYi-Cloud</a></p></li></ul><h2 id="1-3-准备软件环境"><a href="#1-3-准备软件环境" class="headerlink" title="1.3 准备软件环境"></a>1.3 准备软件环境</h2><p>请参考《尚硅谷_尚品甄选项目_附录1_准备软件环境.md》</p><h2 id="1-4-搭建项目环境"><a href="#1-4-搭建项目环境" class="headerlink" title="1.4 搭建项目环境"></a>1.4 搭建项目环境</h2><h3 id="1-4-1-服务端"><a href="#1-4-1-服务端" class="headerlink" title="1.4.1 服务端"></a>1.4.1 服务端</h3><h4 id="1、下载若依源码"><a href="#1、下载若依源码" class="headerlink" title="1、下载若依源码"></a>1、下载若依源码</h4><p>下载”RuoYi-Cloud 微服务版“</p><p><a href="https://ruoyi.vip/">https://ruoyi.vip/</a></p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708329697454.png" alt style="zoom:67%;"><p>当前RuoYi-Cloud 微服务版本：3.6.3</p><p>查看项目版本如图：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708329877689.png"></p><p>项目版本jdk为：1.8，spring-boot为：2.7.18，不是我们预期的版本，因此我们给改项目做了升级，升级后的项目模板在：资料&#x2F;项目模板&#x2F;parent.zip</p><p>升级后的项目版本如图：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708330112547.png"></p><h4 id="2、导入项目"><a href="#2、导入项目" class="headerlink" title="2、导入项目"></a>2、导入项目</h4><p>第一步：解压课件资料</p><p>解压课件资料&#x2F;项目模板下的<code>parent.rar</code>到工作空间</p><p>第二步：修改maven配置</p><p>修改maven配置为自己安装的</p><p>第三步：导入项目源码</p><p>导入项目源码到idea，如图：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708330563136.png" alt style="zoom:67%;"><p>项目模块介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">com.     <br>├── gateway         <span class="hljs-comment">// 网关模块 [8080]</span><br>├── auth            <span class="hljs-comment">// 认证中心 [9200]</span><br>├── api             <span class="hljs-comment">// 接口模块</span><br>│       └── api-system                        <span class="hljs-comment">// 系统接口</span><br>├── common          <span class="hljs-comment">// 通用模块</span><br>│       └── common-core                         <span class="hljs-comment">// 核心模块</span><br>│       └── common-datascope                    <span class="hljs-comment">// 权限范围</span><br>│       └── common-datasource                   <span class="hljs-comment">// 多数据源</span><br>│       └── common-log                          <span class="hljs-comment">// 日志记录</span><br>│       └── common-redis                        <span class="hljs-comment">// 缓存服务</span><br>│       └── common-security                     <span class="hljs-comment">// 安全模块</span><br>├── modules         <span class="hljs-comment">// 业务模块</span><br>│       └── system                              <span class="hljs-comment">// 系统模块 [9201]</span><br>│       └── gen                                 <span class="hljs-comment">// 代码生成 [9202]</span><br>│       └── job                                 <span class="hljs-comment">// 定时任务 [9203]</span><br>│       └── file                                <span class="hljs-comment">// 文件服务 [9300]</span><br>├── ui              <span class="hljs-comment">// 前端框架 [80]</span><br>├── visual          <span class="hljs-comment">// 图形化管理模块</span><br>│       └── monitor                             <span class="hljs-comment">// 监控中心 [9100]</span><br>├──pom.xml                <span class="hljs-comment">// 公共依赖</span><br></code></pre></td></tr></table></figure><h4 id="3、导入数据库表"><a href="#3、导入数据库表" class="headerlink" title="3、导入数据库表"></a>3、导入数据库表</h4><p>导入数据库脚本：资料&#x2F;sql&#x2F;system.sql【系统管理相关数据库表】</p><p>导入数据库脚本：资料&#x2F;sql&#x2F;sql【尚品甑选业务相关数据库表】</p><h4 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h4><p>第一步：导入nacos配置文件</p><ul><li><p>启动nacos，访问nacos控制台：http:&#x2F;&#x2F;虚拟机IP:8848&#x2F;nacos&#x2F;</p></li><li><p>在nacos控制台：配置管理 -&gt;  配置列表 导入配置文件</p></li><li><p>配置文件资源：资料&#x2F;nacos配置&#x2F;DEFAULT_GROUP.zip</p></li></ul><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709186383216.png" alt style="zoom:80%;"><ul><li>导入成功后，如图：</li></ul><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709187073010.png" alt style="zoom:50%;"><p>第二步：修改nacos配置</p><p>说明：</p><p>​    涉及数据源的地方都要修改，mysql、redis、minio等等，地址需要修改为自己虚拟机的地址</p><p><strong>例如：</strong> system-dev.yml   </p><p>​使用了redis和mysql，需要修改连接地址</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709187274932.png"></p><p><strong>参考上面 检查并修改其他配置文件中的连接地址</strong></p><p>第三步：运行项目模块</p><p>修改各个模块nacos配置中心、注册中心地址、sentinel地址</p><p>启动没有先后顺序</p><p>GatewayApplication （网关模块 必须）</p><p>AuthApplication （认证模块 必须）</p><p>SystemApplication （系统模块 必须）<br>…【其他模块】</p><p><strong>注意：</strong>定时任务模块不要启动，未导入表，未使用</p><h3 id="1-4-2-前端"><a href="#1-4-2-前端" class="headerlink" title="1.4.2 前端"></a>1.4.2 前端</h3><h4 id="1、前端项目部署"><a href="#1、前端项目部署" class="headerlink" title="1、前端项目部署"></a>1、前端项目部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">node版本 node-v20.11.1-x64</span><br>node -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装yarn</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装yarn出现问题，可以忽略校验</span><br>npm config set strict-ssl false<br>npm install -g yarn<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目目录</span><br>cd ui<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>yarn --registry=https://registry.npmmirror.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>yarn dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建测试环境 yarn build:stage</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建生产环境 yarn build:prod</span><br></code></pre></td></tr></table></figure><h4 id="2、前端项目修改"><a href="#2、前端项目修改" class="headerlink" title="2、前端项目修改"></a>2、前端项目修改</h4><p>第一步：修改图表</p><ul><li><p>拷贝课件 <code> 资料\图标\favicon.ico</code> 到ui项目 <code>public</code>目录下替换默认图标</p></li><li><p>修改ui项目 <code>index.html</code>中的标题图标默认使用上面的图标</p></li><li><p>修改ui项目<code>src\layout\components\Sidebar\Logo.vue</code>中使用的菜单栏图标</p><p><strong>注意：</strong>一共两处</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/favicon.ico&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-logo&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709192362693.png" alt style="zoom:50%;"></li></ul><p>第二步：修改项目标题</p><ul><li><p>修改登录页<code>src\views\login.vue</code>页面中的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>尚品甄选后台管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改标签和菜单栏标题:</p><p>修改<code>.env.development</code>和 <code>.env.production</code>文件中的标题</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">尚品甄选管理系统</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709192763831.png" alt style="zoom:50%;"></li></ul><h2 id="1-5-若依-源码分析"><a href="#1-5-若依-源码分析" class="headerlink" title="1.5 若依-源码分析"></a>1.5 若依-源码分析</h2><p>参考<code>系统管理-&gt; 角色管理</code> </p><h3 id="1-5-1-前端请求"><a href="#1-5-1-前端请求" class="headerlink" title="1.5.1  前端请求"></a>1.5.1  前端请求</h3><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709252394421.png"></p><p><strong>返回的分页数据：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-29 04:42:28&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;超级管理员&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;delFlag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;超级管理员&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleSort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dataScope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-29 04:42:28&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;普通角色&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;delFlag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;普通角色&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;common&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleSort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dataScope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;查询成功&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-2-后端分析"><a href="#1-5-2-后端分析" class="headerlink" title="1.5.2 后端分析"></a>1.5.2 后端分析</h3><p><code>modules下的system模块</code>处理系统管理相关请求，包括角色的CRUD</p><h4 id="1、SysRoleController"><a href="#1、SysRoleController" class="headerlink" title="1、SysRoleController"></a>1、SysRoleController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/role&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysRoleController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> <span class="hljs-comment">//BaseController提供了一些通用方法</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysRoleService roleService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysUserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysDeptService deptService;<br><br>    <span class="hljs-meta">@RequiresPermissions(&quot;system:role:list&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span> <span class="hljs-comment">//查询角色的分页数据</span><br>    <span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">list</span><span class="hljs-params">(SysRole role)</span><span class="hljs-comment">//role用来pojo入参获取查询参数</span><br>    &#123;<br>        startPage(); <span class="hljs-comment">//调用BaseController中的分页方法</span><br>        List&lt;SysRole&gt; list = roleService.selectRoleList(role); <span class="hljs-comment">//执行分页查询</span><br>        <span class="hljs-keyword">return</span> getDataTable(list);<span class="hljs-comment">//调用BaseController中的方法封装分页数据</span><br>    &#125;<br>    <span class="hljs-comment">//.....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、BaseController"><a href="#2、BaseController" class="headerlink" title="2、BaseController"></a>2、BaseController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将前台传递过来的日期格式的字符串，自动转化为Date类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@InitBinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinder</span><span class="hljs-params">(WebDataBinder binder)</span><br>    &#123;<br>        <span class="hljs-comment">// Date 类型转换</span><br>        binder.registerCustomEditor(Date.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyEditorSupport</span>()<br>                                    &#123;<br>                                        <span class="hljs-meta">@Override</span><br>                                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAsText</span><span class="hljs-params">(String text)</span><br>                                        &#123;<br>                                            setValue(DateUtils.parseDate(text));<br>                                        &#125;<br>                                    &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置请求分页数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPage</span><span class="hljs-params">()</span><br>    &#123;<br>        PageUtils.startPage();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理分页的线程变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearPage</span><span class="hljs-params">()</span><br>    &#123;<br>        PageUtils.clearPage();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应请求分页数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br>    <span class="hljs-keyword">protected</span> TableDataInfo <span class="hljs-title function_">getDataTable</span><span class="hljs-params">(List&lt;?&gt; list)</span><br>    &#123;<br>        <span class="hljs-type">TableDataInfo</span> <span class="hljs-variable">rspData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableDataInfo</span>();<br>        rspData.setCode(HttpStatus.SUCCESS);<br>        rspData.setRows(list);<br>        rspData.setMsg(<span class="hljs-string">&quot;查询成功&quot;</span>);<br>        rspData.setTotal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>(list).getTotal());<br>        <span class="hljs-keyword">return</span> rspData;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(String message)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回失败消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回失败消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(String message)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">warn</span><span class="hljs-params">(String message)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.warn(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应返回结果</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rows 影响行数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> AjaxResult <span class="hljs-title function_">toAjax</span><span class="hljs-params">(<span class="hljs-type">int</span> rows)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> rows &gt; <span class="hljs-number">0</span> ? AjaxResult.success() : AjaxResult.error();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应返回结果</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> result 结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> AjaxResult <span class="hljs-title function_">toAjax</span><span class="hljs-params">(<span class="hljs-type">boolean</span> result)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> result ? success() : error();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PageUtils</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageUtils</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageHelper</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置请求分页数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPage</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">PageDomain</span> <span class="hljs-variable">pageDomain</span> <span class="hljs-operator">=</span> TableSupport.buildPageRequest();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> pageDomain.getPageNum();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> pageDomain.getPageSize();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderBy</span> <span class="hljs-operator">=</span> SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">reasonable</span> <span class="hljs-operator">=</span> pageDomain.getReasonable();<br>        PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理分页的线程变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearPage</span><span class="hljs-params">()</span><br>    &#123;<br>        PageHelper.clearPage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、AjaxResult"><a href="#3、AjaxResult" class="headerlink" title="3、AjaxResult"></a>3、AjaxResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxResult</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 状态码 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CODE_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;code&quot;</span>;<br><br>    <span class="hljs-comment">/** 返回内容 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MSG_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;msg&quot;</span>;<br><br>    <span class="hljs-comment">/** 数据对象 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATA_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AjaxResult</span><span class="hljs-params">()</span><br>    &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AjaxResult</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(CODE_TAG, code);<br>        <span class="hljs-built_in">super</span>.put(MSG_TAG, msg);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AjaxResult</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(CODE_TAG, code);<br>        <span class="hljs-built_in">super</span>.put(MSG_TAG, msg);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotNull(data))<br>        &#123;<br>            <span class="hljs-built_in">super</span>.put(DATA_TAG, data);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(<span class="hljs-string">&quot;操作成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功数据</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(<span class="hljs-string">&quot;操作成功&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(HttpStatus.SUCCESS, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">warn</span><span class="hljs-params">(String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.warn(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">warn</span><span class="hljs-params">(String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(HttpStatus.WARN, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(<span class="hljs-string">&quot;操作失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(HttpStatus.ERROR, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(code, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否为成功消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuccess</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.equals(HttpStatus.SUCCESS, <span class="hljs-built_in">this</span>.get(CODE_TAG));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否为警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWarn</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.equals(HttpStatus.WARN, <span class="hljs-built_in">this</span>.get(CODE_TAG));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否为错误消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isError</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.equals(HttpStatus.ERROR, <span class="hljs-built_in">this</span>.get(CODE_TAG));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方便链式调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、SysRoleServiceImpl"><a href="#4、SysRoleServiceImpl" class="headerlink" title="4、SysRoleServiceImpl"></a>4、SysRoleServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysRoleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISysRoleService</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysRoleMapper roleMapper;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件分页查询角色数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> role 角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 角色数据集合信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@DataScope(deptAlias = &quot;d&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;SysRole&gt; <span class="hljs-title function_">selectRoleList</span><span class="hljs-params">(SysRole role)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> roleMapper.selectRoleList(role);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、SysRoleMapper"><a href="#5、SysRoleMapper" class="headerlink" title="5、SysRoleMapper"></a>5、SysRoleMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SysRoleMapper</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件分页查询角色数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> role 角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 角色数据集合信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;SysRole&gt; <span class="hljs-title function_">selectRoleList</span><span class="hljs-params">(SysRole role)</span>;<br>    <span class="hljs-comment">//..........省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、SysRoleMapper-xml"><a href="#6、SysRoleMapper-xml" class="headerlink" title="6、SysRoleMapper.xml"></a>6、SysRoleMapper.xml</h4><p>省略</p><h2 id="1-6-若依-权限控制"><a href="#1-6-若依-权限控制" class="headerlink" title="1.6 若依-权限控制"></a>1.6 若依-权限控制</h2><h3 id="1-6-1-介绍"><a href="#1-6-1-介绍" class="headerlink" title="1.6.1 介绍"></a>1.6.1 介绍</h3><p> <code>权限控制</code>主要目的是保护系统的安全性和完整性,防止未经授权的用户获取敏感信息、执行非法操作或对系统进行恶意操作 。</p><p>常见的权限控制框架有SpringSecurity和Shiro。</p><p>若依的权限管理是通过<code>RBAC</code>（Role-based Access Control 基于角色的访问控制）模型自己设计的。</p><p>RBAC模型将权限控制分为角色管理和权限管理两个部分。在若依中，角色是指对系统的一类用户或操作者的定义，而权限是指对系统中某个资源或操作的访问控制。通过为每个角色分配相应的权限，可以实现对系统的全面管理和控制。</p><p>具体来说，若依的权限管理包括以下几个方面：</p><ol><li><code>菜单管理</code>：通过对系统菜单进行管理，可以控制用户在系统中能够访问的页面和功能。</li><li><code>按钮权限</code>：在系统中，某些操作需要特定的权限才能进行，例如删除、修改等操作。通过对按钮权限的控制，可以限制用户对系统的访问和操作。</li><li><code>数据权限</code>：在某些情况下，需要根据用户的角色或部门来限制其对数据的访问。通过数据权限的设置，可以实现对数据的细粒度控制。</li><li><code>API接口权限</code>：在若依中，API也可以通过权限的方式进行控制。通过对API的权限进行管理，可以限制用户对API的访问和使用。</li></ol><h3 id="1-6-2-数据库表结构设计"><a href="#1-6-2-数据库表结构设计" class="headerlink" title="1.6.2 数据库表结构设计"></a>1.6.2 数据库表结构设计</h3><p>在数据库表结构方面，若依采用了RBAC模型的设计。其中，主要包括以下表：</p><ul><li><code>sys_menu</code>：存储系统菜单信息，包括菜单ID、菜单名称、访问路径、菜单类型等字段。</li><li><code>sys_role</code>：存储系统角色信息，包括角色ID、角色名称、角色标识、角色描述等字段。</li><li><code>sys_user</code>：存储系统用户信息，包括用户ID、用户名、密码、昵称、邮箱、电话等字段。</li><li><code>sys_role_menu</code>：存储角色和菜单之间的关联关系，包括角色ID和菜单ID两个字段。</li><li><code>sys_user_role</code>：存储用户和角色之间的关联关系，包括用户ID和角色ID两个字段。</li></ul><p>通过这些表的设计，可以实现对系统中菜单、角色和用户的管理。同时，通过角色和菜单之间的关联关系，可以实现对菜单访问权限的控制。通过用户和角色之间的关联关系，可以实现对用户访问权限的控制。</p><h3 id="1-6-3-菜单管理"><a href="#1-6-3-菜单管理" class="headerlink" title="1.6.3 菜单管理"></a>1.6.3 菜单管理</h3><p><strong>目录、菜单和按钮的区别</strong></p><p>在若依（RuoYi）中，菜单和目录是两个不同的概念，它们之间的区别如下：</p><p><strong>1.目录（Directory）：</strong></p><p>目录是用来组织和分类菜单的容器。目录本身没有功能，它只是一个容器，可以包含若干个菜单。目录通常是一个抽象的概念，用于将一组相关的菜单组织在一起。</p><p>在若依中，目录是以“系统管理”、“运营管理”等大模块的方式组织菜单的，用于区分不同的功能模块。目录通常以左侧的菜单树的形式展现，用户可以通过点击不同的目录来展开或收缩对应的菜单列表。</p><p><strong>2.菜单（Menu）：</strong></p><p>菜单是具有一定功能的操作项，通常是一组具有相同功能的页面或功能点的集合。每个菜单通常对应一个页面或者一个功能模块。</p><p>在若依中，菜单通常是以左侧的树形菜单的形式展现，用户可以通过点击不同的菜单来跳转到对应的页面或功能模块。每个菜单都有一个唯一的标识符，通常以URL的形式表示。</p><p><strong>3.按钮（Button）：</strong></p><p>按钮是指菜单中的操作按钮，用于触发一些具体的操作。在若依中，按钮通常是与表格或表单等组件配合使用的，用于进行数据的增删改查等操作。按钮通常会与权限控制结合起来，只有拥有相应权限的用户才能看到并使用该按钮。</p><p>总的来说，目录、菜单、按钮是若依系统中的三种不同的概念。目录是为了方便管理菜单和模块，菜单是系统的核心功能模块，按钮是菜单中的具体操作按钮。在实际应用中，它们通常会结合起来，形成一个完整的用户界面和操作流程。</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/59c605682ca0437d9bc62a392e73a34a.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/cf1ea32c22424d769deb356246e031f5.png"></p><h3 id="1-6-4-菜单权限"><a href="#1-6-4-菜单权限" class="headerlink" title="1.6.4 菜单权限"></a>1.6.4 菜单权限</h3><p>在若依中，实现不同用户看到不同的菜单可以通过以下步骤实现：</p><ol><li>在数据库中维护菜单的权限信息，可以为每个菜单设置一个权限标识。</li><li>在用户登录系统时，将该用户所拥有的菜单权限信息从数据库中获取出来。</li><li>根据用户的菜单权限信息动态生成菜单，使用户只能看到其拥有权限的菜单。</li></ol><p>用户登录之后会请求后端的SysMenuController#getRouters接口获取登录用户可访问的菜单数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> m.menu_id, m.parent_id, m.menu_name, m.path, m.component, m.`query`, m.visible, m.status, ifnull(m.perms,<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> perms, m.is_frame, m.is_cache, m.menu_type, m.icon, m.order_num, m.create_time<br><span class="hljs-keyword">from</span> sys_menu m<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_role_menu rm <span class="hljs-keyword">on</span> m.menu_id <span class="hljs-operator">=</span> rm.menu_id<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_user_role ur <span class="hljs-keyword">on</span> rm.role_id <span class="hljs-operator">=</span> ur.role_id<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_role ro <span class="hljs-keyword">on</span> ur.role_id <span class="hljs-operator">=</span> ro.role_id<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_user u <span class="hljs-keyword">on</span> ur.user_id <span class="hljs-operator">=</span> u.user_id<br><span class="hljs-keyword">where</span> u.user_id <span class="hljs-operator">=</span> #&#123;userId&#125; <span class="hljs-keyword">and</span> m.menu_type <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>) <span class="hljs-keyword">and</span> m.status <span class="hljs-operator">=</span> <span class="hljs-number">0</span>  <span class="hljs-keyword">AND</span> ro.status <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> m.parent_id, m.order_num<br></code></pre></td></tr></table></figure><p>菜单类型（M目录 C菜单 F按钮）；菜单状态（0显示 1隐藏）</p><p>前端会根据该接口返回的数据渲染出不同的菜单。</p><h3 id="1-6-5-api接口权限"><a href="#1-6-5-api接口权限" class="headerlink" title="1.6.5 api接口权限"></a>1.6.5 api接口权限</h3><p><strong>配置方法</strong></p><p>每一个按钮基本上都会对应着一个后端的接口，前端会根据权限标志显示或者隐藏按钮，但是如果用户不点击按钮，直接通过http请求工具请求后端咋办？所以接口权限也是要有的，该权限和按钮上权限完全一致。</p><p>若依系统实现了这部分功能，实现模块：common-security，比如，用户管理页面中的修改用户按钮对应的后端接口长这个样子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:user:edit&quot;)</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> SysUser user)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> toAjax();<br>&#125;<br></code></pre></td></tr></table></figure><p>和其对应的前端按钮权限标志一样</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/066f308ddde54ab3b03e30509542e516.png"></p><p>前端控制</p><p>v-hasPermi&#x3D;”[‘system:user:edit’]”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-button link type=&quot;primary&quot; icon=&quot;Edit&quot; @click=&quot;handleUpdate(scope.row)&quot; <br>           v-hasPermi=&quot;[&#x27;system:user:edit&#x27;]&quot;&gt;&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><h4 id="1、后台权限注解"><a href="#1、后台权限注解" class="headerlink" title="1、后台权限注解"></a>1、后台权限注解</h4><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708478479379.png"></p><h5 id="RequiresLogin"><a href="#RequiresLogin" class="headerlink" title="@RequiresLogin"></a>@RequiresLogin</h5><p><code>@RequiresLogin</code>注解用于配置接口要求用户必须登录才可访问，它没有参数</p><p>示例1: 以下代码表示必须拥有<code>admin</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresLogin(&quot;admin&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getInfo</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RequiresPermissions"><a href="#RequiresPermissions" class="headerlink" title="@RequiresPermissions"></a>@RequiresPermissions</h5><p><code>@RequiresPermissions</code>注解用于配置接口要求用户拥有某（些）权限才可访问，它拥有两个参数</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String[]</td><td>权限列表</td></tr><tr><td>logical</td><td>Logical</td><td>权限之间的判断关系，默认为Logical.AND</td></tr></tbody></table><p>示例1: 以下代码表示必须拥有<code>system:user:add</code>权限才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:user:add&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span> <br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2: 以下代码表示必须拥有<code>system:user:add</code>和<code>system:user:edit</code>权限才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&#123;&quot;system:user:add&quot;, &quot;system:user:edit&quot;&#125;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例3: 以下代码表示需要拥有<code>system:user:add</code>或<code>system:user:edit</code>权限才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(value = &#123;&quot;system:user:add&quot;, &quot;system:user:edit&quot;&#125;, logical = Logical.OR)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RequiresRoles"><a href="#RequiresRoles" class="headerlink" title="@RequiresRoles"></a>@RequiresRoles</h5><p><code>@RequiresRoles</code>注解用于配置接口要求用户拥有某（些）角色才可访问，它拥有两个参数</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String[]</td><td>角色列表</td></tr><tr><td>logical</td><td>Logical</td><td>角色之间的判断关系，默认为Logical.AND</td></tr></tbody></table><p>示例1: 以下代码表示必须拥有<code>admin</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&quot;admin&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2: 以下代码表示必须拥有<code>admin</code>和<code>common</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&#123;&quot;admin&quot;, &quot;common&quot;&#125;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例3: 以下代码表示需要拥有<code>admin</code>或<code>common</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(value = &#123;&quot;admin&quot;, &quot;common&quot;&#125;, logical = Logical.OR)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、实现原理"><a href="#2、实现原理" class="headerlink" title="2、实现原理"></a>2、实现原理</h4><p>实现原理：一个拦截器【HeaderInterceptor】 + 一个AOP【PreAuthorizeAspect】</p><p>springboot 拦截器与AOP执行顺序：</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/2701366-20220126215341038-1195230476.png"></p><p>拦截器HeaderInterceptor负责解析用户token信息，并将解析出的用户信息存入<strong>ThreadLocal</strong>中，然后PreAuthorizeAspect负责解析权限注解，判断当前用户是否拥有注解权限。</p><h2 id="1-7-若依-系统日志"><a href="#1-7-若依-系统日志" class="headerlink" title="1.7 若依-系统日志"></a>1.7 若依-系统日志</h2><p>实现模块：common-log</p><p>在实际开发中，对于某些关键业务，我们通常需要记录该操作的内容，一个操作调一次记录方法，每次还得去收集参数等等，会造成大量代码重复。 我们希望代码中只有业务相关的操作，在项目中使用注解来完成此项功能。</p><p>在需要被记录日志的<code>controller</code>方法上添加<code>@Log</code>注解，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log(title = &quot;用户管理&quot;, businessType = BusinessType.INSERT)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addSave</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-1-注解参数说明"><a href="#1-7-1-注解参数说明" class="headerlink" title="1.7.1 注解参数说明"></a>1.7.1 注解参数说明</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>String</td><td>空</td><td>操作模块</td></tr><tr><td>businessType</td><td>BusinessType</td><td>OTHER</td><td>操作功能（<code>OTHER</code>其他、<code>INSERT</code>新增、<code>UPDATE</code>修改、<code>DELETE</code>删除、<code>GRANT</code>授权、<code>EXPORT</code>导出、<code>IMPORT</code>导入、<code>FORCE</code>强退、<code>GENCODE</code>生成代码、<code>CLEAN</code>清空数据）</td></tr><tr><td>operatorType</td><td>OperatorType</td><td>MANAGE</td><td>操作人类别（<code>OTHER</code>其他、<code>MANAGE</code>后台用户、<code>MOBILE</code>手机端用户）</td></tr><tr><td>isSaveRequestData</td><td>boolean</td><td>true</td><td>是否保存请求的参数</td></tr><tr><td>isSaveResponseData</td><td>boolean</td><td>true</td><td>是否保存响应的参数</td></tr><tr><td>excludeParamNames</td><td>String[]</td><td>{}</td><td>排除指定的请求参数</td></tr></tbody></table><h3 id="1-7-2-自定义操作功能"><a href="#1-7-2-自定义操作功能" class="headerlink" title="1.7.2 自定义操作功能"></a>1.7.2 自定义操作功能</h3><p>1、在<code>BusinessType</code>中新增业务操作类型如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试</span><br><span class="hljs-comment"> */</span><br>TEST,<br></code></pre></td></tr></table></figure><p>2、在<code>sys_dict_data</code>字典数据表中初始化操作业务类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">insert into sys_dict_data <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">25</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;测试&#x27;</span>,     <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;sys_oper_type&#x27;</span>,       <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-string">&#x27;primary&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2018-03-16 11-33-00&#x27;</span>, <span class="hljs-string">&#x27;ry&#x27;</span>, <span class="hljs-string">&#x27;2018-03-16 11-33-00&#x27;</span>, <span class="hljs-string">&#x27;测试操作&#x27;</span>)</span>;<br></code></pre></td></tr></table></figure><p>3、在<code>Controller</code>中使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log(title = &quot;测试标题&quot;, businessType = BusinessType.TEST)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">test</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>操作日志记录逻辑实现代码[LogAspect.java]<br>登录系统（系统管理-操作日志）可以查询操作日志列表和详细信息。</p><h2 id="1-8-项目数据模型"><a href="#1-8-项目数据模型" class="headerlink" title="1.8 项目数据模型"></a>1.8 项目数据模型</h2><h3 id="1-8-1-用户"><a href="#1-8-1-用户" class="headerlink" title="1.8.1 用户"></a>1.8.1 用户</h3><p><strong>user</strong></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103330960.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726100450588-17219594939428.png"></p><h3 id="1-8-2-商品"><a href="#1-8-2-商品" class="headerlink" title="1.8.2 商品"></a>1.8.2 商品</h3><h4 id="1、核心概念"><a href="#1、核心概念" class="headerlink" title="1、核心概念"></a>1、核心概念</h4><p><strong>（1）商品规格介绍</strong></p><p>在电商项目中，商品规格指的是商品属性、型号、尺寸、颜色等具体描述商品特点和属性的标准化信息。</p><p>以手机为例子，它的规格可能包括以下几个方面：</p><ul><li><p>操作系统：Android、iOS、HarmonyOS 等。</p></li><li><p>屏幕尺寸：5.5 吋、6.7 吋等。</p></li><li><p>分辨率：1920x1080、2960x1440、2532x1170 等。</p></li><li><p>运行内存：6GB、8GB、12GB 等。</p></li><li><p>存储容量：64GB、128GB、256GB 等。</p></li><li><p>摄像头：单摄、双摄、四摄等。</p></li><li><p>电池容量：3500mAh、4500mAh、5000mAh 等。</p></li></ul><p>以T恤衫举例子，它的规格可能包括以下几个方面：</p><ul><li><p>颜色：白色</p></li><li><p>尺码：S、M、L、XL等</p></li><li><p>款式：圆领、V领、印花等</p></li></ul><p><strong>（2）SPU和SKU</strong></p><ul><li><strong>SPU</strong></li></ul><p>SPU &#x3D; Standard Product Unit （标准化产品单元）, SPU是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的<strong>集合</strong>，该<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>描述了一个产品的特性。通俗点讲就是泛指一类商品，这种商品具有相同的属性。</p><ul><li><strong>SKU</strong></li></ul><p>SKU &#x3D; stock keeping unit(库存量单位) SKU即库存进出计量的单位（买家购买、商家进货、供应商备货、工厂生产都是依据SKU进行的）。是和具体的属性值有直接的关联关系。SKU是<strong>物理上不可分割的最小存货单元。</strong>也就是说一款商品，可以<strong>根据SKU来确定具体的货物存量。</strong></p><p>以手机为例，假设有一款名为 “XPhone” 的手机品牌，它推出了一款型号为 “X10” 的手机。这款手机一共有以下几种属性：</p><ul><li><p>颜色：黑色、白色、金色</p></li><li><p>存储容量：64GB、128GB</p></li><li><p>内存大小：4GB、6GB</p></li></ul><p>那么，<strong>“X10” 这款手机就是商品的 SPU，它包含的属性。根据不同的属性组合，可以形成多个不同的 SKU。</strong>如下所示：</p><table><thead><tr><th align="center">SPU</th><th align="center">SKU</th><th align="center">颜色</th><th align="center">存储容量</th><th align="center">内存大小</th></tr></thead><tbody><tr><td align="center">X10</td><td align="center">SKU1</td><td align="center">黑色</td><td align="center">64GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU2</td><td align="center">白色</td><td align="center">64GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU3</td><td align="center">金色</td><td align="center">64GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU4</td><td align="center">黑色</td><td align="center">128GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU5</td><td align="center">白色</td><td align="center">128GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU6</td><td align="center">金色</td><td align="center">128GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU7</td><td align="center">黑色</td><td align="center">64GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU8</td><td align="center">白色</td><td align="center">64GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU9</td><td align="center">金色</td><td align="center">64GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU10</td><td align="center">黑色</td><td align="center">128GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU11</td><td align="center">白色</td><td align="center">128GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU12</td><td align="center">金色</td><td align="center">128GB</td><td align="center">6GB</td></tr></tbody></table><p>再以衣服为例，假设有一家服装网店推出了一款名为 “A衬衫” 的衣服。这款衣服一共有以下几种属性：</p><ul><li><p>尺寸：S、M、L、XL</p></li><li><p>颜色：白色、黑色、灰色、蓝色</p></li></ul><p>那么，“A衬衫” 这款衣服就是这个商品的 SPU，它包含所有属性。而根据不同的属性组合，可以形成多个不同的 SKU。如下所示：</p><table><thead><tr><th align="center">SPU</th><th align="center">SKU</th><th align="center">尺寸</th><th align="center">颜色</th></tr></thead><tbody><tr><td align="center">A衬衫</td><td align="center">SKU1</td><td align="center">S</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU2</td><td align="center">M</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU3</td><td align="center">L</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU4</td><td align="center">XL</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU5</td><td align="center">S</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU6</td><td align="center">M</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU7</td><td align="center">L</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU8</td><td align="center">XL</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU9</td><td align="center">S</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU10</td><td align="center">M</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU11</td><td align="center">L</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU12</td><td align="center">XL</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU13</td><td align="center">S</td><td align="center">蓝色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU14</td><td align="center">M</td><td align="center">蓝色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU15</td><td align="center">L</td><td align="center">蓝色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU16</td><td align="center">XL</td><td align="center">蓝色</td></tr></tbody></table><h4 id="2、表结构"><a href="#2、表结构" class="headerlink" title="2、表结构"></a>2、表结构</h4><p><strong>product</strong></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103420674.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726101727253.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726101802666.png"></p><h3 id="1-8-3-订单"><a href="#1-8-3-订单" class="headerlink" title="1.8.3 订单"></a>1.8.3 订单</h3><p><strong>order</strong></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103452574.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726101954204.png"></p><h3 id="1-8-4-支付"><a href="#1-8-4-支付" class="headerlink" title="1.8.4 支付"></a>1.8.4 支付</h3><p><strong>payment</strong></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103509551.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726102104506.png"></p><h3 id="1-8-5-其他"><a href="#1-8-5-其他" class="headerlink" title="1.8.5 其他"></a>1.8.5 其他</h3><p><strong>system</strong></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103528064.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726102935701.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726102558088.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103243276.png"></p><h2 id="1-9-后台功能演示"><a href="#1-9-后台功能演示" class="headerlink" title="1.9 后台功能演示"></a>1.9 后台功能演示</h2><h3 id="1-9-1-品牌管理"><a href="#1-9-1-品牌管理" class="headerlink" title="1.9.1 品牌管理"></a>1.9.1 品牌管理</h3><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729104745252.png"></p><h3 id="1-9-2-分类管理"><a href="#1-9-2-分类管理" class="headerlink" title="1.9.2 分类管理"></a>1.9.2 分类管理</h3><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729104824522.png"></p><h3 id="1-9-3-商品管理"><a href="#1-9-3-商品管理" class="headerlink" title="1.9.3 商品管理"></a>1.9.3 商品管理</h3><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729104903667.png"></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729105010959.png"></p><h2 id="1-10-代码推送到远程仓库"><a href="#1-10-代码推送到远程仓库" class="headerlink" title="1.10 代码推送到远程仓库"></a>1.10 代码推送到远程仓库</h2><h3 id="1-10-1-新建远程仓库"><a href="#1-10-1-新建远程仓库" class="headerlink" title="1.10.1 新建远程仓库"></a>1.10.1 新建远程仓库</h3><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257136041.png" alt style="zoom: 50%;"><h3 id="1-10-2-提交代码推送到远程仓库"><a href="#1-10-2-提交代码推送到远程仓库" class="headerlink" title="1.10.2 提交代码推送到远程仓库"></a>1.10.2 提交代码推送到远程仓库</h3><h4 id="1、查看gitee远程仓库地址"><a href="#1、查看gitee远程仓库地址" class="headerlink" title="1、查看gitee远程仓库地址"></a>1、查看gitee远程仓库地址</h4><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257242191.png" alt style="zoom:50%;"><h4 id="2、参考上图推送代码到远程仓库"><a href="#2、参考上图推送代码到远程仓库" class="headerlink" title="2、参考上图推送代码到远程仓库"></a>2、参考上图推送代码到远程仓库</h4><p><strong>初始化本地仓库：</strong></p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257399703.png" alt style="zoom:50%;"><p><strong>提交到本地仓库：</strong></p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257590932.png" alt style="zoom:50%;"><p><strong>推送到远程仓库：</strong></p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257844638.png" alt style="zoom:50%;"><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257927073.png" alt style="zoom:50%;">]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9、延迟队列</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><ul><li><p>延迟队列存储的对象肯定是对应的延时消息，所谓”延时消息”是指当消息被发送以后，并不想让消费者立即拿到消息，而是等待指定时间后，消费者才拿到这个消息进行消费。</p></li><li><p>场景：在订单系统中，一个用户下单之后通常有30分钟的时间进行支付，如果30分钟之内没有支付成功，那么这个订单将进行取消处理。这时就可以使用延时队列将订单信息发送到延时队列。</p></li><li><p>需求：</p></li></ul><ol><li><p>下单后，30分钟未支付，取消订单，回滚库存。</p></li><li><p>新用户注册成功30分钟后，发送短信问候。</p></li></ol><ul><li>实现：</li></ul><p>使用延迟队列实现</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240806095835083.png"></p><p>很可惜，在RabbitMQ中并未提供延迟队列功能</p><p>我们可以采用以下方案实现：</p><p>方案1：借助消息超时时间+死信队列</p><p>方案2：给RabbitMQ安装插件</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240806100015448.png"></p><p>注：使用消息超时时间+死信队列，前面已经演示过了</p><h1 id="2-延迟插件"><a href="#2-延迟插件" class="headerlink" title="2 延迟插件"></a>2 延迟插件</h1><h2 id="一、插件简介"><a href="#一、插件简介" class="headerlink" title="一、插件简介"></a>一、插件简介</h2><ul><li>官网地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange</a></li><li>延迟极限：最多两天</li></ul><h2 id="二、插件安装"><a href="#二、插件安装" class="headerlink" title="二、插件安装"></a>二、插件安装</h2><h3 id="1、确定卷映射目录"><a href="#1、确定卷映射目录" class="headerlink" title="1、确定卷映射目录"></a>1、确定卷映射目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker inspect rabbitmq<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;Mounts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;volume&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rabbitmq-plugin&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/rabbitmq-plugin/_data&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/plugins&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RW&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Propagation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;volume&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cca7bc3012f5b76bd6c47a49ca6911184f9076f5f6263b41f4b9434a7f269b11&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/cca7bc3012f5b76bd6c47a49ca6911184f9076f5f6263b41f4b9434a7f269b11/_data&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/rabbitmq&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RW&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Propagation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>和容器内&#x2F;plugins目录对应的宿主机目录是：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;rabbitmq-plugin&#x2F;_data</p><h3 id="2、下载延迟插件"><a href="#2、下载延迟插件" class="headerlink" title="2、下载延迟插件"></a>2、下载延迟插件</h3><p>官方文档说明页地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20231107180045135.png"></p><p>下载插件安装文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez<br>mv rabbitmq_delayed_message_exchange-3.13.0.ez /var/lib/docker/volumes/rabbitmq-plugin/_data<br></code></pre></td></tr></table></figure><h3 id="3、启用插件"><a href="#3、启用插件" class="headerlink" title="3、启用插件"></a>3、启用插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录进入容器内部</span><br>docker exec -it rabbitmq /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">rabbitmq-plugins命令所在目录已经配置到<span class="hljs-variable">$PATH</span>环境变量中了，可以直接调用</span><br>rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出Docker容器</span><br>exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启Docker容器</span><br>docker restart rabbitmq<br></code></pre></td></tr></table></figure><h3 id="4、确认"><a href="#4、确认" class="headerlink" title="4、确认"></a>4、确认</h3><p>确认点1：查看当前节点已启用插件的列表：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240321115348525.png"></p><p>确认点2：如果创建新交换机时可以在type中看到x-delayed-message选项，那就说明插件安装好了</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20231107181914265.png"></p><h2 id="三、创建交换机"><a href="#三、创建交换机" class="headerlink" title="三、创建交换机"></a>三、创建交换机</h2><p>rabbitmq_delayed_message_exchange插件在工作时要求交换机是<span style="color:blue;font-weight:bolder;">x-delayed-message</span>类型才可以，创建方式如下：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240319163915574.png"></p><p>关于<span style="color:blue;font-weight:bolder;">x-delayed-type</span>参数的理解：</p><blockquote><p>原本指定交换机类型的地方使用了x-delayed-message这个值，那么这个交换机除了支持延迟消息之外，到底是direct、fanout、topic这些类型中的哪一个呢？</p><p>这里就额外使用x-delayed-type来指定交换机本身的类型</p></blockquote><h2 id="四、代码测试"><a href="#四、代码测试" class="headerlink" title="四、代码测试"></a>四、代码测试</h2><h3 id="1、生产者端代码"><a href="#1、生产者端代码" class="headerlink" title="1、生产者端代码"></a>1、生产者端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDelayMessage</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(<br>            EXCHANGE_DELAY,<br>            ROUTING_KEY_DELAY,<br>            <span class="hljs-string">&quot;测试基于插件的延迟消息 [&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;hh:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) + <span class="hljs-string">&quot;]&quot;</span>,<br>            messageProcessor -&gt; &#123;<br><br>                <span class="hljs-comment">// 设置延迟时间：以毫秒为单位</span><br>                messageProcessor.getMessageProperties().setHeader(<span class="hljs-string">&quot;x-delay&quot;</span>, <span class="hljs-string">&quot;10000&quot;</span>);<br><br>                <span class="hljs-keyword">return</span> messageProcessor;<br>            &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、消费者端代码"><a href="#2、消费者端代码" class="headerlink" title="2、消费者端代码"></a>2、消费者端代码</h3><h4 id="①情况A：资源已创建"><a href="#①情况A：资源已创建" class="headerlink" title="①情况A：资源已创建"></a>①情况A：资源已创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDelayMessageListener</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.delay.video&quot;</span>;<br>    <br>    <span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_DELAY&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        log.info(<span class="hljs-string">&quot;[生产者]&quot;</span> + dataString);<br>        log.info(<span class="hljs-string">&quot;[消费者]&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;hh:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②情况B：资源未创建"><a href="#②情况B：资源未创建" class="headerlink" title="②情况B：资源未创建"></a>②情况B：资源未创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;  <br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;  <br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.*;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;  <br><br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDelayMessageListener</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.delay.video&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.key.delay.video&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.delay.video&quot;</span>;<br>  <br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(  </span><br><span class="hljs-meta">        value = @Queue(value = QUEUE_DELAY, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),  </span><br><span class="hljs-meta">        exchange = @Exchange(  </span><br><span class="hljs-meta">                value = EXCHANGE_DELAY,   </span><br><span class="hljs-meta">                durable = &quot;true&quot;,   </span><br><span class="hljs-meta">                autoDelete = &quot;false&quot;,   </span><br><span class="hljs-meta">                type = &quot;x-delayed-message&quot;,   </span><br><span class="hljs-meta">                arguments = @Argument(name = &quot;x-delayed-type&quot;, value = &quot;direct&quot;)),  </span><br><span class="hljs-meta">        key = &#123;ROUTING_KEY_DELAY&#125;  </span><br><span class="hljs-meta">    ))</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        log.info(<span class="hljs-string">&quot;[生产者]&quot;</span> + dataString);  <br>        log.info(<span class="hljs-string">&quot;[消费者]&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;hh:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));  <br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);  <br>    &#125;  <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、执行效果"><a href="#3、执行效果" class="headerlink" title="3、执行效果"></a>3、执行效果</h3><h4 id="①交换机类型"><a href="#①交换机类型" class="headerlink" title="①交换机类型"></a>①交换机类型</h4><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240319171359652.png"></p><h4 id="②生产者端效果"><a href="#②生产者端效果" class="headerlink" title="②生产者端效果"></a>②生产者端效果</h4><p><span style="color:blue;font-weight:bolder;">注意</span>：使用rabbitmq_delayed_message_exchange插件后，即使消息成功发送到队列上，也会导致returnedMessage()方法执行</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240321115605608.png"></p><h4 id="③消费者端效果"><a href="#③消费者端效果" class="headerlink" title="③消费者端效果"></a>③消费者端效果</h4><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240321115646548.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8、死信队列</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-什么是死信队列"><a href="#1-1-什么是死信队列" class="headerlink" title="1.1 什么是死信队列"></a>1.1 什么是死信队列</h2><p>死信队列，英文缩写：DLX 。DeadLetter Exchange（死信交换机），当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20240806095014641.png"></p><p>先从概念解释上搞清楚这个定义，死信，顾名思义就是无法被消费的消息，字面意思可以这样理解，一般来说，producer将消息投递到broker或者直接到queue里了，consumer从queue取出消息进行消费，但某些时候由于特定的原因导致queue中的某些消息无法被消费，这样的消息如果没有后续的处理，就变成了死信，有死信，自然就有了死信队列；</p><h2 id="1-2-消息成为死信的三种情况"><a href="#1-2-消息成为死信的三种情况" class="headerlink" title="1.2 消息成为死信的三种情况"></a>1.2 <strong>消息成为死信的三种情况</strong></h2><ul><li><strong>拒绝：</strong>消费者拒接消息，basicNack()&#x2F;basicReject()，并且不把消息重新放入原目标队列，requeue&#x3D;false</li><li><strong>溢出：</strong>队列中消息数量到达限制。比如队列最大只能存储10条消息，且现在已经存储了10条，此时如果再发送一条消息进来，根据先进先出原则，队列中最早的消息会变成死信</li><li><strong>超时：</strong>消息到达超时时间未被消费</li></ul><h2 id="1-3-死信的处理方式"><a href="#1-3-死信的处理方式" class="headerlink" title="1.3 死信的处理方式"></a>1.3 死信的处理方式</h2><p>死信的产生既然不可避免，那么就需要从实际的业务角度和场景出发，对这些死信进行后续的处理，常见的处理方式大致有下面几种，</p><p><strong>① 丢弃，</strong>如果不是很重要，可以选择丢弃</p><p><strong>② 记录死信入库，</strong>然后做后续的业务分析或处理</p><p><strong>③ 通过死信队列，</strong>由负责监听死信的应用程序进行处理</p><p>综合来看，更常用的做法是第三种，即通过死信队列，将产生的死信通过程序的配置路由到指定的死信队列，然后应用监听死信队列，对接收到的死信做后续的处理，</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><h2 id="一、测试相关准备"><a href="#一、测试相关准备" class="headerlink" title="一、测试相关准备"></a>一、测试相关准备</h2><h3 id="1、创建死信交换机和死信队列"><a href="#1、创建死信交换机和死信队列" class="headerlink" title="1、创建死信交换机和死信队列"></a>1、创建死信交换机和死信队列</h3><p>常规设定即可，没有特殊设置：</p><ul><li>死信交换机：exchange.dead.letter.video</li><li>死信队列：queue.dead.letter.video</li><li>死信路由键：routing.key.dead.letter.video</li></ul><h3 id="2、创建正常交换机和正常队列"><a href="#2、创建正常交换机和正常队列" class="headerlink" title="2、创建正常交换机和正常队列"></a>2、创建正常交换机和正常队列</h3><p><span style="color:blue;font-weight:bolder;">注意</span>：一定要注意正常队列有诸多限定和设置，这样才能让无法处理的消息进入死信交换机</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20240318165821774.png"></p><ul><li>正常交换机：exchange.normal.video</li><li>正常队列：queue.normal.video</li><li>正常路由键：routing.key.normal.video</li></ul><p>全部设置完成后参照如下细节：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20240318165927279.png"></p><h3 id="3、Java代码中的相关常量声明"><a href="#3、Java代码中的相关常量声明" class="headerlink" title="3、Java代码中的相关常量声明"></a>3、Java代码中的相关常量声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.normal.video&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DEAD_LETTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.dead.letter.video&quot;</span>;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.key.normal.video&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_DEAD_LETTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.key.dead.letter.video&quot;</span>;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.normal.video&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_DEAD_LETTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.dead.letter.video&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、消费端拒收消息"><a href="#二、消费端拒收消息" class="headerlink" title="二、消费端拒收消息"></a>二、消费端拒收消息</h2><h3 id="1、发送消息的代码"><a href="#1、发送消息的代码" class="headerlink" title="1、发送消息的代码"></a>1、发送消息的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageButReject</span><span class="hljs-params">()</span> &#123;  <br>    rabbitTemplate  <br>            .convertAndSend(  <br>                    EXCHANGE_NORMAL,  <br>                    ROUTING_KEY_NORMAL,  <br>                    <span class="hljs-string">&quot;测试死信情况1：消息被拒绝&quot;</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、接收消息的代码"><a href="#2、接收消息的代码" class="headerlink" title="2、接收消息的代码"></a>2、接收消息的代码</h3><h4 id="①监听正常队列"><a href="#①监听正常队列" class="headerlink" title="①监听正常队列"></a>①监听正常队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_NORMAL&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageNormal</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 监听正常队列，但是拒绝消息</span><br>    log.info(<span class="hljs-string">&quot;★[normal]消息接收到，但我拒绝。&quot;</span>);<br>    channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②监听死信队列"><a href="#②监听死信队列" class="headerlink" title="②监听死信队列"></a>②监听死信队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_DEAD_LETTER&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageDead</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>    <span class="hljs-comment">// 监听死信队列  </span><br>    log.info(<span class="hljs-string">&quot;★[dead letter]dataString = &quot;</span> + dataString);<br>    log.info(<span class="hljs-string">&quot;★[dead letter]我是死信监听方法，我接收到了死信消息&quot;</span>);<br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、执行结果"><a href="#3、执行结果" class="headerlink" title="3、执行结果"></a>3、执行结果</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107170523503.png"></p><h2 id="三、消息数量超过队列容纳极限"><a href="#三、消息数量超过队列容纳极限" class="headerlink" title="三、消息数量超过队列容纳极限"></a>三、消息数量超过队列容纳极限</h2><h3 id="1、发送消息的代码-1"><a href="#1、发送消息的代码-1" class="headerlink" title="1、发送消息的代码"></a>1、发送消息的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMultiMessage</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;  <br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_NORMAL,  <br>                ROUTING_KEY_NORMAL,  <br>                <span class="hljs-string">&quot;测试死信情况2：消息数量超过队列的最大容量&quot;</span> + i);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、接收消息的代码-1"><a href="#2、接收消息的代码-1" class="headerlink" title="2、接收消息的代码"></a>2、接收消息的代码</h3><p>消息接收代码不再拒绝消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_NORMAL&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageNormal</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 监听正常队列</span><br>    log.info(<span class="hljs-string">&quot;★[normal]消息接收到。&quot;</span>);<br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>重启微服务使代码修改生效。</p><h3 id="3、执行效果"><a href="#3、执行效果" class="headerlink" title="3、执行效果"></a>3、执行效果</h3><p>正常队列的参数如下图所示：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107171231765.png"></p><p>生产者发送20条消息之后，消费端死信队列接收到前10条消息：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/img87.png"></p><h2 id="四、消息超时未消费"><a href="#四、消息超时未消费" class="headerlink" title="四、消息超时未消费"></a>四、消息超时未消费</h2><h3 id="1、发送消息的代码-2"><a href="#1、发送消息的代码-2" class="headerlink" title="1、发送消息的代码"></a>1、发送消息的代码</h3><p>正常发送一条消息即可，所以使用第一个例子的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTimeout</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate<br>            .convertAndSend(<br>                    EXCHANGE_NORMAL,<br>                    ROUTING_KEY_NORMAL,<br>                    <span class="hljs-string">&quot;测试死信情况3：消息超时&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、执行效果"><a href="#2、执行效果" class="headerlink" title="2、执行效果"></a>2、执行效果</h3><p>队列参数生效：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107172002297.png"></p><p>因为没有消费端监听程序，所以消息未超时前滞留在队列中：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107172234849.png"></p><p>消息超时后，进入死信队列：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107172042460.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7、消息超时</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="消息超时"><a href="#消息超时" class="headerlink" title="消息超时"></a>消息超时</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>TTL 全称 Time To Live（存活时间&#x2F;过期时间）。</p><p>当消息到达存活时间后，还没有被消费，会被自动清除。</p><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20240806094631068.png"></p><h1 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2 具体实现"></a>2 具体实现</h1><h2 id="一、队列层面设置"><a href="#一、队列层面设置" class="headerlink" title="一、队列层面设置"></a>一、队列层面设置</h2><h3 id="1、设置"><a href="#1、设置" class="headerlink" title="1、设置"></a>1、设置</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107162548129.png"></p><p>别忘了设置绑定关系：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107162705883.png"></p><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><ul><li>不启动消费端程序</li><li>向设置了过期时间的队列中发送100条消息</li><li>等10秒后，看是否全部被过期删除</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107163052001.png"></p><h2 id="二、消息层面设置"><a href="#二、消息层面设置" class="headerlink" title="二、消息层面设置"></a>二、消息层面设置</h2><h3 id="1、设置-1"><a href="#1、设置-1" class="headerlink" title="1、设置"></a>1、设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;<br><br><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTTL</span><span class="hljs-params">()</span> &#123;  <br>  <br>    <span class="hljs-comment">// 1、创建消息后置处理器对象  </span><br>    <span class="hljs-type">MessagePostProcessor</span> <span class="hljs-variable">messagePostProcessor</span> <span class="hljs-operator">=</span> (Message message) -&gt; &#123;  <br>  <br>        <span class="hljs-comment">// 设定 TTL 时间，以毫秒为单位</span><br>        message.getMessageProperties().setExpiration(<span class="hljs-string">&quot;5000&quot;</span>);  <br>  <br>        <span class="hljs-keyword">return</span> message;<br>    &#125;;<br>  <br>    <span class="hljs-comment">// 2、发送消息  </span><br>    rabbitTemplate.convertAndSend(    <br>            EXCHANGE_DIRECT,     <br>            ROUTING_KEY,     <br>            <span class="hljs-string">&quot;Hello atguigu&quot;</span>, messagePostProcessor);    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、查看效果"><a href="#2、查看效果" class="headerlink" title="2、查看效果"></a>2、查看效果</h3><p>这次我们是发送到普通队列上：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107163534385.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6、消费端限流</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20240806094300945.png"></p><ul><li>生产者发送10000个消息</li><li>消费端并发能力上限：同时处理1000个请求</li><li>设定：</li></ul><p>​每次最多从队列取回1000个请求</p><h1 id="二、生产者端代码"><a href="#二、生产者端代码" class="headerlink" title="二、生产者端代码"></a>二、生产者端代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        rabbitTemplate.convertAndSend(<br>                EXCHANGE_DIRECT,<br>                ROUTING_KEY,<br>                <span class="hljs-string">&quot;Hello atguigu&quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、消费者端代码"><a href="#三、消费者端代码" class="headerlink" title="三、消费者端代码"></a>三、消费者端代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2、正常业务操作</span><br>log.info(<span class="hljs-string">&quot;消费端接收到消息内容：&quot;</span> + dataString);<br><br><span class="hljs-comment">// System.out.println(10 / 0);</span><br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 3、给 RabbitMQ 服务器返回 ACK 确认信息</span><br>channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h1 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h1><h2 id="1、未使用prefetch"><a href="#1、未使用prefetch" class="headerlink" title="1、未使用prefetch"></a>1、未使用prefetch</h2><ul><li>不要启动消费端程序，如果正在运行就把它停了</li><li>运行生产者端程序发送100条消息</li><li>查看队列中消息的情况：</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107155915253.png"></p><ul><li><p>说明：</p><ul><li>Ready表示已经发送到队列的消息数量</li><li>Unacked表示已经发送到消费端但是消费端尚未返回ACK信息的消息数量</li><li>Total未被删除的消息总数</li></ul></li><li><p>接下来启动消费端程序，再查看队列情况：</p></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160233539.png"></p><ul><li>能看到消息全部被消费端取走了，正在逐个处理、确认，说明有多少消息消费端就并发处理多少</li></ul><h2 id="2、设定prefetch"><a href="#2、设定prefetch" class="headerlink" title="2、设定prefetch"></a>2、设定prefetch</h2><h3 id="①YAML配置"><a href="#①YAML配置" class="headerlink" title="①YAML配置"></a>①YAML配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 设置每次最多从消息队列服务器取回多少消息</span><br></code></pre></td></tr></table></figure><h3 id="②测试流程"><a href="#②测试流程" class="headerlink" title="②测试流程"></a>②测试流程</h3><ul><li>停止消费端程序</li><li>运行生产者端程序发送100条消息</li><li>查看队列中消息的情况：</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160820062.png"></p><ul><li>接下来启动消费端程序，持续观察队列情况：</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160922632.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160936216.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160951639.png"></p><ul><li>能看到消息不是一次性全部取回的，而是有个过程</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5、消息百分百成功投递</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h1 id="消息百分百成功投递"><a href="#消息百分百成功投递" class="headerlink" title="消息百分百成功投递"></a>消息百分百成功投递</h1><h1 id="1-消息百分百成功投递"><a href="#1-消息百分百成功投递" class="headerlink" title="1 消息百分百成功投递"></a>1 消息百分百成功投递</h1><p>谈到消息的可靠性投递，无法避免的，在实际的工作中会经常碰到，比如一些核心业务需要保障消息不丢失，接下来我们看一个可靠性投递的流程图，说明可靠性投递的概念：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/wps1-17229105587141.jpg"> </p><p>Step 1： 首先把消息信息(业务数据）存储到数据库中，紧接着，我们再把这个消息记录也存储到一张消息记录表里（或者另外一个同源数据库的消息记录表）</p><p>Step 2：发送消息到MQ Broker节点（采用confirm方式发送，会有异步的返回结果）</p><p>Step 3、4：生产者端接受MQ Broker节点返回的Confirm确认消息结果，然后进行更新消息记录表里的消息状态。比如默认Status &#x3D; 0 当收到消息确认成功后，更新为1即可！</p><p>Step 5：但是在消息确认这个过程中可能由于网络闪断、MQ Broker端异常等原因导致 回送消息失败或者异常。这个时候就需要发送方（生产者）对消息进行可靠性投递了，保障消息不丢失，100%的投递成功！（有一种极限情况是闪断，Broker返回的成功确认消息，但是生产端由于网络闪断没收到，这个时候重新投递可能会造成消息重复，需要消费端去做幂等处理）所以我们需要有一个定时任务，（比如每5分钟拉取一下处于中间状态的消息，当然这个消息可以设置一个超时时间，比如超过1分钟 Status &#x3D; 0 ，也就说明了1分钟这个时间窗口内，我们的消息没有被确认，那么会被定时任务拉取出来）</p><p>Step 6：接下来我们把中间状态的消息进行重新投递 retry send，继续发送消息到MQ ，当然也可能有多种原因导致发送失败</p><p>Step 7：我们可以采用设置最大努力尝试次数，比如投递了3次，还是失败，那么我们可以将最终状态设置为Status &#x3D; 2 ，最后 交由人工解决处理此类问题（或者把消息转储到失败表中）。</p><h1 id="2-消息幂等性保障"><a href="#2-消息幂等性保障" class="headerlink" title="2 消息幂等性保障"></a>2 消息幂等性保障</h1><p>幂等性指一次和多次请求某一个资源,对于资源本身应该具有同样的结果。也就是说,其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/wps2-17229106077093.jpg"> </p><p>在MQ中指,消费多条相同的消息,得到与消费该消息一次相同的结果。</p><p><strong>消息幂等性保障 乐观锁机制</strong></p><p>生产者发送消息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span>,money<span class="hljs-operator">=</span><span class="hljs-number">500</span>,version<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>消费者接收消息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span>,money<span class="hljs-operator">=</span><span class="hljs-number">500</span>,version<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span>,money<span class="hljs-operator">=</span><span class="hljs-number">500</span>,version<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>消费者需要保证幂等性：第一次执行SQL语句</p><p>第一次执行：version&#x3D;1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> , version <span class="hljs-operator">=</span> version <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>消费者需要保证幂等性：第二次执行SQL语句</p><p>第二次执行：version&#x3D;2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> , version <span class="hljs-operator">=</span> version <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4、消息的可靠性投递</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h1 id="消息的可靠性投递"><a href="#消息的可靠性投递" class="headerlink" title="消息的可靠性投递"></a>消息的可靠性投递</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-问题引入"><a href="#1-1-问题引入" class="headerlink" title="1.1 问题引入"></a>1.1 问题引入</h2><ul><li><strong>正常的下单流程</strong></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092424473.png"></p><ul><li><strong>故障情况1：</strong></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092503472.png"></p><p>消息没有发送到消息队列上，后果：消费者拿不到消息，业务功能缺失，数据错误</p><ul><li><strong>故障情况2：</strong></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092558221.png"></p><p>消息成功存入消息队列，但是消息队列服务器宕机了，原本保存在内存中的消息也丢失了，即使服务器重新启动，消息也找不回来了。后果：消费者拿不到消息，业务功能缺失，数据错误</p><ul><li><strong>故障情况3：</strong></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092653865.png"></p><p>消息成功存入消息队列，但是消费端出现问题，例如：宕机、抛异常等等。后果：业务功能缺失，数据错误</p><h2 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h2><ul><li><p>故障情况1：消息没有发送到消息队列在生产者端进行确认，具体操作中我们会分别针对交换机和队列来确认，如果没有成功发送到消息队列服务器上，那就可以尝试重新发送</p></li><li><p>故障情况2：消息队列服务器宕机导致内存中消息丢失解决思路：消息持久化到硬盘上，哪怕服务器重启也不会导致消息丢失</p></li><li><p>故障情况3：消费端宕机或抛异常导致消息没有成功被消费消费端消费消息成功，给服务器返回ACK信息，然后消息队列删除该消息消费端消费消息失败，给服务器端返回NACK信息，同时把消息恢复为待消费的状态，这样就可以再次取回消息，重试一次（当然，这就需要消费端接口支持幂等性）</p></li></ul><h1 id="2-故障1解决：生产者端消息确认机制"><a href="#2-故障1解决：生产者端消息确认机制" class="headerlink" title="2 故障1解决：生产者端消息确认机制"></a>2 故障1解决：生产者端消息确认机制</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>在使用 RabbitMQ 的时候，作为消息发送方希望<strong>杜绝任何消息丢失</strong>或者<strong>投递失败</strong>场景。RabbitMQ 为我们提供了<strong>两种方式</strong>用来<strong>控制消息的投递可靠性模式</strong>。</li></ul><p><strong>·</strong> <strong>confirm 确认模式</strong></p><p><strong>·</strong> <strong>return 退回模式</strong></p><ul><li><strong>rabbitmq 整个消息投递的路径为：</strong></li></ul><p>producer—&gt;rabbitmq broker—&gt;exchange—&gt;queue—&gt;consumer</p><p><strong>·</strong> 消息从 producer 到 exchange 则会返回一个 confirmCallback 。</p><p><strong>·</strong> 消息从 exchange–&gt;queue 投递失败则会返回一个 returnCallback 。</p><p>我们将利用这两个 callback 控制消息的可靠性投递</p><h2 id="二、创建module"><a href="#二、创建module" class="headerlink" title="二、创建module"></a>二、创建module</h2><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/img77.png"></p><h2 id="三、搭建环境"><a href="#三、搭建环境" class="headerlink" title="三、搭建环境"></a>三、搭建环境</h2><h3 id="1、配置POM"><a href="#1、配置POM" class="headerlink" title="1、配置POM"></a>1、配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、主启动类"><a href="#2、主启动类" class="headerlink" title="2、主启动类"></a>2、主启动类</h3><p>没有特殊设定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  <br>  <br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProducerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQProducerMainType.class, args);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、YAML"><a href="#3、YAML" class="headerlink" title="3、YAML"></a>3、YAML</h3><p><span style="color:blue;font-weight:bold;">注意</span>：publisher-confirm-type和publisher-returns是两个必须要增加的配置，如果没有则本节功能不生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span> <span class="hljs-comment"># 交换机的确认</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 队列的确认</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.atguigu.mq.config.MQProducerAckConfig:</span> <span class="hljs-string">info</span><br></code></pre></td></tr></table></figure><h2 id="四、创建配置类"><a href="#四、创建配置类" class="headerlink" title="四、创建配置类"></a>四、创建配置类</h2><h3 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h3><p>在这里我们为什么要创建这个配置类呢？首先，我们需要声明回调函数来接收RabbitMQ服务器返回的确认信息：</p><table><thead><tr><th>方法名</th><th>方法功能</th><th>所属接口</th><th>接口所属类</th></tr></thead><tbody><tr><td>confirm()</td><td>确认消息是否发送到交换机</td><td>ConfirmCallback</td><td>RabbitTemplate</td></tr><tr><td>returnedMessage()</td><td>确认消息是否发送到队列</td><td>ReturnsCallback</td><td>RabbitTemplate</td></tr></tbody></table><p>然后，就是对RabbitTemplate的功能进行增强，因为回调函数所在对象必须设置到RabbitTemplate对象中才能生效。</p><p>原本RabbitTemplate对象并没有生产者端消息确认的功能，要给它设置对应的组件才可以。</p><p>而设置对应的组件，需要调用RabbitTemplate对象下面两个方法：</p><table><thead><tr><th>设置组件调用的方法</th><th>所需对象类型</th></tr></thead><tbody><tr><td>setConfirmCallback()</td><td>ConfirmCallback接口类型</td></tr><tr><td>setReturnCallback()</td><td>ReturnCallback接口类型</td></tr></tbody></table><h3 id="2、API说明"><a href="#2、API说明" class="headerlink" title="2、API说明"></a>2、API说明</h3><h4 id="①ConfirmCallback接口"><a href="#①ConfirmCallback接口" class="headerlink" title="①ConfirmCallback接口"></a>①ConfirmCallback接口</h4><p>这是RabbitTemplate内部的一个接口，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A callback for publisher confirmations.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfirmCallback</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Confirmation callback.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> correlationData correlation data for the callback.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ack true for ack, false for nack</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cause An optional cause, for nack, when available, otherwise null.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, <span class="hljs-meta">@Nullable</span> String cause)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>生产者端发送消息之后，回调confirm()方法</p><ul><li>ack参数值为true：表示消息成功发送到了交换机</li><li>ack参数值为false：表示消息没有发送到交换机</li></ul><h4 id="②ReturnCallback接口"><a href="#②ReturnCallback接口" class="headerlink" title="②ReturnCallback接口"></a>②ReturnCallback接口</h4><p>同样也RabbitTemplate内部的一个接口，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A callback for returned messages.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReturnsCallback</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returned message callback.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> returned the returned message and metadata.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returned)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:blue;font-weight:bold;">注意</span>：接口中的returnedMessage()方法<span style="color:blue;font-weight:bold;font-size:25px;">仅</span>在消息<span style="color:blue;font-weight:bold;font-size:25px;">没有</span>发送到队列时调用</p><p>ReturnedMessage类中主要属性含义如下：</p><table><thead><tr><th>属性名</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>message</td><td>org.springframework.amqp.core.Message</td><td>消息以及消息相关数据</td></tr><tr><td>replyCode</td><td>int</td><td>应答码，类似于HTTP响应状态码</td></tr><tr><td>replyText</td><td>String</td><td>应答码说明</td></tr><tr><td>exchange</td><td>String</td><td>交换机名称</td></tr><tr><td>routingKey</td><td>String</td><td>路由键名称</td></tr></tbody></table><h3 id="3、配置类代码"><a href="#3、配置类代码" class="headerlink" title="3、配置类代码"></a>3、配置类代码</h3><h4 id="①要点1"><a href="#①要点1" class="headerlink" title="①要点1"></a>①要点1</h4><p>加@Component注解，加入IOC容器</p><h4 id="②要点2"><a href="#②要点2" class="headerlink" title="②要点2"></a>②要点2</h4><p>配置类自身实现ConfirmCallback、ReturnCallback这两个接口，然后通过this指针把配置类的对象设置到RabbitTemplate对象中。</p><p>操作封装到了一个专门的void init()方法中。</p><p>为了保证这个void init()方法在应用启动时被调用，我们使用@PostConstruct注解来修饰这个方法。</p><p>关于@PostConstruct注解大家可以参照以下说明：</p><blockquote><p>@PostConstruct注解是<span style="color:blue;font-weight:bolder;">Java中的一个标准注解</span>，它用于指定在<span style="color:blue;font-weight:bolder;">对象创建之后立即执行</span>的方法。当使用依赖注入（如Spring框架）或者其他方式创建对象时，@PostConstruct注解可以确保在对象完全初始化之后，执行相应的方法。</p><p>使用@PostConstruct注解的方法必须满足以下条件：</p><ol><li><span style="color:blue;font-weight:bolder;">方法不能有任何参数</span>。</li><li><span style="color:blue;font-weight:bolder;">方法必须是非静态的</span>。</li><li><span style="color:blue;font-weight:bolder;">方法不能返回任何值</span>。</li></ol><p>当容器实例化一个带有@PostConstruct注解的Bean时，它会在<span style="color:blue;font-weight:bolder;">调用构造函数之后</span>，并在<span style="color:blue;font-weight:bolder;">依赖注入完成之前</span>调用被@PostConstruct注解标记的方法。这样，我们可以在该方法中进行一些初始化操作，比如读取配置文件、建立数据库连接等。</p></blockquote><h4 id="③代码"><a href="#③代码" class="headerlink" title="③代码"></a>③代码</h4><p>有了以上说明，下面我们就可以展示配置类的整体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.config;<br><br><span class="hljs-keyword">import</span> jakarta.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.ReturnedMessage;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MQProducerAckConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>        rabbitTemplate.setReturnsCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ack) &#123;<br>            log.info(<span class="hljs-string">&quot;消息发送到交换机成功！数据：&quot;</span> + correlationData);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;消息发送到交换机失败！数据：&quot;</span> + correlationData + <span class="hljs-string">&quot; 原因：&quot;</span> + cause);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returned)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;消息主体: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returned.getMessage().getBody()));<br>        log.info(<span class="hljs-string">&quot;应答码: &quot;</span> + returned.getReplyCode());<br>        log.info(<span class="hljs-string">&quot;描述：&quot;</span> + returned.getReplyText());<br>        log.info(<span class="hljs-string">&quot;消息使用的交换器 exchange : &quot;</span> + returned.getExchange());<br>        log.info(<span class="hljs-string">&quot;消息使用的路由键 routing : &quot;</span> + returned.getRoutingKey());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、发送消息"><a href="#五、发送消息" class="headerlink" title="五、发送消息"></a>五、发送消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.test;<br>  <br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQTest</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_DIRECT,   <br>                ROUTING_KEY,   <br>                <span class="hljs-string">&quot;Hello atguigu&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过调整代码，测试如下三种情况：</p><ul><li>交换机正确、路由键正确</li><li>交换机正确、路由键不正确，无法发送到队列</li><li>交换机不正确，无法发送到交换机</li></ul><h1 id="3-故障2解决：交换机和队列持久化"><a href="#3-故障2解决：交换机和队列持久化" class="headerlink" title="3 故障2解决：交换机和队列持久化"></a>3 故障2解决：交换机和队列持久化</h1><h2 id="一、测试非持久化交换机和队列"><a href="#一、测试非持久化交换机和队列" class="headerlink" title="一、测试非持久化交换机和队列"></a>一、测试非持久化交换机和队列</h2><h3 id="1、创建非持久化交换机"><a href="#1、创建非持久化交换机" class="headerlink" title="1、创建非持久化交换机"></a>1、创建非持久化交换机</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106192621173.png"></p><p>创建之后，可以在列表中看到：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106192708597.png"></p><h3 id="2、创建非持久化队列"><a href="#2、创建非持久化队列" class="headerlink" title="2、创建非持久化队列"></a>2、创建非持久化队列</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106195216265.png"></p><p>创建之后，可以在列表中看到：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106195132627.png"></p><h3 id="3、绑定"><a href="#3、绑定" class="headerlink" title="3、绑定"></a>3、绑定</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106195748319.png"></p><h3 id="4、发送消息"><a href="#4、发送消息" class="headerlink" title="4、发送消息"></a>4、发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_TRANSIENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.transient.user&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_TRANSIENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTransient</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(<br>            EXCHANGE_TRANSIENT,<br>            ROUTING_KEY_TRANSIENT,<br>            <span class="hljs-string">&quot;Hello atguigu user~~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、查看已发送消息"><a href="#5、查看已发送消息" class="headerlink" title="5、查看已发送消息"></a>5、查看已发送消息</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106200245531.png"></p><p>结论：临时性的交换机和队列也能够接收消息，但如果RabbitMQ服务器重启之后会怎么样呢？</p><h3 id="6、重启RabbitMQ服务器"><a href="#6、重启RabbitMQ服务器" class="headerlink" title="6、重启RabbitMQ服务器"></a>6、重启RabbitMQ服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart rabbitmq<br></code></pre></td></tr></table></figure><p>重启之后，刚才临时性的交换机和队列都没了。在交换机和队列这二者中，队列是消息存储的容器，队列没了，消息就也跟着没了。</p><h2 id="二、持久化的交换机和队列"><a href="#二、持久化的交换机和队列" class="headerlink" title="二、持久化的交换机和队列"></a>二、持久化的交换机和队列</h2><p>我们其实不必专门创建持久化的交换机和队列，因为它们默认就是持久化的。接下来我们只需要确认一下：存放到队列中，尚未被消费端取走的消息，是否会随着RabbitMQ服务器重启而丢失？</p><h3 id="1、发送消息"><a href="#1、发送消息" class="headerlink" title="1、发送消息"></a>1、发送消息</h3><p>运行以前的发送消息方法即可，不过要关掉消费端程序</p><h3 id="2、在管理界面查看消息"><a href="#2、在管理界面查看消息" class="headerlink" title="2、在管理界面查看消息"></a>2、在管理界面查看消息</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106200934265.png"></p><h3 id="3、重启RabbitMQ服务器"><a href="#3、重启RabbitMQ服务器" class="headerlink" title="3、重启RabbitMQ服务器"></a>3、重启RabbitMQ服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart rabbitmq<br></code></pre></td></tr></table></figure><h3 id="4、再次查看消息"><a href="#4、再次查看消息" class="headerlink" title="4、再次查看消息"></a>4、再次查看消息</h3><p>仍然还在：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106201123268.png"></p><h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><p>在后台管理界面创建交换机和队列时，默认就是持久化的模式。</p><p>此时消息也是持久化的，不需要额外设置。</p><h1 id="4-故障3解决：消费端消息确认"><a href="#4-故障3解决：消费端消息确认" class="headerlink" title="4 故障3解决：消费端消息确认"></a>4 故障3解决：消费端消息确认</h1><h2 id="一、ACK"><a href="#一、ACK" class="headerlink" title="一、ACK"></a>一、ACK</h2><p>ACK是acknowledge的缩写，表示已确认</p><h2 id="二、默认情况"><a href="#二、默认情况" class="headerlink" title="二、默认情况"></a>二、默认情况</h2><p>默认情况下，消费端取回消息后，默认会自动返回ACK确认消息，所以在前面的测试中消息被消费端消费之后，RabbitMQ得到ACK确认信息就会删除消息</p><p>但实际开发中，消费端根据消息队列投递的消息执行对应的业务，未必都能执行成功，如果希望能够多次重试，那么默认设定就不满足要求了</p><p>所以还是要修改成手动确认</p><h2 id="三、创建消费端module"><a href="#三、创建消费端module" class="headerlink" title="三、创建消费端module"></a>三、创建消费端module</h2><h3 id="1、配置POM-1"><a href="#1、配置POM-1" class="headerlink" title="1、配置POM"></a>1、配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、YAML"><a href="#2、YAML" class="headerlink" title="2、YAML"></a>2、YAML</h3><p>增加针对监听器的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment"># 把消息确认模式改为手动确认</span><br></code></pre></td></tr></table></figure><h3 id="3、主启动类"><a href="#3、主启动类" class="headerlink" title="3、主启动类"></a>3、主启动类</h3><p>没有特殊设定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConsumerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQConsumerMainType.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、消费端监听器"><a href="#四、消费端监听器" class="headerlink" title="四、消费端监听器"></a>四、消费端监听器</h2><h3 id="1、创建监听器类"><a href="#1、创建监听器类" class="headerlink" title="1、创建监听器类"></a>1、创建监听器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.order&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、在接收消息的方法上应用注解"><a href="#2、在接收消息的方法上应用注解" class="headerlink" title="2、在接收消息的方法上应用注解"></a>2、在接收消息的方法上应用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修饰监听方法</span><br><span class="hljs-meta">@RabbitListener(</span><br><span class="hljs-meta">        // 设置绑定关系</span><br><span class="hljs-meta">        bindings = @QueueBinding(</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">            // 配置队列信息：durable 为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span><br><span class="hljs-meta">            value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">            // 配置交换机信息：durable 为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span><br><span class="hljs-meta">            exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">            // 配置路由键信息</span><br><span class="hljs-meta">            key = &#123;ROUTING_KEY&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、接收消息方法内部逻辑"><a href="#3、接收消息方法内部逻辑" class="headerlink" title="3、接收消息方法内部逻辑"></a>3、接收消息方法内部逻辑</h3><ul><li>业务处理成功：手动返回ACK信息，表示消息成功消费</li><li>业务处理失败：手动返回NACK信息，表示消息消费失败。此时有两种后续操作供选择：<ul><li>把消息重新放回消息队列，RabbitMQ会重新投递这条消息，那么消费端将重新消费这条消息——从而让业务代码再执行一遍</li><li>不把消息放回消息队列，返回reject信息表示拒绝，那么这条消息的处理就到此为止</li></ul></li></ul><h3 id="4、相关API"><a href="#4、相关API" class="headerlink" title="4、相关API"></a>4、相关API</h3><p>先回到PPT理解“deliveryTag：交付标签机制”</p><p>下面我们探讨的三个方法都是来自于com.rabbitmq.client.<span style="color:blue;font-weight:bolder;">Channel</span>接口</p><h4 id="①basicAck-方法"><a href="#①basicAck-方法" class="headerlink" title="①basicAck()方法"></a>①basicAck()方法</h4><ul><li>方法功能：给Broker返回ACK确认信息，表示消息已经在消费端成功消费，这样Broker就可以把消息删除了</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean multiple</td><td>取值为true：为小于、等于deliveryTag的消息批量返回ACK信息<br>取值为false：仅为指定的deliveryTag返回ACK信息</td></tr></tbody></table><h4 id="②basicNack-方法"><a href="#②basicNack-方法" class="headerlink" title="②basicNack()方法"></a>②basicNack()方法</h4><ul><li>方法功能：给Broker返回NACK信息，表示消息在消费端消费失败，此时Broker的后续操作取决于参数requeue的值</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean multiple</td><td>取值为true：为小于、等于deliveryTag的消息批量返回ACK信息<br>取值为false：仅为指定的deliveryTag返回ACK信息</td></tr><tr><td>boolean requeue</td><td>取值为true：Broker将消息重新放回队列，接下来会重新投递给消费端<br>取值为false：Broker将消息标记为已消费，不会放回队列</td></tr></tbody></table><h4 id="③basicReject-方法"><a href="#③basicReject-方法" class="headerlink" title="③basicReject()方法"></a>③basicReject()方法</h4><ul><li>方法功能：根据指定的deliveryTag，对该消息表示拒绝</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean requeue</td><td>取值为true：Broker将消息重新放回队列，接下来会重新投递给消费端<br>取值为false：Broker将消息标记为已消费，不会放回队列</td></tr></tbody></table><ul><li>basicNack()和basicReject()有啥区别？<ul><li>basicNack()有批量操作</li><li>basicReject()没有批量操作</li></ul></li></ul><h3 id="5、完整代码示例"><a href="#5、完整代码示例" class="headerlink" title="5、完整代码示例"></a>5、完整代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.order&quot;</span>;<br><br>    <span class="hljs-comment">// 修饰监听方法</span><br>    <span class="hljs-meta">@RabbitListener(</span><br><span class="hljs-meta">            // 设置绑定关系</span><br><span class="hljs-meta">            bindings = @QueueBinding(</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">                // 配置队列信息：durable 为 true 表示队列持久化；autoDelete 为 false 表示关闭自动删除</span><br><span class="hljs-meta">                value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">                // 配置交换机信息：durable 为 true 表示队列持久化；autoDelete 为 false 表示关闭自动删除</span><br><span class="hljs-meta">                exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">                // 配置路由键信息</span><br><span class="hljs-meta">                key = &#123;ROUTING_KEY&#125;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1、获取当前消息的 deliveryTag 值备用</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">deliveryTag</span> <span class="hljs-operator">=</span> message.getMessageProperties().getDeliveryTag();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2、正常业务操作</span><br>            log.info(<span class="hljs-string">&quot;消费端接收到消息内容：&quot;</span> + dataString);<br>            <br>            <span class="hljs-comment">// System.out.println(10 / 0);</span><br><br>            <span class="hljs-comment">// 3、给 RabbitMQ 服务器返回 ACK 确认信息</span><br>            channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            <span class="hljs-comment">// 4、获取信息，看当前消息是否曾经被投递过</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">redelivered</span> <span class="hljs-operator">=</span> message.getMessageProperties().getRedelivered();<br><br>            <span class="hljs-keyword">if</span> (!redelivered) &#123;<br>                <span class="hljs-comment">// 5、如果没有被投递过，那就重新放回队列，重新投递，再试一次</span><br>                channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 6、如果已经被投递过，且这一次仍然进入了 catch 块，那么返回拒绝且不再放回队列</span><br>                channel.basicReject(deliveryTag, <span class="hljs-literal">false</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、要点总结"><a href="#五、要点总结" class="headerlink" title="五、要点总结"></a>五、要点总结</h2><ul><li>要点1：把消息确认模式改为<span style="color:blue;font-weight:bold;">手动确认</span></li><li>要点2：调用Channel对象的方法返回信息<ul><li>ACK：Acknowledgement，表示消息处理成功</li><li>NACK：Negative Acknowledgement，表示消息处理失败</li><li>Reject：拒绝，同样表示消息处理失败</li></ul></li><li>要点3：后续操作<ul><li>requeue为true：重新放回队列，重新投递，再次尝试</li><li>requeue为false：不放回队列，不重新投递</li></ul></li><li>要点4：deliveryTag 消息的唯一标识，查找具体某一条消息的依据</li></ul><h2 id="六、流程梳理"><a href="#六、流程梳理" class="headerlink" title="六、流程梳理"></a>六、流程梳理</h2><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p><h2 id="七、多啰嗦一句"><a href="#七、多啰嗦一句" class="headerlink" title="七、多啰嗦一句"></a>七、多啰嗦一句</h2><p>消费端如果设定消息重新放回队列，Broker重新投递消息，那么消费端就可以再次消费消息，这是一种“重试”机制，这需要消费端代码支持“<span style="color:blue;font-weight:bold;">幂等性</span>”——这属于前置知识，不展开了。</p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3、RabbitMQ工作模式</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ工作模式"><a href="#RabbitMQ工作模式" class="headerlink" title="RabbitMQ工作模式"></a>RabbitMQ工作模式</h1><ul><li>RabbitMQ提供了<strong>多种工作模式</strong>：简单模式，work模式 ，Publish&#x2F;Subscribe发布与订阅模式，Routing路由模式，Topics主题模式等</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806102313708.png"></p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a> </p><h1 id="1-Work-queues工作队列模式"><a href="#1-Work-queues工作队列模式" class="headerlink" title="1 Work queues工作队列模式"></a><strong>1 Work queues工作队列模式</strong></h1><h2 id="1-1-模式说明"><a href="#1-1-模式说明" class="headerlink" title="1.1 模式说明"></a><strong>1.1 模式说明</strong></h2><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806084946234.png"> </p><p>Work Queues与入门程序的简单模式相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度</p><h2 id="1-2-工作队列模式代码"><a href="#1-2-工作队列模式代码" class="headerlink" title="1.2 工作队列模式代码"></a>1.2 工作队列模式代码</h2><h3 id="1-2-1-生产者代码"><a href="#1-2-1-生产者代码" class="headerlink" title="1.2.1 生产者代码"></a>1.2.1 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_WORK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.queue.work&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageWork</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        rabbitTemplate.convertAndSend(<br>                EXCHANGE_DIRECT,<br>                ROUTING_KEY_WORK,<br>                <span class="hljs-string">&quot;Hello atguigu &quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>发送消息效果</strong></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725203346015.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725203322613.png"></p><h3 id="1-2-2-消费者代码"><a href="#1-2-2-消费者代码" class="headerlink" title="1.2.2 消费者代码"></a>1.2.2 消费者代码</h3><h4 id="①创建模块，配置POM"><a href="#①创建模块，配置POM" class="headerlink" title="①创建模块，配置POM"></a>①创建模块，配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②YAML"><a href="#②YAML" class="headerlink" title="②YAML"></a>②YAML</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.47</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><h4 id="③主启动类"><a href="#③主启动类" class="headerlink" title="③主启动类"></a>③主启动类</h4><p>仿照生产者工程的主启动类，改一下类名即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConsumerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQConsumerMainType.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="④监听器"><a href="#④监听器" class="headerlink" title="④监听器"></a>④监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.work&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Server Port:&quot;</span> + serverPort + <span class="hljs-string">&quot; Message Content:&quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-3-运行效果"><a href="#1-2-3-运行效果" class="headerlink" title="1.2.3 运行效果"></a>1.2.3 运行效果</h3><h4 id="①消费端A"><a href="#①消费端A" class="headerlink" title="①消费端A"></a>①消费端A</h4><blockquote><p>Server Port:10000 Message Content:Hello atguigu 0<br>Server Port:10000 Message Content:Hello atguigu 2<br>Server Port:10000 Message Content:Hello atguigu 4<br>Server Port:10000 Message Content:Hello atguigu 6<br>Server Port:10000 Message Content:Hello atguigu 8</p></blockquote><h4 id="②消费端B"><a href="#②消费端B" class="headerlink" title="②消费端B"></a>②消费端B</h4><blockquote><p>Server Port:20000 Message Content:Hello atguigu 1<br>Server Port:20000 Message Content:Hello atguigu 3<br>Server Port:20000 Message Content:Hello atguigu 5<br>Server Port:20000 Message Content:Hello atguigu 7<br>Server Port:20000 Message Content:Hello atguigu 9</p></blockquote><h1 id="2-订阅模式类型"><a href="#2-订阅模式类型" class="headerlink" title="2 订阅模式类型"></a><strong>2 订阅模式类型</strong></h1><p>订阅模式示例图：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085107277.png"> </p><p>前面2个案例中，只有3个角色：</p><p>· P：生产者，也就是要发送消息的程序</p><p>· C：消费者：消息的接受者，会一直等待消息到来。</p><p>· queue：消息队列，图中红色部分</p><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><p>· P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</p><p>· C：消费者，消息的接受者，会一直等待消息到来。</p><p>· Queue：消息队列，接收消息、缓存消息。</p><p>· Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p><p><strong>Exchange有常见以下3种类型</strong>：</p><p>o Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>o Direct：定向，把消息交给符合指定routing key 的队列</p><p>o Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h1 id="3-Publish-Subscribe发布订阅模式"><a href="#3-Publish-Subscribe发布订阅模式" class="headerlink" title="3 Publish&#x2F;Subscribe发布订阅模式"></a>3 Publish&#x2F;Subscribe发布订阅模式</h1><p>一句话总结</p><p>在队列接收消息中间加了一个交换机，交换机可以设定路由规则将消息分发到对应的队列里面，然后消费者设定规则去对应队列里面获取消息数据</p><h2 id="3-1-模式说明"><a href="#3-1-模式说明" class="headerlink" title="3.1 模式说明"></a>3.1 模式说明</h2><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085123819.png"> </p><p>发布订阅模式：<br>1、每个消费者监听自己的队列。<br>2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收<br>到消息</p><h2 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h2><h3 id="1-创建组件"><a href="#1-创建组件" class="headerlink" title="1 创建组件"></a>1 创建组件</h3><ul><li>名称列表</li></ul><table><thead><tr><th>组件</th><th>组件名称</th></tr></thead><tbody><tr><td>交换机</td><td>atguigu.exchange.fanout</td></tr><tr><td>队列</td><td>atguigu.queue.fanout01<br>atguigu.queue.fanout02</td></tr></tbody></table><h3 id="2-创建交换机"><a href="#2-创建交换机" class="headerlink" title="2 创建交换机"></a>2 创建交换机</h3><p><span style="color:blue;"><strong>注意</strong></span>：发布订阅模式要求交换机是Fanout类型</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725210428356.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725210526288.png"></p><h3 id="3-创建队列并绑定交换机"><a href="#3-创建队列并绑定交换机" class="headerlink" title="3 创建队列并绑定交换机"></a>3 创建队列并绑定交换机</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725210906899.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725211118200.png"></p><p>此时可以到交换机下查看绑定关系：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725211206904.png"></p><h3 id="4-生产者代码"><a href="#4-生产者代码" class="headerlink" title="4 生产者代码"></a>4 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_FANOUT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.exchange.fanout&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageFanout</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(EXCHANGE_FANOUT, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Hello fanout ~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-消费者代码"><a href="#5-消费者代码" class="headerlink" title="5 消费者代码"></a>5 消费者代码</h3><p>两个监听器可以写在同一个微服务中，分别监听两个不同队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.fanout01&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage01</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Consumer01 Message Content:&quot;</span> + messageContent);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.fanout02&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage02</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Consumer02 Message Content:&quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-运行效果"><a href="#6-运行效果" class="headerlink" title="6 运行效果"></a>6 运行效果</h3><p>先启动消费者，然后再运行生产者程序发送消息：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725212632041.png"></p><h2 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h2><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><strong>发布订阅模式与工作队列模式的区别：</strong></p><ul><li>工作队列模式本质上是绑定默认交换机</li><li>发布订阅模式绑定指定交换机</li><li>监听同一个队列的消费端程序彼此之间是竞争关系</li><li>绑定同一个交换机的多个队列在发布订阅模式下，消息是广播的，每个队列都能接收到消息</li></ul><h1 id="4-Routing路由模式"><a href="#4-Routing路由模式" class="headerlink" title="4 Routing路由模式"></a>4 Routing路由模式</h1><h2 id="4-1-模式说明"><a href="#4-1-模式说明" class="headerlink" title="4.1 模式说明"></a>4.1 模式说明</h2><p>路由模式特点：</p><p>· 队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</p><p>· 消息的发送方在 向 Exchange发送消息时，也必须指定消息的 RoutingKey。</p><p>· Exchange不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的Routingkey与消息的 Routing key完全一致，才会接收到消息</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085148987.png"> </p><p>图解：</p><p>· P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p><p>· X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p><p>· C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p><p>· C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h2><h3 id="1-创建组件-1"><a href="#1-创建组件-1" class="headerlink" title="1 创建组件"></a>1 创建组件</h3><ul><li>组件清单</li></ul><p>没有特殊设置，名称外的其它参数都使用默认值：</p><table><thead><tr><th>组件</th><th>组件名称</th></tr></thead><tbody><tr><td>交换机</td><td>atguigu.exchange.direct</td></tr><tr><td>路由键</td><td>atguigu.routing.key.good</td></tr><tr><td>队列</td><td>atguigu.queue.direct</td></tr></tbody></table><h3 id="2-绑定"><a href="#2-绑定" class="headerlink" title="2 绑定"></a>2 绑定</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725214547261.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725214608820.png"></p><h3 id="3-生产者代码"><a href="#3-生产者代码" class="headerlink" title="3 生产者代码"></a>3 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.exchange.direct&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_GOOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.routing.key.good&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageRouting</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(EXCHANGE_DIRECT, ROUTING_KEY_GOOD, <span class="hljs-string">&quot;Hello routing ~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-消费者代码"><a href="#4-消费者代码" class="headerlink" title="4 消费者代码"></a>4 消费者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.direct&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageRouting</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Message Content:&quot;</span> + messageContent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5 运行结果"></a>5 运行结果</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725215245500.png"></p><h1 id="5-Topics通配符模式"><a href="#5-Topics通配符模式" class="headerlink" title="5 Topics通配符模式"></a>5 Topics通配符模式</h1><h2 id="5-1-模式说明"><a href="#5-1-模式说明" class="headerlink" title="5.1. 模式说明"></a><strong>5.1. 模式说明</strong></h2><p>Topic类型与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候<strong>使用通配符</strong>！</p><p>Routingkey 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert</p><p>通配符规则：</p><p>#：匹配零个或多个词</p><p>*：匹配不多不少恰好1个词</p><p>举例：</p><p>item.#：能够匹配item.insert.abc 或者 item.insert</p><p>item.*：只能匹配item.insert</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085214905.png"> </p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/wps14.jpg"> </p><p>图解：</p><p>· 红色Queue：绑定的是usa.# ，因此凡是以 usa.开头的routing key 都会被匹配到</p><p>· 黄色Queue：绑定的是#.news ，因此凡是以 .news结尾的 routing key 都会被匹配</p><h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h2><h3 id="1-创建组件-2"><a href="#1-创建组件-2" class="headerlink" title="1 创建组件"></a>1 创建组件</h3><ul><li>组件清单</li></ul><table><thead><tr><th>组件</th><th>组件名称</th></tr></thead><tbody><tr><td>交换机</td><td>atguigu.exchange.topic</td></tr><tr><td>路由键</td><td>#.error<br>order.*<br>*.*</td></tr><tr><td>队列</td><td>atguigu.queue.message<br>atguigu.queue.order</td></tr></tbody></table><h3 id="2-创建交换机-1"><a href="#2-创建交换机-1" class="headerlink" title="2 创建交换机"></a>2 创建交换机</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725220957833.png"></p><h3 id="3-绑定关系"><a href="#3-绑定关系" class="headerlink" title="3 绑定关系"></a>3 绑定关系</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725222339828.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725222805072.png"></p><h3 id="4-生产者代码-1"><a href="#4-生产者代码-1" class="headerlink" title="4 生产者代码"></a>4 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.exchange.topic&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#.error&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order.*&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_ALL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*.*&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTopic</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(EXCHANGE_TOPIC, <span class="hljs-string">&quot;order.info&quot;</span>, <span class="hljs-string">&quot;message order info ...&quot;</span>);<br>    rabbitTemplate.convertAndSend(EXCHANGE_TOPIC, <span class="hljs-string">&quot;goods.info&quot;</span>, <span class="hljs-string">&quot;message goods info ...&quot;</span>);<br>    rabbitTemplate.convertAndSend(EXCHANGE_TOPIC, <span class="hljs-string">&quot;goods.error&quot;</span>, <span class="hljs-string">&quot;message goods error ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-消费者代码-1"><a href="#5-消费者代码-1" class="headerlink" title="5 消费者代码"></a>5 消费者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.message&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage01</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Queue Message:&quot;</span> + messageContent);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.order&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage02</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Queue Order:&quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-运行效果-1"><a href="#6-运行效果-1" class="headerlink" title="6 运行效果"></a>6 运行效果</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725223737173.png"></p><h1 id="6-模式总结"><a href="#6-模式总结" class="headerlink" title="6 模式总结"></a>6 模式总结</h1><h2 id="1、简单模式-HelloWorld"><a href="#1、简单模式-HelloWorld" class="headerlink" title="1、简单模式 HelloWorld"></a><strong>1、简单模式 HelloWorld</strong></h2><p>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085244893.png"> </p><h2 id="2、工作队列模式-Work-Queue"><a href="#2、工作队列模式-Work-Queue" class="headerlink" title="2、工作队列模式 Work Queue"></a><strong>2、工作队列模式 Work Queue</strong></h2><p>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085305207.png"> </p><h2 id="3、发布订阅模式-Publish-subscribe"><a href="#3、发布订阅模式-Publish-subscribe" class="headerlink" title="3、发布订阅模式 Publish&#x2F;subscribe"></a><strong>3、发布订阅模式 Publish&#x2F;subscribe</strong></h2><p>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085325073.png"> </p><h2 id="4、路由模式-Routing"><a href="#4、路由模式-Routing" class="headerlink" title="4、路由模式 Routing"></a><strong>4、路由模式 Routing</strong></h2><p>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p> <img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085354471.png"></p><h2 id="5、通配符模式-Topic"><a href="#5、通配符模式-Topic" class="headerlink" title="5、通配符模式 Topic"></a><strong>5、通配符模式 Topic</strong></h2><p>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p> <img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085413115.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2、RabbitMQ入门案例</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ入门案例"><a href="#RabbitMQ入门案例" class="headerlink" title="RabbitMQ入门案例"></a>RabbitMQ入门案例</h1><h1 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h1><p>生产者发送消息，消费者接收消息，用最简单的方式实现</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240806084908636.png"></p><h1 id="二、创建队列"><a href="#二、创建队列" class="headerlink" title="二、创建队列"></a>二、创建队列</h1><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725175936170.png"></p><p>队列名称：atguigu.queue.simple</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725180208216.png"></p><h1 id="三、Java-客户端：整合-SpringBoot"><a href="#三、Java-客户端：整合-SpringBoot" class="headerlink" title="三、Java 客户端：整合 SpringBoot"></a>三、Java 客户端：整合 SpringBoot</h1><h2 id="1、生产者端工程"><a href="#1、生产者端工程" class="headerlink" title="1、生产者端工程"></a>1、生产者端工程</h2><h3 id="①创建module"><a href="#①创建module" class="headerlink" title="①创建module"></a>①创建module</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/img75.png"></p><h3 id="②配置POM"><a href="#②配置POM" class="headerlink" title="②配置POM"></a>②配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③YAML"><a href="#③YAML" class="headerlink" title="③YAML"></a>③YAML</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">rabbitmq:</span> <br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.47</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span> <br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span> <br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><h3 id="④主启动类"><a href="#④主启动类" class="headerlink" title="④主启动类"></a>④主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  <br>  <br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProducerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQProducerMainType.class, args);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑤测试程序"><a href="#⑤测试程序" class="headerlink" title="⑤测试程序"></a>⑤测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.test;<br>  <br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQTest</span> &#123;  <br>  <br>    <span class="hljs-comment">// 在简单模式下，没有用到交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <br>    <span class="hljs-comment">// 在简单模式下，消息直接发送到队列，此时生产者端需要把队列名称从路由键参数这里传入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_SIMPLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.queue.simple&quot;</span>;<br>  <br>    <span class="hljs-comment">// 注入 RabbitTemplate 执行</span><br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageSimple</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_DIRECT,   <span class="hljs-comment">// 指定交换机名称</span><br>                ROUTING_KEY_SIMPLE, <span class="hljs-comment">// 指定路由键名称</span><br>                <span class="hljs-string">&quot;Hello atguigu&quot;</span>);   <span class="hljs-comment">// 消息内容，也就是消息数据本身</span><br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑥测试效果"><a href="#⑥测试效果" class="headerlink" title="⑥测试效果"></a>⑥测试效果</h3><p>消息发送到了队列中：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725193430307.png"></p><h2 id="2、消费端工程"><a href="#2、消费端工程" class="headerlink" title="2、消费端工程"></a>2、消费端工程</h2><h3 id="①创建module-1"><a href="#①创建module-1" class="headerlink" title="①创建module"></a>①创建module</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/img76-17306871500848.png"></p><h3 id="②配置POM-1"><a href="#②配置POM-1" class="headerlink" title="②配置POM"></a>②配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③YAML-1"><a href="#③YAML-1" class="headerlink" title="③YAML"></a>③YAML</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.47</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><h3 id="④主启动类-1"><a href="#④主启动类-1" class="headerlink" title="④主启动类"></a>④主启动类</h3><p>仿照生产者工程的主启动类，改一下类名即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConsumerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQConsumerMainType.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑤监听器"><a href="#⑤监听器" class="headerlink" title="⑤监听器"></a>⑤监听器</h3><ul><li>使用 @RabbitListener 注解设定要监听的队列名称</li><li>消息数据使用和发送端一样的数据类型接收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.simple&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;messageContent = &quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑥执行测试"><a href="#⑥执行测试" class="headerlink" title="⑥执行测试"></a>⑥执行测试</h3><p>监听方法不能直接运行，请大家通过主启动类运行微服务。消费端取走消息之后，队列中就没有消息了：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725194639024.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1、RabbitMQ概述和安装</title>
    <link href="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <url>/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ概述和安装"><a href="#RabbitMQ概述和安装" class="headerlink" title="RabbitMQ概述和安装"></a>RabbitMQ概述和安装</h1><h1 id="一、消息中间件概述"><a href="#一、消息中间件概述" class="headerlink" title="一、消息中间件概述"></a>一、消息中间件概述</h1><h2 id="1-为什么学习消息队列"><a href="#1-为什么学习消息队列" class="headerlink" title="1 为什么学习消息队列"></a>1 为什么学习消息队列</h2><p>在互联网应用中，经常需要对庞大的海量数据进行监控，随着网络技术和软件开发技术的不断提高，在实战开发中MQ的使用与日俱增，特别是RabbitMQ在分布式系统中存储转发消息，可以保证数据不丢失，也能保证高可用性，即集群部署的时候部分机器宕机可以继续运行。在大型电子商务类网站，如京东、淘宝、去哪儿等网站有着深入的应用 。</p><p>消息队列的主要作用是<strong>消除高并发访问高峰，加快网站的响应速度</strong>。</p><p>在不使用消息队列的情况下，用户的请求数据直接写入数据库，在高并发的情况下，会对数据库造成巨大的压力，同时也使得系统响应延迟加剧。</p><h2 id="2-什么是消息中间件"><a href="#2-什么是消息中间件" class="headerlink" title="2 什么是消息中间件"></a>2 什么是消息中间件</h2><p>MQ全称为<strong>Message Queue</strong>， 消息队列(MQ)是一种应用程序对应用程序的通信方法。</p><p>介绍：消息队列就是基础数据结构中的“先进先出”的一种数据机构。想一下，生活中买东西，需要排队，先排的人先买消费，就是典型的“先进先出”。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-9860.png"></p><p><strong>消息传递：</strong>指的是程序之间通过消息发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。</p><p><strong>排队：</strong>指的是应用程序通过队列来通信。</p><p><strong>业务场景说明：</strong></p><p>消息队列在大型电子商务类网站，如京东、淘宝、去哪儿等网站有着深入的应用，为什么会产生消息队列？有几个原因：</p><p>不同进程（process）之间传递消息时，两个进程之间<strong>耦合</strong>程度过高，改动一个进程，引发必须修改另一个进程，为了<strong>隔离</strong>这两个进程，在两进程间抽离出一层（一个模块），所有两进程之间传递的消息，都必须通过消息队列来传递，单独修改某一个进程，不会影响另一个；</p><p>不同进程（process）之间传递消息时，为了实现标准化，将消息的格式规范化了，并且，某一个进程接受的<strong>消息太多</strong>，一下子无法处理完，并且也有先后顺序，必须对收到的消息<strong>进行排队</strong>，因此诞生了事实上的消息队列；</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong>。</p><h2 id="3-消息队列应用场景"><a href="#3-消息队列应用场景" class="headerlink" title="3 消息队列应用场景"></a>3 消息队列应用场景</h2><p>首先我们先说一下消息中间件的主要的作用：</p><p>　　<strong>[1]异步处理</strong></p><p>　　<strong>[2]解耦服务</strong></p><p>　　<strong>[3]流量削峰</strong></p><p>​        <font style="color:red">分布式事务</font></p><p>上面的三点是我们使用消息中间件最主要的目的.</p><h3 id="3-1-应用解耦"><a href="#3-1-应用解耦" class="headerlink" title="3.1 应用解耦"></a>3.1 应用解耦</h3><ul><li>以下单功能为例，如下图，存在功能耦合度高的问题。</li><li>用户下单，需要保存订单，更新购物车，更新库存，还要更新积分，如果在操作过程中，有任何一个环节失败了，最终会导致操作失败，返回错误信息</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-8298.png"></p><ul><li>而采用消息队列方式，可以很好的解决耦合度过高问题</li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-8001.png"></p><h3 id="3-2-异步处理"><a href="#3-2-异步处理" class="headerlink" title="3.2 异步处理"></a>3.2 异步处理</h3><p>场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种</p><ul><li><p>串行的方式</p></li><li><p>并行的方式</p></li></ul><p><strong>(1)</strong> <strong>串行方式：</strong></p><p>将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。 这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps1.jpg"> </p><p><strong>(2)</strong> <strong>并行方式：</strong></p><p>将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的时间。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps2.jpg"> </p><p>假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并行已经提高了处理时间，但是，前面说过，邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功，应该是写入数据库后就返回.</p><p><strong>(3)消息队列</strong><br>引入消息队列后，把发送邮件，短信不是必须的业务逻辑异步处理</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps3.jpg"> </p><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计)，</p><p>引入消息队列后处理后，响应时间是串行的3分之1，是并行的2分之1。</p><p><strong>传统模式的缺点：</strong></p><p>· 一些非必要的业务逻辑以同步的方式运行，太耗费时间。</p><p><strong>中间件模式的的优点：</strong></p><p>· 将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度</p><h3 id="3-3-流量削峰"><a href="#3-3-流量削峰" class="headerlink" title="3.3 流量削峰"></a>3.3 流量削峰</h3><p>流量削峰一般在秒杀活动中应用广泛</p><p><strong>场景：</strong> 秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。</p><p><strong>传统模式</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps4.jpg"> </p><p><strong>传统模式的缺点：</strong></p><p>· 并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常</p><p><strong>中间件模式：</strong></p><p>消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps5.jpg"> </p><p><strong>中间件模式的的优点：</strong></p><p>系统A慢慢按照数据库能处理的并发量，从消息队列中拉取消息。在生产中，这个短暂的高峰期积压是允许的。</p><p><strong>流量削峰也叫做削峰填谷</strong></p><p>使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在 3消费完积压的消息，这就叫做“填谷”</p><h2 id="4-AMQP-和-JMS"><a href="#4-AMQP-和-JMS" class="headerlink" title="4 AMQP 和 JMS"></a><strong>4 AMQP 和 JMS</strong></h2><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p><h3 id="4-1-AMQP"><a href="#4-1-AMQP" class="headerlink" title="4.1. AMQP"></a><strong>4.1. AMQP</strong></h3><p>AMQP是一种<strong>高级消息队列协议（Advanced Message Queuing Protocol），更准确的说是一种binary wire-level protocol（</strong>链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h3 id="4-2-JMS"><a href="#4-2-JMS" class="headerlink" title="4.2. JMS"></a><strong>4.2. JMS</strong></h3><p>JMS即<strong>Java消息服务（JavaMessage Service）</strong>应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><h3 id="4-3-AMQP-与-JMS-区别"><a href="#4-3-AMQP-与-JMS-区别" class="headerlink" title="4.3. AMQP 与 JMS 区别"></a><strong>4.3. AMQP 与 JMS 区别</strong></h3><p>· JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</p><p>· JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</p><p>· JMS规定了两种消息模式；而AMQP的消息模式更加丰富</p><h2 id="5-消息队列产品"><a href="#5-消息队列产品" class="headerlink" title="5 消息队列产品"></a><strong>5 消息队列产品</strong></h2><p>市场上常见的消息队列有如下：</p><p>· ActiveMQ：基于JMS</p><p>· ZeroMQ：基于C语言开发</p><p>· Rabbitmq:基于AMQP协议，erlang语言开发，稳定性好</p><p>· RocketMQ：基于JMS，阿里巴巴产品</p><p>· Kafka：类似MQ的产品；分布式消息系统，高吞吐量</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-3981.png"></p><h2 id="6-RabbitMQ介绍"><a href="#6-RabbitMQ介绍" class="headerlink" title="6 RabbitMQ介绍"></a>6 RabbitMQ介绍</h2><h3 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1 简介"></a>6.1 简介</h3><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p><p>AMQP，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同的开发语言等条件的限制。2006年，AMQP 规范发布。类比HTTP。 </p><p>2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</p><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a> </p><p>RabbitMQ提供了<strong>多种工作模式</strong>：简单模式，work模式 ，Publish&#x2F;Subscribe发布与订阅模式，Routing路由模式，Topics主题模式等</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a> </p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-2095.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-2986.png"></p><h3 id="6-2-RabbitMQ基础架构"><a href="#6-2-RabbitMQ基础架构" class="headerlink" title="6.2 RabbitMQ基础架构"></a>6.2 RabbitMQ基础架构</h3><ul><li><strong>基础架构图</strong></li></ul><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-4889.png"> </p><ul><li><strong>RabbitMQ相关概念</strong></li></ul><p><strong>Broker：</strong>接收和分发消息的应用，RabbitMQ Server就是 Message Broker</p><p><strong>Virtual host：</strong>出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p><p><strong>Connection：</strong>publisher／consumer 和 broker 之间的 TCP 连接</p><p><strong>Channel：</strong>如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</p><p><strong>Exchange：</strong>message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到queue 中去。常用的类型有：**direct (point-to-point)**， <strong>topic (publish-subscribe)</strong> and <strong>fanout (multicast)</strong></p><p><strong>Queue：</strong>存储消息的容器，消息最终被送到这里，等待 consumer 取走</p><p><strong>Binding：</strong>exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h1 id="二、RabbitMQ安装"><a href="#二、RabbitMQ安装" class="headerlink" title="二、RabbitMQ安装"></a>二、RabbitMQ安装</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像</span><br>docker pull rabbitmq:3.13-management<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 参数：后台运行 Docker 容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--name 参数：设置容器名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 参数：映射端口号，格式是“宿主机端口号:容器内端口号”。5672供客户端程序访问，15672供后台管理界面访问</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 参数：卷映射目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-e 参数：设置容器内的环境变量，这里我们设置了登录RabbitMQ管理后台的默认用户和密码</span><br>docker run -d \<br>--name rabbitmq \<br>-p 5672:5672 \<br>-p 15672:15672 \<br>-v rabbitmq-plugin:/plugins \<br>-e RABBITMQ_DEFAULT_USER=guest \<br>-e RABBITMQ_DEFAULT_PASS=123456 \<br>rabbitmq:3.13-management<br></code></pre></td></tr></table></figure><h2 id="2-验证"><a href="#2-验证" class="headerlink" title="2 验证"></a>2 验证</h2><p>访问后台管理界面：<a href="http://192.168.200.100:15672/">http://192.168.200.100:15672</a></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-2610.png"></p><p>使用上面创建Docker容器时指定的默认用户名、密码登录：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-3997.png"></p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-6743.png"></p><h2 id="3-可能的问题1：Docker升级"><a href="#3-可能的问题1：Docker升级" class="headerlink" title="3 可能的问题1：Docker升级"></a>3 可能的问题1：Docker升级</h2><h3 id="3-1-问题现象"><a href="#3-1-问题现象" class="headerlink" title="3.1 问题现象"></a>3.1 问题现象</h3><p>在使用Docker拉取RabbitMQ镜像的时候，如果遇到提示：missing signature key，那就说明Docker版本太低了，需要升级</p><p>比如我目前的Docker版本如下图所示：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-5299.png"></p><h3 id="3-2-解决办法"><a href="#3-2-解决办法" class="headerlink" title="3.2 解决办法"></a>3.2 解决办法</h3><blockquote><p>基于CentOS7</p></blockquote><h4 id="①卸载当前Docker"><a href="#①卸载当前Docker" class="headerlink" title="①卸载当前Docker"></a>①卸载当前Docker</h4><p>更好的办法是安装Docker前曾经给服务器拍摄了快照，此时恢复快照；</p><p>如果不曾拍摄快照，那只能执行卸载操作了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum erase -y docker \<br>docker-client \<br>docker-client-latest \<br>docker-common \<br>docker-latest \<br>docker-latest-logrotate \<br>docker-logrotate \<br>docker-selinux \<br>docker-engine-selinux \<br>docker-engine \<br>docker-ce<br></code></pre></td></tr></table></figure><h4 id="②升级yum库"><a href="#②升级yum库" class="headerlink" title="②升级yum库"></a>②升级yum库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update -y<br></code></pre></td></tr></table></figure><h4 id="③安装Docker最新版"><a href="#③安装Docker最新版" class="headerlink" title="③安装Docker最新版"></a>③安装Docker最新版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>如果这一步看到提示：没有可用软件包 docker-ce，那就添加Docker的yum源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="④设置Docker服务"><a href="#④设置Docker服务" class="headerlink" title="④设置Docker服务"></a>④设置Docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br>systemctl enable docker<br></code></pre></td></tr></table></figure><h3 id="3-3-验证"><a href="#3-3-验证" class="headerlink" title="3.3 验证"></a>3.3 验证</h3><p>上述操作执行完成后，再次查看Docker版本：</p><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-8105.png"></p><h2 id="4-可能的问题：拉取镜像失败"><a href="#4-可能的问题：拉取镜像失败" class="headerlink" title="4 可能的问题：拉取镜像失败"></a>4 可能的问题：拉取镜像失败</h2><h3 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h3><p><img src="/2024/11/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-3339.png"></p><h3 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h3><h4 id="①daemon-json"><a href="#①daemon-json" class="headerlink" title="①daemon.json"></a>①daemon.json</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建或修改 docker 守护进程配置文件：daemon.json</span><br>vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><h4 id="②修改镜像源"><a href="#②修改镜像源" class="headerlink" title="②修改镜像源"></a>②修改镜像源</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: <span class="hljs-string">[&quot;https://registry.dockermirror.com&quot;]</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="③重启docker服务"><a href="#③重启docker服务" class="headerlink" title="③重启docker服务"></a>③重启docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="④查看修改后的镜像源"><a href="#④查看修改后的镜像源" class="headerlink" title="④查看修改后的镜像源"></a>④查看修改后的镜像源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker info<br></code></pre></td></tr></table></figure><p>部分内容举例如下：</p><blockquote><p>…… </p><p>Docker Root Dir: &#x2F;var&#x2F;lib&#x2F;docker<br> Debug Mode: false<br> Experimental: false<br> Insecure Registries:<br>  127.0.0.0&#x2F;8<br> Registry Mirrors:<br>  <a href="https://registry.dockermirror.com/">https://registry.dockermirror.com/</a><br> Live Restore Enabled: fals</p></blockquote><p>最后再尝试重新拉取所需镜像</p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
