<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第4章 ElasticSearch入门</title>
    <link href="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/"/>
    <url>/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-elasticsearch概述"><a href="#1-elasticsearch概述" class="headerlink" title="1 elasticsearch概述"></a>1 elasticsearch概述</h1><h2 id="1-1-elasticsearch-简介"><a href="#1-1-elasticsearch-简介" class="headerlink" title="1.1 elasticsearch 简介"></a>1.1 elasticsearch 简介</h2><p>官网: <a href="https://www.elastic.co/">https://www.elastic.co/</a></p><p>ElasticSearch是一个基于 Lucene 的搜索服务器，基于RESTful web接口。Elasticsearch是用Java开发的，开源的企业级搜索引擎。 </p><p><a href="https://so.csdn.net/so/search?q=Elastic&spm=1001.2101.3001.7020">Elastic</a>官方宣布Elasticsearch进入Version 8，在速度、扩展、高相关性和简单性方面开启了一个全新的时代。</p><p>说明：Elasticsearch 8最低jdk版本要求jdk17，当前我们选择Elasticsearch版本：Elasticsearch8.5.3</p><p><a href="https://db-engines.com/en/ranking">DB-Engines Ranking - popularity ranking of database management systems</a></p><h2 id="1-2-Elasticsearch的特性"><a href="#1-2-Elasticsearch的特性" class="headerlink" title="1.2 Elasticsearch的特性"></a>1.2 Elasticsearch的特性</h2><p><strong>实时</strong><br>理论上数据从写入Elasticsearch到数据可以被搜索只需要1秒左右的时间，实现准实时的数据索引和查询。</p><p><strong>分布式、可扩展</strong><br>天生的分布式的设计，数据分片对于应用层透明，扩展性良好，可以轻易的进行节点扩容，支持上百甚至上千的服务器节点，支持PB级别的数据存储和搜索。</p><p><strong>稳定可靠</strong><br>Elasticsearch的分布式、数据冗余特性提供更加可靠的运行机制，且经过大型互联网公司众多项目使用，可靠性得到验证。</p><p><strong>高可用</strong><br>数据多副本、多节点存储，单节点的故障不影响<strong>集群</strong>的使用。</p><p><strong>Rest API</strong><br>Elasticsearch提供标准的Rest API，这使得所有支持Rest API的语言都能够轻易的使用Elasticsearch，具备多语言通用的支持特性，易于使用。Elasticsearch Version 8以后，去除了以前Transport API、High-Level API、Low-Level API，统一标准的Rest API，这将使得Elasticsearch更加容易使用，原来被诟病的API混乱问题终于得到完美解决。</p><p><strong>高性能</strong><br>Elasticsearch底层构建基于Lucene，具备强大的搜索能力，即便是PB级别的数据依然能够实现秒级的搜索。</p><p><strong>多客户端支持</strong><br>支持Java、Python、Go、PHP、Ruby等多语言客户端，还支持JDBC、ODBC等客户端。</p><p><strong>安全支持</strong><br>提供单点登录SSO、加密通信、集群角色、属性的访问控制，支持审计等功能，在安全层面上还支持集成第三方的安全组件，在Version 8以后，默认开启了HTTPS，大大简化了安全上的配置。</p><h2 id="1-3-Elasticsearch应用场景"><a href="#1-3-Elasticsearch应用场景" class="headerlink" title="1.3 Elasticsearch应用场景"></a>1.3 Elasticsearch应用场景</h2><p><strong>搭建日志系统</strong><br>日志系统应该是Elasticsearch使用最广泛的场景之一了，Elasticsearch支持海量数据的存储和查询，特别适合日志搜索场景。广泛使用的ELK套件(Elasticsearch、Logstash、Kibana)是日志系统最经典的案例，使用Logstash和Beats组件进行日志收集，Elasticsearch存储和查询应用日志，Kibana提供日志的可视化搜索界面。</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/a4ea64ee1bc0e076805ebf705d0b540c.png"></p><!--![a4ea64ee1bc0e076805ebf705d0b540c](第4章 ElasticSearch入门/a4ea64ee1bc0e076805ebf705d0b540c.png)--><p><strong>搭建数据分析系统</strong><br>Elasitcsearch支持数据分析，例如强大的数据聚合功能，通过搭配Kibana，提供诸如直方图、统计分组、范围聚合等方便使用的功能，能够快速实现一些数据报表等功能。<br>在数字化转型的大行其道的当下，需要从海量数据中发现数据的规律，从而做出一定的决策，Elasticsearch一定是最适合的解决方案之一。</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/02d43aeb4492c0ac838150ad1d600a21.png"></p><!--![02d43aeb4492c0ac838150ad1d600a21](第4章 ElasticSearch入门/02d43aeb4492c0ac838150ad1d600a21.png)--><p><strong>搭建搜索系统</strong><br>Elasticsearch为搜索而生，用于搭建全文搜索系统是自然而然的事情，它能够提供快速的索引和搜索功能，还有相关的评分功能、分词插件等，支持丰富的搜索特性，可以用于搭建大型的搜索引擎，更加常用语实现站内搜索，例如银行App、购物App等站内商品、服务搜索。</p><p><strong>构建海量数据业务系统即席查询服务</strong><br>目前大量的需要支持事务的系统使用MySQL作为数据库，但随着业务的开展，数据量会越来越大，而MySQL的性能会越来越差，虽然可以通过分库分表的方案进行解决，但是操作比较复杂，而且往往每隔一段时间就需要进行扩展，且代码需要配合修改。<br>这种情况下可以将数据从MySQL同步到Elasticsearch，针对实时性要求不太高或者主要查询历史数据且数据量比较大的场景使用Elasticsearch提供查询，而对需要事务实时控制的即时数据还是通过MySQL存储和查询。</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/c47ad528d01a412a85b5f2e7aff877d7.png"></p><!--![c47ad528d01a412a85b5f2e7aff877d7](第4章 ElasticSearch入门/c47ad528d01a412a85b5f2e7aff877d7.png)--><p><strong>作为独立数据库系统</strong><br>Elasticsearch本身提供了数据持久化存储的能力，并且提供了增删改查的功能，在某些应用场景下可以直接当做数据库系统来使用，既提供了存储能力，又能够同时具备搜索能力，整体技术架构会比较简单，例如博客系统、评论系统。需要注意的是，Elasticsearch不支持事务，且写入的性能相对关系型数据库稍弱，所有需要使用事务的场景都不能将Elasticsearch当做唯一的数据库系统，这使得这种使用场景很少见。</p><h2 id="1-4-全文搜索引擎"><a href="#1-4-全文搜索引擎" class="headerlink" title="1.4 全文搜索引擎"></a>1.4 全文搜索引擎</h2><p>Google，百度类的网站搜索，它们都是根据网页中的<strong>关键字</strong>生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p><p>一般<strong>传统数据库</strong>，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要<strong>扫描整个表</strong>，如果数据量大的话即使对SQL的语法<strong>优化</strong>，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>这里说到的<strong>全文搜索引擎</strong>指的是目前广泛应用的主流<strong>搜索引擎</strong>。它的工作原理是计算机索引程序通过扫描文章中的每一个词，<strong>对每一个词建立一个索引，指明该词在文章中出现的次数和位置</strong>，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><p>” 华为手机 “ 华为-手机</p><h2 id="1-5-倒排索引"><a href="#1-5-倒排索引" class="headerlink" title="1.5 倒排索引"></a>1.5 倒排索引</h2><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/tingshu052.png"></p><!--![](第4章 ElasticSearch入门/tingshu052.png)--><p><strong>倒排索引步骤:</strong></p><ul><li>数据根据词条进行<strong>分词</strong>，同时记录文档索引位置</li><li>将词条相同的数据化进行<strong>合并</strong></li><li>对词条进行<strong>排序</strong></li></ul><p><strong>搜索过程:</strong></p><p>先将搜索词语进行分词，分词后再倒排索引列表查询文档位置(docId)。根据docId查询文档数据。</p><h2 id="1-6-lucene介绍"><a href="#1-6-lucene介绍" class="headerlink" title="1.6 lucene介绍"></a>1.6 lucene介绍</h2><p>​Lucene是Apache软件基金会Jakarta项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在Java开发环境里Lucene是一个成熟的免费开源工具。就其本身而言，Lucene是当前以及最近几年最受欢迎的免费<strong>Java信息检索程序库</strong>。但Lucene只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>​目前市面上流行的搜索引擎软件，主流的就两款：<strong>Elasticsearch和Solr</strong>,这两款都是基于Lucene搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><h2 id="1-7-elasticsearch、solr对比"><a href="#1-7-elasticsearch、solr对比" class="headerlink" title="1.7 elasticsearch、solr对比"></a>1.7 elasticsearch、solr对比</h2><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/05.png"></p><!--![](第4章 ElasticSearch入门/05.png)--><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/06.png"></p><!--![](第4章 ElasticSearch入门/06.png)--><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/07.png"></p><!--![](第4章 ElasticSearch入门/07.png)--><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/08.png"></p><!--![](第4章 ElasticSearch入门/08.png)--><p><strong>ElasticSearch vs Solr 总结</strong></p><ul><li>es基本是开箱即用，非常简单。Solr安装略微复杂。</li><li>Solr 利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能。</li><li>Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持json文件格式。</li><li>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</li></ul><p>现在很多互联网应用都是要求实时搜索的，所以我们选择了elasticsearch。</p><h1 id="2-elasticSearch的安装"><a href="#2-elasticSearch的安装" class="headerlink" title="2 elasticSearch的安装"></a>2 elasticSearch的安装</h1><p><strong>详见《软件环境安装》</strong></p><h1 id="3-elasticsearch核心概念"><a href="#3-elasticsearch核心概念" class="headerlink" title="3 elasticsearch核心概念"></a>3 elasticsearch核心概念</h1><h3 id="3-1-es对照数据库"><a href="#3-1-es对照数据库" class="headerlink" title="3.1 es对照数据库"></a>3.1 es对照数据库</h3><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/image-20211006113840156.png"></p><!--![image-20211006113840156](第4章 ElasticSearch入门/image-20211006113840156.png)--><h3 id="3-2-索引-Index"><a href="#3-2-索引-Index" class="headerlink" title="3.2 索引(Index)"></a>3.2 索引(Index)</h3><p>一个索引就是一个拥有几分相似特征的<strong>文档的集合</strong>。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p><p><em><strong>Elasticsearch索引的精髓：一切设计都是为了提高搜索的性能。</strong></em></p><h3 id="3-3-类型-Type"><a href="#3-3-类型-Type" class="headerlink" title="3.3 类型(Type)"></a>3.3 类型(Type)</h3><p>在一个索引中，你可以定义一种或多种类型。</p><p>一个类型是你的索引的一个逻辑上的分类&#x2F;分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化</p><table><thead><tr><th>版本</th><th>Type</th></tr></thead><tbody><tr><td>5.x</td><td>支持多种type</td></tr><tr><td>6.x</td><td>只能有一种type</td></tr><tr><td>7.x</td><td>默认不再支持自定义索引类型（默认类型为：_doc）</td></tr><tr><td>8.x</td><td>默认类型为：_doc</td></tr></tbody></table><h3 id="3-4-文档-Document"><a href="#3-4-文档-Document" class="headerlink" title="3.4 文档(Document)"></a>3.4 文档(Document)</h3><p>一个文档是一个可被索引的基础信息单元，也就是一条数据</p><p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以<strong>JSON（Javascript Object Notation）格式</strong>来表示，而JSON是一个到处存在的互联网数据交互格式。</p><p>在一个index&#x2F;type里面，你可以存储任意多的文档。</p><h3 id="3-5-字段-Field"><a href="#3-5-字段-Field" class="headerlink" title="3.5 字段(Field)"></a>3.5 字段(Field)</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p><h3 id="3-6-映射-Mapping"><a href="#3-6-映射-Mapping" class="headerlink" title="3.6 映射(Mapping)"></a>3.6 映射(Mapping)</h3><p>mapping是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理ES里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h1 id="4-Elasticsearch-基础功能"><a href="#4-Elasticsearch-基础功能" class="headerlink" title="4 Elasticsearch 基础功能"></a>4 Elasticsearch 基础功能</h1><p>参考文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.5/elasticsearch-intro.html">https://www.elastic.co/guide/en/elasticsearch/reference/8.5/elasticsearch-intro.html</a></p><p> 我们在Kibana（前面已经安装过） 软件给大家演示基本操作</p><p>详见《软件环境安装》</p><h3 id="4-1-分词器"><a href="#4-1-分词器" class="headerlink" title="4.1 分词器"></a>4.1 分词器</h3><p>官方提供的分词器有这么几种: standard、Letter、Lowercase、Whitespace、UAX URL Email、Classic、Thai等，中文分词器可以使用第三方的比如IK分词器。前面我们已经安装过了。</p><p>IK分词器:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我是中国人&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;是&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br>POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我是中国人&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;是&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;国人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Standard分词器:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">POST _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我是中国人&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;是&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;国&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-索引操作"><a href="#4-2-索引操作" class="headerlink" title="4.2 索引操作"></a>4.2 索引操作</h3><p>ES 软件的索引可以类比为 MySQL 中表的概念，创建一个索引，类似于创建一个表</p><h4 id="4-2-1-创建索引"><a href="#4-2-1-创建索引" class="headerlink" title="4.2.1 创建索引"></a>4.2.1 创建索引</h4><p>语法: PUT &#x2F;{索引名称}</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /my_index<br><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;shards_acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-查看所有索引"><a href="#4-2-2-查看所有索引" class="headerlink" title="4.2.2 查看所有索引"></a>4.2.2 查看所有索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">GET /_cat/indices?v<br></code></pre></td></tr></table></figure><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/1693294256200.png"></p><!--![69329425620](第4章 ElasticSearch入门/1693294256200.png)--><h4 id="4-2-3-查看单个索引"><a href="#4-2-3-查看单个索引" class="headerlink" title="4.2.3 查看单个索引"></a>4.2.3 查看单个索引</h4><p>语法: GET &#x2F;{索引名称}</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /my_index<br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;my_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;aliases&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;allocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;_tier_preference&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;data_content&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;provided_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;creation_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1693294063006&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uuid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kYMuXUZQRumMGqHoV0fDJw&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;created&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8050099&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-4-删除索引"><a href="#4-2-4-删除索引" class="headerlink" title="4.2.4 删除索引"></a>4.2.4 删除索引</h4><p>语法: DELETE &#x2F;{索引名称}</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /my_index<br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-文档操作"><a href="#4-3-文档操作" class="headerlink" title="4.3 文档操作"></a>4.3 文档操作</h3><p>文档是 ES 软件搜索数据的最小单位, 不依赖预先定义的模式，所以可以将文档类比为表的一行JSON类型的数据。我们知道关系型数据库中，要提前定义字段才能使用，在Elasticsearch中，对于字段是非常灵活的，有时候我们可以忽略该字段，或者动态的添加一个新的字段。</p><h4 id="4-3-1-创建文档"><a href="#4-3-1-创建文档" class="headerlink" title="4.3.1 创建文档"></a>4.3.1 创建文档</h4><p>语法:</p><p>PUT &#x2F;{索引名称}&#x2F;{类型}&#x2F;{id}</p><p>{</p><p>jsonbody</p><p>}</p><p>在创建数据时，需要指定唯一性标识，那么请求范式 POST，PUT 都可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">PUT /my_index/_doc/1<br>&#123;<br>  &quot;title&quot;: &quot;小米手机&quot;,<br>  &quot;category&quot;: &quot;小米&quot;,<br>  &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>  &quot;price&quot;: 3999<br>&#125;<br><br>返回结果:<br>&#123;<br>  &quot;_index&quot;: &quot;my_index&quot;,<br>  &quot;_id&quot;: &quot;1&quot;,<br>  &quot;_version&quot;: 3,<br>  &quot;_seq_no&quot;: 2,<br>  &quot;_primary_term&quot;: 1,<br>  &quot;found&quot;: true,<br>  &quot;_source&quot;: &#123;<br>    &quot;title&quot;: &quot;小米手机&quot;,<br>    &quot;category&quot;: &quot;小米&quot;,<br>    &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>    &quot;price&quot;: 3999<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-查看文档"><a href="#4-3-2-查看文档" class="headerlink" title="4.3.2 查看文档"></a>4.3.2 查看文档</h4><p>语法:GET &#x2F;{索引名称}&#x2F;{类型}&#x2F;{id}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /my_index/_doc/1<br>结果:<br>&#123;<br>  &quot;_index&quot; : &quot;my_index&quot;,<br>  &quot;_type&quot; : &quot;_doc&quot;,<br>  &quot;_id&quot; : &quot;1&quot;,<br>  &quot;_version&quot; : 1,<br>  &quot;_seq_no&quot; : 0,<br>  &quot;_primary_term&quot; : 1,<br>  &quot;found&quot; : true,<br>  &quot;_source&quot; : &#123;<br>    &quot;title&quot; : &quot;小米手机&quot;,<br>    &quot;category&quot; : &quot;小米&quot;,<br>    &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>    &quot;price&quot; : 3999<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-查询所有文档"><a href="#4-3-3-查询所有文档" class="headerlink" title="4.3.3 查询所有文档"></a>4.3.3 查询所有文档</h4><h5 id="语法-GET-索引名称-search"><a href="#语法-GET-索引名称-search" class="headerlink" title="语法: GET &#x2F;{索引名称}&#x2F;_search"></a>语法: GET &#x2F;{索引名称}&#x2F;_search</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /my_index/_search<br><br>结果:<br>&#123;<br>  &quot;took&quot;: 941,<br>  &quot;timed_out&quot;: false,<br>  &quot;_shards&quot;: &#123;<br>    &quot;total&quot;: 1,<br>    &quot;successful&quot;: 1,<br>    &quot;skipped&quot;: 0,<br>    &quot;failed&quot;: 0<br>  &#125;,<br>  &quot;hits&quot;: &#123;<br>    &quot;total&quot;: &#123;<br>      &quot;value&quot;: 1,<br>      &quot;relation&quot;: &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot;: 1,<br>    &quot;hits&quot;: [<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;1&quot;,<br>        &quot;_score&quot;: 1,<br>        &quot;_source&quot;: &#123;<br>          &quot;title&quot;: &quot;小米手机&quot;,<br>          &quot;category&quot;: &quot;小米&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 3999<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-4-修改文档"><a href="#4-3-4-修改文档" class="headerlink" title="4.3.4 修改文档"></a>4.3.4 修改文档</h4><p>语法: </p><p>PUT &#x2F;{索引名称}&#x2F;{类型}&#x2F;{id}</p><p>{</p><p>jsonbody</p><p>}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">PUT /my_index/_doc/1<br>&#123;<br>  &quot;title&quot;: &quot;小米手机&quot;,<br>  &quot;category&quot;: &quot;小米&quot;,<br>  &quot;images&quot;: &quot;http://www.gulixueyuan.com/xd&#x27;d&#x27;d&#x27;d&#x27;dm.jpg&quot;,<br>  &quot;price&quot;: 4500<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-5-修改局部属性"><a href="#4-3-5-修改局部属性" class="headerlink" title="4.3.5 修改局部属性"></a>4.3.5 修改局部属性</h4><p>语法: </p><p>POST &#x2F;{索引名称}&#x2F;_update&#x2F;{docId}<br>{<br>  “doc”: {</p><p>“属性”: “值”</p><p>  }<br>}</p><p><strong>注意：这种更新只能使用post方式。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_update/1<br>&#123;<br>  &quot;doc&quot;: &#123;<br>    &quot;price&quot;: 4500<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-6-删除文档"><a href="#4-3-6-删除文档" class="headerlink" title="4.3.6 删除文档"></a>4.3.6 删除文档</h4><p>语法: DELETE &#x2F;{索引名称}&#x2F;{类型}&#x2F;{id}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">DELETE /my_index/_doc/1<br>结果:<br>&#123;<br>  &quot;_index&quot;: &quot;my_index&quot;,<br>  &quot;_id&quot;: &quot;1&quot;,<br>  &quot;_version&quot;: 5,<br>  &quot;result&quot;: &quot;deleted&quot;,<br>  &quot;_shards&quot;: &#123;<br>    &quot;total&quot;: 2,<br>    &quot;successful&quot;: 1,<br>    &quot;failed&quot;: 0<br>  &#125;,<br>  &quot;_seq_no&quot;: 6,<br>  &quot;_primary_term&quot;: 1<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-映射mapping"><a href="#4-4-映射mapping" class="headerlink" title="4.4 映射mapping"></a>4.4 映射mapping</h3><p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做**映射(mapping)**。</p><h4 id="4-4-1-查看映射"><a href="#4-4-1-查看映射" class="headerlink" title="4.4.1 查看映射"></a>4.4.1 查看映射</h4><p>语法: GET &#x2F;{索引名称}&#x2F;_mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /my_index/_mapping<br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;my_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;long&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;keyword&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;ignore_above&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">256</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="4-4-2-动态映射"><a href="#4-4-2-动态映射" class="headerlink" title="4.4.2 动态映射"></a>4.4.2 动态映射</h4><p>在关系数据库中，需要事先创建数据库，然后在该数据库下创建数据表，并创建 表字段、类型、长度、主键等，最后才能基于表插入数据。而Elasticsearch中不 需要定义Mapping映射（即关系型数据库的表、字段等），在文档写入 Elasticsearch时，会根据文档字段<strong>自动识别类型</strong>，这种机制称之为<strong>动态映射</strong>。</p><p>映射规则对应:</p><table><thead><tr><th>数据</th><th>对应的类型</th></tr></thead><tbody><tr><td>null</td><td>字段不添加</td></tr><tr><td>true|flase</td><td>boolean</td></tr><tr><td>字符串</td><td>text</td></tr><tr><td>数值</td><td>long</td></tr><tr><td>小数</td><td>float</td></tr><tr><td>日期</td><td>date</td></tr></tbody></table><h4 id="4-4-3-静态映射"><a href="#4-4-3-静态映射" class="headerlink" title="4.4.3 静态映射"></a>4.4.3 静态映射</h4><p>静态映射是在Elasticsearch中也可以事先定义好映射，即手动映射，包含文档的各字段类型、分词器等，这称为<strong>静态映射</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">删除原创建的索引</span><br>DELETE /my_index<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建索引，并同时指定映射关系和分词器等。</span><br>PUT /my_index<br>&#123;<br>  &quot;mappings&quot;: &#123;<br>    &quot;properties&quot;: &#123;<br>      &quot;title&quot;: &#123;<br>        &quot;type&quot;: &quot;text&quot;,<br>        &quot;index&quot;: true,<br>        &quot;store&quot;: true,<br>        &quot;analyzer&quot;: &quot;ik_max_word&quot;,<br>        &quot;search_analyzer&quot;: &quot;ik_smart&quot;<br>      &#125;,<br>      &quot;category&quot;: &#123;<br>        &quot;type&quot;: &quot;keyword&quot;,<br>        &quot;index&quot;: true,<br>        &quot;store&quot;: true<br>      &#125;,<br>      &quot;images&quot;: &#123;<br>        &quot;type&quot;: &quot;keyword&quot;,<br>        &quot;index&quot;: true,<br>        &quot;store&quot;: true<br>      &#125;,<br>      &quot;price&quot;: &#123;<br>        &quot;type&quot;: &quot;integer&quot;,<br>        &quot;index&quot;: true,<br>        &quot;store&quot;: true<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;acknowledged&quot; : true,<br>  &quot;shards_acknowledged&quot; : true,<br>  &quot;index&quot; : &quot;my_index&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>type分类如下:</strong></p><ul><li>字符串：text(支持分词)和 keyword(不支持分词)。 </li><li>text：该类型被用来索引长文本，在创建索引前会将这些文本进行分词，转化为词的组合，建立索引；允许es来检索这些词，text类型不能用来排序和聚合。 </li><li>keyword：该类型不能分词，可以被用来检索过滤、排序和聚合，keyword类型不可用text进行分词模糊检索。 </li><li>数值型：long、integer、short、byte、double、float </li><li>日期型：date </li><li>布尔型：boolean </li><li>特殊数据类型：nested</li></ul><h4 id="4-4-4-nested-介绍"><a href="#4-4-4-nested-介绍" class="headerlink" title="4.4.4 nested 介绍"></a>4.4.4 nested 介绍</h4><p>nested：类型是一种特殊的对象object数据类型(specialised version of the object datatype )，允许对象数组彼此独立地进行索引和查询。</p><p>demo： 建立一个普通的index</p><p>如果linux 中有这个my_comment_index 先删除！DELETE &#x2F;my_comment_index</p><p>步骤1：建立一个索引（ 存储博客文章及其所有评论）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http">PUT my_comment_index/_doc/1<br>&#123;<br>  &quot;title&quot;: &quot;狂人日记&quot;,<br>  &quot;body&quot;: &quot;《狂人日记》是一篇象征性和寓意很强的小说，当时，鲁迅对中国国民精神的麻木愚昧颇感痛切。&quot;,<br>  &quot;comments&quot;: [<br>    &#123;<br>      &quot;name&quot;: &quot;张三&quot;,<br>      &quot;age&quot;: 34,<br>      &quot;rating&quot;: 8,<br>      &quot;comment&quot;: &quot;非常棒的文章&quot;,<br>      &quot;commented_on&quot;: &quot;30 Nov 2023&quot;<br>    &#125;,<br>    &#123;<br>      &quot;name&quot;: &quot;李四&quot;,<br>      &quot;age&quot;: 38,<br>      &quot;rating&quot;: 9,<br>      &quot;comment&quot;: &quot;文章非常好&quot;,<br>      &quot;commented_on&quot;: &quot;25 Nov 2022&quot;<br>    &#125;,<br>    &#123;<br>      &quot;name&quot;: &quot;王五&quot;,<br>      &quot;age&quot;: 33,<br>      &quot;rating&quot;: 7,<br>      &quot;comment&quot;: &quot;手动点赞&quot;,<br>      &quot;commented_on&quot;: &quot;20 Nov 2021&quot;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>如上所示，所以我们有一个文档描述了一个帖子和一个包含帖子上所有评论的内部<strong>对象评论</strong>。<br>但是Elasticsearch搜索中的内部对象并不像我们期望的那样工作。</p><p>步骤2 : 执行查询</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_comment_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;must&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;comments.name&quot;: &quot;李四&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;comments.age&quot;: 34<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询结果：居然正常的响应结果了</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/image-20221205232357129_bltAkpGY52.png"></p><!--![](第4章 ElasticSearch入门/image-20221205232357129_bltAkpGY52.png)--><blockquote><p>原因分析：comments 字段默认的数据类型是Object，故我们的文档内部存储为：<br>{<br>“title”:                    [ 狂人日记],<br>“body”:                     [ 《狂人日记》是一篇象征性和寓意很强的小说，当时… ],<br>“comments.name”:            [ 张三, 李四, 王五 ],<br>“comments.comment”:         [ 非常棒的文章,文章非常好,王五,… ],<br>“comments.age”:             [ 33, 34, 38 ],<br>“comments.rating”:          [ 7, 8, 9 ]<br>}</p></blockquote><p>我们可以清楚地看到，comments.name和comments.age之间的关系已丢失。这就是为什么我们的文档匹配李四和34的查询。</p><p>步骤3：删除当前索引</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">DELETE /my_comment_index<br></code></pre></td></tr></table></figure><p>步骤4：建立一个nested 类型的（comments字段映射为nested类型，而不是默认的object类型）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT my_comment_index<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;comments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nested&quot;</span> <br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><br>PUT my_comment_index/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;狂人日记&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;《狂人日记》是一篇象征性和寓意很强的小说，当时，鲁迅对中国国民精神的麻木愚昧颇感痛切。&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;comments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">34</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rating&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;非常棒的文章&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commented_on&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;30 Nov 2023&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;李四&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rating&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;文章非常好&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commented_on&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;25 Nov 2022&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;王五&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">33</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;rating&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;comment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;手动点赞&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;commented_on&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20 Nov 2021&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>重新执行步骤1，使用nested 查询</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs http">GET /my_comment_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;nested&quot;: &#123;<br>      &quot;path&quot;: &quot;comments&quot;,<br>      &quot;query&quot;: &#123;<br>        &quot;bool&quot;: &#123;<br>          &quot;must&quot;: [<br>            &#123;<br>              &quot;match&quot;: &#123;<br>                &quot;comments.name&quot;: &quot;李四&quot;<br>              &#125;<br>            &#125;,<br>            &#123;<br>              &quot;match&quot;: &#123;<br>                &quot;comments.age&quot;: 34<br>              &#125;<br>            &#125;<br>          ]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果发现没有返回任何的文档，这是何故？</p><p>当将字段设置为nested 嵌套对象将数组中的每个对象索引为单独的隐藏文档，这意味着可以独立于其他对象查询每个嵌套对象。文档的内部表示：</p><blockquote><p>{<br>{<br>“comments.name”:    [ 张三],<br>“comments.comment”: [ 非常棒的文章 ],<br>“comments.age”:     [ 34 ],<br>“comments.rating”:  [ 9 ]<br>},<br>{<br>“comments.name”:    [ 李四],<br>“comments.comment”: [ 文章非常好 ],<br>“comments.age”:     [ 38 ],<br>“comments.rating”:   [ 8 ]<br>},<br>{<br>“comments.name”:    [ 王五],<br>“comments.comment”: [手动点赞],<br>“comments.age”:     [ 33 ],<br>“comments.rating”:   [ 7 ]<br>},<br>{<br>“title”:            [ 狂人日记 ],<br>“body”:             [ 《狂人日记》是一篇象征性和寓意很强的小说，当时，鲁迅对中国… ]<br>}<br>}</p></blockquote><p>每个内部对象都在内部存储为单独的隐藏文档。 这保持了他们的领域之间的关系。</p><h1 id="5-DSL高级查询"><a href="#5-DSL高级查询" class="headerlink" title="5 DSL高级查询"></a>5 DSL高级查询</h1><h3 id="5-1-DSL概述"><a href="#5-1-DSL概述" class="headerlink" title="5.1 DSL概述"></a>5.1 DSL概述</h3><p>Query DSL概述: Domain Specific Language(领域专用语言)，Elasticsearch提供了基于JSON的DSL来定义查询。</p><p><strong>DSL概览:</strong></p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/image-20211006153847981.png"></p><!--![image-20211006153847981](第4章 ElasticSearch入门/image-20211006153847981.png)--><p>准备数据:</p><p>基于上述静态映射的索引库my_index</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">PUT /my_index/_doc/1<br>&#123;&quot;id&quot;:1,&quot;title&quot;:&quot;华为笔记本电脑&quot;,&quot;category&quot;:&quot;华为&quot;,&quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,&quot;price&quot;:5388&#125;<br><br>PUT /my_index/_doc/2<br>&#123;&quot;id&quot;:2,&quot;title&quot;:&quot;华为手机&quot;,&quot;category&quot;:&quot;华为&quot;,&quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,&quot;price&quot;:5500&#125;<br><br>PUT /my_index/_doc/3<br>&#123;&quot;id&quot;:3,&quot;title&quot;:&quot;VIVO手机&quot;,&quot;category&quot;:&quot;vivo&quot;,&quot;images&quot;:&quot;http://www.gulixueyuan.com/xm.jpg&quot;,&quot;price&quot;:3600&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-DSL查询"><a href="#5-2-DSL查询" class="headerlink" title="5.2 DSL查询"></a>5.2 DSL查询</h3><h4 id="5-2-1-查询所有文档"><a href="#5-2-1-查询所有文档" class="headerlink" title="5.2.1 查询所有文档"></a>5.2.1 查询所有文档</h4><p>match_all:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match_all&quot;: &#123;&#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot; : 0,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 3,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : 1.0,<br>    &quot;hits&quot; : [<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;1&quot;,<br>        &quot;_score&quot; : 1.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 1,<br>          &quot;title&quot; : &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5388<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;2&quot;,<br>        &quot;_score&quot; : 1.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 2,<br>          &quot;title&quot; : &quot;华为手机&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5500<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;3&quot;,<br>        &quot;_score&quot; : 1.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 3,<br>          &quot;title&quot; : &quot;VIVO手机&quot;,<br>          &quot;category&quot; : &quot;vivo&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 3600<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-匹配查询-match"><a href="#5-2-2-匹配查询-match" class="headerlink" title="5.2.2 匹配查询(match)"></a>5.2.2 匹配查询(match)</h4><p>match:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;title&quot;: &quot;华为智能手机&quot;<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot; : 3,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 2,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : 0.5619608,<br>    &quot;hits&quot; : [<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;2&quot;,<br>        &quot;_score&quot; : 0.5619608,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 2,<br>          &quot;title&quot; : &quot;华为手机&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5500<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;1&quot;,<br>        &quot;_score&quot; : 0.35411233,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 1,<br>          &quot;title&quot; : &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5388<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-多字段匹配"><a href="#5-2-3-多字段匹配" class="headerlink" title="5.2.3 多字段匹配"></a>5.2.3 多字段匹配</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;multi_match&quot;: &#123;<br>      &quot;query&quot;: &quot;华为智能手机&quot;,<br>      &quot;fields&quot;: [&quot;title&quot;,&quot;category&quot;]<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot;: 1,<br>  &quot;timed_out&quot;: false,<br>  &quot;_shards&quot;: &#123;<br>    &quot;total&quot;: 1,<br>    &quot;successful&quot;: 1,<br>    &quot;skipped&quot;: 0,<br>    &quot;failed&quot;: 0<br>  &#125;,<br>  &quot;hits&quot;: &#123;<br>    &quot;total&quot;: &#123;<br>      &quot;value&quot;: 3,<br>      &quot;relation&quot;: &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot;: 1.5619192,<br>    &quot;hits&quot;: [<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;2&quot;,<br>        &quot;_score&quot;: 1.5619192,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 2,<br>          &quot;title&quot;: &quot;华为手机&quot;,<br>          &quot;category&quot;: &quot;华为&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 5500<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;1&quot;,<br>        &quot;_score&quot;: 1.489748,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 1,<br>          &quot;title&quot;: &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot;: &quot;华为&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 5388<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;3&quot;,<br>        &quot;_score&quot;: 0.59518534,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 3,<br>          &quot;title&quot;: &quot;VIVO手机&quot;,<br>          &quot;category&quot;: &quot;vivo&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 3600<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-关键字精确查询"><a href="#5-2-4-关键字精确查询" class="headerlink" title="5.2.4 关键字精确查询"></a>5.2.4 关键字精确查询</h4><p><strong>term:关键字不会进行分词。</strong> 相当于 where title &#x3D; ?;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;term&quot;: &#123;<br>      &quot;category&quot;: &#123;<br>        &quot;value&quot;: &quot;华为&quot;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot;: 0,<br>  &quot;timed_out&quot;: false,<br>  &quot;_shards&quot;: &#123;<br>    &quot;total&quot;: 1,<br>    &quot;successful&quot;: 1,<br>    &quot;skipped&quot;: 0,<br>    &quot;failed&quot;: 0<br>  &#125;,<br>  &quot;hits&quot;: &#123;<br>    &quot;total&quot;: &#123;<br>      &quot;value&quot;: 2,<br>      &quot;relation&quot;: &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot;: 0.4700036,<br>    &quot;hits&quot;: [<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;1&quot;,<br>        &quot;_score&quot;: 0.4700036,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 1,<br>          &quot;title&quot;: &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot;: &quot;华为&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 5388<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;2&quot;,<br>        &quot;_score&quot;: 0.4700036,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 2,<br>          &quot;title&quot;: &quot;华为手机&quot;,<br>          &quot;category&quot;: &quot;华为&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 5500<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-6-多关键字精确查询"><a href="#5-2-6-多关键字精确查询" class="headerlink" title="5.2.6 多关键字精确查询"></a>5.2.6 多关键字精确查询</h4><p>where title in ()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;terms&quot;: &#123;<br>      &quot;category&quot;: [<br>        &quot;华为&quot;,<br>        &quot;vivo&quot;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot;: 0,<br>  &quot;timed_out&quot;: false,<br>  &quot;_shards&quot;: &#123;<br>    &quot;total&quot;: 1,<br>    &quot;successful&quot;: 1,<br>    &quot;skipped&quot;: 0,<br>    &quot;failed&quot;: 0<br>  &#125;,<br>  &quot;hits&quot;: &#123;<br>    &quot;total&quot;: &#123;<br>      &quot;value&quot;: 3,<br>      &quot;relation&quot;: &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot;: 1,<br>    &quot;hits&quot;: [<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;1&quot;,<br>        &quot;_score&quot;: 1,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 1,<br>          &quot;title&quot;: &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot;: &quot;华为&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 5388<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;2&quot;,<br>        &quot;_score&quot;: 1,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 2,<br>          &quot;title&quot;: &quot;华为手机&quot;,<br>          &quot;category&quot;: &quot;华为&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 5500<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot;: &quot;my_index&quot;,<br>        &quot;_id&quot;: &quot;3&quot;,<br>        &quot;_score&quot;: 1,<br>        &quot;_source&quot;: &#123;<br>          &quot;id&quot;: 3,<br>          &quot;title&quot;: &quot;VIVO手机&quot;,<br>          &quot;category&quot;: &quot;vivo&quot;,<br>          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot;: 3600<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-7-范围查询"><a href="#5-2-7-范围查询" class="headerlink" title="5.2.7 范围查询"></a>5.2.7 范围查询</h4><p>范围查询使用range。</p><ul><li>gte: 大于等于</li><li>lte: 小于等于</li><li>gt: 大于</li><li>lt: 小于</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;range&quot;: &#123;<br>      &quot;price&quot;: &#123;<br>        &quot;gte&quot;: 3000,<br>        &quot;lte&quot;: 5000<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>结果:<br>&#123;<br>  &quot;took&quot; : 0,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 1,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : 1.0,<br>    &quot;hits&quot; : [<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;3&quot;,<br>        &quot;_score&quot; : 1.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;title&quot; : &quot;VIVO手机&quot;,<br>          &quot;category&quot; : &quot;vivo&quot;<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-8-指定返回字段"><a href="#5-2-8-指定返回字段" class="headerlink" title="5.2.8 指定返回字段"></a>5.2.8 指定返回字段</h4><p><strong>query同级增加_source进行过滤。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;match&quot;: &#123;<br>      &quot;title&quot;: &quot;手机&quot;<br>    &#125;<br>  &#125;,<br>  &quot;_source&quot;: [&quot;title&quot;,&quot;price&quot;]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-9-组合查询"><a href="#5-2-9-组合查询" class="headerlink" title="5.2.9 组合查询"></a>5.2.9 组合查询</h4><p>bool 各条件之间有and,or或not的关系</p><ul><li>must: 各个条件都必须满足，所有条件是and的关系</li><li>should: 各个条件有一个满足即可，即各条件是or的关系</li><li>must_not: 不满足所有条件，即各条件是not的关系</li><li>filter: 与must效果等同，但是它不计算得分，效率更高点。</li></ul><h5 id="must"><a href="#must" class="headerlink" title="must"></a>must</h5><p> 各个条件都必须满足，所有条件是and的关系</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3000</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5400</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.2923405</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.2923405</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为笔记本电脑&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5388</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="should"><a href="#should" class="headerlink" title="should"></a>should</h5><p>各个条件有一个满足即可，即各条件是or的关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;should&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;华为&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;range&quot;: &#123;<br>            &quot;price&quot;: &#123;<br>              &quot;gte&quot;: 3000,<br>              &quot;lte&quot;: 5000<br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot; : 0,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 3,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : 1.0,<br>    &quot;hits&quot; : [<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;3&quot;,<br>        &quot;_score&quot; : 1.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 3,<br>          &quot;title&quot; : &quot;VIVO手机&quot;,<br>          &quot;category&quot; : &quot;vivo&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 3600<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;2&quot;,<br>        &quot;_score&quot; : 0.5619608,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 2,<br>          &quot;title&quot; : &quot;华为手机&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5500<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;1&quot;,<br>        &quot;_score&quot; : 0.35411233,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 1,<br>          &quot;title&quot; : &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5388<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果should和must同时存在，他们之间是and关系：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;should&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;华为&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;range&quot;: &#123;<br>            &quot;price&quot;: &#123;<br>              &quot;gte&quot;: 3000,<br>              &quot;lte&quot;: 5000<br>            &#125;<br>          &#125;<br>        &#125;<br>      ],<br>      &quot;must&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;华为&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;range&quot;: &#123;<br>            &quot;price&quot;: &#123;<br>              &quot;gte&quot;: 3000,<br>              &quot;lte&quot;: 5000<br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot; : 1,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 0,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : null,<br>    &quot;hits&quot; : [ ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="must-not"><a href="#must-not" class="headerlink" title="must_not"></a>must_not</h5><p>不满足所有条件，即各条件是not的关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;must_not&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;华为&quot;<br>          &#125;<br>        &#125;,<br>        &#123;<br>          &quot;range&quot;: &#123;<br>            &quot;price&quot;: &#123;<br>              &quot;gte&quot;: 3000,<br>              &quot;lte&quot;: 5000<br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br>结果:<br>&#123;<br>  &quot;took&quot; : 0,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 0,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : null,<br>    &quot;hits&quot; : [ ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>与must效果等同，但是它不计算得分，效率更高点。</p><p><strong>_score的分值为0</strong> 在Elasticsearch中，<code>_score</code> 字段代表每个文档的相关性分数（relevance score）。这个分数用于<strong>衡量一个文档与特定查询的匹配程度</strong>，它是基于搜索查询的条件和文档的内容来计算的。相关性分数越高，表示文档与查询的匹配度越高，排名也越靠前。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;filter&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;华为&quot;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br><br>结果:<br>&#123;<br>  &quot;took&quot; : 1,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 2,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : 0.0,<br>    &quot;hits&quot; : [<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;1&quot;,<br>        &quot;_score&quot; : 0.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 1,<br>          &quot;title&quot; : &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5388<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;2&quot;,<br>        &quot;_score&quot; : 0.0,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 2,<br>          &quot;title&quot; : &quot;华为手机&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5500<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-10-聚合查询"><a href="#5-2-10-聚合查询" class="headerlink" title="5.2.10 聚合查询"></a>5.2.10 聚合查询</h4><p>聚合允许使用者对es文档进行统计分析，类似与关系型数据库中的group by，当然还有很多其他的聚合，例如取最大值、平均值等等。</p><h5 id="max"><a href="#max" class="headerlink" title="max"></a>max</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;max_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;max&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;max_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5500.0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="min"><a href="#min" class="headerlink" title="min"></a>min</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;min_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;min&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;max_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3600.0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avg_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;avg_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4829.333333333333</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;sum_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;sum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;sum_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14488.0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stats_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;stats&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stats_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;min&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3600.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;max&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5500.0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;avg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">4829.333333333333</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">14488.0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h5><p>桶聚合相当于sql中的group by语句</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;groupby_category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;category&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;groupby_category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>还可以对桶继续计算：计算每个品牌对应的平均值是多少！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;groupby_category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;category&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;avg_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;avg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;price&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggregations&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;groupby_category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;buckets&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5444.0</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;key&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;doc_count&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;avg_price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3600.0</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-11-排序"><a href="#5-2-11-排序" class="headerlink" title="5.2.11 排序"></a>5.2.11 排序</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs shell">POST /my_index/_search<br>&#123;<br>  &quot;query&quot;: &#123;<br>    &quot;bool&quot;: &#123;<br>      &quot;must&quot;: [<br>        &#123;<br>          &quot;match&quot;: &#123;<br>            &quot;title&quot;: &quot;华为&quot;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  &quot;sort&quot;: [<br>    &#123;<br>      &quot;price&quot;: &#123;<br>        &quot;order&quot;: &quot;asc&quot;<br>      &#125;<br>    &#125;,<br>    &#123;<br>      &quot;_score&quot;: &#123;<br>        &quot;order&quot;: &quot;desc&quot;<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br>结果:<br>&#123;<br>  &quot;took&quot; : 0,<br>  &quot;timed_out&quot; : false,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 1,<br>    &quot;successful&quot; : 1,<br>    &quot;skipped&quot; : 0,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;hits&quot; : &#123;<br>    &quot;total&quot; : &#123;<br>      &quot;value&quot; : 2,<br>      &quot;relation&quot; : &quot;eq&quot;<br>    &#125;,<br>    &quot;max_score&quot; : null,<br>    &quot;hits&quot; : [<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;1&quot;,<br>        &quot;_score&quot; : 0.35411233,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 1,<br>          &quot;title&quot; : &quot;华为笔记本电脑&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5388<br>        &#125;,<br>        &quot;sort&quot; : [<br>          5388,<br>          0.35411233<br>        ]<br>      &#125;,<br>      &#123;<br>        &quot;_index&quot; : &quot;my_index&quot;,<br>        &quot;_type&quot; : &quot;_doc&quot;,<br>        &quot;_id&quot; : &quot;2&quot;,<br>        &quot;_score&quot; : 0.5619608,<br>        &quot;_source&quot; : &#123;<br>          &quot;id&quot; : 2,<br>          &quot;title&quot; : &quot;华为手机&quot;,<br>          &quot;category&quot; : &quot;华为&quot;,<br>          &quot;images&quot; : &quot;http://www.gulixueyuan.com/xm.jpg&quot;,<br>          &quot;price&quot; : 5500<br>        &#125;,<br>        &quot;sort&quot; : [<br>          5500,<br>          0.5619608<br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-12-分页查询"><a href="#5-2-12-分页查询" class="headerlink" title="5.2.12 分页查询"></a>5.2.12 分页查询</h4><p>分页的两个关键属性:from、size。</p><ul><li>from: 当前页的起始索引，默认从0开始。 from &#x3D; (pageNum - 1) * size</li><li>size: 每页显示多少条</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br>结果<span class="hljs-punctuation">:</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;title&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为笔记本电脑&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;images&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5388</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_doc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">1.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;title&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为手机&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;category&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;images&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;price&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5500</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-13-高亮显示"><a href="#5-2-13-高亮显示" class="headerlink" title="5.2.13 高亮显示"></a>5.2.13 高亮显示</h4><p>无检索不高亮d</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"># 检索数据<br>GET /my_index/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为手机&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;font color:#e4393c&gt;&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;/font&gt;&quot;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;took&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timed_out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;successful&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;skipped&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;failed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;relation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eq&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.996705</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.996705</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为手机&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5500</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;&lt;font color:#e4393c&gt;华&lt;/font&gt;&lt;font color:#e4393c&gt;为&lt;/font&gt;&lt;font color:#e4393c&gt;手&lt;/font&gt;&lt;font color:#e4393c&gt;机&lt;/font&gt;&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.100845</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;VIVO手机&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vivo&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3600</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;VIVO&lt;font color:#e4393c&gt;手&lt;/font&gt;&lt;font color:#e4393c&gt;机&lt;/font&gt;&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my_index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.78038335</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为笔记本电脑&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;category&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;images&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5388</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;&lt;font color:#e4393c&gt;华&lt;/font&gt;&lt;font color:#e4393c&gt;为&lt;/font&gt;笔记本电脑&quot;</span><br>          <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="6-Java-Api操作ES"><a href="#6-Java-Api操作ES" class="headerlink" title="6 Java Api操作ES"></a>6 Java Api操作ES</h1><h2 id="6-1-Elasticsearch-Java-API-Client"><a href="#6-1-Elasticsearch-Java-API-Client" class="headerlink" title="6.1 Elasticsearch Java API Client"></a>6.1 Elasticsearch Java API Client</h2><p>官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/8.5/installation.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/8.5/installation.html</a></p><h3 id="6-1-1-搭建项目"><a href="#6-1-1-搭建项目" class="headerlink" title="6.1.1 搭建项目"></a>6.1.1 搭建项目</h3><p>1、创建项目：elasticsearch_demo</p><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/tingshu053.png"></p><!--![](第4章 ElasticSearch入门/tingshu053.png)--><p><img src="/2024/11/05/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC4%E7%AB%A0%20ElasticSearch%E5%85%A5%E9%97%A8/tingshu054.png"></p><!--![](第4章 ElasticSearch入门/tingshu054.png)--><p>2、导入pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.yunyueting<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch_demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>co.elastic.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-1-2-配置连接"><a href="#6-1-2-配置连接" class="headerlink" title="6.1.2 配置连接"></a>6.1.2 配置连接</h3><p>在启动类配置es连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yunyueting.elasticsearch;<br><br><span class="hljs-keyword">import</span> co.elastic.clients.elasticsearch.ElasticsearchClient;<br><span class="hljs-keyword">import</span> co.elastic.clients.json.jackson.JacksonJsonpMapper;<br><span class="hljs-keyword">import</span> co.elastic.clients.transport.ElasticsearchTransport;<br><span class="hljs-keyword">import</span> co.elastic.clients.transport.rest_client.RestClientTransport;<br><span class="hljs-keyword">import</span> org.apache.http.Header;<br><span class="hljs-keyword">import</span> org.apache.http.HttpHost;<br><span class="hljs-keyword">import</span> org.apache.http.auth.AuthScope;<br><span class="hljs-keyword">import</span> org.apache.http.auth.UsernamePasswordCredentials;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.BasicCredentialsProvider;<br><span class="hljs-keyword">import</span> org.apache.http.message.BasicHeader;<br><span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticsearchDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ElasticsearchDemoApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ElasticsearchClient <span class="hljs-title function_">buildElasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BasicCredentialsProvider</span> <span class="hljs-variable">credsProv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicCredentialsProvider</span>();<br>        credsProv.setCredentials(<br>                AuthScope.ANY, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordCredentials</span>(<span class="hljs-string">&quot;elastic&quot;</span>, <span class="hljs-string">&quot;111111&quot;</span>)<br>        );<br><br>        <span class="hljs-type">RestClient</span> <span class="hljs-variable">restClient</span> <span class="hljs-operator">=</span> RestClient<br>                .builder(HttpHost.create(<span class="hljs-string">&quot;http://139.198.127.41:9200&quot;</span>))<br>                .setHttpClientConfigCallback(hc -&gt; hc<br>                        .setDefaultCredentialsProvider(credsProv)<br>                )<br>                .build();<br><br>        <span class="hljs-comment">// Create the transport with a Jackson mapper</span><br>        <span class="hljs-type">ElasticsearchTransport</span> <span class="hljs-variable">transport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestClientTransport</span>(<br>                restClient, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonJsonpMapper</span>());<br><br>        <span class="hljs-comment">// And create the API client</span><br>        <span class="hljs-type">ElasticsearchClient</span> <span class="hljs-variable">esClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticsearchClient</span>(transport);<br>        <span class="hljs-keyword">return</span> esClient;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1-3-测试查询"><a href="#6-1-3-测试查询" class="headerlink" title="6.1.3 测试查询"></a>6.1.3 测试查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yunyueting.elasticsearch_demo;<br><br><span class="hljs-keyword">import</span> co.elastic.clients.elasticsearch.ElasticsearchClient;<br><span class="hljs-keyword">import</span> co.elastic.clients.elasticsearch.core.SearchResponse;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticsearchDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchClient elasticsearchClient;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//  创建查询请求对象</span><br>        <span class="hljs-comment">//        SearchRequest.Builder request = new SearchRequest.Builder();</span><br>        <span class="hljs-comment">//        //  QueryBuilders.queryString()</span><br>        <span class="hljs-comment">//        SearchRequest searchRequest = request.index(&quot;my_index&quot;).query(q -&gt; &#123;</span><br>        <span class="hljs-comment">//            return q.match(f -&gt; &#123;</span><br>        <span class="hljs-comment">//                return f.field(&quot;title&quot;).query(&quot;华为&quot;);</span><br>        <span class="hljs-comment">//            &#125;);</span><br>        <span class="hljs-comment">//        &#125;).build();</span><br>        <span class="hljs-comment">//        //  获取到查询结果集对象</span><br>        <span class="hljs-comment">//        SearchResponse&lt;Object&gt; search = elasticsearchClient.search(searchRequest, Object.class);</span><br>        <span class="hljs-comment">//        System.out.println(search);</span><br><br>        SearchResponse&lt;Object&gt; search = elasticsearchClient.search(s -&gt; s.index(<span class="hljs-string">&quot;my_index&quot;</span>).query(f -&gt; f.match(f1 -&gt; f1.field(<span class="hljs-string">&quot;title&quot;</span>).query(<span class="hljs-string">&quot;华为&quot;</span>))), Object.class);<br>        <span class="hljs-comment">//  遍历获取数据</span><br>        <span class="hljs-keyword">for</span> (Hit&lt;Object&gt; hit : search.hits().hits()) &#123;<br>            System.out.println(hit.source());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>id=<span class="hljs-number">2</span><span class="hljs-punctuation">,</span> title=华为手机<span class="hljs-punctuation">,</span> category=华为<span class="hljs-punctuation">,</span> images=http<span class="hljs-punctuation">:</span><span class="hljs-comment">//www.gulixueyuan.com/xm.jpg, price=5500&#125;</span><br><span class="hljs-punctuation">&#123;</span>id=<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> title=华为笔记本电脑<span class="hljs-punctuation">,</span> category=华为<span class="hljs-punctuation">,</span> images=http<span class="hljs-punctuation">:</span><span class="hljs-comment">//www.gulixueyuan.com/xm.jpg, price=5388&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>云悦听</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第3章 用户登录</title>
    <link href="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <url>/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章-用户登录"><a href="#第3章-用户登录" class="headerlink" title="第3章 用户登录"></a>第3章 用户登录</h1><p><strong>学习目标：</strong></p><ul><li>了解小程序&#x2F;移动端登录业务需求</li><li>认证状态校验<ul><li><strong>自定义注解</strong></li><li>认证<strong>切面</strong>类</li></ul></li><li>用户登录<ul><li><strong>微信</strong>登录<ul><li>初次登录（初始化账户（余额）记录）</li><li>非初次登录</li><li>完成登录（响应登录token）</li></ul></li><li>获取用户信息</li></ul></li><li>用户信息修改</li></ul><h1 id="1、校验登录注解"><a href="#1、校验登录注解" class="headerlink" title="1、校验登录注解"></a>1、校验登录注解</h1><p>当用户在查询专辑列表的时候，就应该让用户登录，所以在此我们自定义一个注解来表示访问此功能时必须要登录！</p><p>思路：</p><p>编写一个自定义注解：YunYueTingLogin，使用这个注解去拦截，当用户未登录的时候，查看专辑或声音列表时，需要给前端发起一个提示信息。前端根据这个提示信息[ResultCodeEnum.LOGIN_AUTH]，就能够跳转到登录页面！</p><h2 id="1-1-自定义注解"><a href="#1-1-自定义注解" class="headerlink" title="1.1 自定义注解"></a>1.1 自定义注解</h2><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/%E7%99%BB%E5%BD%95-%E8%AE%A4%E8%AF%81%E6%8B%A6%E6%88%AA.gif"></p><!--![登录-认证拦截](第3章 用户登录/登录-认证拦截.gif)--><p>在 service-util 模块中添加登录注解</p><p>注解作用：哪些需要登录才能访问必须要添加，那些需要获取到用户Id 也必须加这个注解.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.common.login;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> YunYueTingLogin &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否必须要登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>切面类 YunYueTingLoginAspect 中要获取到请求对象HttpServletRequest，通过这个对象获取到用户登录时存储的token 数据，这样才能判断用户是否登录。</p><p>RequestContextHolder 类持有上下文的 Request容器。</p><p>用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  获取请求对象</span><br><span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br><span class="hljs-comment">//  转化为ServletRequestAttributes</span><br><span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">sra</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) requestAttributes;<br><span class="hljs-comment">//  获取到HttpServletRequest 对象</span><br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> sra.getRequest();<br><span class="hljs-comment">//获取到HttpServletResponse 对象</span><br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> sra.getResponse();<br></code></pre></td></tr></table></figure><p>request 和 response 如何与 当前进行挂钩的？看底层源码</p><p>首先分析 RequestContextHolder这个类,里面有两个ThreadLocal 保存当前线程下的request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestContextHolder</span> &#123;<br>    <span class="hljs-comment">// 得到存储进去的request</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; requestAttributesHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamedThreadLocal</span>(<span class="hljs-string">&quot;Request attributes&quot;</span>);<br>    <span class="hljs-comment">//可被子线程继承的request</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;RequestAttributes&gt; inheritableRequestAttributesHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamedInheritableThreadLocal</span>(<span class="hljs-string">&quot;Request context&quot;</span>);<br>&#125;  <br></code></pre></td></tr></table></figure><p>再看getRequestAttributes() 方法，相当于直接获取ThreadLocal里面的值,这样就保证了每一次获取到的Request是该请求的request.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RequestAttributes <span class="hljs-title function_">getRequestAttributes</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> (RequestAttributes)requestAttributesHolder.get();<br>    <span class="hljs-keyword">if</span> (attributes == <span class="hljs-literal">null</span>) &#123;<br>        attributes = (RequestAttributes)inheritableRequestAttributesHolder.get();<br>    &#125;<br>    <span class="hljs-keyword">return</span> attributes;<br>&#125;<br></code></pre></td></tr></table></figure><p>request和response等是什么时候设置进去的?</p><p>springMVC 核心类 DispatcherServlet 继承关系</p><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/tingshu007.png"></p><!--![](第3章 用户登录/tingshu007.png)--><ol><li><code>HttpServletBean</code> 进行初始化工作</li><li><code>FrameworkServlet</code> 初始化 <code>WebApplicationContext</code>,并提供service方法预处理请求</li><li><code>DispatcherServlet</code> 具体分发处理.</li></ol><p>那么就可以在<code>FrameworkServlet</code>查看到该类重写了service(),doGet(),doPost()…等方法,这些实现里面都有一个预处理方法<code>processRequest(request, response);</code>,所以定位到了我们要找的位置</p><p>查看<code>processRequest(request, response);</code>的实现,具体可以分为三步:</p><ol><li>获取上一个请求的参数</li><li>重新建立新的参数</li><li>设置到XXXContextHolder</li><li>父类的service()处理请求</li><li>恢复request</li><li>发布</li></ol><h2 id="1-2-自定义切面类"><a href="#1-2-自定义切面类" class="headerlink" title="1.2 自定义切面类"></a>1.2 自定义切面类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.common.login;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.constant.RedisConstant;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.execption.YYTException;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.result.ResultCodeEnum;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.util.AuthContextHolder;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.user.UserInfo;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> pz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> YunYueTingLoginAspect</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YunYueTingLoginAspect</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Around(&quot;execution(* com.atguigu.tingshu.*.api.*.*(..)) &amp;&amp; @annotation(tsLogin)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">login</span><span class="hljs-params">( ProceedingJoinPoint joinPoint,YunYueTingLogin yunYueTingLogin)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//  需要判断当前这个用户是否登录！ 一处登录，处处使用 --- 单点登录SSO; 1. 用户名，密码；2. 微信小程序登录 3. 第三方授权 4. 手机验证码</span><br>            <span class="hljs-comment">//  登录过程： 利用微信小程序登录接口--通过前端传递的code码；调用api能够获取 openId【每个人的微信都有一个唯一的】;</span><br>            <span class="hljs-comment">//  查询用户表；有登录成功-还会将这个用户信息保存到redis，没有注册！</span><br>            <span class="hljs-comment">//  登录成功： 会生成一个token；token就是一个uuid; 将这个token返回给前端；并将这个token 保存到请求头;</span><br>            <span class="hljs-comment">//  重点判断请求头中是否有token就可以了！前端还会将token存储到浏览器本地缓存中！ *****</span><br>            <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>            <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) requestAttributes;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> attributes.getRequest();<br>            <span class="hljs-comment">//  获取到token数据.</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-comment">//  编写用户在访问需要登录的业务时，没有登录，则跳转到登录业务逻辑.</span><br>            <span class="hljs-keyword">if</span> (yunYueTingLogin.required()) &#123;<br>                <span class="hljs-comment">//  必须要登录！ 如何没有登录。则跳转!</span><br>                <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token))&#123;<br>                    <span class="hljs-comment">//  说明没有登录; 则抛出一个异常，页面根据这个异常就会跳转到登录页面！</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YYTException</span>(ResultCodeEnum.LOGIN_AUTH);<br>                &#125;<br>                <span class="hljs-comment">//  token 不为空，则说明登录过！  还会将这个用户信息保存到redis</span><br>                <span class="hljs-comment">//  此时需要进一步判断缓存中是否有用户信息,如果缓存中没有也不能说明登录！</span><br>                <span class="hljs-comment">//  考虑登录时，缓存的key=token value=userInfo;</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">loginKey</span> <span class="hljs-operator">=</span> RedisConstant.USER_LOGIN_KEY_PREFIX+token;<br>                <span class="hljs-comment">//  获取缓存中用户数据</span><br>                <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> (UserInfo) <span class="hljs-built_in">this</span>.redisTemplate.opsForValue().get(loginKey);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == userInfo)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YYTException</span>(ResultCodeEnum.LOGIN_AUTH);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//  只要满足token 不为空的时候。就做一件事！将用户Id 存储到本地线程中！ 便于后台微服务获取用户Id！</span><br>            <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(token))&#123;<br>                <span class="hljs-comment">//  组成缓存key</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">loginKey</span> <span class="hljs-operator">=</span> RedisConstant.USER_LOGIN_KEY_PREFIX+token;<br>                <span class="hljs-comment">//  获取缓存中用户数据</span><br>                <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> (UserInfo) <span class="hljs-built_in">this</span>.redisTemplate.opsForValue().get(loginKey);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != userInfo)&#123;<br>                    <span class="hljs-comment">//  存储用户Id</span><br>                    AuthContextHolder.setUserId(userInfo.getId());<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//  执行方法体;</span><br>            <span class="hljs-keyword">return</span> joinPoint.proceed();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//  删除本地数据</span><br>            AuthContextHolder.removeUserId();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在查看专辑列表的时候，添加注解。在点击查看专辑列表的时候，就会提示我们需要进行登录！</p><h1 id="2、用户登录"><a href="#2、用户登录" class="headerlink" title="2、用户登录"></a>2、用户登录</h1><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/%E7%99%BB%E5%BD%95-%E8%AE%A4%E8%AF%81%E7%99%BB%E5%BD%95.gif"></p><!--![登录-认证登录](第3章 用户登录/登录-认证登录.gif)--><h2 id="2-1-小程序登录流程"><a href="#2-1-小程序登录流程" class="headerlink" title="2.1 小程序登录流程"></a>2.1 小程序登录流程</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">小程序登录 | 微信开放文档 (qq.com)</a></p><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/tingshu008.png"></p><!--![](第3章 用户登录/tingshu008.png)--><p>说明</p><ol><li>调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">wx.login()</a> 获取 <strong>临时登录凭证code</strong> ，并回传到开发者服务器。</li><li>调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-login/code2Session.html">auth.code2Session</a> 接口，换取 <strong>用户唯一标识 OpenID</strong> 、 用户在微信开放平台账号下的<strong>唯一标识UnionID</strong>（若当前小程序已绑定到微信开放平台账号） 和 <strong>会话密钥 session_key</strong>。</li></ol><p>之后开发者服务器可以根据用户标识来生成自定义登录态，用于后续业务逻辑中前后端交互时识别用户身份。</p><p>注意事项</p><ol><li>会话密钥 <code>session_key</code> 是对用户数据进行 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html">加密签名</a> 的密钥。为了应用自身的数据安全，开发者服务器<strong>不应该把会话密钥下发到小程序，也不应该对外提供这个密钥</strong>。</li><li>临时登录凭证 code 只能使用一次</li></ol><p>登录思路：</p><ol><li>根据微信的WxMaService 对象获取到openId</li><li>根据openId 获取查看是否有用户信息<ol><li>如果不存在，则注册用户，将用户的昵称，用户的头像，openId 等保存到数据库表中，并<strong>发送消息</strong>初始化账户信息</li><li>如果存在，将用户信息保存的缓存中,并返回token 给前端页面。</li></ol></li></ol><h2 id="2-2-登录控制器"><a href="#2-2-登录控制器" class="headerlink" title="2.2 登录控制器"></a>2.2 登录控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.user.api;<br><br><span class="hljs-meta">@Tag(name = &quot;微信授权登录接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/user/wxLogin&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxLoginApiController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserInfoService userInfoService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WxMaService wxMaService;<br>    <br>     <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;小程序授权登录&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/wxLogin/&#123;code&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">wxLogin</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String code)</span> <span class="hljs-keyword">throws</span> WxErrorException &#123;<br>        <span class="hljs-comment">//  获取openId</span><br>        <span class="hljs-type">WxMaJscode2SessionResult</span> <span class="hljs-variable">sessionInfo</span> <span class="hljs-operator">=</span> wxMaService.getUserService().getSessionInfo(code);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">openId</span> <span class="hljs-operator">=</span> sessionInfo.getOpenid();<br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userInfoService.getOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserInfo&gt;().eq(UserInfo::getWxOpenId, openId));<br>        <span class="hljs-comment">//  如果数据库中没有这个对象</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == userInfo)&#123;<br>            <span class="hljs-comment">//  创建对象</span><br>            userInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br>            <span class="hljs-comment">//  赋值用户昵称</span><br>            userInfo.setNickname(<span class="hljs-string">&quot;听友&quot;</span>+System.currentTimeMillis());<br>            <span class="hljs-comment">//  赋值用户头像图片</span><br> userInfo.setAvatarUrl(<span class="hljs-string">&quot;https://oss.aliyuncs.com/aliyun_id_photo_bucket/default_handsome.jpg&quot;</span>);<br>            <span class="hljs-comment">//  赋值wxOpenId</span><br>            userInfo.setWxOpenId(openId);<br>            <span class="hljs-comment">//  保存用户信息</span><br>            userInfoService.save(userInfo);<br>            <span class="hljs-comment">//  初始化账户信息</span><br>            rabbitService.sendMessage(MqConst.EXCHANGE_USER, MqConst.ROUTING_USER_REGISTER, userInfo.getId());<br>        &#125;<br>        <span class="hljs-comment">//  创建 token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//  将这两个数据存储到缓存中。</span><br>        redisTemplate.opsForValue().set(RedisConstant.USER_LOGIN_KEY_PREFIX+token, userInfo, RedisConstant.USER_LOGIN_KEY_TIMEOUT, TimeUnit.SECONDS);<br>       <br>        <span class="hljs-comment">//  将这个数据存储到map中并返回</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;token&quot;</span>,token);<br>        <span class="hljs-comment">//  返回数据</span><br>        <span class="hljs-keyword">return</span> Result.ok(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：rabbitService封装到了rabbit-uti模块，前面的项目已经做了封装，我们直接使用！</p><h2 id="2-3-创建WxMaService-服务对象"><a href="#2-3-创建WxMaService-服务对象" class="headerlink" title="2.3 创建WxMaService 服务对象"></a>2.3 创建WxMaService 服务对象</h2><p>创建WechatAccountConfig配置类 ，因为getSessionInfo() 方法底层需要两个key</p><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/tingshu050.png"></p><!--![](第3章 用户登录/tingshu050.png)--><p>获取密码途径：</p><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/atguigu010.png"></p><!--![](第3章 用户登录/atguigu010.png)--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.user.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;wechat.login&quot;)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatAccountConfig</span> &#123;<br>    <span class="hljs-comment">//  公众平台的appId</span><br>    <span class="hljs-keyword">private</span> String appId;<br>    <span class="hljs-comment">//  小程序微信公众平台秘钥</span><br>    <span class="hljs-keyword">private</span> String appSecret;<br>&#125;<br></code></pre></td></tr></table></figure><p>将WxMaService 注入到spring 容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.user.config;<br><br><span class="hljs-keyword">import</span> cn.binarywang.wx.miniapp.api.WxMaService;<br><span class="hljs-keyword">import</span> cn.binarywang.wx.miniapp.api.impl.WxMaCloudServiceImpl;<br><span class="hljs-keyword">import</span> cn.binarywang.wx.miniapp.api.impl.WxMaServiceImpl;<br><span class="hljs-keyword">import</span> cn.binarywang.wx.miniapp.config.WxMaConfig;<br><span class="hljs-keyword">import</span> cn.binarywang.wx.miniapp.config.impl.WxMaDefaultConfigImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> pz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> WeChatMpConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年05月20日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatMpConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WechatAccountConfig wechatAccountConfig;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> WxMaService <span class="hljs-title function_">wxMaService</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//  创建对象</span><br>        <span class="hljs-type">WxMaDefaultConfigImpl</span> <span class="hljs-variable">wxMaConfig</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">WxMaDefaultConfigImpl</span>();<br>        wxMaConfig.setAppid(wechatAccountConfig.getAppId());<br>        wxMaConfig.setSecret(wechatAccountConfig.getAppSecret());<br>        wxMaConfig.setMsgDataFormat(<span class="hljs-string">&quot;JSON&quot;</span>);<br>        <span class="hljs-comment">//  创建 WxMaService 对象</span><br>        <span class="hljs-type">WxMaService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WxMaServiceImpl</span>();<br>        <span class="hljs-comment">//  给 WxMaService 设置配置选项</span><br>        service.setWxMaConfig(wxMaConfig);<br>        <span class="hljs-keyword">return</span> service;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-在service-acount-中监听消息"><a href="#2-4-在service-acount-中监听消息" class="headerlink" title="2.4 在service-acount 中监听消息"></a>2.4 在service-acount 中监听消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.account.receiver;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountReceiver</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserAccountService userAccountService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册成功初始化用户账户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            exchange = @Exchange(value = MqConst.EXCHANGE_USER, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            value = @Queue(value = MqConst.QUEUE_USER_REGISTER, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            key = &#123;MqConst.ROUTING_USER_REGISTER&#125;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserAccount</span><span class="hljs-params">(Long userId, Message message, Channel channel)</span> &#123;<br>        <span class="hljs-comment">//业务处理</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != userId)&#123;<br>            log.info(<span class="hljs-string">&quot;注册成功初始化用户账户信息：&#123;&#125;&quot;</span>, userId);<br>            <span class="hljs-comment">//注册成功初始化用户账户信息</span><br>            userAccountService.addUserAccount(userId);<br>        &#125;<br>        <span class="hljs-comment">//手动应答</span><br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化账户信息：</p><p>接口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">UserAccountService</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">IService</span>&lt;<span class="hljs-symbol">UserAccount</span>&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加账户信息</span><br><span class="hljs-comment">     * @param userId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">void</span> addUserAccount(Long userId);<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAccountServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserAccountMapper, UserAccount&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserAccountService</span> &#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> UserAccountMapper userAccountMapper;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserAccount</span><span class="hljs-params">(Long userId)</span> &#123;<br>      <span class="hljs-comment">// user_account</span><br>      <span class="hljs-type">UserAccount</span> <span class="hljs-variable">userAccount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAccount</span>();<br>      userAccount.setUserId(userId);<br>      userAccountMapper.insert(userAccount);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、获取用户登录信息"><a href="#3、获取用户登录信息" class="headerlink" title="3、获取用户登录信息"></a>3、获取用户登录信息</h1><p><a href="http://127.0.0.1/api/user/wxLogin/getUserInfo">http://127.0.0.1/api/user/wxLogin/getUserInfo</a> 获取用户信息 ，将查询到的信息放入这个实体类UserInfoVo中</p><p>WxLoginApiController 控制器</p><p>思路：</p><ol><li>需要从请求头中获取token</li><li>利用token 生成换成的key，从缓存中获取数据，并放入ThreadLocl 中，这样才能使用AuthContextHolder获取用户Id</li></ol><h2 id="3-1-控制器"><a href="#3-1-控制器" class="headerlink" title="3.1 控制器"></a>3.1 控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户Id获取到用户数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@YunYueTingLogin</span><br><span class="hljs-meta">@Operation(summary = &quot;获取登录信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getUserInfo&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-comment">//  获取到用户Id</span><br>  <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId();<br>  <span class="hljs-comment">//  调用服务层方法</span><br>  <span class="hljs-type">UserInfoVo</span> <span class="hljs-variable">userInfoVo</span> <span class="hljs-operator">=</span> userInfoService.getUserInfoVoByUserId(userId);<br>  <span class="hljs-comment">//  返回数据</span><br>  <span class="hljs-keyword">return</span> Result.ok(userInfoVo);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-接口与实现"><a href="#3-2-接口与实现" class="headerlink" title="3.2 接口与实现"></a>3.2 接口与实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.user.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.user.UserInfo;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.vo.user.UserInfoVo;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfoService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;UserInfo&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据userId 获取用户登录信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    UserInfoVo <span class="hljs-title function_">getUserInfoVoByUserId</span><span class="hljs-params">(Long userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.user.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.user.UserInfo;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.user.mapper.UserInfoMapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.user.service.UserInfoService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.vo.user.UserInfoVo;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserInfoMapper, UserInfo&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserInfoService</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserInfoMapper userInfoMapper;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> UserInfoVo <span class="hljs-title function_">getUserInfoVoByUserId</span><span class="hljs-params">(Long userId)</span> &#123;<br><span class="hljs-comment">//获取到用户信息对象</span><br><span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(userId);<br><span class="hljs-comment">//创建UserInfoVo 对象</span><br><span class="hljs-type">UserInfoVo</span> <span class="hljs-variable">userInfoVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfoVo</span>();<br><span class="hljs-comment">//属性拷贝</span><br>BeanUtils.copyProperties(userInfo,userInfoVo);<br><span class="hljs-keyword">return</span> userInfoVo;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、更新用户信息方法"><a href="#4、更新用户信息方法" class="headerlink" title="4、更新用户信息方法"></a>4、更新用户信息方法</h1><p><img src="/2024/10/30/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC3%E7%AB%A0%20%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/%E7%99%BB%E5%BD%95-%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.gif"></p><!--![登录-修改用户信息](第3章 用户登录/登录-修改用户信息.gif)--><h2 id="4-1-控制器"><a href="#4-1-控制器" class="headerlink" title="4.1 控制器"></a>4.1 控制器</h2><p>登录成功之后，可以修改用户相关信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新用户信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userInfoVo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@YunYueTingLogin</span><br><span class="hljs-meta">@Operation(summary = &quot;更新用户信息&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;updateUser&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserInfoVo userInfoVo)</span>&#123;<br>  <span class="hljs-comment">//  获取到用户Id</span><br>  <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> AuthContextHolder.getUserId();<br>  <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br>  userInfo.setId(userId);<br>  userInfo.setNickname(userInfoVo.getNickname());<br>  userInfo.setAvatarUrl(userInfoVo.getAvatarUrl());<br><br>  <span class="hljs-comment">//  执行更新方法</span><br>  userInfoService.updateById(userInfo);<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>云悦听</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第2章 声音管理</title>
    <link href="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/"/>
    <url>/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章-声音管理"><a href="#第2章-声音管理" class="headerlink" title="第2章 声音管理"></a>第2章 声音管理</h1><p><strong>学习目标：</strong></p><ul><li><p>声音相关业务流程&amp;数据模型</p></li><li><p>新增声音（音视频文件上传到腾讯云点播服务）</p></li><li><p>修改声音</p></li><li><h6 id="删除声音"><a href="#删除声音" class="headerlink" title="删除声音"></a>删除声音</h6></li></ul><p>点击添加声音的时候会触发一个查询所有专辑列表</p><p><a href="http://127.0.0.1/api/album/albumInfo/findUserAllAlbumList">http://127.0.0.1/api/album/albumInfo/findUserAllAlbumList</a> 主要目的是为了让专辑与声音进行挂钩！</p><p>主要是根据userId查询数据{专辑Id，专辑标题}。然后并按照专辑Id 进行降序排列</p><h1 id="1、保存声音"><a href="#1、保存声音" class="headerlink" title="1、保存声音"></a>1、保存声音</h1><h2 id="1-1-获取当前用户全部专辑列表"><a href="#1-1-获取当前用户全部专辑列表" class="headerlink" title="1.1 获取当前用户全部专辑列表"></a>1.1 获取当前用户全部专辑列表</h2><p><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/%E5%A3%B0%E9%9F%B3-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%B8%93%E8%BE%91%E5%88%97%E8%A1%A8.gif"></p><!--![声音-获取用户专辑列表](第2章 声音管理/声音-获取用户专辑列表.gif)--><h3 id="1-1-1-控制器"><a href="#1-1-1-控制器" class="headerlink" title="1.1.1 控制器"></a>1.1.1 控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取当前用户专辑列表</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;获取当前用户全部专辑列表&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;findUserAllAlbumList&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findUserAllAlbumList</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  List&lt;AlbumInfo&gt; list = albumInfoService.findUserAllAlbumList(AuthContextHolder.getUserId());<br>  <span class="hljs-keyword">return</span> Result.ok(list);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-2-接口与实现"><a href="#1-1-2-接口与实现" class="headerlink" title="1.1.2 接口与实现"></a>1.1.2 接口与实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 获取当前用户专辑列表</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;AlbumInfo&gt; <span class="hljs-title function_">findUserAllAlbumList</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;AlbumInfo&gt; <span class="hljs-title function_">findUserAllAlbumList</span><span class="hljs-params">(<span class="hljs-type">long</span> userId)</span> &#123;<br>   <span class="hljs-comment">// 默认查看第一页</span><br>   Page&lt;AlbumInfo&gt; albumInfoPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br>   <span class="hljs-comment">// 设置查询条件</span><br>   LambdaQueryWrapper&lt;AlbumInfo&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>   wrapper.select(AlbumInfo::getId,AlbumInfo::getAlbumTitle);<br>   wrapper.eq(AlbumInfo::getUserId,userId);<br>   wrapper.orderByDesc(AlbumInfo::getId);<br>   <span class="hljs-comment">// 返回查询记录</span><br>   <span class="hljs-keyword">return</span> albumInfoMapper.selectPage(albumInfoPage,wrapper).getRecords();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-上传声音"><a href="#1-2-上传声音" class="headerlink" title="1.2 上传声音"></a>1.2 上传声音</h2><p>需要开通腾讯云服务 <a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a></p><p><strong>腾讯云点播服务</strong>面向音视频、图片等媒体，提供制作上传、存储、转码、媒体处理、媒体 AI、加速分发播放、版权保护等一体化高品质媒体服务。使用腾讯云服务可以为音视频文件的存储、传输、处理和分发提供<strong>可靠</strong>、<strong>高效</strong>和<strong>安全</strong>的解决方案。这可以节省你自己构建和维护存储基础设施的成本和精力，并为用户提供更好的音视频体验。</p><ol><li><strong>可靠性和可用性：</strong> 腾讯云提供高可靠性的存储服务，确保音视频文件的安全和持久保存。腾讯云具有跨多个地理区域和数据中心的数据冗余备份，以确保数据的高可用性和容灾能力。</li><li><strong>扩展性和弹性：</strong> 腾讯云提供高度可扩展的存储解决方案，可以根据需要轻松扩展存储容量，适应不断增长的音视频数据需求。你可以根据实际情况动态调整存储空间，并随时新增或删除文件。</li><li><strong>快速传输和低延迟：</strong> 腾讯云拥有全球范围的网络基础设施，可以提供快速的音视频文件上传和下载速度，同时降低传输延迟，使用户能够更快速地访问和共享文件。</li><li><strong>安全性和权限控制：</strong> 腾讯云提供多层次的安全机制来保护用户的音视频文件。你可以使用腾讯云提供的身份验证和权限控制功能确保只有授权用户才能访问和管理文件。此外，腾讯云也提供数据加密和防止盗链等功能，以增强音视频文件的安全性。</li><li><strong>多媒体处理和分发：</strong> 腾讯云提供了丰富的多媒体处理和分发服务，可以对上传的音视频文件进行转码、截图、剪辑等处理，并提供内容分发网络（CDN）加速服务，使用户能够高效地将音视频内容传送到全球各地的用户。</li></ol><p>快速介入流程：<a href="https://cloud.tencent.com/document/product/266/8757">云点播 快速入门-文档中心-腾讯云 (tencent.com)</a></p><p>微信扫码登录：</p><p>关注公众号：</p><p>搜索云点播：</p><p>微信认证：</p><p>实名认证：</p><p>立即开通服务：</p><p>右边：点击访问管理</p><h3 id="1-2-1-控制器"><a href="#1-2-1-控制器" class="headerlink" title="1.2.1 控制器"></a>1.2.1 控制器</h3><p>TrackInfoApiController 控制器中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.api;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.TrackInfoService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.result.Result;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.Operation;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Tag(name = &quot;声音管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/album/trackInfo&quot;)</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrackInfoApiController</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TrackInfoService trackInfoService;<br>  <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> VodService vodService;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传声音</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Operation(summary = &quot;上传声音&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;uploadTrack&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">uploadTrack</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br><span class="hljs-comment">//调用服务层方法</span><br>Map&lt;String,Object&gt; map = vodService.uploadTrack(file);<br><span class="hljs-keyword">return</span> Result.ok(map);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-2-接口与实现"><a href="#1-2-2-接口与实现" class="headerlink" title="1.2.2 接口与实现"></a>1.2.2 接口与实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service;<br><br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">VodService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传声音</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Map&lt;String, Object&gt; <span class="hljs-title function_">uploadTrack</span><span class="hljs-params">(MultipartFile file)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类 <a href="https://cloud.tencent.com/document/product/266/10276">云点播 Java SDK-开发指南-文档中心-腾讯云 (tencent.com)</a> Java 语言实现声音上传功能API</p><p>访问密钥：</p><p><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/tingshu051.png"></p><!--![](第2章 声音管理/tingshu051.png)--><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.config.VodConstantProperties;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.VodService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.util.UploadFileUtil;<br><span class="hljs-keyword">import</span> com.qcloud.vod.VodUploadClient;<br><span class="hljs-keyword">import</span> com.qcloud.vod.model.VodUploadRequest;<br><span class="hljs-keyword">import</span> com.qcloud.vod.model.VodUploadResponse;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VodServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">VodService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> VodConstantProperties vodConstantProperties;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">uploadTrack</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        <span class="hljs-comment">//  声音上传临时目录：</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">tempPath</span> <span class="hljs-operator">=</span> UploadFileUtil.uploadTempPath(vodConstantProperties.getTempPath(), file);<br>        <span class="hljs-comment">//  创建上传声音客户端</span><br>        <span class="hljs-type">VodUploadClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VodUploadClient</span>(vodConstantProperties.getSecretId(), vodConstantProperties.getSecretKey());<br>        <span class="hljs-comment">//  构建上传请求对象</span><br>        <span class="hljs-type">VodUploadRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VodUploadRequest</span>();<br>        <span class="hljs-comment">//  设置视频本地地址</span><br>        request.setMediaFilePath(tempPath);<br>        <span class="hljs-comment">//  指定任务流</span><br>        request.setProcedure(vodConstantProperties.getProcedure());<br>        <span class="hljs-comment">//  调用上传方法</span><br>        <span class="hljs-type">VodUploadResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.upload(vodConstantProperties.getRegion(), request);<br>        <span class="hljs-comment">//  创建map 对象</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;mediaFileId&quot;</span>,response.getFileId());<br>        map.put(<span class="hljs-string">&quot;mediaUrl&quot;</span>,response.getMediaUrl());<br>        <span class="hljs-comment">//  返回map 数据</span><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上传之后可以在：<a href="https://console.cloud.tencent.com/vod/media">音视频管理 - 媒资管理 - 云点播 - 控制台 (tencent.com)</a>看是否有音频</p><p><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/tingshu049.png"></p><!--![](第2章 声音管理/tingshu049.png)--><h2 id="1-3-实现保存声音"><a href="#1-3-实现保存声音" class="headerlink" title="1.3 实现保存声音"></a>1.3 实现保存声音</h2><p><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/%E5%A3%B0%E9%9F%B3-%E4%BF%9D%E5%AD%98%E5%A3%B0%E9%9F%B3.gif"></p><!--![声音-保存声音](第2章 声音管理/声音-保存声音.gif)--><p>思想思路：</p><p>前端传递Json 字符串，此时我们可以使用封装好的TrackInfoVo实体类进行接收，方便处理数据</p><p>设计到的表有：</p><p>track_info 声音信息表</p><p>​user_id : 直接从工具类中获取</p><p>​order_num :  声音在专辑中的排序值，从1开始依次递增，值越小排序越前，根据专辑Id查询上一条声音的排序值 并且按照声音Id 进行降序排列 并且 获取第一条数</p><p>​media_duration , media_size ,media_type, media_url：根据流媒体Id获取到数据并赋值！获取到的数据使用TrackMediaInfoVo 对象接收</p><p>track_stat 声音统计表</p><p>​初始化： 播放量 收藏量 点赞数 评论数</p><p>album_info 专辑表</p><p>​因为修改专辑中的字段 include_track_count 专辑包含声音的总数</p><p>控制器，此时有还没有写用户登录相关代码，所以可以给用户Id 一个初始化数据 1</p><h3 id="1-3-1-控制器"><a href="#1-3-1-控制器" class="headerlink" title="1.3.1 控制器"></a>1.3.1 控制器</h3><p>TrackInfoApiController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 保存声音</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> trackInfoVo</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;新增声音&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;saveTrackInfo&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveTrackInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> TrackInfoVo trackInfoVo)</span> &#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  trackInfoService.saveTrackInfo(trackInfoVo, AuthContextHolder.getUserId());<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-2-接口与实现"><a href="#1-3-2-接口与实现" class="headerlink" title="1.3.2 接口与实现"></a>1.3.2 接口与实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 保存声音</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackInfoVo</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveTrackInfo</span><span class="hljs-params">(TrackInfoVo trackInfoVo, Long userId)</span>;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveTrackInfo</span><span class="hljs-params">(TrackInfoVo trackInfoVo, Long userId)</span> &#123;<br>   <span class="hljs-comment">// 创建声音对象</span><br>   <span class="hljs-type">TrackInfo</span> <span class="hljs-variable">trackInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrackInfo</span>();<br>   <span class="hljs-comment">// 属性拷贝</span><br>   BeanUtils.copyProperties(trackInfoVo,trackInfo);<br>   trackInfo.setStatus(SystemConstant.TRACK_STATUS_PASS);<br>   trackInfo.setUserId(userId);<br>   <span class="hljs-comment">// 获取上一条声音</span><br>   <span class="hljs-type">TrackInfo</span> <span class="hljs-variable">preTrackInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TrackInfo&gt;().eq(TrackInfo::getAlbumId, trackInfoVo.getAlbumId()).orderByDesc(TrackInfo::getId).select(TrackInfo::getOrderNum).last(<span class="hljs-string">&quot; limit 1 &quot;</span>));<br>   <span class="hljs-type">int</span> <span class="hljs-variable">orderNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != preTrackInfo) &#123;<br>      orderNum = preTrackInfo.getOrderNum() + <span class="hljs-number">1</span>;<br>   &#125;<br>   <span class="hljs-comment">// 获取流媒体信息.</span><br>   <span class="hljs-type">TrackMediaInfoVo</span> <span class="hljs-variable">trackMediaInfo</span> <span class="hljs-operator">=</span> vodService.getTrackMediaInfo(trackInfoVo.getMediaFileId());<br>   <span class="hljs-comment">// 赋值排序值</span><br>   trackInfo.setOrderNum(orderNum);<br>   <span class="hljs-comment">// 赋值声音</span><br>   trackInfo.setMediaSize(trackMediaInfo.getSize());<br>   trackInfo.setMediaUrl(trackMediaInfo.getMediaUrl());<br>   trackInfo.setMediaDuration(trackMediaInfo.getDuration());<br>   trackInfo.setMediaType(trackMediaInfo.getType());<br><br>   <span class="hljs-built_in">this</span>.save(trackInfo);<br><br>   <span class="hljs-comment">// 更新专辑声音总数</span><br>   <span class="hljs-type">AlbumInfo</span> <span class="hljs-variable">albumInfo</span> <span class="hljs-operator">=</span> albumInfoService.getById(trackInfo.getAlbumId());<br>   <span class="hljs-type">int</span> <span class="hljs-variable">includeTrackCount</span> <span class="hljs-operator">=</span> albumInfo.getIncludeTrackCount() + <span class="hljs-number">1</span>;<br>   albumInfo.setIncludeTrackCount(includeTrackCount);<br>   albumInfoService.updateById(albumInfo);<br><br>   <span class="hljs-comment">// 初始化统计数据</span><br>   <span class="hljs-built_in">this</span>.saveTrackStat(trackInfo.getId(),SystemConstant.TRACK_STAT_PLAY);<br>   <span class="hljs-built_in">this</span>.saveTrackStat(trackInfo.getId(),SystemConstant.TRACK_STAT_COLLECT);<br>   <span class="hljs-built_in">this</span>.saveTrackStat(trackInfo.getId(),SystemConstant.TRACK_STAT_PRAISE);<br>   <span class="hljs-built_in">this</span>.saveTrackStat(trackInfo.getId(),SystemConstant.TRACK_STAT_COMMENT);<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化统计数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 初始化统计数量</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackId</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackType</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveTrackStat</span><span class="hljs-params">(Long trackId, String trackType)</span> &#123;<br>  <span class="hljs-type">TrackStat</span> <span class="hljs-variable">trackStat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrackStat</span>();<br>  trackStat.setTrackId(trackId);<br>  trackStat.setStatType(trackType);<br>  trackStat.setStatNum(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">this</span>.trackStatMapper.insert(trackStat);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取流媒体数据方法实现  参考地址<a href="https://console.cloud.tencent.com/api/explorer?Product=vod&Version=2018-07-17&Action=DescribeMediaInfos">API Explorer - 云 API - 控制台 (tencent.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> TrackMediaInfoVo <span class="hljs-title function_">getTrackMediaInfo</span><span class="hljs-params">(String mediaFileId)</span> &#123;<br>  <span class="hljs-comment">//  初始化认证对象</span><br>  <span class="hljs-type">Credential</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Credential</span>(vodConstantProperties.getSecretId(), vodConstantProperties.getSecretKey());<br>  <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>  <span class="hljs-type">VodClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VodClient</span>(cred, vodConstantProperties.getRegion());<br>  <span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>  <span class="hljs-type">DescribeMediaInfosRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DescribeMediaInfosRequest</span>();<br>  <span class="hljs-comment">//  设置当前fileIds</span><br>  req.setFileIds(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;mediaFileId&#125;);<br>  <span class="hljs-comment">// 返回的resp是一个DescribeMediaInfosResponse的实例，与请求对象对应</span><br>  <span class="hljs-type">DescribeMediaInfosResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.DescribeMediaInfos(req);<br>  log.info(<span class="hljs-string">&quot;声音详细返回结果：&#123;&#125;&quot;</span>, JSON.toJSONString(response));<br>  <span class="hljs-comment">//  判断对象不为空</span><br>  <span class="hljs-keyword">if</span> (response.getMediaInfoSet().length&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">//  获取到</span><br>    <span class="hljs-type">MediaInfo</span> <span class="hljs-variable">mediaInfo</span> <span class="hljs-operator">=</span> response.getMediaInfoSet()[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">//  创建流媒体信息对象</span><br>    <span class="hljs-type">TrackMediaInfoVo</span> <span class="hljs-variable">trackMediaInfoVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrackMediaInfoVo</span>();<br>    trackMediaInfoVo.setDuration(mediaInfo.getMetaData().getDuration());<br>    trackMediaInfoVo.setSize(mediaInfo.getMetaData().getSize());<br>    trackMediaInfoVo.setMediaUrl(mediaInfo.getBasicInfo().getMediaUrl());<br>    trackMediaInfoVo.setType(mediaInfo.getBasicInfo().getType());<br>    <span class="hljs-comment">//  返回数据</span><br>    <span class="hljs-keyword">return</span> trackMediaInfoVo;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、查询声音列表"><a href="#2、查询声音列表" class="headerlink" title="2、查询声音列表"></a>2、查询声音列表</h1><p>需要根据用户Id，状态或标题查询当前声音列表！这三个条件被封装到一个实体类中 <strong>TrackInfoQuery</strong>,返回结果对象封装到 <strong>TrackListVo</strong> 实体类中<br><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/%E5%A3%B0%E9%9F%B3-%E5%A3%B0%E9%9F%B3%E5%88%97%E8%A1%A8.gif"></p><!--![声音-声音列表](第2章 声音管理/声音-声音列表.gif)--><h2 id="2-1-控制器"><a href="#2-1-控制器" class="headerlink" title="2.1 控制器"></a>2.1 控制器</h2><p>TrackInfoApiController 控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查看声音专辑列表</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> limit</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> trackInfoQuery</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;获取当前用户声音分页列表&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;findUserTrackPage/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;IPage&lt;TrackListVo&gt;&gt; <span class="hljs-title function_">findUserTrackPage</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;page&quot;,description = &quot;当前页面&quot;,required = true)</span></span><br><span class="hljs-params">                                                    <span class="hljs-meta">@PathVariable</span> Long page,</span><br><span class="hljs-params">                                                    <span class="hljs-meta">@Parameter(name = &quot;limit&quot;,description = &quot;每页记录数&quot;,required = true)</span></span><br><span class="hljs-params">                                                    <span class="hljs-meta">@PathVariable</span> Long limit,</span><br><span class="hljs-params">                                                    <span class="hljs-meta">@Parameter(name = &quot;trackInfoQuery&quot;,description = &quot;查询对象&quot;,required = false)</span></span><br><span class="hljs-params">                                                    <span class="hljs-meta">@RequestBody</span> TrackInfoQuery trackInfoQuery)</span>&#123;<br>  <span class="hljs-comment">//设置当前用户Id</span><br>  trackInfoQuery.setUserId(AuthContextHolder.getUserId());<br>  <span class="hljs-comment">//创建对象</span><br>  Page&lt;TrackListVo&gt; trackListVoPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page,limit);<br>  IPage&lt;TrackListVo&gt; trackListVoIPage = trackInfoService.findUserTrackPage(trackListVoPage,trackInfoQuery);<br>  <span class="hljs-comment">//返回数据</span><br>  <span class="hljs-keyword">return</span> Result.ok(trackListVoIPage);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-接口与实现"><a href="#2-2-接口与实现" class="headerlink" title="2.2 接口与实现"></a>2.2 接口与实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询声音专辑列表</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackListVoPage</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackInfoQuery</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>IPage&lt;TrackListVo&gt; <span class="hljs-title function_">findUserTrackPage</span><span class="hljs-params">(Page&lt;TrackListVo&gt; trackListVoPage, TrackInfoQuery trackInfoQuery)</span>;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> IPage&lt;TrackListVo&gt; <span class="hljs-title function_">findUserTrackPage</span><span class="hljs-params">(Page&lt;TrackListVo&gt; trackListVoPage, TrackInfoQuery trackInfoQuery)</span> &#123;<br><span class="hljs-comment">//调用mapper层方法</span><br><span class="hljs-keyword">return</span> trackInfoMapper.selectUserTrackPage(trackListVoPage,trackInfoQuery);<br>&#125;<br></code></pre></td></tr></table></figure><p>TrackInfoMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.mapper;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.TrackInfo;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.query.album.TrackInfoQuery;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.vo.album.TrackListVo;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TrackInfoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;TrackInfo&gt; &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询声音专辑列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> trackListVoPage</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> trackInfoQuery</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    IPage&lt;TrackListVo&gt; <span class="hljs-title function_">selectUserTrackPage</span><span class="hljs-params">(Page&lt;TrackListVo&gt; trackListVoPage, <span class="hljs-meta">@Param(&quot;vo&quot;)</span> TrackInfoQuery trackInfoQuery)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>TrackInfoMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.album.mapper.TrackInfoMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserTrackPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.vo.album.TrackListVo&quot;</span>&gt;</span><br>        select album.id as albumId,<br>        album.album_title,<br>        track.id as trackId,<br>        track.track_title,<br>        track.media_duration,<br>        if(track.cover_url is null or track.cover_url = &#x27;&#x27;, album.cover_url, track.cover_url) as coverUrl,<br>        track.status,<br>        track.create_time                                    as createTime,<br>        MAX(IF(stat.stat_type = &#x27;0701&#x27;, stat.stat_num, 0))   as playStatNum,<br>        MAX(IF(stat.stat_type = &#x27;0702&#x27;, stat.stat_num, 0))   as collectStatNum,<br>        MAX(IF(stat.stat_type = &#x27;0703&#x27;, stat.stat_num, 0))   as praiseStatNum,<br>        MAX(IF(stat.stat_type = &#x27;0704&#x27;, stat.stat_num, 0))   as commentStatNum<br>        from track_info track<br>        left join track_stat stat on stat.track_id = track.id<br>        left join album_info album on album.id = track.album_id<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;vo.userId!=null&quot;</span>&gt;</span><br>                track.user_id=#&#123;vo.userId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;vo.status!=null and vo.status!=&#x27;&#x27;&quot;</span>&gt;</span><br>                and track.status = #&#123;vo.status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;vo.trackTitle!=null and vo.trackTitle !=&#x27;&#x27;&quot;</span>&gt;</span><br>                and track.track_title like concat(&#x27;%&#x27;,#&#123;vo.trackTitle&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            and track.is_deleted = 0<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        group by track.id<br>        order by track.id desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3、删除声音"><a href="#3、删除声音" class="headerlink" title="3、删除声音"></a>3、删除声音</h1><p><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/%E5%A3%B0%E9%9F%B3-%E5%A3%B0%E9%9F%B3%E5%88%A0%E9%99%A4.gif"></p><!--![声音-声音删除](第2章 声音管理/声音-声音删除.gif)--><p>设计的表： track_info，album_info，track_stat，media</p><p>思路：</p><ol><li>track_info,track_stat：对这两张表要进行逻辑删除<br>2.修改album_info 表中的专辑声音总数<br>3.删除云点播中的声音记录</li></ol><h2 id="3-1-控制器"><a href="#3-1-控制器" class="headerlink" title="3.1 控制器"></a>3.1 控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除声音</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Operation(summary = &quot;删除声音信息&quot;)</span><br><span class="hljs-meta">@DeleteMapping(&quot;removeTrackInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removeTrackInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  trackInfoService.removeTrackInfo(id);<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-接口与实现"><a href="#3-2-接口与实现" class="headerlink" title="3.2 接口与实现"></a>3.2 接口与实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除声音</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeTrackInfo</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeTrackInfo</span><span class="hljs-params">(Long id)</span> &#123;<br>   <span class="hljs-comment">// 获取声音对象数据</span><br>   <span class="hljs-type">TrackInfo</span> <span class="hljs-variable">trackInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>   <span class="hljs-comment">// 删除</span><br>   <span class="hljs-built_in">this</span>.removeById(id);<br>   <span class="hljs-comment">//更新专辑声音总数</span><br>   <span class="hljs-type">AlbumInfo</span> <span class="hljs-variable">albumInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.albumInfoService.getById(trackInfo.getAlbumId());<br>   <span class="hljs-type">int</span> <span class="hljs-variable">includeTrackCount</span> <span class="hljs-operator">=</span> albumInfo.getIncludeTrackCount() - <span class="hljs-number">1</span>;<br>   albumInfo.setIncludeTrackCount(includeTrackCount);<br>   albumInfoService.updateById(albumInfo);<br>   <span class="hljs-comment">//删除统计数据</span><br>   trackStatMapper.delete(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;TrackStat&gt;().eq(TrackStat::getTrackId, id));<br>   <span class="hljs-comment">//  序号重新更新</span><br>   trackInfoMapper.updateTrackNum(trackInfo.getAlbumId(),trackInfo.getOrderNum());<br>   <span class="hljs-comment">//删除声音媒体</span><br>   vodService.removeTrack(trackInfo.getMediaFileId());<br>&#125;<br></code></pre></td></tr></table></figure><p>TrackInfoMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改序号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> albumId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNum</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateTrackNum</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;albumId&quot;)</span> Long albumId, <span class="hljs-meta">@Param(&quot;orderNum&quot;)</span> Integer orderNum)</span>;<br></code></pre></td></tr></table></figure><p>TrackInfoMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateTrackNum&quot;</span>&gt;</span><br>    update track_info set order_num = order_num - 1 where album_id=#&#123;albumId&#125; and order_num &gt; #&#123;orderNum&#125; and is_deleted = 0<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除云点播声音</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据媒体Id 删除数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> mediaFileId</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeTrack</span><span class="hljs-params">(String mediaFileId)</span>;<br></code></pre></td></tr></table></figure><p><a href="https://console.cloud.tencent.com/api/explorer?Product=vod&Version=2018-07-17&Action=DeleteMedia">API Explorer - 云 API - 控制台 (tencent.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeTrack</span><span class="hljs-params">(String mediaFileId)</span> &#123;<br>  <span class="hljs-type">Credential</span> <span class="hljs-variable">cred</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Credential</span>(vodConstantProperties.getSecretId(), vodConstantProperties.getSecretKey());<br>  <span class="hljs-comment">// 实例化要请求产品的client对象,clientProfile是可选的</span><br>  <span class="hljs-type">VodClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VodClient</span>(cred, <span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-comment">// 实例化一个请求对象,每个接口都会对应一个request对象</span><br>  <span class="hljs-type">DeleteMediaRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteMediaRequest</span>();<br>  req.setFileId(mediaFileId);<br>  <span class="hljs-comment">// 返回的resp是一个DeleteMediaResponse的实例，与请求对象对应</span><br>  <span class="hljs-type">DeleteMediaResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.DeleteMedia(req);<br>  <span class="hljs-comment">// 输出json格式的字符串回包</span><br>  log.info(<span class="hljs-string">&quot;声音删除返回结课: &#123;&#125;&quot;</span>, JSON.toJSONString(response));<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、修改声音"><a href="#4、修改声音" class="headerlink" title="4、修改声音"></a>4、修改声音</h1><p><img src="/2024/09/25/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC2%E7%AB%A0%20%E5%A3%B0%E9%9F%B3%E7%AE%A1%E7%90%86/%E5%A3%B0%E9%9F%B3-%E5%A3%B0%E9%9F%B3%E4%BF%AE%E6%94%B9.gif"></p><!--![声音-声音修改](第2章 声音管理/声音-声音修改.gif)--><p>思路：</p><ol><li><p>根据Id获取数据并回显 将数据封装到 TrackInfo对象</p></li><li><p>保存修改之后的数据</p><p>​修改的时候，传递的有声音Id ，还有修改的Json 字符串.</p><p>​只修改track_info 表中的数据就可以了</p><p>​涉及到声音保存的问题，如果修改了声音，那么track_info 中声音信息，就需要修改media_duration , media_size ,media_type, media_url这些字段信息。</p></li></ol><h2 id="4-1-回显声音信息"><a href="#4-1-回显声音信息" class="headerlink" title="4.1 回显声音信息"></a>4.1 回显声音信息</h2><h3 id="4-1-1-控制器"><a href="#4-1-1-控制器" class="headerlink" title="4.1.1 控制器"></a>4.1.1 控制器</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据Id 获取数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Operation(summary = &quot;获取声音信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getTrackInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;TrackInfo&gt; <span class="hljs-title function_">getTrackInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  <span class="hljs-type">TrackInfo</span> <span class="hljs-variable">trackInfo</span> <span class="hljs-operator">=</span> trackInfoService.getById(id);<br>  <span class="hljs-keyword">return</span> Result.ok(trackInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-保存修改声音"><a href="#4-2-保存修改声音" class="headerlink" title="4.2 保存修改声音"></a>4.2 保存修改声音</h2><p>   传递声音Id ，封装好的TrackInfoVo 实体类。</p><h3 id="4-2-1-控制器"><a href="#4-2-1-控制器" class="headerlink" title="4.2.1 控制器"></a>4.2.1 控制器</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 保存修改声音数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackInfoVo</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Operation(summary = &quot;修改声音&quot;)</span><br><span class="hljs-meta">@PutMapping(&quot;updateTrackInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> TrackInfoVo trackInfoVo)</span> &#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  trackInfoService.updateTrackInfo(id, trackInfoVo);<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-2-接口与实现"><a href="#4-2-2-接口与实现" class="headerlink" title="4.2.2 接口与实现"></a>4.2.2 接口与实现</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 保存数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> trackInfoVo</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateTrackInfo</span><span class="hljs-params">(Long id, TrackInfoVo trackInfoVo)</span>;<br></code></pre></td></tr></table></figure><p>   实现类</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateTrackInfo</span><span class="hljs-params">(Long id, TrackInfoVo trackInfoVo)</span> &#123;<br>  <span class="hljs-comment">//获取到声音对象</span><br>  <span class="hljs-type">TrackInfo</span> <span class="hljs-variable">trackInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>  <span class="hljs-comment">//    获取传递的fileId</span><br>  <span class="hljs-type">String</span> <span class="hljs-variable">mediaFileId</span> <span class="hljs-operator">=</span> trackInfo.getMediaFileId();<br>  <span class="hljs-comment">//进行属性拷贝</span><br>  BeanUtils.copyProperties(trackInfoVo, trackInfo);<br>  <span class="hljs-comment">//获取声音信息 页面传递的fileId 与 数据库的 fileId 不相等就修改</span><br>  <span class="hljs-keyword">if</span> (!trackInfoVo.getMediaFileId().equals(mediaFileId)) &#123;   <br>    <span class="hljs-comment">//说明已经修改过了.</span><br>    <span class="hljs-type">TrackMediaInfoVo</span> <span class="hljs-variable">trackMediaInfoVo</span> <span class="hljs-operator">=</span> vodService.getTrackMediaInfo(trackInfoVo.getMediaFileId());<br>    <span class="hljs-comment">//判断对象不为空.</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span>==trackMediaInfoVo)&#123;<br>      <span class="hljs-comment">//抛出异常</span><br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguException</span>(ResultCodeEnum.VOD_FILE_ID_ERROR);<br>    &#125;<br>    trackInfo.setMediaUrl(trackMediaInfoVo.getMediaUrl());<br>    trackInfo.setMediaType(trackMediaInfoVo.getType());<br>    trackInfo.setMediaDuration(trackMediaInfo.getDuration());<br>    trackInfo.setMediaSize(trackMediaInfoVo.getSize());<br>    <span class="hljs-comment">// 删除云点播声音</span><br>    vodService.removeTrack(mediaFileId);<br>  &#125;<br>  <span class="hljs-comment">//修改数据</span><br>  <span class="hljs-built_in">this</span>.updateById(trackInfo);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>云悦听</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1、专辑管理</title>
    <link href="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/"/>
    <url>/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h5 id="第1章-专辑管理"><a href="#第1章-专辑管理" class="headerlink" title="第1章 专辑管理"></a>第1章 专辑管理</h5><hr><p><strong>学习目标：</strong></p><ul><li>了解听书项目业务背景</li><li>搭建项目环境<ul><li>虚拟机环境（Docker软件）</li><li>数据库环境</li><li>Maven项目环境（基础代码）</li></ul></li><li>专辑管理<ul><li>MinIO分布式文件存储服务</li><li>添加、删除、修改、删除</li></ul></li></ul><h1 id="1、云悦听"><a href="#1、云悦听" class="headerlink" title="1、云悦听"></a>1、云悦听</h1><h2 id="1-1-项目背景"><a href="#1-1-项目背景" class="headerlink" title="1.1 项目背景"></a>1.1 项目背景</h2><p>随着智能手机和高速互联网的普及，人们开始寻求更便捷的方式来获取信息和娱乐。有声书的出现使得人们可以在旅途中、跑步时、做家务时等各种场景下，以更加灵活的方式享受阅读。</p><p>在过去，有声书主要是由<strong>专业的演员朗读</strong>，制作成录音带或CD。但随着数字化媒体的发展，听书软件应运而生，为用户提供了更多选择，包括自助出版的有声书和多样化的内容。</p><p>意义：</p><ol><li>便捷性：听书软件使得阅读不再局限于纸质书籍，用户可以通过手机等设备在任何时间、任何地点收听有声书，节省了携带实体书的麻烦。</li><li>多样化内容：听书软件提供了广泛的有声书选择，涵盖了各种类型的图书、小说、杂志、教育内容等。这样的多样性使得用户能够根据个人兴趣和需求选择内容。</li><li>阅读体验：通过专业的朗读演员和音效制作，听书软件可以提供更加生动、有趣的阅读体验，有助于吸引更多读者，尤其是那些不太喜欢阅读纸质书籍的人。</li><li>辅助功能：听书软件通常还具备一些辅助功能，如调整朗读速度、书签功能、字幕显示等，有助于提高可访问性，使得视力受损或其他障碍的用户也能轻松阅读。</li><li>支持作家和内容创作者：听书软件为作家和内容创作者提供了另一种传播作品的渠道，有助于扩大影响力和读者群。</li><li>学习工具：听书软件也可以用作学习工具，提供学术教材、外语学习材料等，帮助用户在学习过程中更好地理解和吸收知识。</li></ol><p>总的来说，听书软件的开发推动了阅读体验的数字化和个性化，为用户提供了更加便捷、多样化的阅读方式，也促进了作家和内容创作者的创作和传播。</p><h2 id="1-2-项目技术栈"><a href="#1-2-项目技术栈" class="headerlink" title="1.2 项目技术栈"></a>1.2 项目技术栈</h2><ul><li><strong>SpringBoot</strong>：简化Spring应用的初始搭建以及开发过程</li><li><strong>SpringCloud</strong>：基于Spring Boot实现的云原生应用开发工具，SpringCloud使用的技术：（Spring Cloud Gateway、Spring Cloud Task和Spring Cloud Feign等）</li><li><strong>SpringBoot+SpringCloudAlibaba(Nacos，Sentinel)+Cloud OpenFeign</strong></li><li>MyBatis-Plus：持久层框架，也依赖mybatis</li><li>Redis：内存做缓存</li><li><strong>Redisson</strong>：基于redis的Java驻内存数据网格 - 框架；操作redis的框架</li><li><strong>MongoDB</strong>: 分布式文件存储的数据库</li><li>Rabbitmq：消息中间件；大型分布式项目是标配；分布式事务最终一致性</li><li><strong>ElasticSearch+Kibana+Logstash</strong> 全文检索服务器+可视化数据监控：检索</li><li>ThreadPoolExecutor+<strong>CompletableFuture</strong>：线程池来实现异步操作，提高效率</li><li><strong>xxl-Job</strong>: 分布式定时任务调用中心</li><li>Knife4J&#x2F;<strong>YAPI</strong>：Api接口文档工具</li><li>MinIO（私有化对象存储集群）：分布式文件存储</li><li>支付平台：微信支付</li><li>MySQL：关系型数据库 {shardingSphere-jdbc 进行读写分离; 分库，分表}</li><li>Lombok: 实体类的中get&#x2F;set 生成的jar包</li><li>natapp：内网穿透</li><li>Docker：容器化技术;  生产环境Redis（运维人员）；快速搭建环境Docker run</li><li>Git：代码管理工具；git使用，拉代码、提交、推送、合并、冲突解决</li><li><strong>Cannal</strong>：阿里开源增量订阅组件，数据增量同步</li><li><strong>Seata</strong>：阿里开源分布式事务解决方案</li></ul><p>前端技术栈</p><ul><li><p>UniApp</p></li><li><p>Vue3全家桶</p></li><li><p>TypeScript</p></li><li><p>Grace-UI</p></li><li><p>Uni-UI</p></li><li><p>uniapp-axios-adapter</p></li></ul><h2 id="1-3-项目架构图"><a href="#1-3-项目架构图" class="headerlink" title="1.3 项目架构图"></a>1.3 项目架构图</h2><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/jiagoutu.png"></p><!--![](第1章 专辑管理/jiagoutu.png)--><h1 id="2、专辑管理添加"><a href="#2、专辑管理添加" class="headerlink" title="2、专辑管理添加"></a>2、专辑管理添加</h1><ol><li><p>参考听书软件环境安装.md  </p></li><li><p>导入听书初始化项目 资料中的tingshu-parent项目导入idea开发工具中即可！</p></li></ol><p>​     目前在虚拟机中安装以下容器服务都是开机自启动！</p><table><thead><tr><th align="center">名</th><th align="left">URL</th><th align="center">账号密码</th></tr></thead><tbody><tr><td align="center">MySQL</td><td align="left">192.168.200.130:3306</td><td align="center">root&#x2F;root</td></tr><tr><td align="center">Redis</td><td align="left">192.168.200.130:6379</td><td align="center"></td></tr><tr><td align="center">Elasticsearch</td><td align="left"><a href="http://192.168.200.130:9200/">http://192.168.200.130:9200</a></td><td align="center">elastic&#x2F;111111</td></tr><tr><td align="center">Kibana</td><td align="left"><a href="http://192.168.200.130:5601/">http://192.168.200.130:5601</a></td><td align="center">elastic&#x2F;111111</td></tr><tr><td align="center">Logstash</td><td align="left">收集日志的后台进程，无需访问</td><td align="center"></td></tr><tr><td align="center">Rabbitmq</td><td align="left"><a href="http://192.168.200.130:15672/">http://192.168.200.130:15672</a></td><td align="center"></td></tr><tr><td align="center">Nacos</td><td align="left"><a href="http://192.168.200.130:8848/nacos">http://192.168.200.130:8848/nacos</a></td><td align="center">nacos&#x2F;nacos</td></tr><tr><td align="center">MinIO</td><td align="left"><a href="http://192.168.200.130:9001/">http://192.168.200.130:9001</a></td><td align="center">admin&#x2F;admin123456</td></tr><tr><td align="center">YAPI</td><td align="left"><a href="http://192.168.200.130:3000/">http://192.168.200.130:3000</a></td><td align="center"><a href="mailto:&#x61;&#100;&#x6d;&#x69;&#110;&#64;&#x61;&#x64;&#109;&#x69;&#x6e;&#46;&#99;&#111;&#109;">&#x61;&#100;&#x6d;&#x69;&#110;&#64;&#x61;&#x64;&#109;&#x69;&#x6e;&#46;&#99;&#111;&#109;</a>&#x2F;ymfe.org</td></tr><tr><td align="center">MongoDB</td><td align="left">192.168.200.130:27017</td><td align="center"></td></tr></tbody></table><p>主要功能如下：</p><ol><li><strong>先获取到专辑分类</strong></li><li><strong>查询专辑标签</strong></li><li><strong>文件上传</strong></li><li><strong>保存专辑</strong></li></ol><p>功能入口：运行app项目–&gt;我的–&gt;创作中心点击 + 添加专辑</p><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/%E4%BF%9D%E5%AD%98%E4%B8%93%E8%BE%91.gif"></p><!--![保存专辑](第1章 专辑管理/保存专辑.gif)--><h2 id="2-1-查看分类数据"><a href="#2-1-查看分类数据" class="headerlink" title="2.1 查看分类数据"></a>2.1 查看分类数据</h2><p><strong>Path：</strong> &#x2F;api&#x2F;album&#x2F;category&#x2F;getBaseCategoryList</p><p><strong>Method：</strong> GET</p><p>设计到的视图: base_category_view，在这张视图中存储了所有的分类数据。</p><p>展示分类数据的格式如下：前端要求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;音乐&quot;</span><span class="hljs-punctuation">,</span>   #一级分类名称<br>    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>                       #一级分类ID<br>    <span class="hljs-attr">&quot;categoryChild&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>                     #当前一级分类包含的二级分类集合<br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;音乐音效&quot;</span><span class="hljs-punctuation">,</span>     #二级分类名称<br>            <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">101</span><span class="hljs-punctuation">,</span>               #二级分类ID<br>            <span class="hljs-attr">&quot;categoryChild&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>             #当前二级分类包含的三级分类集合<br>               <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;催眠音乐&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1001</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;放松音乐&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1002</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;提神音乐&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1003</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;有声书&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;categoryChild&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;男频小说&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">104</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;categoryChild&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;categoryName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;军事小说&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;categoryId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1009</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h3 id="2-1-1-控制器"><a href="#2-1-1-控制器" class="headerlink" title="2.1.1 控制器"></a>2.1.1 控制器</h3><p>BaseCategoryApiController </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.BaseCategoryService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.result.Result;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.Operation;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Tag(name = &quot;分类管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value=&quot;/admin/album/category&quot;)</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseCategoryApiController</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategoryService baseCategoryService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有分类数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Operation(tags = &quot;查询所有分类数据&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getBaseCategoryList&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getBaseCategoryList</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//调用服务层的查询分类方法</span><br>List&lt;JSONObject&gt; categoryList = <span class="hljs-built_in">this</span>.baseCategoryService.getBaseCategoryList();<br><span class="hljs-comment">//将数据返回给页面使用</span><br><span class="hljs-keyword">return</span> Result.ok(categoryList);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-2-接口与实现类"><a href="#2-1-2-接口与实现类" class="headerlink" title="2.1.2 接口与实现类"></a>2.1.2 接口与实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.BaseCategory1;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseCategoryService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;BaseCategory1&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有的分类数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;JSONObject&gt; <span class="hljs-title function_">getBaseCategoryList</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.BaseCategory1Mapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.BaseCategory2Mapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.BaseCategory3Mapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.BaseCategoryViewMapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.BaseCategoryService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.BaseCategory1;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.BaseCategoryView;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseCategoryServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BaseCategory1Mapper, BaseCategory1&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseCategoryService</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategory1Mapper baseCategory1Mapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategory2Mapper baseCategory2Mapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategory3Mapper baseCategory3Mapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategoryViewMapper baseCategoryViewMapper;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;JSONObject&gt; <span class="hljs-title function_">getBaseCategoryList</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//创建集合对象</span><br>List&lt;JSONObject&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//查看所有分类数据</span><br>List&lt;BaseCategoryView&gt; baseCategoryViewList = baseCategoryViewMapper.selectList(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//按照一级分类Id 进行分组 key:一级分类Id， value:一级分类Id 对应的集合数据</span><br>Map&lt;Long, List&lt;BaseCategoryView&gt;&gt; map = baseCategoryViewList.stream().collect(Collectors.groupingBy(BaseCategoryView::getCategory1Id));<br><span class="hljs-comment">//循环遍历数据</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;Long, List&lt;BaseCategoryView&gt;&gt; entry : map.entrySet()) &#123;<br><span class="hljs-comment">//获取到一级分类Id</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">category1Id</span> <span class="hljs-operator">=</span> entry.getKey();<br><span class="hljs-comment">//获取到一级分类Id 对应的集合数据</span><br>List&lt;BaseCategoryView&gt; category1ViewList = entry.getValue();<br><span class="hljs-comment">// 声明一级分类对象</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">category1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>category1.put(<span class="hljs-string">&quot;categoryId&quot;</span>, category1Id);<br>category1.put(<span class="hljs-string">&quot;categoryName&quot;</span>, category1ViewList.get(<span class="hljs-number">0</span>).getCategory1Name());<br><br><span class="hljs-comment">//按照二级分类Id 进行分组</span><br>Map&lt;Long, List&lt;BaseCategoryView&gt;&gt; map2 = category1ViewList.stream().collect(Collectors.groupingBy(BaseCategoryView::getCategory2Id));<br><span class="hljs-comment">// 声明二级分类对象集合</span><br>List&lt;JSONObject&gt; category2Child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//循环遍历</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;Long, List&lt;BaseCategoryView&gt;&gt; entry2 : map2.entrySet()) &#123;<br><span class="hljs-comment">//获取到二级分类Id</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">category2Id</span> <span class="hljs-operator">=</span> entry2.getKey();<br><span class="hljs-comment">//获取到二级分类Id 对应的集合数据</span><br>List&lt;BaseCategoryView&gt; category2ViewList = entry2.getValue();<br><span class="hljs-comment">//创建二级分类对象</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">category2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>category2.put(<span class="hljs-string">&quot;categoryId&quot;</span>,category2Id);<br>category2.put(<span class="hljs-string">&quot;categoryName&quot;</span>,category2ViewList.get(<span class="hljs-number">0</span>).getCategory2Name());<br><br><span class="hljs-comment">// 循环三级分类数据</span><br>List&lt;JSONObject&gt; category3Child = category2ViewList.stream().map(baseCategoryView -&gt; &#123;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">category3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>category3.put(<span class="hljs-string">&quot;categoryId&quot;</span>, baseCategoryView.getCategory3Id());<br>category3.put(<span class="hljs-string">&quot;categoryName&quot;</span>, baseCategoryView.getCategory3Name());<br><span class="hljs-keyword">return</span> category3;<br>&#125;).collect(Collectors.toList());<br><span class="hljs-comment">// 将三级数据放入二级里面</span><br>category2.put(<span class="hljs-string">&quot;categoryChild&quot;</span>, category3Child);<br>                <span class="hljs-comment">//将二级分类对象添加到集合中</span><br>category2Child.add(category2);<br>&#125;<br>             <span class="hljs-comment">// 将三级数据放入二级里面</span><br>category1.put(<span class="hljs-string">&quot;categoryChild&quot;</span>, category2Child);<br><span class="hljs-comment">//将一级分类数据放入到集合中。</span><br>list.add(category1);<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java">第二种方法<br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseCategoryServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BaseCategory1Mapper, BaseCategory1&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BaseCategoryService</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategory1Mapper baseCategory1Mapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategory2Mapper baseCategory2Mapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategory3Mapper baseCategory3Mapper;<br><br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseCategoryViewMapper baseCategoryViewMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> BaseAttributeMapper baseAttributeMapper;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;JSONObject&gt; <span class="hljs-title function_">getBaseCategoryList</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//创建集合</span><br>List&lt;JSONObject&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//先查询所有的分类数据：一级，二级，三级； select * from base_category_view;</span><br>List&lt;BaseCategoryView&gt; baseCategoryViewList = baseCategoryViewMapper.selectList(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//将这个List 集合数据转为 Map集合 key=category1Id; value=List&lt;BaseCategoryView&gt;;</span><br>Map&lt;Long, List&lt;BaseCategoryView&gt;&gt; map = baseCategoryViewList.stream().collect(Collectors.groupingBy(BaseCategoryView::getCategory1Id));<br><span class="hljs-comment">//循环遍历当前map 集合;</span><br>Iterator&lt;Map.Entry&lt;Long, List&lt;BaseCategoryView&gt;&gt;&gt; iterator = map.entrySet().iterator();<br><span class="hljs-comment">//第一次循环 获取到音乐</span><br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br><span class="hljs-comment">//获取迭代器中的数据</span><br>Map.Entry&lt;Long, List&lt;BaseCategoryView&gt;&gt; entry = iterator.next();<br><span class="hljs-comment">//获取key 与 value</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">category1Id</span> <span class="hljs-operator">=</span> entry.getKey();<br>List&lt;BaseCategoryView&gt; categoryViewList = entry.getValue();<br><span class="hljs-comment">//创建一个类JSONObject</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">category1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><span class="hljs-comment">//获取分类Id</span><br>category1.put(<span class="hljs-string">&quot;categoryId&quot;</span>,category1Id);<br><span class="hljs-comment">//想办法查询数据并赋值！ 获取集合中的第一条数据对应的name数据！</span><br>category1.put(<span class="hljs-string">&quot;categoryName&quot;</span>,categoryViewList.get(<span class="hljs-number">0</span>).getCategory1Name());<br><span class="hljs-comment">//声明一个集合来存储二级分类对象</span><br>ArrayList&lt;JSONObject&gt; category2ChildList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//必须知道当前一级分类对应的二级分类数据！</span><br>Map&lt;Long, List&lt;BaseCategoryView&gt;&gt; map1 = categoryViewList.stream().collect(Collectors.groupingBy(BaseCategoryView::getCategory2Id));<br>Iterator&lt;Map.Entry&lt;Long, List&lt;BaseCategoryView&gt;&gt;&gt; iterator1 = map1.entrySet().iterator();<br><span class="hljs-keyword">while</span> (iterator1.hasNext()) &#123;<br>Map.Entry&lt;Long, List&lt;BaseCategoryView&gt;&gt; entry1 = iterator1.next();<br><span class="hljs-comment">//获取二级分类Id</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">category2Id</span> <span class="hljs-operator">=</span> entry1.getKey();<br><span class="hljs-comment">//获取二级分类的集合数据</span><br>List&lt;BaseCategoryView&gt; viewList = entry1.getValue();<br><span class="hljs-comment">//创建一个类JSONObject二级对象</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">category2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><span class="hljs-comment">//获取分类Id</span><br>category2.put(<span class="hljs-string">&quot;categoryId&quot;</span>,category2Id);<br>category2.put(<span class="hljs-string">&quot;categoryName&quot;</span>,viewList.get(<span class="hljs-number">0</span>).getCategory2Name());<br><span class="hljs-comment">//获取三级分类数据</span><br>List&lt;JSONObject&gt; category3List = viewList.stream().map(baseCategoryView -&gt; &#123;<br><span class="hljs-comment">//创建一个类JSONObject三级对象</span><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">category3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br><span class="hljs-type">Long</span> <span class="hljs-variable">category3Id</span> <span class="hljs-operator">=</span> baseCategoryView.getCategory3Id();<br><span class="hljs-type">String</span> <span class="hljs-variable">category3Name</span> <span class="hljs-operator">=</span> baseCategoryView.getCategory3Name();<br>category3.put(<span class="hljs-string">&quot;categoryId&quot;</span>, category3Id);<br>category3.put(<span class="hljs-string">&quot;categoryName&quot;</span>, category3Name);<br><span class="hljs-keyword">return</span> category3;<br>&#125;).collect(Collectors.toList());<br>category2.put(<span class="hljs-string">&quot;categoryChild&quot;</span>,category3List);<br><span class="hljs-comment">//将二级分类数据添加到集合中;</span><br>category2ChildList.add(category2);<br>&#125;<br>category1.put(<span class="hljs-string">&quot;categoryChild&quot;</span>,category2ChildList);<br><span class="hljs-comment">//编写实现类：</span><br>list.add(category1);<br>&#125;<br><span class="hljs-comment">//返回数据</span><br><span class="hljs-keyword">return</span> list;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-文件上传"><a href="#2-2-文件上传" class="headerlink" title="2.2 文件上传"></a>2.2 文件上传</h2><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/%E4%B8%93%E8%BE%91%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0.gif"></p><!--![专辑图片上传](第1章 专辑管理/专辑图片上传.gif)--><h3 id="2-2-1-MinIO介绍"><a href="#2-2-1-MinIO介绍" class="headerlink" title="2.2.1 MinIO介绍"></a>2.2.1 MinIO介绍</h3><p>MinIO 是一个基于 Apache License v3.0 开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p>MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p><p><a href="https://docs.min.io/" title="https://docs.min.io/">https://docs.min.io/</a> 英文</p><h3 id="2-2-2-特点"><a href="#2-2-2-特点" class="headerlink" title="2.2.2 特点"></a>2.2.2 特点</h3><p>· 高性能：作为高性能对象存储，在标准硬件条件下它能达到55GB&#x2F;s的读、35GB&#x2F;s的写速率</p><p>· 可扩容：不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并跨越多个数据中心</p><p>· 云原生：容器化、基于K8S的编排、多租户支持</p><p>· Amazon S3兼容：Minio使用Amazon S3 v2 &#x2F; v4 API。可以使用Minio SDK，Minio Client，AWS SDK和AWS CLI访问Minio服务器。</p><p>· 可对接后端存储: 除了Minio自己的文件系统，还支持DAS、 JBODs、NAS、Google云存储和Azure Blob存储。</p><p>· SDK支持: 基于Minio轻量的特点，它得到类似Java、Python或Go等语言 的sdk支持</p><p>· Lambda计算: Minio服务器通过其兼容AWS SNS &#x2F; SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库。</p><p>· 有操作页面</p><p>· 功能简单: 这一设计原则让MinIO不容易出错、更快启动</p><p>· 支持纠删码：MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失N&#x2F;2的磁盘也能恢复数据！</p><p>存储机制</p><p>Minio使用纠删码erasure code和校验和checksum。 即便丢失一半数量（N&#x2F;2）的硬盘，仍然可以恢复数据。纠删码是一种恢复丢失和损坏数据的<strong>数学算法</strong>。</p><p>docker安装MinIO(已完成)</p><blockquote><p>docker pull minio&#x2F;minio</p></blockquote><blockquote><p>docker run \<br>-p 9000:9000 <br>-p 9001:9001 \<br>--name minio \<br>-d –restart&#x3D;always \<br>-e “MINIO_ROOT_USER&#x3D;admin” \<br>-e “MINIO_ROOT_PASSWORD&#x3D;admin123456” \<br>-v &#x2F;home&#x2F;data:&#x2F;data \<br>-v &#x2F;home&#x2F;config:&#x2F;root&#x2F;.minio \<br>minio&#x2F;minio server &#x2F;data –console-address “:9001”</p></blockquote><p>浏览器访问：<a href="http://ip:9001/minio/login%EF%BC%8C%E5%A6%82%E5%9B%BE%EF%BC%9A" title="http://IP:9001/minio/login，如图：">http://IP:9001/minio/login，如图：</a></p><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/001.png"></p><!--![](第1章 专辑管理/001.png)--><p>登录账户说明：安装时指定了<strong>登录账号</strong>：admin&#x2F;admin123456</p><p><strong>注意</strong>：文件上传时，需要调整一下linux 服务器的时间与windows 时间一致！</p><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/timeerror.png"></p><!--![](第1章 专辑管理/timeerror.png)--><blockquote><p>第一步：安装ntp服务<br>yum -y install ntp<br>第二步：开启开机启动服务<br>systemctl enable ntpd<br>第三步：启动服务<br>systemctl start ntpd<br>第四步：更改时区<br>timedatectl set-timezone Asia&#x2F;Shanghai<br>第五步：启用ntp同步<br>timedatectl set-ntp yes<br>第六步：同步时间<br>ntpq -p</p></blockquote><h3 id="2-2-3-控制器"><a href="#2-2-3-控制器" class="headerlink" title="2.2.3 控制器"></a>2.2.3 控制器</h3><p>FileUploadApiController 控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;文件上传&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/fileUpload&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>    <span class="hljs-comment">//  文件上传</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> fileUploadService.upload(file);<br>    <span class="hljs-comment">//  返回数据</span><br>    <span class="hljs-keyword">return</span> Result.ok(url);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-4-接口与实现"><a href="#2-2-4-接口与实现" class="headerlink" title="2.2.4 接口与实现"></a>2.2.4 接口与实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service;<br><br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> pz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> FileUploadService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FileUploadService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.config.MinioConstantProperties;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.FileUploadService;<br><span class="hljs-keyword">import</span> io.minio.BucketExistsArgs;<br><span class="hljs-keyword">import</span> io.minio.MakeBucketArgs;<br><span class="hljs-keyword">import</span> io.minio.MinioClient;<br><span class="hljs-keyword">import</span> io.minio.PutObjectArgs;<br><span class="hljs-keyword">import</span> io.minio.errors.MinioException;<br><span class="hljs-keyword">import</span> org.apache.commons.io.FilenameUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> pz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> FileUploadServiceImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileUploadService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MinioConstantProperties minioConstantProperties;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span> &#123;<br>        <span class="hljs-comment">//  声明一个url 地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//  代码：</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span><br>            <span class="hljs-comment">//  ctrl+p</span><br>            <span class="hljs-type">MinioClient</span> <span class="hljs-variable">minioClient</span> <span class="hljs-operator">=</span><br>                    MinioClient.builder()<br>                            .endpoint(minioConstantProperties.getEndpointUrl())<br>                            .credentials(minioConstantProperties.getAccessKey(), minioConstantProperties.getSecreKey())<br>                            .build();<br><br>            <span class="hljs-comment">// Make &#x27;asiatrip&#x27; bucket if not exist.</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span><br>                    <span class="hljs-literal">false</span>;<br>            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(minioConstantProperties.getBucketName()).build());<br>            <span class="hljs-keyword">if</span> (!found) &#123;<br>                <span class="hljs-comment">// Make a new bucket called &#x27;asiatrip&#x27;.</span><br>                minioClient.makeBucket(MakeBucketArgs.builder().bucket(minioConstantProperties.getBucketName()).build());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Bucket &quot;</span> + minioConstantProperties.getBucketName() + <span class="hljs-string">&quot; already exists.&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//  文件：</span><br>            <span class="hljs-comment">//  new File().length();  数组长度:length  集合长度:size()  字符串长度: length();  ()--&gt; 方法 没有(); 属性</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;.&quot;</span> + FilenameUtils.getExtension(file.getOriginalFilename());<br>            <span class="hljs-comment">// Upload known sized input stream.</span><br>            minioClient.putObject(<br>                    PutObjectArgs.builder().bucket(minioConstantProperties.getBucketName()).object(fileName).stream(<br>                                    file.getInputStream(), file.getSize(), -<span class="hljs-number">1</span>)<br>                            .contentType(file.getContentType())<br>                            .build());<br>            <span class="hljs-comment">//  获取到上传之后的文件路径：</span><br>            <span class="hljs-comment">//  https://www.image.com/ts/1213oiqwe.jpg;</span><br>            <span class="hljs-comment">//  http://192.168.200.130:9000/tingshu/aaa.jpg</span><br>            url = minioConstantProperties.getEndpointUrl()+<span class="hljs-string">&quot;/&quot;</span>+minioConstantProperties.getBucketName()+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br>            System.out.println(<span class="hljs-string">&quot;url:\t&quot;</span>+url);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> url;<br>    &#125;<br>&#125;<br><br><br><br><br><br>zai<span class="hljs-string">&#x27;c</span><br><span class="hljs-string">        // 初始化MinIO客户端并配置连接参数</span><br><span class="hljs-string">        String url = &quot;&quot;;</span><br><span class="hljs-string">        try &#123;</span><br><span class="hljs-string">            MinioClient minioClient =</span><br><span class="hljs-string">                    // 创建 MinioClient 的构建器</span><br><span class="hljs-string">                    MinioClient.builder()</span><br><span class="hljs-string">                            // 设置 MinIO 服务的 endpoint（URL），通常是 http://&lt;minio_host&gt;:&lt;port&gt;</span><br><span class="hljs-string">                            .endpoint(minioConstantProperties.getEndpointUrl())</span><br><span class="hljs-string">                            // 设置 MinIO 服务的认证凭证，Access Key 和 Secret Key</span><br><span class="hljs-string">                            .credentials(minioConstantProperties.getAccessKey(), minioConstantProperties.getSecretKey())</span><br><span class="hljs-string">                            // 构建并返回 MinioClient 实例</span><br><span class="hljs-string">                            .build();</span><br><span class="hljs-string"></span><br><span class="hljs-string">            // 检查指定的存储桶是否存在</span><br><span class="hljs-string">            boolean found =</span><br><span class="hljs-string">                    minioClient.bucketExists(BucketExistsArgs.builder().bucket(minioConstantProperties.getBucketName()).build());</span><br><span class="hljs-string">            if (!found) &#123;</span><br><span class="hljs-string">                // 如果存储桶不存在，则创建它</span><br><span class="hljs-string">                minioClient.makeBucket(MakeBucketArgs.builder().bucket(minioConstantProperties.getBucketName()).build());</span><br><span class="hljs-string">            &#125; else &#123;</span><br><span class="hljs-string">                System.out.println(&quot;Bucket &quot; + minioConstantProperties.getBucketName() + &quot; already exists.&quot;);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            // 生成唯一的文件名，以UUID为基础，确保文件名不重复，并保留原文件的扩展名</span><br><span class="hljs-string">            //minio中的文件名</span><br><span class="hljs-string">            String minioName= UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;&quot;) + file.getOriginalFilename()</span><br><span class="hljs-string">                    .substring(file.getOriginalFilename().lastIndexOf(&quot;.&quot;));</span><br><span class="hljs-string"></span><br><span class="hljs-string">            // 将文件上传到MinIO服务器</span><br><span class="hljs-string">            minioClient.putObject(</span><br><span class="hljs-string">                    PutObjectArgs.builder()</span><br><span class="hljs-string">                            .bucket(minioConstantProperties.getBucketName())  // 设置目标存储桶名</span><br><span class="hljs-string">                            .object(minioName)  // 设置上传文件的对象名称（即文件在 MinIO 中的路径）</span><br><span class="hljs-string">                            .stream(</span><br><span class="hljs-string">                                    file.getInputStream(), file.getSize(), -1  // 设置文件输入流、文件大小、以及一个默认的最后参数</span><br><span class="hljs-string">                            )</span><br><span class="hljs-string">                            .contentType(file.getContentType())  // 设置文件的内容类型（MIME类型）</span><br><span class="hljs-string">                            .build()  // 构建 PutObjectArgs 对象</span><br><span class="hljs-string">            );</span><br><span class="hljs-string"></span><br><span class="hljs-string">            // 构建文件的URL路径，以便后续访问</span><br><span class="hljs-string">            url = minioConstantProperties.getEndpointUrl() + &quot;/&quot; + minioConstantProperties.getBucketName() + &quot;/&quot; + minioName;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        &#125; catch (Exception e) &#123;</span><br><span class="hljs-string">            // 异常处理：打印异常信息</span><br><span class="hljs-string">            e.printStackTrace();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        // 返回文件的访问URL</span><br><span class="hljs-string">        return url;</span><br></code></pre></td></tr></table></figure><p>配置类 MinioConstantProperties 完善，添加@RefreshScope 注解能够动态读取nacos的配置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;minio&quot;)</span> <span class="hljs-comment">//读取节点</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinioConstantProperties</span> &#123;<br>    <span class="hljs-comment">//  服务器的地址</span><br>    <span class="hljs-keyword">private</span> String endpointUrl;<br>    <span class="hljs-comment">//  服务器的用户名</span><br>    <span class="hljs-keyword">private</span> String accessKey;<br>    <span class="hljs-comment">//  服务器的密码</span><br>    <span class="hljs-keyword">private</span> String secreKey;<br>    <span class="hljs-comment">//  服务桶名</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-保存专辑"><a href="#2-3-保存专辑" class="headerlink" title="2.3 保存专辑"></a>2.3 保存专辑</h2><p>设为私密：表示不发布的意思，后续可以通过这个按钮选项实现专辑的上架-下架操作</p><h3 id="2-3-1-根据一级分类Id获取专辑标签中的属性与属性值"><a href="#2-3-1-根据一级分类Id获取专辑标签中的属性与属性值" class="headerlink" title="2.3.1 根据一级分类Id获取专辑标签中的属性与属性值"></a>2.3.1 根据一级分类Id获取专辑标签中的属性与属性值</h3><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/007.png"></p><!--![](第1章 专辑管理/007.png)--><p>此功能涉及的相关表如下：</p><p>base_attribute： 属性表</p><p>base_attribute_value：属性值表</p><h4 id="2-3-1-1-控制器"><a href="#2-3-1-1-控制器" class="headerlink" title="2.3.1.1 控制器"></a>2.3.1.1 控制器</h4><p>BaseCategoryApiController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;根据一级分类Id 查询分类属性数据&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;findAttribute/&#123;category1Id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;List&lt;BaseAttribute&gt;&gt; <span class="hljs-title function_">findAttribute</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long category1Id)</span> &#123;<br>  <span class="hljs-comment">// 调用服务层方法</span><br>  <span class="hljs-keyword">return</span> Result.ok(baseCategoryService.findAttributeByCategory1Id(category1Id));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-1-2-接口与实现"><a href="#2-3-1-2-接口与实现" class="headerlink" title="2.3.1.2 接口与实现"></a>2.3.1.2 接口与实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据三级id获取分类属性</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> category1Id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;BaseAttribute&gt; <span class="hljs-title function_">findAttributeByCategory1Id</span><span class="hljs-params">(Long category1Id)</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;BaseAttribute&gt; <span class="hljs-title function_">findAttributeByCategory1Id</span><span class="hljs-params">(Long category1Id)</span> &#123;<br>  <span class="hljs-comment">//调用mapper层方法</span><br><span class="hljs-keyword">return</span> baseAttributeMapper.selectBaseAttributeList(category1Id);<br>&#125;<br></code></pre></td></tr></table></figure><p>在BaseAttributeMapper中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据一级分类Id查询属性数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> category1Id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>List&lt;BaseAttribute&gt; <span class="hljs-title function_">selectBaseAttributeList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;category1Id&quot;)</span>Long category1Id)</span>;<br></code></pre></td></tr></table></figure><p>在resource 目录下创建mapper文件夹并添加配置文件BaseAttributeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.album.mapper.BaseAttributeMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;baseAttributeMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.model.album.BaseAttribute&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--id:表示主键 property：表示实体类的属性名 column：表示通过sql 执行以后查询出来的字段名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-comment">&lt;!--result : 表示映射普通字段--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;result property=&quot;&quot; column=&quot;&quot;&gt;&lt;/result&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--mybatis 如何配置一对多--&gt;</span><br><span class="hljs-comment">&lt;!--ofType : 返回的数据类型--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;attributeValueList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.model.album.BaseAttributeValue&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--如果有字段重复则起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;attribute_value_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--id:表示方法名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBaseAttributeList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;baseAttributeMap&quot;</span>&gt;</span><br>select<br>ba.id,<br>ba.attribute_name,<br>ba.category1_id,<br>bav.id attribute_value_id,<br>bav.value_name,<br>bav.attribute_id<br>from<br>base_attribute ba<br>inner join base_attribute_value bav on ba.id = bav.attribute_id<br>where ba.category1_id = #&#123;category1Id&#125;<br>order by ba.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-2-实现保存专辑"><a href="#2-3-2-实现保存专辑" class="headerlink" title="2.3.2 实现保存专辑"></a>2.3.2 实现保存专辑</h3><p>设计的表结构：</p><p>album_info 专辑表  </p><p>​a. 初始化userId 默认值1 为了后续能查到数据</p><p>​b. 并设置初始化状态为审核通过</p><p>​c. 如果<strong>是付费的专辑</strong>则设置前五集为免费试看</p><p>album_attribute_value 专辑属性值表</p><p>​a. 设置专辑Id</p><p>album_stat 专辑统计表</p><p>​a. 初始化统计项 【播放量，订阅量，购买量，评论数】为0</p><p>我们将前端传递的参数统一封装到实体类AlbumInfoVo 中</p><p>参数校验：</p><p>@Validation是一套帮助我们继续对传输的参数进行数据校验的注解，通过配置Validation可以很轻松的完成对数据的约束。</p><p>前端传递的是Json 字符串，我们在项目中通过AlbumInfoVo 实体类来接收数据！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.vo.album;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.util.Decimal2Serializer;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.validation.NotEmptyPaid;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotEmpty;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Positive;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.hibernate.validator.constraints.Length;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;专辑信息&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlbumInfoVo</span> &#123;<br><br>   <span class="hljs-meta">@NotEmpty(message = &quot;专辑标题不能为空&quot;)</span><br>   <span class="hljs-meta">@Length(min = 2, message = &quot;专辑标题的长度必须大于2&quot;)</span><br>   <span class="hljs-meta">@Schema(description = &quot;标题&quot;, required=true)</span><br>   <span class="hljs-keyword">private</span> String albumTitle;<br><br>   <span class="hljs-meta">@Positive(message = &quot;三级分类不能为空&quot;)</span><br>   <span class="hljs-meta">@Schema(description = &quot;三级分类id&quot;, required=true)</span><br>   <span class="hljs-keyword">private</span> Long category3Id;<br><br>   <span class="hljs-meta">@NotEmpty(message = &quot;专辑简介不能为空&quot;)</span><br>   <span class="hljs-meta">@Schema(description = &quot;专辑简介&quot;, required=true)</span><br>   <span class="hljs-keyword">private</span> String albumIntro;<br><br>   <span class="hljs-meta">@NotEmpty(message = &quot;专辑封面不能为空&quot;)</span><br>   <span class="hljs-meta">@Schema(description = &quot;专辑封面图&quot;, required=true)</span><br>   <span class="hljs-keyword">private</span> String coverUrl;<br><br>   <span class="hljs-meta">@Schema(description = &quot;预计更新多少集&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer estimatedTrackCount;<br><br>   <span class="hljs-meta">@Schema(description = &quot;专辑简介，富文本&quot;)</span><br>   <span class="hljs-keyword">private</span> String albumRichIntro;<br><br>   <span class="hljs-meta">@NotEmpty(message = &quot;付费类型不能为空&quot;)</span><br>   <span class="hljs-meta">@Schema(description = &quot;付费类型: 0101-免费、0102-vip免费、0103-付费&quot;, required=true)</span><br>   <span class="hljs-keyword">private</span> String payType;<br><br>   <span class="hljs-meta">@Schema(description = &quot;价格类型： 0201-单集 0202-整专辑&quot;)</span><br>   <span class="hljs-keyword">private</span> String priceType;<br><br>   <span class="hljs-meta">@Schema(description = &quot;原价&quot;)</span><br>   <span class="hljs-meta">@JsonSerialize(using = Decimal2Serializer.class)</span><br>   <span class="hljs-keyword">private</span> BigDecimal price;<br><br>   <span class="hljs-meta">@Schema(description = &quot;0.1-9.9  不打折 -1&quot;)</span><br>   <span class="hljs-meta">@JsonSerialize(using = Decimal2Serializer.class)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">discount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(-<span class="hljs-number">1</span>);<br><br>   <span class="hljs-meta">@Schema(description = &quot;0.1-9.9 不打折 -1&quot;)</span><br>   <span class="hljs-meta">@JsonSerialize(using = Decimal2Serializer.class)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">vipDiscount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(-<span class="hljs-number">1</span>);<br><br>   <span class="hljs-meta">@Schema(description = &quot;免费试听集数&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer tracksForFree;<br><br>   <span class="hljs-meta">@Schema(description = &quot;每集免费试听秒数&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer secondsForFree;<br><br>   <span class="hljs-meta">@Schema(description = &quot;购买须知，富文本&quot;)</span><br>   <span class="hljs-keyword">private</span> String buyNotes;<br><br>   <span class="hljs-meta">@Schema(description = &quot;专辑卖点，富文本&quot;)</span><br>   <span class="hljs-keyword">private</span> String sellingPoint;<br><br>   <span class="hljs-meta">@Schema(description = &quot;是否公开：0-否 1-是&quot;)</span><br>   <span class="hljs-keyword">private</span> String isOpen;<br><br>   <span class="hljs-comment">//递归校验</span><br>   <span class="hljs-comment">//@Valid</span><br>   <span class="hljs-comment">//@NotEmpty(message = &quot;属性值集合不能为空&quot;)</span><br>   <span class="hljs-meta">@Schema(description = &quot;属性值集合&quot;)</span><br>   <span class="hljs-keyword">private</span> List&lt;AlbumAttributeValueVo&gt; albumAttributeValueVoList;<br><br>   <span class="hljs-meta">@NotEmptyPaid(message = &quot;价格类型不能为空&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPayTypeAndPriceType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getPayType() + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">this</span>.getPriceType();<br>   &#125;<br><br>   <span class="hljs-meta">@NotEmptyPaid(message = &quot;价格不能为空&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPayTypeAndPrice</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getPayType() + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-built_in">this</span>.getPrice();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-1-控制器"><a href="#2-3-2-1-控制器" class="headerlink" title="2.3.2.1 控制器"></a>2.3.2.1 控制器</h4><p>AlbumInfoApiController  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 新增专辑方法</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> albumInfoVo</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;新增专辑&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;saveAlbumInfo&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> AlbumInfoVo albumInfoVo)</span> &#123;<br>  <span class="hljs-comment">//调用服务层保存方法</span><br>  albumInfoService.saveAlbumInfo(albumInfoVo, AuthContextHolder.getUserId());<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-2-接口与实现"><a href="#2-3-2-2-接口与实现" class="headerlink" title="2.3.2.2 接口与实现"></a>2.3.2.2 接口与实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlbumInfoService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;AlbumInfo&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存专辑</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> albumInfoVo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAlbumInfo</span><span class="hljs-params">(AlbumInfoVo albumInfoVo, Long userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.AlbumAttributeValueMapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.AlbumInfoMapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.AlbumStatMapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.AlbumInfoService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.constant.KafkaConstant;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.common.constant.SystemConstant;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.AlbumAttributeValue;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.AlbumInfo;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.AlbumStat;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.vo.album.AlbumAttributeValueVo;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.vo.album.AlbumInfoVo;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeanUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlbumInfoServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;AlbumInfoMapper, AlbumInfo&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AlbumInfoService</span> &#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> AlbumInfoMapper albumInfoMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> AlbumAttributeValueMapper albumAttributeValueMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> AlbumStatMapper albumStatMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存专辑方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> albumInfoVo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId -- 可以暂时写个固定值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAlbumInfo</span><span class="hljs-params">(AlbumInfoVo albumInfoVo, Long userId)</span> &#123;<br><span class="hljs-comment">//创建专辑对象</span><br><span class="hljs-type">AlbumInfo</span> <span class="hljs-variable">albumInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlbumInfo</span>();<br><span class="hljs-comment">//属性拷贝</span><br>BeanUtils.copyProperties(albumInfoVo,albumInfo);<br><span class="hljs-comment">//设置专辑审核状态为：通过</span><br>albumInfo.setStatus(SystemConstant.ALBUM_STATUS_PASS);<br><span class="hljs-comment">//设置用户Id</span><br>albumInfo.setUserId(userId);<br>        <span class="hljs-comment">//  付费的默认前前5集免费试看</span><br><span class="hljs-keyword">if</span>(!SystemConstant.ALBUM_PAY_TYPE_FREE.equals(albumInfo.getPayType())) &#123;<br>albumInfo.setTracksForFree(<span class="hljs-number">5</span>);<br>&#125;<br><span class="hljs-comment">//保存专辑</span><br><span class="hljs-built_in">this</span>.save(albumInfo);<br><br><span class="hljs-comment">//保存专辑属性值：</span><br>List&lt;AlbumAttributeValueVo&gt; albumAttributeValueVoList = albumInfoVo.getAlbumAttributeValueVoList();<br><span class="hljs-comment">//判断</span><br><span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(albumAttributeValueVoList))&#123;<br><span class="hljs-comment">//循环遍历设置字段值</span><br>albumAttributeValueVoList.stream().forEach(albumAttributeValueVo -&gt; &#123;<br><span class="hljs-type">AlbumAttributeValue</span> <span class="hljs-variable">albumAttributeValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlbumAttributeValue</span>();<br>BeanUtils.copyProperties(albumAttributeValueVo, albumAttributeValue);<br>albumAttributeValue.setAlbumId(albumInfo.getId());<br><span class="hljs-comment">//保存数据</span><br>albumAttributeValueMapper.insert(albumAttributeValue);<br>&#125;);<br>&#125;<br><br><span class="hljs-comment">//初始化统计数据</span><br>        <span class="hljs-comment">//播放量</span><br><span class="hljs-built_in">this</span>.saveAlbumStat(albumInfo.getId(), SystemConstant.ALBUM_STAT_PLAY);<br><span class="hljs-comment">//订阅量</span><br><span class="hljs-built_in">this</span>.saveAlbumStat(albumInfo.getId(), SystemConstant.ALBUM_STAT_SUBSCRIBE);<br><span class="hljs-comment">//购买量</span><br><span class="hljs-built_in">this</span>.saveAlbumStat(albumInfo.getId(), SystemConstant.ALBUM_STAT_BROWSE);<br><span class="hljs-comment">//评论数</span><br><span class="hljs-built_in">this</span>.saveAlbumStat(albumInfo.getId(), SystemConstant.ALBUM_STAT_COMMENT);<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化统计数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> albumId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> statType</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAlbumStat</span><span class="hljs-params">(Long albumId, String statType)</span> &#123;<br><span class="hljs-type">AlbumStat</span> <span class="hljs-variable">albumStat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlbumStat</span>();<br>albumStat.setAlbumId(albumId);<br>albumStat.setStatType(statType);<br>albumStat.setStatNum(<span class="hljs-number">0</span>);<br>albumStatMapper.insert(albumStat);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>批量保存：</p><p>创建 AlbumAttributeValueService 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.AlbumAttributeValue;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> pz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> AlbumAttributeValueService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年09月13日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlbumAttributeValueService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;AlbumAttributeValue&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 AlbumAttributeValueServiceImpl 实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tingshu.album.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.mapper.AlbumAttributeValueMapper;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.album.service.AlbumAttributeValueService;<br><span class="hljs-keyword">import</span> com.atguigu.tingshu.model.album.AlbumAttributeValue;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> pz</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> AlbumAttributeValueServiceImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年09月13日</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span>: 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlbumAttributeValueServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;AlbumAttributeValueMapper, AlbumAttributeValue&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AlbumAttributeValueService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>改造 AlbumInfoServiceImpl 实现类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> AlbumAttributeValueService albumAttributeValueService;<br><br>List&lt;AlbumAttributeValueVo&gt; albumAttributeValueVoList = albumInfoVo.getAlbumAttributeValueVoList();<br><span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(albumAttributeValueVoList))&#123;<br>   <span class="hljs-comment">// 循环遍历</span><br>   List&lt;AlbumAttributeValue&gt; attributeValueList = albumAttributeValueVoList.stream().map(albumAttributeValueVo -&gt; &#123;<br>      <span class="hljs-comment">// 创建一个实体对象</span><br>      <span class="hljs-type">AlbumAttributeValue</span> <span class="hljs-variable">albumAttributeValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlbumAttributeValue</span>();<br>      BeanUtils.copyProperties(albumAttributeValueVo, albumAttributeValue);<br>      albumAttributeValue.setAlbumId(albumInfo.getId());<br>      <span class="hljs-keyword">return</span> albumAttributeValue;<br>   &#125;).collect(Collectors.toList());<br>   <span class="hljs-comment">// 批量插入</span><br>   <span class="hljs-built_in">this</span>.albumAttributeValueService.saveBatch(attributeValueList);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-查看专辑列表"><a href="#2-4-查看专辑列表" class="headerlink" title="2.4 查看专辑列表"></a>2.4 查看专辑列表</h2><p>查询数据的时候，我们将页面渲染的数据封装到一个实体类中 AlbumListVo，只需要返回这个类的集合即可！</p><p>查询时传递参数封装到 AlbumInfoQuery 实体类中。</p><p>查看数据应该看到专辑列表同时包含专辑的【播放量，评论数，购买数，订阅量】</p><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/%E4%B8%93%E8%BE%91%E5%88%97%E8%A1%A8.gif"></p><!--![专辑列表](第1章 专辑管理/专辑列表.gif)--><p>显示数据与这两张表album_info album_stat有关系！</p><h3 id="2-4-1-控制器"><a href="#2-4-1-控制器" class="headerlink" title="2.4.1 控制器"></a>2.4.1 控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 根据条件查询专辑列表</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> page</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> limit</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> albumInfoQuery</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;获取当前用户专辑分页列表&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;findUserAlbumPage/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findUserAlbumPage</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;page&quot;,description = &quot;当前页码&quot;,required = true)</span></span><br><span class="hljs-params">                                <span class="hljs-meta">@PathVariable</span> Long page,</span><br><span class="hljs-params">                                <span class="hljs-meta">@Parameter(name = &quot;limit&quot;, description = &quot;每页记录数&quot;, required = true)</span></span><br><span class="hljs-params">                                <span class="hljs-meta">@PathVariable</span> Long limit,</span><br><span class="hljs-params">                                <span class="hljs-meta">@Parameter(name = &quot;albumInfoQuery&quot;, description = &quot;查询对象&quot;, required = false)</span></span><br><span class="hljs-params">                                <span class="hljs-meta">@RequestBody</span> AlbumInfoQuery albumInfoQuery</span><br><span class="hljs-params">)</span>&#123;<br><span class="hljs-comment">//获取数据：</span><br>albumInfoQuery.setUserId(AuthContextHolder.getUserId());<br>Page&lt;AlbumListVo&gt; albumInfoPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page,limit);<br><span class="hljs-comment">//调用服务层方法</span><br>IPage&lt;AlbumListVo&gt; iPage = <span class="hljs-built_in">this</span>.albumInfoService.findUserAlbumPage(albumInfoPage,albumInfoQuery);<br><span class="hljs-comment">//返回数据集</span><br><span class="hljs-keyword">return</span> Result.ok(iPage);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-2-接口与实现类"><a href="#2-4-2-接口与实现类" class="headerlink" title="2.4.2 接口与实现类"></a>2.4.2 接口与实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询专辑列表</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> albumInfoPage</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> albumInfoQuery</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br>IPage&lt;AlbumListVo&gt; <span class="hljs-title function_">findUserAlbumPage</span><span class="hljs-params">(Page&lt;AlbumListVo&gt; albumInfoPage, AlbumInfoQuery albumInfoQuery)</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> IPage&lt;AlbumListVo&gt; <span class="hljs-title function_">findUserAlbumPage</span><span class="hljs-params">(Page&lt;AlbumListVo&gt; albumInfoPage, AlbumInfoQuery albumInfoQuery)</span> &#123;<br>  <span class="hljs-comment">//调用mapper 层方法</span><br>  <span class="hljs-keyword">return</span> albumInfoMapper.selectUserAlbumPage(albumInfoPage,albumInfoQuery);<br>&#125;<br></code></pre></td></tr></table></figure><p>mapper 层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlbumInfoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;AlbumInfo&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件查询专辑列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> albumInfoPage</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> albumInfoQuery</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    IPage&lt;AlbumListVo&gt; <span class="hljs-title function_">selectUserAlbumPage</span><span class="hljs-params">(Page&lt;AlbumListVo&gt; albumInfoPage, <span class="hljs-meta">@Param(&quot;vo&quot;)</span> AlbumInfoQuery albumInfoQuery)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AlbumInfoMapper.xml 实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.album.mapper.AlbumInfoMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserAlbumPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.tingshu.vo.album.AlbumListVo&quot;</span>&gt;</span><br>        select<br>        album.id as albumId,<br>        album.album_title,<br>        album.cover_url,<br>        album.include_track_count,<br>        album.is_finished,<br>        max(if(stat.stat_type = &#x27;0401&#x27;, stat_num, 0)) playStatNum,<br>        max(if(stat.stat_type = &#x27;0402&#x27;, stat_num, 0)) subscribeStatNum,<br>        max(if(stat.stat_type = &#x27;0403&#x27;, stat_num, 0)) buyStatNum,<br>        max(if(stat.stat_type = &#x27;0404&#x27;, stat_num, 0)) commentStatNum<br>        from album_info album<br>        inner join album_stat stat<br>        on stat.album_id = album.id<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;vo.userId!=null&quot;</span>&gt;</span><br>                album.user_id = #&#123;vo.userId&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;vo.status!=null and vo.status!=&#x27;&#x27;&quot;</span>&gt;</span><br>                and album.status = #&#123;vo.status&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;vo.albumTitle!=null and vo.albumTitle !=&#x27;&#x27;&quot;</span>&gt;</span><br>                and album.album_title like concat(&#x27;%&#x27;,#&#123;vo.albumTitle&#125;,&#x27;%&#x27;)<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            and album.is_deleted = 0<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>        group by album.id<br>        order by album.id desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-根据Id获删除专辑"><a href="#2-5-根据Id获删除专辑" class="headerlink" title="2.5 根据Id获删除专辑"></a>2.5 根据Id获删除专辑</h2><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/%E5%88%A0%E9%99%A4%E4%B8%93%E8%BE%91-.gif"></p><!--![删除专辑-](第1章 专辑管理/删除专辑-.gif)--><h3 id="2-5-1-控制器"><a href="#2-5-1-控制器" class="headerlink" title="2.5.1 控制器"></a>2.5.1 控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 根据专辑id删除专辑数据</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;删除专辑信息&quot;)</span><br><span class="hljs-meta">@DeleteMapping(&quot;removeAlbumInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removeAlbumInfoById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>  albumInfoService.removeAlbumInfoById(id);<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-2-接口与实现类"><a href="#2-5-2-接口与实现类" class="headerlink" title="2.5.2 接口与实现类"></a>2.5.2 接口与实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 根据 id 删除专辑</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAlbumInfoById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAlbumInfoById</span><span class="hljs-params">(Long id)</span> &#123;<br>  <span class="hljs-comment">// 查询专辑下是否包含声音</span><br>  LambdaQueryWrapper&lt;TrackInfo&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    queryWrapper.eq(TrackInfo::getAlbumId, id);<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> trackInfoMapper.selectCount(queryWrapper);<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguException</span>(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;该专辑下存在未删除声音！&quot;</span>);<br>    &#125;<br>  <span class="hljs-comment">//删除专辑表的数据 album_info</span><br>  <span class="hljs-built_in">this</span>.removeById(id);<br>  <span class="hljs-comment">//删除专辑属性信息</span><br>  albumAttributeValueMapper.delete(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;AlbumAttributeValue&gt;().eq(AlbumAttributeValue::getAlbumId,id));<br>  <span class="hljs-comment">//删除专辑对应的统计数据</span><br>  albumStatMapper.delete(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;AlbumStat&gt;().eq(AlbumStat::getAlbumId,id));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-修改专辑"><a href="#2-6-修改专辑" class="headerlink" title="2.6 修改专辑"></a>2.6 修改专辑</h2><p><img src="/2024/09/10/%E9%A1%B9%E7%9B%AE/%E4%BA%91%E6%82%A6%E5%90%AC/%E7%AC%AC1%E7%AB%A0%20%E4%B8%93%E8%BE%91%E7%AE%A1%E7%90%86/%E4%BF%AE%E6%94%B9%E4%B8%93%E8%BE%91.gif"></p><!--![修改专辑](第1章 专辑管理/修改专辑.gif)--><h4 id="2-6-1-先回显数据"><a href="#2-6-1-先回显数据" class="headerlink" title="2.6.1 先回显数据"></a>2.6.1 先回显数据</h4><ol><li>需要根据专辑id获取到对应的回显数据，需要回显专辑albumInfo与属性数据albumAttrValue，不需要回显统计数据！</li><li>根据修改内容保存最新数据</li></ol><h5 id="2-6-1-1-控制器"><a href="#2-6-1-1-控制器" class="headerlink" title="2.6.1.1 控制器"></a>2.6.1.1 控制器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 根据id 获取到专辑信息</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;获取专辑信息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getAlbumInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;AlbumInfo&gt; <span class="hljs-title function_">getAlbumInfoById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  <span class="hljs-type">AlbumInfo</span> <span class="hljs-variable">albumInfo</span> <span class="hljs-operator">=</span> albumInfoService.getAlbumInfoById(id);<br>  <span class="hljs-keyword">return</span> Result.ok(albumInfo);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-6-1-2-接口与实现类"><a href="#2-6-1-2-接口与实现类" class="headerlink" title="2.6.1.2 接口与实现类"></a>2.6.1.2 接口与实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 根据专辑Id 获取到专辑信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>AlbumInfo <span class="hljs-title function_">getAlbumInfoById</span><span class="hljs-params">(Long id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> AlbumInfo <span class="hljs-title function_">getAlbumInfoById</span><span class="hljs-params">(Long id)</span> &#123;<br>  <span class="hljs-comment">//根据id 查询专辑数据</span><br>  <span class="hljs-type">AlbumInfo</span> <span class="hljs-variable">albumInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>  <span class="hljs-comment">//回显时，需要回显专辑数据信息数据</span><br>  <span class="hljs-keyword">if</span> (albumInfo!=<span class="hljs-literal">null</span>)&#123;<br>    List&lt;AlbumAttributeValue&gt; albumAttributeValueList = albumAttributeValueMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;AlbumAttributeValue&gt;().eq(AlbumAttributeValue::getAlbumId, id));<br>    albumInfo.setAlbumAttributeValueVoList(albumAttributeValueList);<br>  &#125;<br>  <span class="hljs-keyword">return</span> albumInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>####2.6.2保存修改之后的数据</p><p>思路：</p><ol><li><p>专辑直接更新</p></li><li><p>更新专辑标签（属性）不能确定用户要修改哪一个！所以不能单纯的执行 update 语句. 所以采用先删除，再新增的方式！会有缺点{浪费主键号段}</p></li></ol><p>涉及的表：<br>album_info根据主键进行更新</p><p>album_attribute_value  先删除所有数据，再新增数据</p><h5 id="2-6-2-1-控制器"><a href="#2-6-2-1-控制器" class="headerlink" title="2.6.2.1 控制器"></a>2.6.2.1 控制器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 修改专辑信息</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> albumInfoVo</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Operation(summary = &quot;修改专辑&quot;)</span><br><span class="hljs-meta">@PutMapping(&quot;/updateAlbumInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id,<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated</span> AlbumInfoVo albumInfoVo)</span>&#123;<br>  <span class="hljs-comment">//调用服务层方法</span><br>  albumInfoService.updateAlbumInfo(id,albumInfoVo);<br>  <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-6-2-2-接口与实现"><a href="#2-6-2-2-接口与实现" class="headerlink" title="2.6.2.2 接口与实现"></a>2.6.2.2 接口与实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 修改专辑数据</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> albumInfoVo</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAlbumInfo</span><span class="hljs-params">(Long id, AlbumInfoVo albumInfoVo)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAlbumInfo</span><span class="hljs-params">(Long id, AlbumInfoVo albumInfoVo)</span> &#123;<br>  <span class="hljs-type">AlbumInfo</span> <span class="hljs-variable">albumInfo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getById(id);<br>  BeanUtils.copyProperties(albumInfoVo, albumInfo);<br>  <span class="hljs-comment">//根据id 修改数据</span><br>  <span class="hljs-built_in">this</span>.updateById(albumInfo);<br><br>  <span class="hljs-comment">//先删除专辑属性数据</span><br>  albumAttributeValueMapper.delete(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;AlbumAttributeValue&gt;().eq(AlbumAttributeValue::getAlbumId,id));<br><br>  <span class="hljs-comment">//保存专辑属性数据</span><br>  List&lt;AlbumAttributeValueVo&gt; albumAttributeValueVoList = albumInfoVo.getAlbumAttributeValueVoList();<br>  <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(albumAttributeValueVoList))&#123;<br>    albumAttributeValueVoList.forEach(albumAttributeValueVo -&gt; &#123;<br>      <span class="hljs-comment">//创建专辑属性对象</span><br>      <span class="hljs-type">AlbumAttributeValue</span> <span class="hljs-variable">albumAttributeValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlbumAttributeValue</span>();<br>      <span class="hljs-comment">//进行数据拷贝</span><br>      BeanUtils.copyProperties(albumAttributeValueVo,albumAttributeValue);<br>      <span class="hljs-comment">//赋值专辑属性Id</span><br>      albumAttributeValue.setAlbumId(id);<br>      albumAttributeValueMapper.insert(albumAttributeValue);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>云悦听</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5、支付</title>
    <link href="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/"/>
    <url>/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<h1 id="第5章-支付"><a href="#第5章-支付" class="headerlink" title="第5章 支付"></a>第5章 支付</h1><h2 id="5-1-支付宝支付"><a href="#5-1-支付宝支付" class="headerlink" title="5.1 支付宝支付"></a>5.1 支付宝支付</h2><h3 id="5-1-1-需求说明"><a href="#5-1-1-需求说明" class="headerlink" title="5.1.1 需求说明"></a>5.1.1 需求说明</h3><p>订单支付如图所示：</p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/pay.gif" alt="pay" style="zoom:67%;"> <!--<img src="/第5章_支付/pay.gif" alt="pay" style="zoom:67%;" /> --><p>在支付页面点击<strong>确认支付</strong>按钮此时就需要对接第三方支付系统，给用户展示出第三方支付系统的收银台。</p><p><strong>查看接口文档：</strong></p><p>支付接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">get /payment/alipay/submitAlipay/<span class="hljs-punctuation">&#123;</span>orderNo<span class="hljs-punctuation">&#125;</span><br>返回结果：<br>支付宝支付H5表单<br></code></pre></td></tr></table></figure><h3 id="5-1-2-支付宝支付"><a href="#5-1-2-支付宝支付" class="headerlink" title="5.1.2 支付宝支付"></a>5.1.2 支付宝支付</h3><p>官网地址：<a href="https://open.alipay.com/">https://open.alipay.com/</a></p><p><a href="https://baike.baidu.com/item/%E6%94%AF%E4%BB%98%E5%AE%9D%EF%BC%88%E4%B8%AD%E5%9B%BD%EF%BC%89%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8/23241708">支付宝（中国）网络技术有限公司</a> [1] 是国内的第三方支付平台，致力于提供“简单、安全、快速”的支付解决方案 [2] 。支付宝公司从2004年建立开始，始终以“信任”作为产品和服务的核心。旗下有“支付宝”与“支付宝钱包”两个独立品牌。自2014年第二季度开始成为当前全球最大的<a href="https://baike.baidu.com/item/%E7%A7%BB%E5%8A%A8%E6%94%AF%E4%BB%98/565488">移动支付</a>厂商。</p><h4 id="1、产品介绍"><a href="#1、产品介绍" class="headerlink" title="1、产品介绍"></a>1、产品介绍</h4><p>（1）产品特色</p><p>选择手机网站支付：<a href="https://open.alipay.com/api/detail?code=I1080300001000041949">https://open.alipay.com/api/detail?code=I1080300001000041949</a></p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-0998.png"> </p><!--![](第5章_支付/image-0998-17314074214921.png) --><p>手机网站支付是指商家在移动端网页展示商品或服务，用户在商家页面确认使用支付宝支付后，浏览器自动跳转支付宝 App 或支付宝网页完成付款的支付产品。该产品在签约完成后，需要技术集成方可使用。</p><p>（2）使用示例</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-0075.png"></p><!--![](第5章_支付/image-0075-17314074239333.png)--><p>（3）申请条件</p><p>支持的账号类型：<a href="https://opendocs.alipay.com/common/02kkum">支付宝企业账号</a>、<a href="https://opendocs.alipay.com/common/02kg61">支付宝个人账号</a>。</p><p>签约申请提交材料要求：</p><ul><li>提供网站地址，网站能正常访问且页面显示完整，网站需要明确经营内容且有完整的商品信息。</li><li>网站必须通过 ICP 备案，且备案主体需与支付宝账号主体一致。若网站备案主体与当前账号主体不同时需上传授权函。</li><li>个人账号申请，需提供营业执照，且支付宝账号名称需与营业执照主体一致。</li></ul><p><strong>注意</strong>：需按照要求提交材料，若部分材料不合格，收款额度将受到限制（单笔收款 ≤ 2000 元，单日收款 ≤ 20000 元）。若签约时未能提供相关材料（如营业执照），请在合约生效后的 30 天内补全，否则会影响正常收款。</p><p>（4）费率</p><table><thead><tr><th><strong>收费模式</strong></th><th><strong>费率</strong></th></tr></thead><tbody><tr><td>单笔收费</td><td>0.6%-1.0%</td></tr></tbody></table><p>特殊行业费率为 1.0%，非特殊行业费率为 0.6%。特殊行业包含：休闲游戏、网络游戏点卡、游戏渠道代理、游戏系统商、网游周边服务、交易平台、网游运营商（含网页游戏）等。</p><h4 id="2、接入准备"><a href="#2、接入准备" class="headerlink" title="2、接入准备"></a>2、接入准备</h4><p>官方文档：<a href="https://opendocs.alipay.com/open/203/107084?pathHash=a33de091">https://opendocs.alipay.com/open/203/107084?pathHash=a33de091</a></p><p>整体流程：</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-8020.png"> </p><!--![](第5章_支付/image-8020-17314074298295.png) --><p>为了提供数据传输的安全性，在进行传输的时候需要对数据进行加密：</p><p>常见的加密方式： </p><p>1、不可逆加密：只能对数据进行加密不能解密</p><p>2、可逆加密：可以对数据加密也可以解密</p><p>可逆加密可以再细分为：</p><p>1、对称加密： 加密和解密使用同一个秘钥</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-6255.png"> </p><!--![](第5章_支付/image-6255-17314074326087.png) --><p>2、非对称加密：加密和解密使用的是不同的秘钥</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-3058.png"> </p><!--![](第5章_支付/image-3058-17314074355729.png) --><p>支付宝为了提供数据传输的安全性使用了两个秘钥对：</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-0260.png"> </p><!--![](第5章_支付/image-0260-173140743833911.png) --><h4 id="3、手机网站支付快速接入"><a href="#3、手机网站支付快速接入" class="headerlink" title="3、手机网站支付快速接入"></a>3、手机网站支付快速接入</h4><p>官方文档：<a href="https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b">https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b</a></p><p>系统交互流程图：</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-3985.png"> </p><!--![](第5章_支付/image-3985-173140745125615.png) --><p>作为我们的项目来讲只需要将支付宝的收银台展示给用户即可，后续支付的动作和我们的系统就没有关系了。支付成功以后，支付宝开放平台会请求我们系统的接口通知支付结果，我们的系统也可以调用支付宝交易查询接口获取支付结果。</p><h4 id="4、官方demo研究"><a href="#4、官方demo研究" class="headerlink" title="4、官方demo研究"></a>4、官方demo研究</h4><p>步骤：</p><ul><li><p>官方demo下载地址：<a href="https://opendocs.alipay.com/open/203/105910?pathHash=1a2e3a94">https://opendocs.alipay.com/open/203/105910?pathHash=1a2e3a94</a></p></li><li><p>将访问demo的eclipse项目更改为idea的maven项目(jdk8)</p></li><li><p>在AlipayConfig类中填写参数信息</p></li><li><p>启动项目进行测试</p></li></ul><h3 id="5-1-3-搭建支付模块"><a href="#5-1-3-搭建支付模块" class="headerlink" title="5.1.3 搭建支付模块"></a>5.1.3 搭建支付模块</h3><h4 id="1、新建模块"><a href="#1、新建模块" class="headerlink" title="1、新建模块"></a>1、新建模块</h4><p>在modules模块下新建子模块payment</p><h4 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>modules<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>payment<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        payment支付模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos Config --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Sentinel --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringBoot Actuator --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Mysql Connector --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Common DataScope --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-datascope<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Common Log --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-log<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、banner-txt"><a href="#3、banner-txt" class="headerlink" title="3、banner.txt"></a>3、banner.txt</h4><p>在resources目录下新建banner.txt</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Spring Boot Version: $&#123;spring-boot.version&#125;<br>Spring Application Name: $&#123;spring.application.name&#125;<br>                            _                           _                    <br>                           (_)                         | |                   <br> _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  <br>| &#x27;__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| &#x27;_ ` _ \ <br>| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |<br>|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|<br>                      __/ |                  __/ |                           <br>                     |___/                  |___/                            <br></code></pre></td></tr></table></figure><h4 id="4、bootstrap-yml"><a href="#4、bootstrap-yml" class="headerlink" title="4、bootstrap.yml"></a>4、bootstrap.yml</h4><p>在resources目录下新建bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Tomcat</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9210</span><br><br><span class="hljs-comment"># Spring</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">payment</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境配置</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment"># 服务注册地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 配置中心地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment"># 配置文件格式</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-comment"># 共享配置</span><br>        <span class="hljs-attr">shared-configs:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5、payment-dev-yml"><a href="#5、payment-dev-yml" class="headerlink" title="5、payment-dev.yml"></a>5、payment-dev.yml</h4><p>在nacos上添加商品服务配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:mapper/**/*Mapper.xml</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.**.domain</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="hljs-comment"># 查看日志</span><br><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379333</span><br>      <span class="hljs-attr">password:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">cknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#默认情况下消息消费者是自动确认消息的，如果要手动确认消息则需要修改确认模式为manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 消费者每次从队列获取的消息数量。此属性当不设置时为：轮询分发，设置为1为：公平分发</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/payment?characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">connection-test-query:</span> <span class="hljs-string">SELECT</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">idle-timeout:</span> <span class="hljs-number">500000</span><br>      <span class="hljs-attr">max-lifetime:</span> <span class="hljs-number">540000</span><br>      <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">pool-name:</span> <span class="hljs-string">GuliHikariPool</span><br></code></pre></td></tr></table></figure><h4 id="6、logback-xml"><a href="#6、logback-xml" class="headerlink" title="6、logback.xml"></a>6、logback.xml</h4><p>在resources目录下新建logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志存放路径 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs/payment&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 日志输出格式 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;20&#125; - [%method,%line] - %msg%n&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统日志输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统模块日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- Spring日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> /&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--系统操作日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_info&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_error&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7、PaymentApplication"><a href="#7、PaymentApplication" class="headerlink" title="7、PaymentApplication"></a>7、PaymentApplication</h4><p>添加启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付模块</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableCustomConfig</span><br><span class="hljs-meta">@EnableRyFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentApplication</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        SpringApplication.run(PaymentApplication.class, args);<br>        System.out.println(<span class="hljs-string">&quot;(♥◠‿◠)ﾉﾞ  系统模块启动成功   ლ(´ڡ`ლ)ﾞ  \n&quot;</span> +<br>                <span class="hljs-string">&quot; .-------.       ____     __        \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  _ _   \\      \\   \\   /  /    \n&quot;</span> +<br>                <span class="hljs-string">&quot; | ( &#x27; )  |       \\  _. /  &#x27;       \n&quot;</span> +<br>                <span class="hljs-string">&quot; |(_ o _) /        _( )_ .&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; | (_,_).&#x27; __  ___(_ o _)&#x27;          \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |\\ \\  |  ||   |(_,_)&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  | \\ `&#x27;   /|   `-&#x27;  /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |  \\    /  \\      /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; &#x27;&#x27;-&#x27;   `&#x27;-&#x27;    `-..-&#x27;              &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8、配置网关"><a href="#8、配置网关" class="headerlink" title="8、配置网关"></a>8、配置网关</h4><p>在gateway-dev.yml配置文件中添加会员服务的网关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 支付服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">payment</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://payment</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/payment/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><h3 id="5-1-4-搭建远程调用模块"><a href="#5-1-4-搭建远程调用模块" class="headerlink" title="5.1.4 搭建远程调用模块"></a>5.1.4 搭建远程调用模块</h3><p>订单支付需要调用订单服务接口</p><p>参考：api-system模块</p><h4 id="1、新建模块-1"><a href="#1、新建模块-1" class="headerlink" title="1、新建模块"></a>1、新建模块</h4><p>在api模块下新建子模块api-order</p><h4 id="2、pom-xml-1"><a href="#2、pom-xml-1" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        api-order订单接口模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Common Core--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、modules模块引入api依赖"><a href="#3、modules模块引入api依赖" class="headerlink" title="3、modules模块引入api依赖"></a>3、modules模块引入api依赖</h4><p>modules模块引入api依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-1-5-根据订单号获取订单信息"><a href="#5-1-5-根据订单号获取订单信息" class="headerlink" title="5.1.5 根据订单号获取订单信息"></a>5.1.5 根据订单号获取订单信息</h3><p>操作模块：<code>order</code></p><h4 id="1、远程调用接口开发"><a href="#1、远程调用接口开发" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）OrderInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;根据订单号获取订单信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;getByOrderNo/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;OrderInfo&gt; <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderNo)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoService.getByOrderNo(orderNo);<br>    <span class="hljs-keyword">return</span> R.ok(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）IOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">OrderInfo <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>（3）OrderInfoServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> OrderInfo <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;OrderInfo&gt;().eq(OrderInfo::getOrderNo, orderNo));<br>    List&lt;OrderItem&gt; orderItemList = orderItemMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;OrderItem&gt;().eq(OrderItem::getOrderId, orderInfo.getId()));<br>    orderInfo.setOrderItemList(orderItemList);<br>    <span class="hljs-keyword">return</span> orderInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义"><a href="#2、openFeign接口定义" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：<code>api-order</code></p><p><strong>注意：</strong>先将order模块中的OrderInfo类和OrderItem类移动到api-order 模块 </p><p>（1）RemoteOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.api;<br><br><span class="hljs-meta">@FeignClient(contextId = &quot;remoteUserInfoService&quot;, value = ServiceNameConstants.ORDER_SERVICE, fallbackFactory = RemoteOrderInfoFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteOrderInfoService</span><br>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/orderInfo/getByOrderNo/&#123;orderNo&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;OrderInfo&gt; <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderNo&quot;)</span> String orderNo, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ServiceNameConstants</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 订单服务的serviceid</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ORDER_SERVICE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br></code></pre></td></tr></table></figure><p>（3）RemoteOrderInfoFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.api.factory;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteOrderInfoFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;RemoteOrderInfoService&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RemoteOrderInfoFallbackFactory.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RemoteOrderInfoService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span><br>    &#123;<br>        log.error(<span class="hljs-string">&quot;订单服务调用失败:&#123;&#125;&quot;</span>, throwable.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteOrderInfoService</span>()<br>        &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> R&lt;OrderInfo&gt; <span class="hljs-title function_">getByOrderNo</span><span class="hljs-params">(String orderNo, String source)</span> &#123;<br>                <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;根据订单号获取订单信息失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（5）加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.order</span><span class="hljs-selector-class">.api</span><span class="hljs-selector-class">.factory</span>.RemoteOrderInfoFallbackFactory<br></code></pre></td></tr></table></figure><h3 id="5-1-6-创建payment-info表代码"><a href="#5-1-6-创建payment-info表代码" class="headerlink" title="5.1.6 创建payment_info表代码"></a>5.1.6 创建payment_info表代码</h3><p><strong>在<code>payment</code>模块创建</strong></p><ul><li><strong>PaymentInfo.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.domain;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> com.common.core.annotation.Excel;<br><span class="hljs-keyword">import</span> com.common.core.web.domain.BaseEntity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息对象 payment_info</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;付款信息&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 用户id */</span><br>    <span class="hljs-meta">@Excel(name = &quot;用户id&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;用户id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-comment">/** 订单号 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;订单号&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;订单号&quot;)</span><br>    <span class="hljs-keyword">private</span> String orderNo;<br><br>    <span class="hljs-comment">/** 付款方式：1-微信 2-支付宝 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;付款方式：1-微信 2-支付宝&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;付款方式：1-微信 2-支付宝&quot;)</span><br>    <span class="hljs-keyword">private</span> Long payType;<br><br>    <span class="hljs-comment">/** 交易编号（微信或支付） */</span><br>    <span class="hljs-meta">@Excel(name = &quot;交易编号&quot;, readConverterExp = &quot;微=信或支付&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;交易编号&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br><br>    <span class="hljs-comment">/** 支付金额 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;支付金额&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;支付金额&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal amount;<br><br>    <span class="hljs-comment">/** 交易内容 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;交易内容&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;交易内容&quot;)</span><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-comment">/** 支付状态：0-未支付 1-已支付 -1-关闭 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;支付状态：0-未支付 1-已支付 -1-关闭&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;支付状态：0-未支付 1-已支付 -1-关闭&quot;)</span><br>    <span class="hljs-keyword">private</span> String paymentStatus;<br><br>    <span class="hljs-comment">/** 回调时间 */</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br>    <span class="hljs-meta">@Excel(name = &quot;回调时间&quot;, width = 30, dateFormat = &quot;yyyy-MM-dd&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;回调时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date callbackTime;<br><br>    <span class="hljs-comment">/** 回调信息 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;回调信息&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;回调信息&quot;)</span><br>    <span class="hljs-keyword">private</span> String callbackContent;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>IPaymentInfoService.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息Service接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPaymentInfoService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;PaymentInfo&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>PaymentInfoServiceImpl.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service.impl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息Service业务层处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaymentInfoServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;PaymentInfoMapper, PaymentInfo&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPaymentInfoService</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>PaymentInfoMapper.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.mapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 付款信息Mapper接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PaymentInfoMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;PaymentInfo&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-7-支付接口"><a href="#5-1-7-支付接口" class="headerlink" title="5.1.7 支付接口"></a>5.1.7 支付接口</h3><p>操作模块：<code>payment</code></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alipay.sdk<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>alipay-sdk-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、payment-dev-yml"><a href="#2、payment-dev-yml" class="headerlink" title="2、payment-dev.yml"></a>2、payment-dev.yml</h4><p>支付宝示例demo：<a href="https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b">https://opendocs.alipay.com/open/203/105285?pathHash=ada1de5b</a></p><p>将支付宝所需要的参数定义配置文件中，以提高代码的维护性</p><p>在nacos上添加支付宝服务配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">alipay:</span><br>  <span class="hljs-attr">alipay_url:</span> <span class="hljs-string">https://openapi.alipay.com/gateway.do</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-number">2021001163617452</span><br>  <span class="hljs-attr">app_private_key:</span> <span class="hljs-string">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC8Z7EZmanxyFGsK4LrIUeKKrrGxWAHIgPmUV8TtZDs+jeplJSw1ckSY63QhEU444D5qd6xruJHBuB33HG+ik4n8N8nRWi3AtMgpC061oq2DcgtIKMmQHO7/poYDwbpDZrOWXIyiNshFfUOSTUpnrS8UvEks6n6xR/G72r2FG07oZzO7g3XsPMr73wpYajMYC/bhTm6CJGEWZikONNDFkQpVHa+zgitwsqlBuvBvVwGwOHA9B8aRfokwAMl6BDXKoH8BNnSEMpWSTRSwbssayXAQWNU7XKDKGozbn4U2dEbl8GCFzikI/T7ybTNm5gs46ZZBGlq/YB4+v4D3t74Vl6nAgMBAAECggEAOidzhehliYkAlLk1huhV0bMQxewEkQ8RzxTM2SORIWS2q7R+FPtYPkHgU92QFFg85lNltsi5dZ0MylKUFXFRYIi8CL4m7V6E1q12fJPeawVkBXHuig8Y6i1TWRvCUUtuvkTjt++AW/0QECHOtBMVzI95eY+vZwVToq8h/+UcNmxKyVt66Qpo4+r+cUvlvGX5mXgQVC5Ftf/MtHA1i+kjtzBITC0xAvmSXKzjN1YhtcS9rXyMHXBiFhXLdmvOXjkn0Okosr2+tmesXfSwDGhH3ZlOdHzit4D602RNl0nTA1dOUWHuCncs1TrWbriax86P/EYvmzMiHWCVTmmNJC0bMQKBgQD0HAXKNsYsdjCQOV4t3SMqOKaul67x/KA20PmMZVfQ2sQkyjyFgWpL8C16Rzf3zI7df+zF5SkvhFY4+LRZVwX5okEFYTzAZ/NYouj1/DABYOPq0E0sY18/xtq7FJ/CIk8qmCqcczqoyaoxoaC1zAt9E4CYE89iEOnO+GhcI3H3LwKBgQDFlQzvbXhWRyRFkeft/a52XLnyj6t9iP7wNGbGCSeoMDrAu3ZgoqacUPWj5MgSFZdT48H9rF4pPixXoe3jfUNsWBUHqD1F2drDz7lpL0PbpSsgy6ei+D4RwTADsuyXwrkvrWrGro+h6pNJFyly3nea/gloDtJTzfhFFwtNfmqyCQKBgBXzMx4UwMscsY82aV6MZO4V+/71CrkdszZaoiXaswPHuB1qxfhnQ6yiYyR8pO62SR5ns120Fnj8WFh1HJpv9cyVp20ZakIO1tXgiDweOh7VnIjvxBC6usTcV6y81QS62w2Ec0hwIBUvVQtzciUGvP25NDX4igxSYwPGWHP4h/XnAoGAcQN2aKTnBgKfPqPcU4ac+drECXggESgBGof+mRu3cT5U/NS9Oz0Nq6+rMVm1DpMHAdbuqRikq1aCqoVWup51qE0hikWy9ndL6GCynvWIDOSGrLWQZ2kyp5kmy5bWOWAJ6Ll6r7Y9NdIk+NOkw614IFFaNAj2STUw4uPxdRvwD3ECgYEArwOZxR3zl/FZfsvVCXfK8/fhuZXMOp6Huwqky4tNpVLvOyihpOJOcIFj6ZJhoVdmiL8p1/1S+Sm/75gx1tpFurKMNcmYZbisEC7Ukx7RQohZhZTqMPgizlVBTu5nR3xkheaJC9odvyjrWQJ569efXo30gkW04aBp7A15VNG5Z/U=</span><br>  <span class="hljs-attr">alipay_public_key:</span> <span class="hljs-string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkWs+3gXMosiWG+EbfRyotWB0waqU3t7qMQSBxU0r3JZoND53jvWQfzrGZ8W+obMc+OgwupODDVxhG/DEKVBIptuUQYdvAjCSH98m2hclFcksspuCy9xS7PyflPE47pVzS6vA3Slvw5OFQ2qUcku4paWnBxguLUGPjEncij5NcyFyk+/k57MmrVJwCZaI+lFOS3Eq2IXc07tWXO4s/2SWr3EJiwJutOGBdA1ddvv1Urrl0pWpEFg30pJB6J7YteuxdEL90kuO5ed/vnTK5qgQRvEelROkUW44xONk1784v28OJXmGICmNL1+KyM/SFbFOSgJZSV1tEXUzvL/xvzFpLwIDAQAB</span><br>  <span class="hljs-attr">return_payment_url:</span> <span class="hljs-string">http://ry-api.atguigu.cn/payment/alipay/callback/return</span><br>  <span class="hljs-attr">notify_payment_url:</span> <span class="hljs-string">http://ry-api.atguigu.cn/payment/alipay/callback/notify</span><br>  <span class="hljs-attr">return_order_url:</span> <span class="hljs-string">http://ry-atguigu.cn/#/pages/money/paySuccess</span><br></code></pre></td></tr></table></figure><h4 id="3、AlipayConfig"><a href="#3、AlipayConfig" class="headerlink" title="3、AlipayConfig"></a>3、AlipayConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.configure;<br><br><span class="hljs-keyword">import</span> com.alipay.api.AlipayClient;<br><span class="hljs-keyword">import</span> com.alipay.api.DefaultAlipayClient;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.alipay_url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String alipay_url;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.app_private_key&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String app_private_key;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.app_id&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String app_id;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String format=<span class="hljs-string">&quot;json&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String charset=<span class="hljs-string">&quot;utf-8&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String sign_type=<span class="hljs-string">&quot;RSA2&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String return_payment_url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String notify_payment_url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String return_order_url;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String alipay_public_key;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.alipay_public_key&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAlipay_public_key</span><span class="hljs-params">(String alipay_public_key)</span> &#123;<br>        AlipayConfig.alipay_public_key = alipay_public_key;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.return_payment_url&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReturn_url</span><span class="hljs-params">(String return_payment_url)</span> &#123;<br>        AlipayConfig.return_payment_url = return_payment_url;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.notify_payment_url&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNotify_url</span><span class="hljs-params">(String notify_payment_url)</span> &#123;<br>        AlipayConfig.notify_payment_url = notify_payment_url;<br>    &#125;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;alipay.return_order_url&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReturn_order_url</span><span class="hljs-params">(String return_order_url)</span> &#123;<br>        AlipayConfig.return_order_url = return_order_url;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AlipayClient <span class="hljs-title function_">alipayClient</span><span class="hljs-params">()</span>&#123;<br>        AlipayClient alipayClient=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultAlipayClient</span>(alipay_url,app_id,app_private_key,format,charset, alipay_public_key,sign_type );<br>        <span class="hljs-keyword">return</span> alipayClient;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、AlipayController"><a href="#4、AlipayController" class="headerlink" title="4、AlipayController"></a>4、AlipayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.controller;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/alipay&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAlipayService alipayService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;支付宝下单&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@RequestMapping(&quot;submitAlipay/&#123;orderNo&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">submitAlipay</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(value = &quot;orderNo&quot;)</span> String orderNo)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">form</span> <span class="hljs-operator">=</span> alipayService.submitAlipay(orderNo);<br>        <span class="hljs-keyword">return</span> success(form);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、IAlipayService"><a href="#5、IAlipayService" class="headerlink" title="5、IAlipayService"></a>5、IAlipayService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAlipayService</span>&#123;<br>    String <span class="hljs-title function_">submitAlipay</span><span class="hljs-params">(String orderNo)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、AlipayServiceImpl"><a href="#6、AlipayServiceImpl" class="headerlink" title="6、AlipayServiceImpl"></a>6、AlipayServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.payment.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlipayServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAlipayService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AlipayClient alipayClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IPaymentInfoService paymentInfoService;<br><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">submitAlipay</span><span class="hljs-params">(String orderNo)</span> &#123;<br>        <span class="hljs-comment">//保存支付记录</span><br>        <span class="hljs-type">PaymentInfo</span> <span class="hljs-variable">paymentInfo</span> <span class="hljs-operator">=</span> paymentInfoService.savePaymentInfo(orderNo);<br>        <span class="hljs-comment">// 生产二维码</span><br>        <span class="hljs-type">AlipayTradeWapPayRequest</span> <span class="hljs-variable">alipayRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlipayTradeWapPayRequest</span>();<span class="hljs-comment">//创建API对应的request</span><br>        <span class="hljs-comment">// 同步回调</span><br>        <span class="hljs-comment">// return_payment_url=http://sph-payment.atguigu.cn/alipay/callback/return</span><br>        alipayRequest.setReturnUrl(AlipayConfig.return_payment_url);<br>        <span class="hljs-comment">// 异步回调</span><br>        alipayRequest.setNotifyUrl(AlipayConfig.notify_payment_url);<span class="hljs-comment">//在公共参数中设置回跳和通知地址</span><br>        <span class="hljs-comment">// 参数</span><br>        <span class="hljs-comment">// 声明一个map 集合</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,paymentInfo.getOrderNo());<br>        map.put(<span class="hljs-string">&quot;product_code&quot;</span>,<span class="hljs-string">&quot;QUICK_WAP_WAY&quot;</span>);<br>        <span class="hljs-comment">//map.put(&quot;total_amount&quot;,orderInfo.getTotalAmount());</span><br>        map.put(<span class="hljs-string">&quot;total_amount&quot;</span>,<span class="hljs-string">&quot;0.01&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;subject&quot;</span>,paymentInfo.getContent());<br><br>        alipayRequest.setBizContent(JSON.toJSONString(map));<br><br>        <span class="hljs-keyword">return</span> alipayClient.pageExecute(alipayRequest).getBody(); <span class="hljs-comment">//调用SDK生成表单;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7、IPaymentInfoService"><a href="#7、IPaymentInfoService" class="headerlink" title="7、IPaymentInfoService"></a>7、IPaymentInfoService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PaymentInfo <span class="hljs-title function_">savePaymentInfo</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><h4 id="8、PaymentInfoServiceImpl"><a href="#8、PaymentInfoServiceImpl" class="headerlink" title="8、PaymentInfoServiceImpl"></a>8、PaymentInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> PaymentInfoMapper paymentInfoMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteOrderInfoService remoteOrderInfoService;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> PaymentInfo <span class="hljs-title function_">savePaymentInfo</span><span class="hljs-params">(String orderNo)</span> &#123;<br>   <span class="hljs-type">PaymentInfo</span> <span class="hljs-variable">paymentInfo</span> <span class="hljs-operator">=</span> paymentInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;PaymentInfo&gt;().eq(PaymentInfo::getOrderNo, orderNo));<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == paymentInfo) &#123;<br>      R&lt;OrderInfo&gt; orderInfoResult = remoteOrderInfoService.getByOrderNo(orderNo, SecurityConstants.INNER);<br>      <span class="hljs-keyword">if</span> (R.FAIL == orderInfoResult.getCode()) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(orderInfoResult.getMsg());<br>      &#125;<br>      <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoResult.getData();<br>      <br>      paymentInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaymentInfo</span>();<br>      paymentInfo.setUserId(orderInfo.getUserId());<br>      <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">for</span>(OrderItem item : orderInfo.getOrderItemList()) &#123;<br>         content += item.getSkuName() + <span class="hljs-string">&quot; &quot;</span>;<br>      &#125;<br>      paymentInfo.setContent(content);<br>      paymentInfo.setAmount(orderInfo.getTotalAmount());<br>      paymentInfo.setOrderNo(orderNo);<br>      paymentInfo.setPaymentStatus(<span class="hljs-number">0</span>);<br>      paymentInfoMapper.insert(paymentInfo);<br>   &#125;<br>   <span class="hljs-keyword">return</span> paymentInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-8-支付宝同步回调"><a href="#5-1-8-支付宝同步回调" class="headerlink" title="5.1.8 支付宝同步回调"></a>5.1.8 支付宝同步回调</h3><p>支付成功后点击完成会自动跳转回商家页面地址</p><h4 id="1、AlipayController"><a href="#1、AlipayController" class="headerlink" title="1、AlipayController"></a>1、AlipayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 支付宝同步回调</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Operation(summary = &quot;支付宝同步回调&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;callback/return&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">callBack</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 同步回调给用户展示信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + AlipayConfig.return_order_url;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、配置网关"><a href="#2、配置网关" class="headerlink" title="2、配置网关"></a>2、配置网关</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 不校验白名单</span><br><span class="hljs-attr">ignore:</span><br>  <span class="hljs-attr">whites:</span><br>    <span class="hljs-string">...</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/payment/alipay/callback/*</span><br></code></pre></td></tr></table></figure><h3 id="5-1-9-支付宝异步回调"><a href="#5-1-9-支付宝异步回调" class="headerlink" title="5.1.9 支付宝异步回调"></a>5.1.9 支付宝异步回调</h3><p>操作模块：<code>payment</code></p><h4 id="1、异步通知说明"><a href="#1、异步通知说明" class="headerlink" title="1、异步通知说明"></a>1、异步通知说明</h4><p>官网地址：<a href="https://opendocs.alipay.com/open/203/105286?pathHash=022a439c&ref=api">https://opendocs.alipay.com/open/203/105286?pathHash=022a439c&amp;ref=api</a></p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-7583.png"> </p><!--![](第5章_支付/image-7583-173140748587817.png) --><p>当用户支付成功以后，支付宝系统会调用我们系统的接口通知支付结果 </p><h4 id="2、AlipayController"><a href="#2、AlipayController" class="headerlink" title="2、AlipayController"></a>2、AlipayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;callback/notify&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alipayNotify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; paramMap, HttpServletRequest request)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;AlipayController...alipayNotify方法执行了...&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、内网穿透介绍"><a href="#3、内网穿透介绍" class="headerlink" title="3、内网穿透介绍"></a>3、内网穿透介绍</h4><p>当支付成功以后支付宝无法调用本地接口，因为本地接口是位于一个私有IP地址范围内，并且被路由器或防火墙等设备保护起来。这个私有的网络设备无法直接从公共网络访问，该问题的解决可以使用内网穿透技术。</p><p><strong>内网穿透</strong>：内网穿透（Intranet Port Forwarding）是一种将本地网络中的服务暴露给公共网络访问的技术。</p><p>内网穿透通过在公共网络上建立一个中转服务器，使得公共网络上的设备可以通过该中转服务器访问内网中的设备和服务。具体而言，内网穿透技术允</p><p>许您在公共网络上使用一个公网IP地址和端口号来映射到内网中的某个设备或服务的私有IP地址和端口号。</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-9318.png"> </p><!--![](第5章_支付/image-9318-173140748953519.png) --><p>常见的内网穿透工具包括<strong>natapp</strong>、Ngrok、frp、花生壳等。</p><p>官网地址：<a href="https://natapp.cn/">https://natapp.cn/</a></p><p>试用步骤：</p><p>1、注册用户</p><p>2、购买隧道</p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-5784.png" alt style="zoom:67%;"><!--<img src="/第5章_支付/image-5784.png" alt="" style="zoom:67%;" />--><p>3、购买二级域名，绑定隧道</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-6186.png"></p><!--![](第5章_支付/image-6186-173140749538721.png)--><p>4、下载客户端</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-7316.png"></p><!--![](第5章_支付/image-7316-173140749788423.png)--><p>5、客户端使用教程：<a href="https://natapp.cn/article/nohup">https://natapp.cn/article/nohup</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">natapp.exe -authtoken=xxxxx<br></code></pre></td></tr></table></figure><p>authtoken信息获取:</p><p><img src="/2024/08/15/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC5%E7%AB%A0_%E6%94%AF%E4%BB%98/image-6742.png"></p><!--![](第5章_支付/image-6742-173140750085125.png)--><h4 id="4、验证签名"><a href="#4、验证签名" class="headerlink" title="4、验证签名"></a>4、验证签名</h4><p>AlipayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Autowired</span><br> <span class="hljs-keyword">private</span> IPaymentInfoService paymentInfoService;<br><br><span class="hljs-meta">@RequestMapping(&quot;callback/notify&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">alipayNotify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; paramMap, HttpServletRequest request)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;AlipayController...alipayNotify方法执行了...&quot;</span>);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">signVerified</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//调用SDK验证签名</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        signVerified = AlipaySignature.rsaCheckV1(paramMap, AlipayConfig.alipay_public_key, AlipayConfig.charset, AlipayConfig.sign_type);<br>        <br>    &#125; <span class="hljs-keyword">catch</span> (AlipayApiException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// 交易状态</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">trade_status</span> <span class="hljs-operator">=</span> paramMap.get(<span class="hljs-string">&quot;trade_status&quot;</span>);<br><br>    <span class="hljs-comment">// true</span><br>    <span class="hljs-keyword">if</span> (signVerified) &#123;<br>        <span class="hljs-comment">// TODO 验签成功后，按照支付结果异步通知中的描述，对支付结果中的业务内容进行二次校验，校验成功后在response中返回success并继续商户自身业务处理，校验失败返回failure</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;TRADE_SUCCESS&quot;</span>.equals(trade_status) || <span class="hljs-string">&quot;TRADE_FINISHED&quot;</span>.equals(trade_status)) &#123;<br>            <span class="hljs-comment">// 正常的支付成功，我们应该更新交易记录状态</span><br>            paymentInfoService.updatePaymentStatus(paramMap, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// TODO 验签失败则记录异常日志，并在response中返回failure.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;failure&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;failure&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、IPaymentInfoService"><a href="#5、IPaymentInfoService" class="headerlink" title="5、IPaymentInfoService"></a>5、IPaymentInfoService</h4><p>更新支付信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePaymentStatus</span><span class="hljs-params">(Map&lt;String, String&gt; map, Integer payType)</span>;<br></code></pre></td></tr></table></figure><h4 id="6、PaymentInfoServiceImpl"><a href="#6、PaymentInfoServiceImpl" class="headerlink" title="6、PaymentInfoServiceImpl"></a>6、PaymentInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePaymentStatus</span><span class="hljs-params">(Map&lt;String, String&gt; map, Integer payType)</span> &#123;<br>   <span class="hljs-type">PaymentInfo</span> <span class="hljs-variable">paymentInfo</span> <span class="hljs-operator">=</span> paymentInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;PaymentInfo&gt;().eq(PaymentInfo::getOrderNo, map.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>)));<br>   <span class="hljs-keyword">if</span> (paymentInfo.getPaymentStatus() == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>   &#125;<br><br>   <span class="hljs-comment">//更新支付信息</span><br>   paymentInfo.setPayType(payType);<br>   paymentInfo.setPaymentStatus(<span class="hljs-number">1</span>);<br>   paymentInfo.setTradeNo(map.get(<span class="hljs-string">&quot;trade_no&quot;</span>));<br>   paymentInfo.setCallbackTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>   paymentInfo.setCallbackContent(JSON.toJSONString(map));<br>   paymentInfoMapper.updateById(paymentInfo);<br><br>   <span class="hljs-comment">//基于MQ通知订单系统，修改订单状态</span><br>   rabbitService.sendMessage(MqConst.EXCHANGE_PAYMENT_PAY, MqConst.ROUTING_PAYMENT_PAY, paymentInfo.getOrderNo());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-支付成功处理"><a href="#5-2-支付成功处理" class="headerlink" title="5.2 支付成功处理"></a>5.2 支付成功处理</h2><h3 id="5-2-1-更改订单状态"><a href="#5-2-1-更改订单状态" class="headerlink" title="5.2.1 更改订单状态"></a>5.2.1 更改订单状态</h3><p>操作模块：<code>order</code></p><p>订单支付成功后，我们已经更改了订单支付记录状态，接下来我还有<strong>更改订单状态</strong>，因为他们是不同的微服务模块，所以我们采用<strong>消息队列</strong>的方式，保证<strong>数据最终一致性</strong>；</p><p>1、OrderReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听订单支付成功消息；更新订单状态</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = MqConst.ROUTING_PAYMENT_PAY</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo, Message message, Channel channel)</span> &#123;<br>    <span class="hljs-comment">//业务处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo)) &#123;<br>        log.info(<span class="hljs-string">&quot;[订单服务]监听订单支付成功消息：&#123;&#125;&quot;</span>, orderNo);<br>        <span class="hljs-comment">//更改订单支付状态</span><br>        orderInfoService.processPaySucess(orderNo);<br>    &#125;<br>    <span class="hljs-comment">//手动应答</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、IOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>3、OrderInfoServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-comment">//获取订单信息</span><br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;OrderInfo&gt;().eq(OrderInfo::getOrderNo, orderNo).select(OrderInfo::getId, OrderInfo::getOrderStatus));<br>    <span class="hljs-comment">//未支付</span><br>    <span class="hljs-keyword">if</span>(orderInfo.getOrderStatus().intValue() == <span class="hljs-number">0</span>) &#123;<br>        orderInfo.setOrderStatus(<span class="hljs-number">1</span>);<br>        orderInfo.setPaymentTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        orderInfoMapper.updateById(orderInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-2-扣减商品库存"><a href="#5-2-2-扣减商品库存" class="headerlink" title="5.2.2 扣减商品库存"></a>5.2.2 扣减商品库存</h3><p>订单模块除了更改订单支付状态，还要发送消息通知商品服务模块扣减库存</p><p>OrderReceiver类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听订单支付成功消息：更新订单状态；扣减商品库存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_PAYMENT_PAY, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = MqConst.ROUTING_PAYMENT_PAY</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processPaySucess</span><span class="hljs-params">(String orderNo, Message message, Channel channel)</span> &#123;<br>    <span class="hljs-comment">//业务处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo)) &#123;<br>        log.info(<span class="hljs-string">&quot;[订单服务]监听订单支付成功消息：&#123;&#125;&quot;</span>, orderNo);<br>        <span class="hljs-comment">//更改订单支付状态</span><br>        orderInfoService.processPaySucess(orderNo);<br><br>        <span class="hljs-comment">//基于MQ通知扣减库存</span><br>        rabbitService.sendMessage(MqConst.EXCHANGE_PRODUCT, MqConst.ROUTING_MINUS, orderNo);<br>    &#125;<br>    <span class="hljs-comment">//手动应答</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：扣减库存的mq接口前面已经提供，我们只需要发送消息即可。</strong></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4、订单</title>
    <link href="/2024/07/30/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/"/>
    <url>/2024/07/30/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章-订单"><a href="#第4章-订单" class="headerlink" title="第4章 订单"></a>第4章 订单</h1><h2 id="4-1-商品结算"><a href="#4-1-商品结算" class="headerlink" title="4.1 商品结算"></a>4.1 商品结算</h2><h3 id="4-1-1-需求说明"><a href="#4-1-1-需求说明" class="headerlink" title="4.1.1 需求说明"></a>4.1.1 需求说明</h3><p>入口：购物车点击去结算按钮 ，进入结算页面(订单确认页面)，如图所示：</p><img src="/2024/07/30/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/trade.gif" alt style="zoom:67%;"> <!--<img src="/第4章_订单/trade.gif" alt="" style="zoom:67%;" /> --><p>分析页面需要的数据：</p><p>1、 用户地址信息列表管理（增删改查），结算页选中默认地址</p><p>2、 购物车中选择的商品列表，及商品的总金额</p><p><strong>查看接口文档：</strong></p><p>用户地址信息接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs json">#用户地址列表<br>get /user/userAddress/list<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;晴天&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15023656352&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;provinceCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cityCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;districtCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110101&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;东直门1号&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;fullAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市北京市东城区东直门1号&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        ...<br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br> <br>#添加用户地址<br>post /user/userAddress<br>参数：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cs&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15090909090&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;provinceCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cityCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;districtCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110102&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span>     <br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br>        <br>#修改用户地址<br>put /user/userAddress<br>参数：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">60</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cs&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15090909090&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;provinceCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cityCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;districtCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110102&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span>     <br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span>     <br>        <br>#删除用户地址<br>delete /user/userAddress/<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结算接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">get /order/orderInfo/trade<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;totalAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8998.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;orderId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;华为笔记本 32G&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/c8f2eae0d36b6270.jpg.avif&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5999.00</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;skuNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            ...<br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tradeNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1d76f36b59414e869e843fc742e21469&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-1-2-地址管理接口"><a href="#4-1-2-地址管理接口" class="headerlink" title="4.1.2 地址管理接口"></a>4.1.2 地址管理接口</h3><p>操作模块：user</p><h4 id="1、UserAddressController"><a href="#1、UserAddressController" class="headerlink" title="1、UserAddressController"></a>1、UserAddressController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/userAddress&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAddressController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserAddressService userAddressService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户地址列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;查询用户地址列表&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">list</span><span class="hljs-params">()</span><br>    &#123;<br>        List&lt;UserAddress&gt; list = userAddressService.selectUserAddressList();<br>        <span class="hljs-keyword">return</span> success(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;新增用户地址&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAddress userAddress)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(userAddressService.insertUserAddress(userAddress));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;修改用户地址&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserAddress userAddress)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(userAddressService.updateUserAddress(userAddress));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Operation(summary = &quot;删除用户地址&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> toAjax(userAddressService.removeById(id));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、IUserAddressService"><a href="#2、IUserAddressService" class="headerlink" title="2、IUserAddressService"></a>2、IUserAddressService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserAddressService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;UserAddress&gt;<br>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户地址列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户地址集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">selectUserAddressList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、UserAddressServiceImpl"><a href="#3、UserAddressServiceImpl" class="headerlink" title="3、UserAddressServiceImpl"></a>3、UserAddressServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAddressServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserAddressMapper, UserAddress&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserAddressService</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserAddressMapper userAddressMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IRegionService regionService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询用户地址列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;UserAddress&gt; <span class="hljs-title function_">selectUserAddressList</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// 获取当前登录用户的id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>        <span class="hljs-keyword">return</span> userAddressMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserAddress&gt;().eq(UserAddress::getUserId, userId));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span><br>    &#123;<br>        userAddress.setUserId(SecurityContextHolder.getUserId());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">provinceName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getProvinceCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cityName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getCityCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">districtName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getDistrictCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullAddress</span> <span class="hljs-operator">=</span> provinceName + cityName + districtName + userAddress.getAddress();<br>        userAddress.setFullAddress(fullAddress);<br>        userAddress.setCreateTime(DateUtils.getNowDate());<br><br>        <span class="hljs-comment">//如果是默认地址，其他地址更新为非默认地址</span><br>        <span class="hljs-keyword">if</span>(userAddress.getIsDefault().intValue() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">UserAddress</span> <span class="hljs-variable">updateUserAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>();<br>            updateUserAddress.setIsDefault(<span class="hljs-number">0L</span>);<br>            userAddressMapper.update(updateUserAddress, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserAddress&gt;().eq(UserAddress::getUserId, userAddress.getUserId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> userAddressMapper.insert(userAddress);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userAddress 用户地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUserAddress</span><span class="hljs-params">(UserAddress userAddress)</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">provinceName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getProvinceCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cityName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getCityCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">districtName</span> <span class="hljs-operator">=</span> regionService.getNameByCode(userAddress.getDistrictCode());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullAddress</span> <span class="hljs-operator">=</span> provinceName + cityName + districtName + userAddress.getAddress();<br>        userAddress.setFullAddress(fullAddress);<br>        userAddress.setUpdateTime(DateUtils.getNowDate());<br>        <span class="hljs-comment">//如果是默认地址，其他地址更新为非默认地址</span><br>        <span class="hljs-keyword">if</span>(userAddress.getIsDefault().intValue() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">UserAddress</span> <span class="hljs-variable">updateUserAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAddress</span>();<br>            updateUserAddress.setIsDefault(<span class="hljs-number">0L</span>);<br>            userAddressMapper.update(updateUserAddress, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;UserAddress&gt;().eq(UserAddress::getUserId, userAddress.getUserId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> userAddressMapper.updateById(userAddress);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、IRegionService"><a href="#4、IRegionService" class="headerlink" title="4、IRegionService"></a>4、IRegionService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据code获取地区名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> code</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span>;<br></code></pre></td></tr></table></figure><h4 id="5、RegionServiceImpl"><a href="#5、RegionServiceImpl" class="headerlink" title="5、RegionServiceImpl"></a>5、RegionServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNameByCode</span><span class="hljs-params">(String code)</span> &#123;<br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(code)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-type">Region</span> <span class="hljs-variable">region</span> <span class="hljs-operator">=</span> regionMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;Region&gt;().eq(Region::getCode,code).select(Region::getName));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != region) &#123;<br>        <span class="hljs-keyword">return</span> region.getName();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-3-获取选中购物项数据接口"><a href="#4-1-3-获取选中购物项数据接口" class="headerlink" title="4.1.3 获取选中购物项数据接口"></a>4.1.3 获取选中购物项数据接口</h3><h4 id="1、远程调用接口开发"><a href="#1、远程调用接口开发" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>操作模块：cart</p><p>（1）CartController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;查询用户购物车列表中选中商品列表&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;/getCartCheckedList/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;CartInfo&gt;&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;userId&quot;, description = &quot;会员id&quot;, required = true)</span> <span class="hljs-meta">@PathVariable</span> Long userId)</span>&#123;<br><span class="hljs-keyword">return</span> R.ok(cartService.getCartCheckedList(userId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ICartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CartInfo&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>（3）CartServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartInfo&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(Long userId)</span> &#123;<br>    List&lt;CartInfo&gt; cartInfoList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCartKey(userId);<br>    List&lt;CartInfo&gt; cartCachInfoList = redisTemplate.opsForHash().values(cartKey);<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartCachInfoList)) &#123;<br>        <span class="hljs-keyword">for</span> (CartInfo cartInfo : cartCachInfoList) &#123;<br>            <span class="hljs-comment">// 获取选中的商品！</span><br>            <span class="hljs-keyword">if</span> (cartInfo.getIsChecked().intValue() == <span class="hljs-number">1</span>) &#123;<br>                cartInfoList.add(cartInfo);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cartInfoList;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义"><a href="#2、openFeign接口定义" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-cart</p><p>（1）RemoteCartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.api;<br><br><span class="hljs-meta">@FeignClient(value = ServiceNameConstants.CART_SERVICE, fallbackFactory = RemoteCartFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteCartService</span><br>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getCartCheckedList/&#123;userId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;List&lt;CartInfo&gt;&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span>String source)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ServiceNameConstants</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车服务的serviceid</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CART_SERVICE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cart&quot;</span>;<br></code></pre></td></tr></table></figure><p>（3）RemoteCartFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.api.factory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车降级处理</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> atguigu</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteCartFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;RemoteCartService&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RemoteCartFallbackFactory.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RemoteCartService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span><br>    &#123;<br>        log.error(<span class="hljs-string">&quot;购物车服务调用失败:&#123;&#125;&quot;</span>, throwable.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteCartService</span>()<br>        &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> R&lt;List&lt;CartInfo&gt;&gt; <span class="hljs-title function_">getCartCheckedList</span><span class="hljs-params">(Long userId, String source)</span> &#123;<br>                <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取用户购物车选中数据失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br><br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.cart.api.factory.RemoteCartFallbackFactory<br></code></pre></td></tr></table></figure><h3 id="4-1-4-后端业务接口"><a href="#4-1-4-后端业务接口" class="headerlink" title="4.1.4 后端业务接口"></a>4.1.4 后端业务接口</h3><p>操作模块：order</p><h4 id="1、TradeVo"><a href="#1、TradeVo" class="headerlink" title="1、TradeVo"></a>1、TradeVo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;结算实体类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TradeVo</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;结算总金额&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal totalAmount;<br><br>    <span class="hljs-meta">@Schema(description = &quot;结算商品列表&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;OrderItem&gt; orderItemList;<br><br>    <span class="hljs-meta">@Schema(description = &quot;交易号&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、OrderInfoController"><a href="#2、OrderInfoController" class="headerlink" title="2、OrderInfoController"></a>2、OrderInfoController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;订单结算&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;/trade&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">orderTradeData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> success(orderInfoService.orderTradeData());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、IOrderInfoService"><a href="#3、IOrderInfoService" class="headerlink" title="3、IOrderInfoService"></a>3、IOrderInfoService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TradeVo <span class="hljs-title function_">orderTradeData</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="4、OrderInfoServiceImpl"><a href="#4、OrderInfoServiceImpl" class="headerlink" title="4、OrderInfoServiceImpl"></a>4、OrderInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteCartService remoteCartService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> TradeVo <span class="hljs-title function_">orderTradeData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br><br>    R&lt;List&lt;CartInfo&gt;&gt; cartInfoListResult = remoteCartService.getCartCheckedList(userId, SecurityConstants.INNER);<br>    <span class="hljs-keyword">if</span> (R.FAIL == cartInfoListResult.getCode()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(cartInfoListResult.getMsg());<br>    &#125;<br>    List&lt;CartInfo&gt; cartInfoList = cartInfoListResult.getData();<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(cartInfoList)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;购物车无选中商品&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//将集合泛型从购物车改为订单明细</span><br>    List&lt;OrderItem&gt; orderItemList = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">totalAmount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>);<br>    orderItemList = cartInfoList.stream().map(cartInfo -&gt; &#123;<br>         <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>         BeanUtils.copyProperties(cartInfo, orderItem);<br>         <span class="hljs-comment">//注意注意，复制主要是为了getSkuPrice，这步纯属多余，但是提醒一下</span><br>         orderItem.setSkuPrice(cartInfo.getSkuPrice());<br>         <span class="hljs-keyword">return</span> orderItem;<br>        &#125;).collect(Collectors.toList());<br><br>        <span class="hljs-comment">//订单总金额</span><br>     <span class="hljs-keyword">for</span>(OrderItem orderItem : orderItemList) &#123;<br>         totalAmount = totalAmount.add(orderItem.getSkuPrice().multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(orderItem.getSkuNum())));<br>     &#125;<br><br>    <span class="hljs-comment">//渲染订单确认页面-生成用户流水号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">tradeNo</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.generateTradeNo(userId);<br><br>    <span class="hljs-type">TradeVo</span> <span class="hljs-variable">tradeVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TradeVo</span>();<br>    tradeVo.setTotalAmount(totalAmount);<br>    tradeVo.setOrderItemList(orderItemList);<br>    tradeVo.setTradeNo(tradeNo);<br>    <span class="hljs-keyword">return</span> tradeVo;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 渲染订单确认页面-生成用户流水号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateTradeNo</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-comment">//1.构建流水号Key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    <span class="hljs-comment">//2.构建流水号value</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">tradeNo</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//3.将流水号存入Redis 暂存5分钟</span><br>    redisTemplate.opsForValue().set(userTradeKey, tradeNo, <span class="hljs-number">5</span>, TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> tradeNo;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-商品下单"><a href="#4-2-商品下单" class="headerlink" title="4.2 商品下单"></a>4.2 商品下单</h2><h3 id="4-2-1-需求说明"><a href="#4-2-1-需求说明" class="headerlink" title="4.2.1 需求说明"></a>4.2.1 需求说明</h3><p>需求说明：用户在结算页面点击提交订单按钮，那么此时就需要保存订单信息(order_info)、订单项信息(order_item)及记录订单日志(order_log)，下单成功重定向到订单支付页面</p><p><strong>查看接口文档：</strong></p><p>下单接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">post /order/orderInfo/submitOrder<br>参数：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;orderItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机 颜色:黑色 内存:18G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-1_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2999</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        ...<br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userAddressId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;feightFee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;赶快发货&quot;</span><br><span class="hljs-punctuation">&#125;</span><br>返回结果(订单id)：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2-创建order-log表代码"><a href="#4-2-2-创建order-log表代码" class="headerlink" title="4.2.2 创建order_log表代码"></a>4.2.2 创建order_log表代码</h3><p>操作order模块</p><p><strong>OrderLog</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.domain;<br><br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> com.common.core.annotation.Excel;<br><span class="hljs-keyword">import</span> com.common.core.web.domain.BaseEntity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单操作日志记录对象 order_log</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;订单操作日志记录&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderLog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 订单id */</span><br>    <span class="hljs-meta">@Excel(name = &quot;订单id&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;订单id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long orderId;<br><br>    <span class="hljs-comment">/** 操作人：用户；系统；后台管理员 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;操作人：用户；系统；后台管理员&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;操作人：用户；系统；后台管理员&quot;)</span><br>    <span class="hljs-keyword">private</span> String operateUser;<br><br>    <span class="hljs-comment">/** 订单状态 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;订单状态&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;订单状态&quot;)</span><br>    <span class="hljs-keyword">private</span> Long processStatus;<br><br>    <span class="hljs-comment">/** 备注 */</span><br>    <span class="hljs-meta">@Excel(name = &quot;备注&quot;)</span><br>    <span class="hljs-meta">@Schema(description = &quot;备注&quot;)</span><br>    <span class="hljs-keyword">private</span> String note;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>OrderLogMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.mapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderLogMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;OrderLog&gt;<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-3-批量获取商品价格接口"><a href="#4-2-3-批量获取商品价格接口" class="headerlink" title="4.2.3 批量获取商品价格接口"></a>4.2.3 批量获取商品价格接口</h3><p>获取最新商品sku价格与购物车价格比较，校验价格是否变化，价格变化就更新购物车价格</p><p>这个接口之前已经开发过了，这里直接使用。</p><h3 id="4-2-4-更新购物车最新价格"><a href="#4-2-4-更新购物车最新价格" class="headerlink" title="4.2.4 更新购物车最新价格"></a>4.2.4 更新购物车最新价格</h3><p>操作模块：cart</p><h4 id="1、远程调用接口开发-1"><a href="#1、远程调用接口开发-1" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）CartController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;更新用户购物车列表价格&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;/updateCartPrice/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(cartService.updateCartPrice(userId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ICartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Boolean <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>（3）CartServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    List&lt;CartInfo&gt; cartCachInfoList = hashOperations.values();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartCachInfoList)) &#123;<br>        <span class="hljs-keyword">for</span> (CartInfo cartInfo : cartCachInfoList) &#123;<br>            <span class="hljs-keyword">if</span> (cartInfo.getIsChecked().intValue() == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> remoteProductService.getSkuPrice(cartInfo.getSkuId(), SecurityConstants.INNER).getData();<br>                cartInfo.setCartPrice(skuPrice.getSalePrice());<br>                cartInfo.setSkuPrice(skuPrice.getSalePrice());<br>                hashOperations.put(cartInfo.getSkuId().toString(), cartInfo);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义-1"><a href="#2、openFeign接口定义-1" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-cart</p><p>（1）RemoteCartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/updateCartPrice/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span>String source)</span>;<br></code></pre></td></tr></table></figure><p>（2）RemoteCartFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">updateCartPrice</span><span class="hljs-params">(Long userId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;更新购物车价格失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-5-删除购物车选中商品"><a href="#4-2-5-删除购物车选中商品" class="headerlink" title="4.2.5 删除购物车选中商品"></a>4.2.5 删除购物车选中商品</h3><p>下单成功后，删除购物车选中的商品</p><p>操作模块：cart</p><h4 id="1、远程调用接口开发-2"><a href="#1、远程调用接口开发-2" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）CartController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;删除用户购物车列表中选中商品列表&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(&quot;/deleteCartCheckedList/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(cartService.deleteCartCheckedList(userId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）ICartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Boolean <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(Long userId)</span>;<br></code></pre></td></tr></table></figure><p>（3）CartServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(Long userId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    List&lt;CartInfo&gt; cartCachInfoList = hashOperations.values();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartCachInfoList)) &#123;<br>        <span class="hljs-keyword">for</span> (CartInfo cartInfo : cartCachInfoList) &#123;<br>            <span class="hljs-comment">// 获取选中的商品！</span><br>            <span class="hljs-keyword">if</span> (cartInfo.getIsChecked().intValue() == <span class="hljs-number">1</span>) &#123;<br>                hashOperations.delete(cartInfo.getSkuId().toString());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义-2"><a href="#2、openFeign接口定义-2" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-cart</p><p>（1）RemoteCartService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/deleteCartCheckedList/&#123;userId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> Long userId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span>String source)</span>;<br></code></pre></td></tr></table></figure><p>（2）RemoteCartFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">deleteCartCheckedList</span><span class="hljs-params">(Long userId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;删除用户购物车选中数据失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-6-获取用户地址信息"><a href="#4-2-6-获取用户地址信息" class="headerlink" title="4.2.6 获取用户地址信息"></a>4.2.6 获取用户地址信息</h3><h4 id="1、远程调用接口"><a href="#1、远程调用接口" class="headerlink" title="1、远程调用接口"></a>1、远程调用接口</h4><p>操作模块：user</p><p>（1）UserAddressController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getUserAddress/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddress</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(userAddressService.getById(id));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）UserAddress</p><p>将user模块UserAddress实体类，移动到api-user模块</p><h4 id="2、openFeign接口定义-3"><a href="#2、openFeign接口定义-3" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-user</p><p>（1）RemoteUserAddressService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.api;<br><br><span class="hljs-meta">@FeignClient(contextId = &quot;remoteUserAddressService&quot; , value = ServiceNameConstants.USER_SERVICE, fallbackFactory = RemoteUserAddressFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RemoteUserAddressService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/userAddress/getUserAddress/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddress</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）RemoteUserAddressFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.user.api.factory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 服务降级处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteUserAddressFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FallbackFactory</span>&lt;RemoteUserAddressService&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(RemoteUserAddressFallbackFactory.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> RemoteUserAddressService <span class="hljs-title function_">create</span><span class="hljs-params">(Throwable throwable)</span><br>    &#123;<br>        log.error(<span class="hljs-string">&quot;用户服务调用失败:&#123;&#125;&quot;</span>, throwable.getMessage());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteUserAddressService</span>()<br>        &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> R&lt;UserAddress&gt; <span class="hljs-title function_">getUserAddress</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>                <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取用户地址失败:&quot;</span> + throwable.getMessage());<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）加载配置类</p><p>resources&#x2F;META-INF.spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.user.api.factory.RemoteUserAddressFallbackFactory<br></code></pre></td></tr></table></figure><h3 id="4-2-7-后端业务接口"><a href="#4-2-7-后端业务接口" class="headerlink" title="4.2.7 后端业务接口"></a>4.2.7 后端业务接口</h3><p>操作模块：order</p><p>1、OrderForm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderForm</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;用户流水号&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br><br>    <span class="hljs-comment">//送货地址id</span><br>    <span class="hljs-meta">@Schema(description = &quot;送货地址id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long userAddressId;<br><br>    <span class="hljs-comment">//运费</span><br>    <span class="hljs-meta">@Schema(description = &quot;运费&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal feightFee;<br>    <br>    <span class="hljs-comment">//备注</span><br>    <span class="hljs-meta">@Schema(description = &quot;备注&quot;)</span><br>    <span class="hljs-keyword">private</span> String remark;<br>    <br>    <span class="hljs-meta">@Schema(description = &quot;结算商品列表&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;OrderItem&gt; orderItemList;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、OrderInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;用户提交订单&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@PostMapping(&quot;/submitOrder&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> OrderForm orderForm)</span> &#123;<br>    <span class="hljs-keyword">return</span> success(orderInfoService.submitOrder(orderForm));<br>&#125;<br></code></pre></td></tr></table></figure><p>3、IOrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Long <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderForm orderForm)</span>;<br></code></pre></td></tr></table></figure><p>4、OrderInfoServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteProductService remoteProductService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RemoteUserAddressService remoteUserAddressService;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderLogMapper orderLogMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证页面提交流水号是否有效</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> tradeNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">checkTradeNo</span><span class="hljs-params">(String userId, String tradeNo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">redisTradeNo</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(userTradeKey);<br>    <span class="hljs-keyword">return</span> tradeNo.equals(redisTradeNo);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除流水号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteTradeNo</span><span class="hljs-params">(String userId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    redisTemplate.delete(userTradeKey);<br>&#125;<br><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderForm orderForm)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br><br>    <span class="hljs-comment">//1.验证用户是否通过浏览器回退进行重复提交订单</span><br>    <span class="hljs-comment">//1.1 获取Redis中存放流水号 跟用户提交比较</span><br>    <span class="hljs-comment">//Boolean flag = this.checkTradeNo(orderInfo.getUserId().toString(), tradeNo);</span><br>    <span class="hljs-comment">//if (!flag) &#123;</span><br>    <span class="hljs-comment">//    throw new RuntimeException(&quot;请勿重复提交订单，请尝试重试&quot;);</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//1.2 验证通过，将Redis中存放流水号删除</span><br>    <span class="hljs-comment">//this.deleteTradeNo(orderInfo.getUserId().toString());</span><br><br>    <span class="hljs-comment">//1.3 采用Lua脚本保证判断删除流水号原子性 KEYS[1]:流水号Key    ARGV[1]：用户流水号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">userTradeKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:tradeNo:&quot;</span> + userId;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">scriptText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>            <span class="hljs-string">&quot;then\n&quot;</span> +<br>            <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>            <span class="hljs-string">&quot;else\n&quot;</span> +<br>            <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>            <span class="hljs-string">&quot;end&quot;</span>;<br>    DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    redisScript.setScriptText(scriptText);<br>    redisScript.setResultType(Long.class);<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> (Long) redisTemplate.execute(redisScript, Arrays.asList(userTradeKey), orderForm.getTradeNo());<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;请勿重复提交订单，请尝试重试&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//2. 判断购物项</span><br>    List&lt;OrderItem&gt; orderItemList = orderForm.getOrderItemList();<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(orderItemList)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;请求不合法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//3.订单校验</span><br>    <span class="hljs-comment">//3.1.校验价格</span><br>    List&lt;Long&gt; skuIdList = orderItemList.stream().map(OrderItem::getSkuId).collect(Collectors.toList());<br>    <br>    R&lt;List&lt;SkuPrice&gt;&gt; skuPriceListResult = remoteProductService.getSkuPriceList(skuIdList, SecurityConstants.INNER);<br>    <span class="hljs-keyword">if</span> (R.FAIL == skuPriceListResult.getCode()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceListResult.getMsg());<br>    &#125;<br>    List&lt;SkuPrice&gt; skuPriceList = skuPriceListResult.getData();<br>    <br>    Map&lt;Long, BigDecimal&gt; skuIdToSalePriceMap = skuPriceList.stream().collect(Collectors.toMap(SkuPrice::getSkuId, SkuPrice::getSalePrice));<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">priceCheckResult</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        <span class="hljs-keyword">if</span> (orderItem.getSkuPrice().compareTo(skuIdToSalePriceMap.get(orderItem.getSkuId())) != <span class="hljs-number">0</span>) &#123;<br>            priceCheckResult += orderItem.getSkuName() + <span class="hljs-string">&quot;价格变化了; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(priceCheckResult)) &#123;<br>        <span class="hljs-comment">//更新购物车价格</span><br>        remoteCartService.updateCartPrice(userId, SecurityConstants.INNER);<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(priceCheckResult);<br>    &#125;<br><br>    <span class="hljs-comment">//3.2.校验库存并锁定库存</span><br>    <span class="hljs-comment">//TODO ...</span><br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//4 下单</span><br>        orderId = <span class="hljs-built_in">this</span>.saveOrder(orderForm);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-comment">//抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;下单失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//5 删除购物车选项</span><br>    remoteCartService.deleteCartCheckedList(userId, SecurityConstants.INNER);<br>    <span class="hljs-keyword">return</span> orderId;<br>&#125;<br><br><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(OrderForm orderForm)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserName();<br><br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderInfo</span>();<br>    orderInfo.setOrderNo(orderForm.getTradeNo());<br>    orderInfo.setUserId(userId);<br>    orderInfo.setNickName(userName);<br>orderInfo.setRemark(orderForm.getRemark());<br>    <span class="hljs-type">UserAddress</span> <span class="hljs-variable">userAddress</span> <span class="hljs-operator">=</span> remoteUserAddressService.getUserAddress(orderForm.getUserAddressId(), SecurityConstants.INNER).getData();<br>    orderInfo.setReceiverName(userAddress.getName());<br>    orderInfo.setReceiverPhone(userAddress.getPhone());<br>    orderInfo.setReceiverTagName(userAddress.getTagName());<br>    orderInfo.setReceiverProvince(userAddress.getProvinceCode());<br>    orderInfo.setReceiverCity(userAddress.getCityCode());<br>    orderInfo.setReceiverDistrict(userAddress.getDistrictCode());<br>    orderInfo.setReceiverAddress(userAddress.getFullAddress());<br><br>    List&lt;OrderItem&gt; orderItemList = orderForm.getOrderItemList();<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">totalAmount</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        totalAmount = totalAmount.add(orderItem.getSkuPrice().multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(orderItem.getSkuNum())));<br>    &#125;<br>    orderInfo.setTotalAmount(totalAmount);<br>    orderInfo.setCouponAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>));<br>    orderInfo.setOriginalTotalAmount(totalAmount);<br>    orderInfo.setFeightFee(orderForm.getFeightFee());<br>    <span class="hljs-comment">//OrderInfo类的orderStatus属性的类型改为Integer</span><br>    orderInfo.setOrderStatus(<span class="hljs-number">0</span>);<br>    orderInfoMapper.insert(orderInfo);<br><br>    <span class="hljs-comment">//保存订单明细</span><br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        orderItem.setOrderId(orderInfo.getId());<br>        orderItemMapper.insert(orderItem);<br>    &#125;<br><br>    <span class="hljs-comment">//记录日志</span><br>    <span class="hljs-type">OrderLog</span> <span class="hljs-variable">orderLog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderLog</span>();<br>    orderLog.setOrderId(orderInfo.getId());<br>    orderLog.setProcessStatus(<span class="hljs-number">0</span>);<br>    orderLog.setNote(<span class="hljs-string">&quot;提交订单&quot;</span>);<br>    orderLogMapper.insert(orderLog);<br>    <span class="hljs-keyword">return</span> orderInfo.getId();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-检查与锁定库存"><a href="#4-3-检查与锁定库存" class="headerlink" title="4.3 检查与锁定库存"></a>4.3 检查与锁定库存</h2><p>我们的商品不允许超卖，为了防止超卖，我们下单必须检查与锁定库存，下单失败或取消订单要解锁库存，支付成功扣减库存</p><h3 id="4-3-1-远程调用接口"><a href="#4-3-1-远程调用接口" class="headerlink" title="4.3.1 远程调用接口"></a>4.3.1 远程调用接口</h3><p>操作模块：product</p><p>1、ProductController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@Operation(summary = &quot;检查与锁定库存&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;checkAndLock/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderNo, <span class="hljs-meta">@RequestBody</span> List&lt;SkuLockVo&gt; skuLockVoList)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> R.ok(productService.checkAndLock(orderNo, skuLockVoList));<br>    &#125; <span class="hljs-keyword">catch</span> (ServiceException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.ok(e.getMessage());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.ok(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、SkuLockVo</p><p>操作模块：api-product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuLockVo</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-keyword">private</span> Integer skuNum;<br><br>    <span class="hljs-comment">/** 是否有库存 **/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">isHaveStock</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3、IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(String orderNo, List&lt;SkuLockVo&gt; skuLockVoList)</span>;<br></code></pre></td></tr></table></figure><p>4、ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(String orderNo, List&lt;SkuLockVo&gt; skuLockVoList)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:checkAndLock:&quot;</span> + orderNo;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:lock:data:&quot;</span> + orderNo;<br>    <span class="hljs-comment">//防止重复请求</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, orderNo, <span class="hljs-number">1</span>, TimeUnit.HOURS);<br>    <span class="hljs-keyword">if</span> (!isExist) &#123;<br>        <span class="hljs-comment">//如果存在，则已执行过库存锁定</span><br>        <span class="hljs-keyword">if</span>(redisTemplate.hasKey(dataKey)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;重复提交&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历所有商品，验库存并锁库存，要具备原子性</span><br>    skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>        <span class="hljs-comment">// 验库存：查询，返回的是满足要求的库存列表</span><br>        <span class="hljs-type">SkuStock</span> <span class="hljs-variable">skuStock</span> <span class="hljs-operator">=</span> skuStockMapper.check(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>        <span class="hljs-comment">// 如果没有一个商品满足要求，这里就验库存失败</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == skuStock) &#123;<br>            skuLockVo.setIsHaveStock(<span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            skuLockVo.setIsHaveStock(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 只要有一个商品锁定失败，所有锁定成功的商品要解锁库存</span><br>    <span class="hljs-keyword">if</span> (skuLockVoList.stream().anyMatch(skuLockVo -&gt; !skuLockVo.getIsHaveStock())) &#123;<br>        <span class="hljs-comment">// 获取所有锁定成功的商品，遍历解锁库存</span><br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">//获取没有库存的对象列表</span><br>        List&lt;SkuLockVo&gt; noHaveStockSkuLockVoList = skuLockVoList.stream().filter(item -&gt; !item.getIsHaveStock()).collect(Collectors.toList());<br>        <span class="hljs-keyword">for</span>(SkuLockVo noHaveStockSkuLockVo : noHaveStockSkuLockVoList) &#123;<br>            <span class="hljs-comment">//解除去重</span><br>            <span class="hljs-comment">//you&#x27;dia</span><br>            <span class="hljs-comment">//this.redisTemplate.delete(key);</span><br>            result.append(<span class="hljs-string">&quot;商品: &quot;</span> + noHaveStockSkuLockVo.getSkuId() + <span class="hljs-string">&quot; 库存不足; &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//锁定失败，解除</span><br>        redisTemplate.delete(key);<br>        <span class="hljs-comment">// 响应锁定状态</span><br>        <span class="hljs-keyword">return</span> result.toString();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//锁定库存</span><br>        skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> skuStockMapper.lock(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>            <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//解除去重</span><br>                <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;库存锁定失败&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果所有商品都锁定成功的情况下，需要缓存锁定信息到redis。以方便将来解锁库存 或者 减库存</span><br>    <span class="hljs-built_in">this</span>.redisTemplate.opsForValue().set(dataKey, skuLockVoList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、SkuStockMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SkuStock <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br><br>Integer <span class="hljs-title function_">lock</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br></code></pre></td></tr></table></figure><p>6、SkuStockMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.product.mapper.SkuStockMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;SkuStock&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SkuStockResult&quot;</span> <span class="hljs-attr">autoMapping</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;check&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;SkuStockResult&quot;</span>&gt;</span><br>        select * from sku_stock where sku_id = #&#123;skuId&#125; and available_num &gt; #&#123;num&#125; for update<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lock&quot;</span>&gt;</span><br>        update sku_stock<br>        set lock_num = lock_num + #&#123;num&#125;, available_num = available_num - #&#123;num&#125;<br>        where sku_id = #&#123;skuId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>select for update 这个语句的作用是在读取数据时给数据行加锁，以防止其他事务并发修改相同的数据行。</p><h3 id="4-3-2-openFeign接口定义"><a href="#4-3-2-openFeign接口定义" class="headerlink" title="4.3.2 openFeign接口定义"></a>4.3.2 openFeign接口定义</h3><p>RemoteProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/product/checkAndLock/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">checkAndLock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderNo&quot;)</span> String orderNo, <span class="hljs-meta">@RequestBody</span> List&lt;SkuLockVo&gt; skuLockVoList, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br></code></pre></td></tr></table></figure><h2 id="4-4-RabbitMQ使用"><a href="#4-4-RabbitMQ使用" class="headerlink" title="4.4 RabbitMQ使用"></a>4.4 RabbitMQ使用</h2><h3 id="4-4-1-封装RabbitMQ"><a href="#4-4-1-封装RabbitMQ" class="headerlink" title="4.4.1 封装RabbitMQ"></a>4.4.1 封装RabbitMQ</h3><p>由于消息队列是公共模块，我们把mq的相关代码（生产者）封装到该模块，其他service微服务模块都可能使用，因此我们把他封装到一个单独的模块，需要使用mq的模块直接引用该模块即可</p><p>1、新建模块</p><p>在<code>common</code>模块下新建<code>common-rabbit</code>模块</p><p>2、pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        common-rabbit服务<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--rabbitmq消息队列--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 缓存服务 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、RabbitService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exchange   交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> routingKey 路由键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message    消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String exchange, String routingKey, Object message)</span> &#123;<br>        rabbitTemplate.convertAndSend(exchange, routingKey, message);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.common.rabbit.service.RabbitService<br></code></pre></td></tr></table></figure><p>5、MqConst</p><p>提供常量类 MqConst</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.constant;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqConst</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_TEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_TEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_CONFIRM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_TEST</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_CONFIRM</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;confirm&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 库存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_PRODUCT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_UNLOCK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unlock&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_MINUS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;minus&quot;</span>;<br>    <span class="hljs-comment">//队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_UNLOCK</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;unlock&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_MINUS</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;minus&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 支付</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_PAYMENT_PAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_PAYMENT_PAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment.pay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_PAYMENT_CLOSE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment.close&quot;</span>;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_PAYMENT_PAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;payment.pay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_PAYMENT_CLOSE</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.payment.close&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取消订单延迟消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_CANCEL_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cancel.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_CANCEL_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cancel.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_CANCEL_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cancel.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">CANCEL_ORDER_DELAY_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span> * <span class="hljs-number">60</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-2-RabbitMQ测试"><a href="#4-4-2-RabbitMQ测试" class="headerlink" title="4.4.2 RabbitMQ测试"></a>4.4.2 RabbitMQ测试</h3><p>我们在<code>order</code>模块测试mq消息</p><p>1、配置RabbitMQ</p><p>在nacos配置中心，order-dev.yml文件添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure><p>说明：host改为实际的IP</p><p>2、引入common-rabbit模块</p><p>在<code>order</code>模块pom.xml文件添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、MqController</p><p> 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;Mq接口管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/mq&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MqController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitService rabbitService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;发送消息&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/sendMessage&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span><br>    &#123;<br>        rabbitService.sendMessage(MqConst.EXCHANGE_TEST, MqConst.ROUTING_TEST, <span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-keyword">return</span> success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、TestReceiver</p><p>监听消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.receiver;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestReceiver</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            exchange = @Exchange(value = MqConst.EXCHANGE_TEST, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            value = @Queue(value = MqConst.QUEUE_TEST, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            key = MqConst.ROUTING_TEST</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String content, Message message)</span> &#123;<br>        <span class="hljs-comment">//都可以</span><br>        log.info(<span class="hljs-string">&quot;接收消息：&#123;&#125;&quot;</span>, content);<br>        <span class="hljs-comment">//log.info(&quot;接收消息：&#123;&#125;&quot;, new String(message.getBody()));</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、knife4j测试</p><p>发送消息</p><p><img src="/2024/07/30/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/1709020757929.png"></p><!--![](第4章_订单/1709020757929.png)--><p>监听消息：查看idea打印结果</p><h3 id="4-4-3-消息可靠性配置"><a href="#4-4-3-消息可靠性配置" class="headerlink" title="4.4.3 消息可靠性配置"></a>4.4.3 消息可靠性配置</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>MQ消息的可靠性，一般需要三个方面一起保证：</p><ol><li>生产者不丢数据</li><li>MQ服务器不丢数据</li><li>消费者不丢数据</li></ol><p>保证消息不丢失有两种实现方式：</p><ul><li>开启事务模式</li><li>消息确认模式（生产者，消费者）</li></ul><p><strong>说明：</strong>开启事务会大幅降低消息发送及接收效率，使用的相对较少，因此我们生产环境一般都采取消息确认模式，以下我们只是讲解消息确认模式</p><h4 id="2、消息发送确认配置"><a href="#2、消息发送确认配置" class="headerlink" title="2、消息发送确认配置"></a>2、消息发送确认配置</h4><p>消息发送确认可以保证生产者不丢数据</p><p>（1）封装发送端消息确认配置类</p><p>操作模块：<code>common-rabbit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.event.ApplicationReadyEvent;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationListener;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitInitConfigApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ApplicationReadyEvent event)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setupCallbacks();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupCallbacks</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 只确认消息是否正确到达 Exchange 中,成功与否都会回调</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> correlation 相关数据  非消息本身业务数据</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> ack             应答结果</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> reason           如果发送消息到交换器失败，错误原因</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setConfirmCallback((correlationData, ack, reason) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (ack) &#123;<br>                <span class="hljs-comment">//消息到交换器成功</span><br>                log.info(<span class="hljs-string">&quot;消息发送到Exchange成功：&#123;&#125;&quot;</span>, correlationData);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//消息到交换器失败</span><br>                log.error(<span class="hljs-string">&quot;消息发送到Exchange失败：&#123;&#125;&quot;</span>, reason);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 消息没有正确到达队列时触发回调，如果正确到达队列不执行</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setReturnsCallback(returned -&gt; &#123;<br>            log.error(<span class="hljs-string">&quot;Returned: &quot;</span> + returned.getMessage() + <span class="hljs-string">&quot;\nreplyCode: &quot;</span> + returned.getReplyCode()<br>                    + <span class="hljs-string">&quot;\nreplyText: &quot;</span> + returned.getReplyText() + <span class="hljs-string">&quot;\nexchange/rk: &quot;</span><br>                    + returned.getExchange() + <span class="hljs-string">&quot;/&quot;</span> + returned.getRoutingKey());<br><br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）加载配置类</p><p>resources&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.common.rabbit.config.RabbitInitConfigApplicationListener<br></code></pre></td></tr></table></figure><p>（3）修改配置</p><p>在nacos配置中心，修改order-dev.yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span> <span class="hljs-comment">#发布消息成功到交换器后会触发回调方法</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 未投递到Queue退回模式</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">cknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#默认自动确认，手动确认manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 消费者每次从队列获取的消息数量。不设置：轮询分发，设置1：能者多劳</span><br></code></pre></td></tr></table></figure><p><img src="/2024/07/30/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/image-0610.png"></p><!--![](/第4章_订单/image-0610.png)--><p>（4）MqController</p><p>发送确认消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;发送确认消息&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/sendConfirmMessage&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendConfirmMessage</span><span class="hljs-params">()</span><br>&#123;<br>    rabbitService.sendMessage(MqConst.EXCHANGE_TEST, MqConst.ROUTING_CONFIRM, <span class="hljs-string">&quot;hello, confirm&quot;</span>);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><p>（5）TestReceiver</p><p>监听确认消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听确认消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_TEST, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_CONFIRM, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = MqConst.ROUTING_CONFIRM</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(String content, Message message, Channel channel)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;接收确认消息：&#123;&#125;&quot;</span>, content);<br><br>    <span class="hljs-comment">// false 确认一个消息，true 批量确认</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、消息发送失败后设置重发机制"><a href="#3、消息发送失败后设置重发机制" class="headerlink" title="3、消息发送失败后设置重发机制"></a>3、消息发送失败后设置重发机制</h4><p>实现思路：借助redis来实现重发机制</p><p>操作模块：<code>pzx-common-rabbit</code></p><p>（1）GmallCorrelationData</p><p>自定义一个实体类来接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuiguCorrelationData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CorrelationData</span> &#123;<br><br>    <span class="hljs-comment">//消息体</span><br>    <span class="hljs-keyword">private</span> Object message;<br>    <span class="hljs-comment">//交换机</span><br>    <span class="hljs-keyword">private</span> String exchange;<br>    <span class="hljs-comment">//路由键</span><br>    <span class="hljs-keyword">private</span> String routingKey;<br>    <span class="hljs-comment">//重试次数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//是否延迟消息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isDelay</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//延迟时长</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">delayTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）RabbitService</p><p>修改发送方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  发送消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange 交换机</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> routingKey 路由键</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message 消息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String exchange, String routingKey, Object message)</span> &#123;<br>    <span class="hljs-comment">//1.创建自定义相关消息对象-包含业务数据本身，交换器名称，路由键，队列类型，延迟时间,重试次数</span><br>    <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguCorrelationData</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mq:&quot;</span> + UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    correlationData.setId(uuid);<br>    correlationData.setMessage(message);<br>    correlationData.setExchange(exchange);<br>    correlationData.setRoutingKey(routingKey);<br>    <br>    <span class="hljs-comment">//2.将相关消息存入Redis  Key：UUID  相关消息对象  10 分钟</span><br>    redisTemplate.opsForValue().set(uuid, JSON.toJSONString(correlationData), <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>    <br>    <span class="hljs-comment">//3.将相关消息封装到发送消息方法中（注意：步骤2和3的代码顺序）</span><br>    rabbitTemplate.convertAndSend(exchange, routingKey, message, correlationData);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）RabbitInitConfigApplicationListener</p><p>修改RabbitInitConfigApplicationListener类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.common.rabbit.config;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitInitConfigApplicationListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ApplicationReadyEvent event)</span> &#123;<br>        <span class="hljs-built_in">this</span>.setupCallbacks();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setupCallbacks</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 只确认消息是否正确到达 Exchange 中,成功与否都会回调</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> correlation 相关数据  非消息本身业务数据</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> ack         应答结果</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> reason      如果发送消息到交换器失败，错误原因</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setConfirmCallback((correlationData, ack, reason) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (ack) &#123;<br>                <span class="hljs-comment">//消息到交换器成功</span><br>                log.info(<span class="hljs-string">&quot;消息发送到Exchange成功：&#123;&#125;&quot;</span>, correlationData);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//消息到交换器失败</span><br>                log.error(<span class="hljs-string">&quot;消息发送到Exchange失败：&#123;&#125;&quot;</span>, reason);<br><br>                <span class="hljs-comment">//执行消息重发</span><br>                <span class="hljs-built_in">this</span>.retrySendMsg(correlationData);<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 消息没有正确到达队列时触发回调，如果正确到达队列不执行</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">this</span>.rabbitTemplate.setReturnsCallback(returned -&gt; &#123;<br>            log.error(<span class="hljs-string">&quot;Returned: &quot;</span> + returned.getMessage() + <span class="hljs-string">&quot;\nreplyCode: &quot;</span> + returned.getReplyCode()<br>                    + <span class="hljs-string">&quot;\nreplyText: &quot;</span> + returned.getReplyText() + <span class="hljs-string">&quot;\nexchange/rk: &quot;</span><br>                    + returned.getExchange() + <span class="hljs-string">&quot;/&quot;</span> + returned.getRoutingKey());<br><br>            <span class="hljs-comment">//当路由队列失败 也需要重发</span><br>            <span class="hljs-comment">//1.构建相关数据对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> returned.getMessage().getMessageProperties().getHeader(<span class="hljs-string">&quot;spring_returned_message_correlation&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">correlationDataStr</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(redisKey);<br>            <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">guiguCorrelationData</span> <span class="hljs-operator">=</span> JSON.parseObject(correlationDataStr, GuiguCorrelationData.class);<br>            <span class="hljs-comment">//2.调用消息重发方法</span><br>            <span class="hljs-built_in">this</span>.retrySendMsg(guiguCorrelationData);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消息重新发送</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> correlationData</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">retrySendMsg</span><span class="hljs-params">(CorrelationData correlationData)</span> &#123;<br>        <span class="hljs-comment">//1.获取相关数据</span><br>        <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">gmallCorrelationData</span> <span class="hljs-operator">=</span> (GuiguCorrelationData) correlationData;<br><br>        <span class="hljs-comment">//获取redis中存放重试次数</span><br>        <span class="hljs-comment">//先重发，在写会到redis中次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> gmallCorrelationData.getRetryCount();<br>        <span class="hljs-keyword">if</span> (retryCount &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-comment">//超过最大重试次数</span><br>            log.error(<span class="hljs-string">&quot;生产者超过最大重试次数，将失败的消息存入数据库用人工处理；给管理员发送邮件；给管理员发送短信；&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">//2.重发次数+1</span><br>        retryCount += <span class="hljs-number">1</span>;<br>        gmallCorrelationData.setRetryCount(retryCount);<br>        redisTemplate.opsForValue().set(gmallCorrelationData.getId(), JSON.toJSONString(gmallCorrelationData), <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>        <br>        <span class="hljs-comment">//3.重发消息（注意：步骤2和3的代码顺序）</span><br>        rabbitTemplate.convertAndSend(gmallCorrelationData.getExchange(), gmallCorrelationData.getRoutingKey(), gmallCorrelationData.getMessage(), gmallCorrelationData);<br><br>        log.info(<span class="hljs-string">&quot;进行消息重发！&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-4-延迟消息"><a href="#4-4-4-延迟消息" class="headerlink" title="4.4.4 延迟消息"></a>4.4.4 延迟消息</h3><p>延迟消息：生产者发送消息时指定一个时间，消费者不会立刻收到消息，而是在指定时间后才收到消息。</p><p>延迟消息有两种实现方案：</p><p>1，基于死信队列</p><p>2，集成延迟插件</p><h4 id="4-4-4-1-基于死信实现延迟消息"><a href="#4-4-4-1-基于死信实现延迟消息" class="headerlink" title="4.4.4.1 基于死信实现延迟消息"></a>4.4.4.1 基于死信实现延迟消息</h4><p>使用RabbitMQ来实现延迟消息必须先了解RabbitMQ的两个概念：消息的TTL和死信Exchange，通过这两者的组合来实现延迟队列</p><h5 id="1、消息的TTL（Time-To-Live）"><a href="#1、消息的TTL（Time-To-Live）" class="headerlink" title="1、消息的TTL（Time To Live）"></a>1、消息的TTL（Time To Live）</h5><p>消息的TTL就是消息的存活时间。RabbitMQ可以对队列和消息分别设置TTL。对队列设置就是队列没有消费者连着的保留时间，也可以对每一个单独的消息做单独的设置。超过了这个时间，我们认为这个消息就死了，称之为死信。</p><p>如何设置TTL：</p><p>我们创建一个队列queue.temp，在Arguments 中添加x-message-ttl 为5000 （单位是毫秒），那所有压在这个队列的消息在5秒后会消失。</p><h5 id="2、死信交换机-Dead-Letter-Exchanges"><a href="#2、死信交换机-Dead-Letter-Exchanges" class="headerlink" title="2、死信交换机  Dead Letter Exchanges"></a>2、死信交换机  Dead Letter Exchanges</h5><p>一个消息在满足如下条件下，会进死信路由，记住这里是路由而不是队列，一个路由可以对应很多队列。</p><p>（1） 一个消息被Consumer拒收了，并且reject方法的参数里requeue是false。也就是说不会被再次放在队列里，被其他消费者使用。</p><p>（2）<strong>上面的消息的TTL到了，消息过期了。</strong></p><p>（3）队列的长度限制满了。排在前面的消息会被丢弃或者扔到死信路由上。</p><p>Dead Letter Exchange其实就是一种普通的exchange，和创建其他exchange没有两样。只是在某一个设置Dead Letter Exchange的队列中有消息过期了，会自动触发消息的转发，发送到Dead Letter Exchange中去。</p><p><img src="/2024/07/30/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC4%E7%AB%A0_%E8%AE%A2%E5%8D%95/wps157.jpg"> </p><!--![](第4章_订单/wps157-17314071724715.jpg) --><p>我们现在可以测试一下延迟队列。</p><p>（1）创建死信队列 </p><p>（2）创建交换机 </p><p>（3）建立交换器与队列之间的绑定 </p><p>（4）创建队列</p><h5 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h5><p>操作模块：<code>order</code></p><p>（1）DeadLetterMqConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.configure;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.DirectExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLetterMqConfig</span> &#123;<br>    <span class="hljs-comment">// 声明一些变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">exchange_dead</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.dead&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">routing_dead_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.dead.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">routing_dead_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.dead.2&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">queue_dead_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.dead.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">queue_dead_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.dead.2&quot;</span>;<br><br>    <span class="hljs-comment">// 定义交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-title function_">exchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(exchange_dead, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 设置如果队列一 出现问题，则通过参数转到exchange_dead，routing_dead_2 上！</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 参数绑定 此处的key 固定值，不能随意写</span><br>        map.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, exchange_dead);<br>        map.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, routing_dead_2);<br>        <span class="hljs-comment">// 设置延迟时间</span><br>        map.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">10</span> * <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 队列名称，是否持久化，是否独享、排外的【true:只可以在本次连接中访问】，是否自动删除，队列的其他属性参数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(queue_dead_1, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, map);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">binding</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 将队列一 通过routing_dead_1 key 绑定到exchange_dead 交换机上</span><br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue1()).to(exchange()).with(routing_dead_1);<br>    &#125;<br><br>    <span class="hljs-comment">// 这个队列二就是一个普通队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">queue2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(queue_dead_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 设置队列二的绑定规则</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">binding2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 将队列二通过routing_dead_2 key 绑定到exchange_dead交换机上！</span><br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue2()).to(exchange()).with(routing_dead_2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）MqController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息发送延迟消息：基于死信实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Operation(summary = &quot;发送延迟消息：基于死信实现&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/sendDeadLetterMsg&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendDeadLetterMsg</span><span class="hljs-params">()</span> &#123;<br>    rabbitService.sendMessage(DeadLetterMqConfig.exchange_dead, DeadLetterMqConfig.routing_dead_1, <span class="hljs-string">&quot;我是延迟消息&quot;</span>);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）TestReceiver</p><p>接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 监听延迟消息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> channel</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(queues = &#123;DeadLetterMqConfig.queue_dead_2&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeadLetterMsg</span><span class="hljs-params">(String msg, Message message, Channel channel)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;死信消费者：&#123;&#125;&quot;</span>, msg);<br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-4-2-基于延迟插件实现延迟消息"><a href="#4-4-4-2-基于延迟插件实现延迟消息" class="headerlink" title="4.4.4.2 基于延迟插件实现延迟消息"></a>4.4.4.2 基于延迟插件实现延迟消息</h4><p>Rabbitmq实现了一个插件x-delay-message来实现延时队列</p><h5 id="1、插件安装"><a href="#1、插件安装" class="headerlink" title="1、插件安装"></a>1、插件安装</h5><p>参考<code>01-软件环境准备#6</code></p><h5 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h5><p>操作模块：<code>order</code></p><p>（1）DelayedMqConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.order.configure;<br><br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Binding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.CustomExchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Queue;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedMqConfig</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">exchange_delay</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.delay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">routing_delay</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.delay&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">queue_delay_1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.delay.1&quot;</span>;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">delayQeue1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 第一个参数是创建的queue的名字，第二个参数是是否支持持久化</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(queue_delay_1, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CustomExchange <span class="hljs-title function_">delayExchange</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        args.put(<span class="hljs-string">&quot;x-delayed-type&quot;</span>, <span class="hljs-string">&quot;direct&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomExchange</span>(exchange_delay, <span class="hljs-string">&quot;x-delayed-message&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">delayBbinding1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(delayQeue1()).to(delayExchange()).with(routing_delay).noargs();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）MqController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;发送延迟消息：基于延迟插件&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/sendDelayMsg&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">sendDelayMsg</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//调用工具方法发送延迟消息</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">delayTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    rabbitService.sendDealyMessage(DelayedMqConfig.exchange_delay, DelayedMqConfig.routing_delay, <span class="hljs-string">&quot;我是延迟消息&quot;</span>, delayTime);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）RabbitService</p><p>封装到工具类模块</p><p>操作模块：<code>common-rabbit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送延迟消息方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exchange 交换机</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> routingKey 路由键</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> message 消息数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> delayTime 延迟时间，单位为：秒</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sendDealyMessage</span><span class="hljs-params">(String exchange, String routingKey, Object message, <span class="hljs-type">int</span> delayTime)</span> &#123;<br>    <span class="hljs-comment">//1.创建自定义相关消息对象-包含业务数据本身，交换器名称，路由键，队列类型，延迟时间,重试次数</span><br>    <span class="hljs-type">GuiguCorrelationData</span> <span class="hljs-variable">correlationData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GuiguCorrelationData</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mq:&quot;</span> + UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    correlationData.setId(uuid);<br>    correlationData.setMessage(message);<br>    correlationData.setExchange(exchange);<br>    correlationData.setRoutingKey(routingKey);<br>    correlationData.setDelay(<span class="hljs-literal">true</span>);<br>    correlationData.setDelayTime(delayTime);<br><br>    <span class="hljs-comment">//2.将相关消息封装到发送消息方法中</span><br>    rabbitTemplate.convertAndSend(exchange, routingKey, message,message1 -&gt; &#123;<br>        message1.getMessageProperties().setDelay(delayTime*<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">return</span> message1;<br>    &#125;, correlationData);<br><br>    <span class="hljs-comment">//3.将相关消息存入Redis  Key：UUID  相关消息对象  10 分钟</span><br>    redisTemplate.opsForValue().set(uuid, JSON.toJSONString(correlationData), <span class="hljs-number">10</span>, TimeUnit.MINUTES);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、消费者端幂等性处理"><a href="#3、消费者端幂等性处理" class="headerlink" title="3、消费者端幂等性处理"></a>3、消费者端幂等性处理</h5><p>消费结果会发送多次，也被消费多次！</p><p>如何保证消息幂等性？</p><ol><li>使用数据库方式</li><li><strong>使用redis setnx 命令解决（推荐）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//监听延迟消息</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(queues = &#123;DeadLetterMqConfig.queue_dead_2&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDeadLetterMsg</span><span class="hljs-params">(String msg, Message message, Channel channel)</span> &#123;<br>    <span class="hljs-comment">//接收消息，消费者端判断是否需要做幂等性处理，如果业务保证幂等性，基于redis setnx保证</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mq:&quot;</span> + msg;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">200</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>        <span class="hljs-comment">//说明该业务数据已经被执行</span><br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 执行业务</span><br>    <span class="hljs-comment">//  TODO </span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-库存接口"><a href="#4-5-库存接口" class="headerlink" title="4.5 库存接口"></a>4.5 库存接口</h2><h3 id="4-5-1-解锁库存"><a href="#4-5-1-解锁库存" class="headerlink" title="4.5.1 解锁库存"></a>4.5.1 解锁库存</h3><p>下单失败，接口抛出异常，解锁库存我们必须保证执行成功，那么怎么办呢？前面讲解了Rabbit，它能保证数据的最终一致性，因此我们提供一个mq接口解锁库存。</p><p>操作模块：<code>product</code></p><p>1、pom.xml</p><p><code>product</code>模块添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、product-dev.yml</p><p>添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">cknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment">#默认情况下消息消费者是自动确认消息的，如果要手动确认消息则需要修改确认模式为manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 消费者每次从队列获取的消息数量。此属性当不设置时为：轮询分发，设置为1为：公平分发</span><br></code></pre></td></tr></table></figure><p>3、ProductReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.receiver;<br><br><span class="hljs-keyword">import</span> com.common.rabbit.constant.MqConst;<br><span class="hljs-keyword">import</span> com.product.service.IProductService;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductReceiver</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProductService productService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁库存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orderNo 订单号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">            exchange = @Exchange(value = MqConst.EXCHANGE_PRODUCT, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            value = @Queue(value = MqConst.QUEUE_UNLOCK, durable = &quot;true&quot;),</span><br><span class="hljs-meta">            key = &#123;MqConst.ROUTING_UNLOCK&#125;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String orderNo, Message message, Channel channel)</span> &#123;<br>        <span class="hljs-comment">//业务处理</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo))&#123;<br>            log.info(<span class="hljs-string">&quot;[商品服务]监听解锁库存消息：&#123;&#125;&quot;</span>, orderNo);<br>            <span class="hljs-comment">//解锁库存</span><br>            productService.unlock(orderNo);<br>        &#125;<br><br>        <span class="hljs-comment">//手动应答</span><br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>5、ProductServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:unlock:&quot;</span> + orderNo;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:lock:data:&quot;</span> + orderNo;<br>    <span class="hljs-comment">//业务去重，防止重复消费</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, orderNo, <span class="hljs-number">1</span>, TimeUnit.HOURS);<br>    <span class="hljs-keyword">if</span>(!isExist) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 获取锁定库存的缓存信息</span><br>    List&lt;SkuLockVo&gt; skuLockVoList = (List&lt;SkuLockVo&gt;)<span class="hljs-built_in">this</span>.redisTemplate.opsForValue().get(dataKey);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(skuLockVoList))&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 解锁库存</span><br>    skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> skuStockMapper.unlock(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>        <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//解除去重</span><br>            <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;解锁出库失败&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 解锁库存之后，删除锁定库存的缓存。以防止重复解锁库存</span><br>    <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>&#125;<br></code></pre></td></tr></table></figure><p>6、SkuStockMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">unlock</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br></code></pre></td></tr></table></figure><p>7、SkuStockMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;unlock&quot;</span>&gt;</span><br>    update sku_stock<br>    set lock_num = lock_num - #&#123;num&#125;, available_num = available_num + #&#123;num&#125;<br>    where sku_id = #&#123;skuId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-2-扣减库存"><a href="#4-5-2-扣减库存" class="headerlink" title="4.5.2 扣减库存"></a>4.5.2 扣减库存</h3><p>订单支付成功之后，通过发送mq消息，实现库存的真正去扣减</p><p>扣减库存跟解锁库存一样，提供mq接收端</p><p>1、ProductReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扣减库存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderNo  订单号</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        exchange = @Exchange(value = MqConst.EXCHANGE_PRODUCT, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        value = @Queue(value = MqConst.QUEUE_MINUS, durable = &quot;true&quot;),</span><br><span class="hljs-meta">        key = &#123;MqConst.ROUTING_MINUS&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">minus</span><span class="hljs-params">(String orderNo, Channel channel, Message message)</span> &#123;<br>    <span class="hljs-comment">//业务处理</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(orderNo))&#123;<br>        log.info(<span class="hljs-string">&quot;[商品服务]监听减库存消息：&#123;&#125;&quot;</span>, orderNo);<br>        <span class="hljs-comment">//扣减库存</span><br>        productService.minus(orderNo);<br>    &#125;<br><br>    <span class="hljs-comment">//手动应答</span><br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">minus</span><span class="hljs-params">(String orderNo)</span>;<br></code></pre></td></tr></table></figure><p>3、ProductServiceI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = &#123;Exception.class&#125;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">minus</span><span class="hljs-params">(String orderNo)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:minus:&quot;</span> + orderNo;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:lock:data:&quot;</span> + orderNo;<br>    <span class="hljs-comment">//业务去重，防止重复消费</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">isExist</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(key, orderNo, <span class="hljs-number">1</span>, TimeUnit.HOURS);<br>    <span class="hljs-keyword">if</span>(!isExist) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 获取锁定库存的缓存信息</span><br>    List&lt;SkuLockVo&gt; skuLockVoList = (List&lt;SkuLockVo&gt;)<span class="hljs-built_in">this</span>.redisTemplate.opsForValue().get(dataKey);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(skuLockVoList))&#123;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 减库存</span><br>    skuLockVoList.forEach(skuLockVo -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> skuStockMapper.minus(skuLockVo.getSkuId(), skuLockVo.getSkuNum());<br>        <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//解除去重</span><br>            <span class="hljs-built_in">this</span>.redisTemplate.delete(key);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;减出库失败&quot;</span>);<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">// 解锁库存之后，删除锁定库存的缓存。以防止重复解锁库存</span><br>    <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>&#125;<br></code></pre></td></tr></table></figure><p>4、SkuStockMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer <span class="hljs-title function_">minus</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@Param(&quot;num&quot;)</span>Integer num)</span>;<br></code></pre></td></tr></table></figure><p>5、SkuStockMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;minus&quot;</span>&gt;</span><br>    update sku_stock<br>    set lock_num = lock_num - #&#123;num&#125;, total_num = total_num - #&#123;num&#125;, sale_num = sale_num + #&#123;num&#125;<br>    where sku_id = #&#123;skuId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-3-下单接口改造"><a href="#4-5-3-下单接口改造" class="headerlink" title="4.5.3 下单接口改造"></a>4.5.3 下单接口改造</h3><p><strong>操作OrderInfoServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Long <span class="hljs-title function_">submitOrder</span><span class="hljs-params">(OrderForm orderForm)</span> &#123;<br>    ...<br><br>    <span class="hljs-comment">//3.2.校验库存并锁定库存</span><br>    List&lt;SkuLockVo&gt; skuLockVoList = orderItemList.stream().map(item -&gt; &#123;<br>        <span class="hljs-type">SkuLockVo</span> <span class="hljs-variable">skuLockVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuLockVo</span>();<br>        skuLockVo.setSkuId(item.getSkuId());<br>        skuLockVo.setSkuNum(item.getSkuNum());<br>        <span class="hljs-keyword">return</span> skuLockVo;<br>    &#125;).collect(Collectors.toList());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">checkAndLockResult</span> <span class="hljs-operator">=</span> remoteProductService.checkAndLock(orderForm.getTradeNo(), skuLockVoList, SecurityConstants.INNER).getData();<br>    <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(checkAndLockResult)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(checkAndLockResult);<br>    &#125;<br><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//4 下单</span><br>        ...<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-comment">//4.1 下单失败，解锁库存</span><br>        rabbitService.sendMessage(MqConst.EXCHANGE_PRODUCT, MqConst.ROUTING_UNLOCK, orderForm.getTradeNo());<br>        <span class="hljs-comment">//抛出异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;下单失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//5 删除购物车选项</span><br>    ...<br><br>    <span class="hljs-keyword">return</span> orderId;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-支付页"><a href="#4-6-支付页" class="headerlink" title="4.6 支付页"></a>4.6 支付页</h2><h3 id="4-6-1-需求说明"><a href="#4-6-1-需求说明" class="headerlink" title="4.6.1 需求说明"></a>4.6.1 需求说明</h3><p>提交订单成功，跳转到支付页面，根据订单id获取订单详细信息，展示订单支付信息</p><p><strong>查看接口文档：</strong></p><p>根据订单id获取订单信息接口地址及返回结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">get /order/orderInfo/getOrderInfo/<span class="hljs-punctuation">&#123;</span>orderId<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-28 08:29:36&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;nickName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13700032456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderNo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;f1866bad38bc4627958542d72a15ca9c&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;couponId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;totalAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9997.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;couponAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;originalTotalAmount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9997.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;feightFee&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.00</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;晴天&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverPhone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;15023656352&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverTagName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;家&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverProvince&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverCity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110100&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverDistrict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;110101&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiverAddress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市北京市东城区东直门1号&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;paymentTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;deliveryTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;receiveTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cancelTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cancelReason&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;orderItemList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4-6-2-后端业务接口"><a href="#4-6-2-后端业务接口" class="headerlink" title="4.6.2 后端业务接口"></a>4.6.2 后端业务接口</h3><p><strong>操作OrderInfoController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;获取订单信息&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;getOrderInfo/&#123;orderId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getOrderInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long orderId)</span> &#123;<br>    <span class="hljs-type">OrderInfo</span> <span class="hljs-variable">orderInfo</span> <span class="hljs-operator">=</span> orderInfoService.getById(orderId);<br>    <span class="hljs-keyword">return</span> success(orderInfo);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3、购物车</title>
    <link href="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <url>/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章-购物车"><a href="#第3章-购物车" class="headerlink" title="第3章 购物车"></a>第3章 购物车</h1><h2 id="3-1-购物车介绍"><a href="#3-1-购物车介绍" class="headerlink" title="3.1 购物车介绍"></a>3.1 购物车介绍</h2><p>在购物车中存储用户所选的的商品，记录下所选商品，当用户决定购买时，用户可以选择决定购买的商品进入结算页面。</p><p>购物车模块功能说明：</p><p>1、用户必须登录后才可以使用购物车 </p><p>2、添加商品到购物车</p><p>3、查询购物车列表数据</p><p>4、删除购物车商品数据</p><p>5、更新选中商品状态</p><p>6、完成购物车商品的全选</p><p>7、清空购物车商品数据</p><p>数据存储：为了提高对购物车数据操作的性能，可以使用Redis【HASH】存储购物车数据。</p><p>页面效果：</p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/1686635045559.png" alt style="zoom:67%;"><!--<img src="/第3章_购物车/1686635045559.png" alt="" style="zoom:67%;" />--><h2 id="3-2-环境搭建"><a href="#3-2-环境搭建" class="headerlink" title="3.2 环境搭建"></a>3.2 环境搭建</h2><h3 id="3-2-1-新建模块"><a href="#3-2-1-新建模块" class="headerlink" title="3.2.1 新建模块"></a>3.2.1 新建模块</h3><p>在modules模块下新建子模块<code>cart</code></p><h3 id="3-2-2-pom-xml"><a href="#3-2-2-pom-xml" class="headerlink" title="3.2.2 pom.xml"></a>3.2.2 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>modules<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        cart购物车模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Nacos Config --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringCloud Alibaba Sentinel --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- SpringBoot Actuator --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Mysql Connector --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Common DataScope --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-datascope<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Common Log --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-log<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-3-banner-txt"><a href="#3-2-3-banner-txt" class="headerlink" title="3.2.3 banner.txt"></a>3.2.3 banner.txt</h3><p>在resources目录下新建banner.txt</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Spring Boot Version: $&#123;spring-boot.version&#125;<br>Spring Application Name: $&#123;spring.application.name&#125;<br>                            _                           _                    <br>                           (_)                         | |                   <br> _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  <br>| &#x27;__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| &#x27;_ ` _ \ <br>| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |<br>|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|<br>                      __/ |                  __/ |                           <br>                     |___/                  |___/                            <br></code></pre></td></tr></table></figure><h3 id="3-2-4-bootstrap-yml"><a href="#3-2-4-bootstrap-yml" class="headerlink" title="3.2.4 bootstrap.yml"></a>3.2.4 bootstrap.yml</h3><p>在resources目录下新建bootstrap.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Tomcat</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9209</span><br><br><span class="hljs-comment"># Spring</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># 应用名称</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">cart</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-comment"># 环境配置</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-comment"># 服务注册地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-comment"># 配置中心地址</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>        <span class="hljs-comment"># 配置文件格式</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span><br>        <span class="hljs-comment"># 共享配置</span><br>        <span class="hljs-attr">shared-configs:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-5-cart-dev-yml"><a href="#3-2-5-cart-dev-yml" class="headerlink" title="3.2.5 cart-dev.yml"></a>3.2.5 cart-dev.yml</h3><p>在nacos上添加商品服务配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">password:</span><br></code></pre></td></tr></table></figure><h3 id="3-2-6-logback-xml"><a href="#3-2-6-logback-xml" class="headerlink" title="3.2.6 logback.xml"></a>3.2.6 logback.xml</h3><p>在resources目录下新建logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志存放路径 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;logs/cart&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 日志输出格式 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;20&#125; - [%method,%line] - %msg%n&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 控制台输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统日志输出 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file_error&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志文件名格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 日志最大的历史 60天 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 过滤的级别 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 系统模块日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- Spring日志级别控制  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> /&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--系统操作日志--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_info&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;file_error&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-7-CartApplication"><a href="#3-2-7-CartApplication" class="headerlink" title="3.2.7 CartApplication"></a>3.2.7 CartApplication</h3><p>添加启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 购物车模块</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@EnableCustomConfig</span><br><span class="hljs-meta">@EnableRyFeignClients</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><span class="hljs-comment">//取消数据源自动配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartApplication</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        SpringApplication.run(CartApplication.class, args);<br>        System.out.println(<span class="hljs-string">&quot;(♥◠‿◠)ﾉﾞ  系统模块启动成功   ლ(´ڡ`ლ)ﾞ  \n&quot;</span> +<br>                <span class="hljs-string">&quot; .-------.       ____     __        \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  _ _   \\      \\   \\   /  /    \n&quot;</span> +<br>                <span class="hljs-string">&quot; | ( &#x27; )  |       \\  _. /  &#x27;       \n&quot;</span> +<br>                <span class="hljs-string">&quot; |(_ o _) /        _( )_ .&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; | (_,_).&#x27; __  ___(_ o _)&#x27;          \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |\\ \\  |  ||   |(_,_)&#x27;         \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  | \\ `&#x27;   /|   `-&#x27;  /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; |  |  \\    /  \\      /           \n&quot;</span> +<br>                <span class="hljs-string">&quot; &#x27;&#x27;-&#x27;   `&#x27;-&#x27;    `-..-&#x27;              &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-8-配置网关"><a href="#3-2-8-配置网关" class="headerlink" title="3.2.8 配置网关"></a>3.2.8 配置网关</h3><p>在gateway-dev.yml配置文件中添加会员服务的网关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 购物车服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">cart</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://cart</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/cart/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><h2 id="3-3-添加购物车"><a href="#3-3-添加购物车" class="headerlink" title="3.3 添加购物车"></a>3.3 添加购物车</h2><h3 id="3-3-1-需求说明"><a href="#3-3-1-需求说明" class="headerlink" title="3.3.1 需求说明"></a>3.3.1 需求说明</h3><p>1、商品详情页加入购物车</p><p>2、加入购物车必须登录</p><p>3、购物车页面加减商品数量与商品详情页加入购物车是同一个接口</p><p>加入购物车功能如图所示：</p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/add.gif" alt style="zoom:67%;"><!--<img src="/第3章_购物车/add.gif" alt="" style="zoom:67%;" />--><p><strong>查看接口文档：</strong></p><p>添加购物车接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/addToCart/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>skuNum<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-搭建购物车服务远程接口模块"><a href="#3-3-2-搭建购物车服务远程接口模块" class="headerlink" title="3.3.2 搭建购物车服务远程接口模块"></a>3.3.2 搭建购物车服务远程接口模块</h3><p>参考：api-system模块</p><h4 id="1、新建模块"><a href="#1、新建模块" class="headerlink" title="1、新建模块"></a>1、新建模块</h4><p>在api模块下新建子模块api-cart</p><h4 id="2、pom-xml"><a href="#2、pom-xml" class="headerlink" title="2、pom.xml"></a>2、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-cart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><br>        api-cart购物车接口模块<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--  Common Core--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、modules模块引入依赖"><a href="#3、modules模块引入依赖" class="headerlink" title="3、modules模块引入依赖"></a>3、modules模块引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>api-cart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-3-后端业务接口"><a href="#3-3-3-后端业务接口" class="headerlink" title="3.3.3 后端业务接口"></a>3.3.3 后端业务接口</h3><h4 id="1、CartInfo"><a href="#1、CartInfo" class="headerlink" title="1、CartInfo"></a>1、CartInfo</h4><p>操作模块：api-cart</p><p>定义一个实体类来封装购物车中的商品数据(购物项数据)，该实体类的定义依据：购物车列表页面需要展示的数据。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;购物车&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>   <span class="hljs-meta">@Schema(description = &quot;用户id&quot;)</span><br>   <span class="hljs-keyword">private</span> Long userId;<br><br>   <span class="hljs-meta">@Schema(description = &quot;skuid&quot;)</span><br>   <span class="hljs-keyword">private</span> Long skuId;<br><br>   <span class="hljs-meta">@Schema(description = &quot;放入购物车时价格&quot;)</span><br>   <span class="hljs-keyword">private</span> BigDecimal cartPrice;<br><br>   <span class="hljs-meta">@Schema(description = &quot;实时价格&quot;)</span><br>   <span class="hljs-keyword">private</span> BigDecimal skuPrice;  <br><br>   <span class="hljs-meta">@Schema(description = &quot;数量&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer skuNum;<br><br>   <span class="hljs-meta">@Schema(description = &quot;图片文件&quot;)</span><br>   <span class="hljs-keyword">private</span> String thumbImg;<br><br>   <span class="hljs-meta">@Schema(description = &quot;sku名称 (冗余)&quot;)</span><br>   <span class="hljs-keyword">private</span> String skuName;<br><br>   <span class="hljs-meta">@Schema(description = &quot;isChecked&quot;)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">isChecked</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、CartController"><a href="#2、CartController" class="headerlink" title="2、CartController"></a>2、CartController</h4><p>操作模块：cart</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;购物车接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ICartService cartService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;添加购物车&quot;)</span><br>    <span class="hljs-meta">@RequiresLogin</span><br>    <span class="hljs-meta">@GetMapping(&quot;addToCart/&#123;skuId&#125;/&#123;skuNum&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addToCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;skuId&quot;, description = &quot;商品skuId&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId,</span><br><span class="hljs-params">                                <span class="hljs-meta">@Parameter(name = &quot;skuNum&quot;, description = &quot;数量&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(&quot;skuNum&quot;)</span> Integer skuNum)</span> &#123;<br>        cartService.addToCart(skuId, skuNum);<br>        <span class="hljs-keyword">return</span> success();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、ICartService"><a href="#3、ICartService" class="headerlink" title="3、ICartService"></a>3、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICartService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Long skuId, Integer skuNum)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、CartServiceImpl"><a href="#4、CartServiceImpl" class="headerlink" title="4、CartServiceImpl"></a>4、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cart.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICartService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RemoteProductService remoteProductService;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getCartKey</span><span class="hljs-params">(Long userId)</span> &#123;<br>        <span class="hljs-comment">//定义key user:userId:cart</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user:cart:&quot;</span> + userId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToCart</span><span class="hljs-params">(Long skuId, Integer skuNum)</span> &#123;<br>        <span class="hljs-comment">// 获取当前登录用户的id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br><br>        <span class="hljs-comment">//1.构建“用户”购物车hash结构key  user：用户ID：cart</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br><br>        <span class="hljs-comment">//2.创建Hash结构绑定操作对象（方便对hash进行操作）</span><br>        BoundHashOperations&lt;String, String, CartInfo&gt; hashOps = redisTemplate.boundHashOps(cartKey);<br><br>        <span class="hljs-comment">//4.判断用户购物车中是否包含该商品 如果包含：数量进行累加(某件商品数量上限99) 不包含：新增购物车商品</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hashKey</span> <span class="hljs-operator">=</span> skuId.toString();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">threshold</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>        <span class="hljs-keyword">if</span> (hashOps.hasKey(hashKey)) &#123;<br>            <span class="hljs-comment">//4.1 说明该商品在购物车中已有，对数量进行累加 ，不能超过指定上限99</span><br>            <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfo</span> <span class="hljs-operator">=</span> hashOps.get(hashKey);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> cartInfo.getSkuNum() + skuNum;<br>            cartInfo.setSkuNum(totalCount &gt; threshold ? threshold : totalCount);<br>            hashOps.put(hashKey, cartInfo);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//3.判断购物车商品种类（不同SKU）总数大于50件</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> hashOps.size();<br>            <span class="hljs-keyword">if</span> (++count &gt; <span class="hljs-number">50</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;商品种类数量超过上限！&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//4. 说明购物车没有该商品，构建购物车对象，存入Redis</span><br>            <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CartInfo</span>();<br>            cartInfo.setUserId(userId);<br>            cartInfo.setSkuNum(skuNum &gt; threshold ? threshold : skuNum);<br><br>            <span class="hljs-comment">//4.1 远程调用商品服务获取商品sku基本信息</span><br>            R&lt;ProductSku&gt; productSkuResult = remoteProductService.getProductSku(skuId, SecurityConstants.INNER);<br>            <span class="hljs-keyword">if</span> (R.FAIL == productSkuResult.getCode()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productSkuResult.getMsg());<br>            &#125;<br>            <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuResult.getData();<br>            cartInfo.setSkuId(skuId);<br>            cartInfo.setSkuName(productSku.getSkuName());<br>            cartInfo.setThumbImg(productSku.getThumbImg());<br><br>            <span class="hljs-comment">//4.2 远程调用商品服务获取商品实时价格</span><br>            R&lt;SkuPrice&gt; skuPriceResult = remoteProductService.getSkuPrice(skuId, SecurityConstants.INNER);<br>            <span class="hljs-keyword">if</span> (R.FAIL == skuPriceResult.getCode()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceResult.getMsg());<br>            &#125;<br>            <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> skuPriceResult.getData();<br>            cartInfo.setCartPrice(skuPrice.getSalePrice());<br>            cartInfo.setSkuPrice(skuPrice.getSalePrice());<br><br>            <span class="hljs-comment">//4.3 将购物车商品存入Redis</span><br>            hashOps.put(hashKey, cartInfo);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-购物车列表查询"><a href="#3-4-购物车列表查询" class="headerlink" title="3.4 购物车列表查询"></a>3.4 购物车列表查询</h2><h3 id="3-4-1-需求说明"><a href="#3-4-1-需求说明" class="headerlink" title="3.4.1 需求说明"></a>3.4.1 需求说明</h3><p>当用户在商品详情页面点击<strong>购物车</strong>按钮的时候，那么此时就需要将当前登录用户的所对应的所有的购物车数据在购物车页面展出出来。如下图所示，<strong>当商品价格变化时，页面可以显示实时价格：</strong></p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/1709791602866.png" alt style="zoom: 67%;"><!--<img src="/第3章_购物车/1709791602866.png" alt="" style="zoom: 67%;" />--><p><strong>查看接口文档：</strong></p><p>购物车列表接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/cartList<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-26 16:25:54&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-26 16:25:54&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cartPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-1_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机 黑色 + 8G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;isChecked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>        <span class="hljs-punctuation">&#125;</span><br>        ...<br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-后端业务接口"><a href="#3-4-2-后端业务接口" class="headerlink" title="3.4.2 后端业务接口"></a>3.4.2 后端业务接口</h3><h4 id="1、批量查询商品实时价格"><a href="#1、批量查询商品实时价格" class="headerlink" title="1、批量查询商品实时价格"></a>1、批量查询商品实时价格</h4><p>操作模块：<code>product</code></p><p>（1）ProductController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;批量获取商品sku最新价格信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@PostMapping(value = &quot;/getSkuPriceList&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;SkuPrice&gt;&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Long&gt; skuIdList)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuPriceList(skuIdList));<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(List&lt;Long&gt; skuIdList)</span>;<br></code></pre></td></tr></table></figure><p>（3）ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(List&lt;Long&gt; skuIdList)</span> &#123;<br>    List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;().in(ProductSku::getId, skuIdList).select(ProductSku::getId, ProductSku::getSalePrice));<br>    <span class="hljs-keyword">return</span> productSkuList.stream().map(item -&gt; &#123;<br>        <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuPrice</span>();<br>        skuPrice.setSkuId(item.getId());<br>        skuPrice.setSalePrice(item.getSalePrice());<br>        <span class="hljs-keyword">return</span> skuPrice;<br>    &#125;).collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、批量查询商品实时价格openFeign接口定义"><a href="#2、批量查询商品实时价格openFeign接口定义" class="headerlink" title="2、批量查询商品实时价格openFeign接口定义"></a>2、批量查询商品实时价格openFeign接口定义</h4><p>操作模块：<code>api-product</code></p><p>（1）RemoteProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/product/getSkuPriceList&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;SkuPrice&gt;&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Long&gt; skuIdList, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br></code></pre></td></tr></table></figure><p>（2）RemoteProductFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;List&lt;SkuPrice&gt;&gt; <span class="hljs-title function_">getSkuPriceList</span><span class="hljs-params">(List&lt;Long&gt; skuIdList, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku价格列表失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、CartController"><a href="#3、CartController" class="headerlink" title="3、CartController"></a>3、CartController</h4><p>操作模块：<code>cart</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;查询购物车&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;cartList&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">cartList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> success(cartService.getCartList());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、ICartService"><a href="#4、ICartService" class="headerlink" title="4、ICartService"></a>4、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;CartInfo&gt; <span class="hljs-title function_">getCartList</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="5、CartServiceImpl"><a href="#5、CartServiceImpl" class="headerlink" title="5、CartServiceImpl"></a>5、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;CartInfo&gt; <span class="hljs-title function_">getCartList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCartKey(userId);<br>    <span class="hljs-comment">// 获取数据</span><br>    List&lt;CartInfo&gt; cartInfoList = redisTemplate.opsForHash().values(cartKey);<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(cartInfoList)) &#123;<br>        List&lt;CartInfo&gt; infoList = cartInfoList.stream()<br>            .sorted((o1, o2) -&gt; o2.getCreateTime().compareTo(o1.getCreateTime()))<br>            .collect(Collectors.toList());<br><br>        <span class="hljs-comment">//获取skuId列表</span><br>        List&lt;Long&gt; skuIdList = infoList.stream().map(CartInfo::getSkuId).collect(Collectors.toList());<br>        <span class="hljs-comment">//查询商品的实时价格</span><br>        R&lt;List&lt;SkuPrice&gt;&gt; SkuPriceListResult = remoteProductService.getSkuPriceList(skuIdList, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == SkuPriceListResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(SkuPriceListResult.getMsg());<br>        &#125;<br>        Map&lt;Long, BigDecimal&gt; skuIdToPriceMap = SkuPriceListResult.getData().stream().collect(Collectors.toMap(SkuPrice::getSkuId, SkuPrice::getSalePrice));<br>        <br>        infoList.forEach(item -&gt; &#123;<br>            <span class="hljs-comment">//设置实时价格</span><br>            item.setSkuPrice(skuIdToPriceMap.get(item.getSkuId()));<br>        &#125;);<br>        <span class="hljs-keyword">return</span> infoList ;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-删除购物车商品"><a href="#3-5-删除购物车商品" class="headerlink" title="3.5 删除购物车商品"></a>3.5 删除购物车商品</h2><h3 id="3-5-1-需求说明"><a href="#3-5-1-需求说明" class="headerlink" title="3.5.1 需求说明"></a>3.5.1 需求说明</h3><p>删除功能如图所示：</p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/delete.gif" alt style="zoom:67%;"> <!--<img src="/第3章_购物车/delete.gif" alt="" style="zoom:67%;" /> --><p><strong>查看接口文档：</strong></p><p>删除购物车商品接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/deleteCart/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-5-2-后端业务接口"><a href="#3-5-2-后端业务接口" class="headerlink" title="3.5.2 后端业务接口"></a>3.5.2 后端业务接口</h3><h4 id="1、CartController"><a href="#1、CartController" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;删除购物车商品&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@DeleteMapping(&quot;deleteCart/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">deleteCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;skuId&quot;, description = &quot;商品skuId&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span> &#123;<br>    cartService.deleteCart(skuId);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService"><a href="#2、ICartService" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCart</span><span class="hljs-params">(Long skuId)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl"><a href="#3、CartServiceImpl" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCart</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    <span class="hljs-comment">//获取缓存对象</span><br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    hashOperations.delete(skuId.toString());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-更新选中商品状态"><a href="#3-6-更新选中商品状态" class="headerlink" title="3.6 更新选中商品状态"></a>3.6 更新选中商品状态</h2><h3 id="3-6-1-需求说明"><a href="#3-6-1-需求说明" class="headerlink" title="3.6.1 需求说明"></a>3.6.1 需求说明</h3><p>更新选中商品状态功能如图所示：</p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/check.gif" alt style="zoom:67%;"> <!--<img src="/第3章_购物车/check.gif" alt="" style="zoom:67%;" /> --><p><strong>查看接口文档：</strong></p><p>更新选中商品状态接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/checkCart/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span>/<span class="hljs-punctuation">&#123;</span>isChecked<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-6-2-后端业务接口"><a href="#3-6-2-后端业务接口" class="headerlink" title="3.6.2 后端业务接口"></a>3.6.2 后端业务接口</h3><h4 id="1、CartController-1"><a href="#1、CartController-1" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;更新选中状态&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;checkCart/&#123;skuId&#125;/&#123;isChecked&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">checkCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;skuId&quot;, description = &quot;商品skuId&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(value = &quot;skuId&quot;)</span> Long skuId,</span><br><span class="hljs-params">                            <span class="hljs-meta">@Parameter(name = &quot;isChecked&quot;, description = &quot;是否选中 1:选中 0:取消选中&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(value = &quot;isChecked&quot;)</span> Integer isChecked)</span> &#123;<br>    cartService.checkCart(skuId, isChecked);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService-1"><a href="#2、ICartService-1" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">checkCart</span><span class="hljs-params">(Long skuId, Integer isChecked)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl-1"><a href="#3、CartServiceImpl-1" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkCart</span><span class="hljs-params">(Long skuId, Integer isChecked)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-comment">// 修改缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    <span class="hljs-comment">// 先获取用户选择的商品</span><br>    <span class="hljs-keyword">if</span> (hashOperations.hasKey(skuId.toString())) &#123;<br>        <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfoUpd</span> <span class="hljs-operator">=</span> hashOperations.get(skuId.toString());<br>        <span class="hljs-comment">// cartInfoUpd 写会缓存</span><br>        cartInfoUpd.setIsChecked(isChecked);<br>        <span class="hljs-comment">// 更新缓存</span><br>        hashOperations.put(skuId.toString(), cartInfoUpd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-完成购物车商品的全选"><a href="#3-7-完成购物车商品的全选" class="headerlink" title="3.7 完成购物车商品的全选"></a>3.7 完成购物车商品的全选</h2><h3 id="3-7-1-需求说明"><a href="#3-7-1-需求说明" class="headerlink" title="3.7.1 需求说明"></a>3.7.1 需求说明</h3><p>更新购物车商品全部选中状态功能如图所示：</p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/checkAll.gif" alt style="zoom:67%;"> <!--<img src="/第3章_购物车/checkAll.gif" alt="" style="zoom:67%;" /> --><p><strong>查看接口文档：</strong></p><p>更新购物车商品全部选中状态接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/allCheckCart/<span class="hljs-punctuation">&#123;</span>isChecked<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-7-2-后端业务接口"><a href="#3-7-2-后端业务接口" class="headerlink" title="3.7.2 后端业务接口"></a>3.7.2 后端业务接口</h3><h4 id="1、CartController-2"><a href="#1、CartController-2" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;更新购物车商品全部选中状态&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;allCheckCart/&#123;isChecked&#125;&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">allCheckCart</span><span class="hljs-params">(<span class="hljs-meta">@Parameter(name = &quot;isChecked&quot;, description = &quot;是否选中 1:选中 0:取消选中&quot;, required = true)</span> <span class="hljs-meta">@PathVariable(value = &quot;isChecked&quot;)</span> Integer isChecked)</span>&#123;<br>    cartService.allCheckCart(isChecked);<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService-2"><a href="#2、ICartService-2" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">allCheckCart</span><span class="hljs-params">(Integer isChecked)</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl-2"><a href="#3、CartServiceImpl-2" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allCheckCart</span><span class="hljs-params">(Integer isChecked)</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    BoundHashOperations&lt;String, String, CartInfo&gt; hashOperations = redisTemplate.boundHashOps(cartKey);<br>    List&lt;CartInfo&gt; cartInfoList = hashOperations.values();<br>    <br>    <span class="hljs-comment">//redisTemplate.opsForHash().values(cartKey);</span><br>    cartInfoList.forEach(item -&gt; &#123;<br>        <span class="hljs-type">CartInfo</span> <span class="hljs-variable">cartInfoUpd</span> <span class="hljs-operator">=</span> hashOperations.get(item.getSkuId().toString());<br>        cartInfoUpd.setIsChecked(isChecked);<br><br>        <span class="hljs-comment">// 更新缓存</span><br>        hashOperations.put(item.getSkuId().toString(), cartInfoUpd);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-清空购物车"><a href="#3-8-清空购物车" class="headerlink" title="3.8 清空购物车"></a>3.8 清空购物车</h2><h3 id="3-8-1-需求说明"><a href="#3-8-1-需求说明" class="headerlink" title="3.8.1 需求说明"></a>3.8.1 需求说明</h3><p>清空购物车功能如图所示：</p><img src="/2024/07/20/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC3%E7%AB%A0_%E8%B4%AD%E7%89%A9%E8%BD%A6/clear.gif" alt style="zoom:67%;"> <!--<img src="/第3章_购物车/clear.gif" alt="" style="zoom:67%;" /> --><p><strong>查看接口文档：</strong></p><p>清空购物车接口地址及返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">get /cart/clearCart<br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-8-2-后端业务接口"><a href="#3-8-2-后端业务接口" class="headerlink" title="3.8.2 后端业务接口"></a>3.8.2 后端业务接口</h3><h4 id="1、CartController-3"><a href="#1、CartController-3" class="headerlink" title="1、CartController"></a>1、CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary=&quot;清空购物车&quot;)</span><br><span class="hljs-meta">@RequiresLogin</span><br><span class="hljs-meta">@GetMapping(&quot;clearCart&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">clearCart</span><span class="hljs-params">()</span>&#123;<br>    cartService.clearCart();<br>    <span class="hljs-keyword">return</span> success();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ICartService-3"><a href="#2、ICartService-3" class="headerlink" title="2、ICartService"></a>2、ICartService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCart</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="3、CartServiceImpl-3"><a href="#3、CartServiceImpl-3" class="headerlink" title="3、CartServiceImpl"></a>3、CartServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前登录用户的id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> SecurityContextHolder.getUserId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cartKey</span> <span class="hljs-operator">=</span> getCartKey(userId);<br>    <span class="hljs-comment">//获取缓存对象</span><br>    redisTemplate.delete(cartKey);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2、商品详情</title>
    <link href="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/"/>
    <url>/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章-商品详情"><a href="#第2章-商品详情" class="headerlink" title="第2章 商品详情"></a>第2章 商品详情</h1><h2 id="2-1-商品详情"><a href="#2-1-商品详情" class="headerlink" title="2.1 商品详情"></a>2.1 商品详情</h2><h3 id="2-1-1-需求分析"><a href="#2-1-1-需求分析" class="headerlink" title="2.1.1 需求分析"></a>2.1.1 需求分析</h3><p>需求说明：当点击某一个商品的时候，此时就需要在商品详情页面展示出商品的详情数据，商品详情页所需数据：</p><p>1、商品的基本信息</p><p>2、当前商品sku的基本信息</p><p>3、商品sku最新价格信息</p><p>4、商品详情（详细为图片列表）</p><p>5、商品规格信息</p><p>6、商品库存信息</p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/item.gif" alt style="zoom:50%;"><!--<img src="/第2章_商品详情/item.gif" alt="" style="zoom:50%;" />--><h3 id="2-1-2-接口文档"><a href="#2-1-2-接口文档" class="headerlink" title="2.1.2 接口文档"></a>2.1.2 接口文档</h3><p>商品详情数据接口以及示例数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs json">get  /channel/item/<span class="hljs-punctuation">&#123;</span>skuId<span class="hljs-punctuation">&#125;</span><br>返回结果：<br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;操作成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;productSku&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1_4&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机 黑色 + 8G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;productId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;thumbImg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-1_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;salePrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;marketPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2019.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;costPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1599.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;skuSpec&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;黑色 + 8G&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;volume&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;stockNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;saleNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;product&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米 红米Note10 5G手机&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category1Id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category2Id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category3Id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;unitName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;个&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sliderUrls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;specValue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;auditStatus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;auditMessage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;审批通过&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;brandName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category1Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category2Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;category3Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;productSkuList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detailsimagesUrlList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skuPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;salePrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1999.00</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;marketPrice&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2019.00</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sliderUrlList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-5_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            ...<br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;detailsimagesUrlList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;http://139.198.127.41:9000/20230525/665832167-5_u_1.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            ...<br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;specValueList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;valueList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;白色&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;红色&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;黑色&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;颜色&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;valueList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;8G&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;18G&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;内存&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skuStockVo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;skuId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;availableNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">98</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;saleNum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;skuSpecValueMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;黑色 + 18G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;红色 + 18G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;白色 + 8G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;白色 + 18G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;黑色 + 8G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;红色 + 8G&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-3-获取商品相关信息"><a href="#2-1-3-获取商品相关信息" class="headerlink" title="2.1.3 获取商品相关信息"></a>2.1.3 获取商品相关信息</h3><h4 id="1、远程调用接口开发"><a href="#1、远程调用接口开发" class="headerlink" title="1、远程调用接口开发"></a>1、远程调用接口开发</h4><p>（1）SkuPrice</p><p>操作模块：api-product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuPrice</span> &#123;<br><br>    <span class="hljs-meta">@Schema(description = &quot;skuId&quot;)</span><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-meta">@Schema(description = &quot;售价&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal salePrice;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 市场价</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(description = &quot;市场价&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal marketPrice;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）SkuStockVo</p><p>操作模块：api-product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.api.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuStockVo</span><br>&#123;<br>    <span class="hljs-comment">/** 商品ID */</span><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-comment">/** 可用库存数 */</span><br>    <span class="hljs-keyword">private</span> Integer availableNum;<br><br>    <span class="hljs-comment">/** 销量 */</span><br>    <span class="hljs-keyword">private</span> Integer saleNum;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）ProductController</p><p>操作模块：product</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Operation(summary = &quot;获取商品sku信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getProductSku/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductSku&gt; <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getProductSku(skuId));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getProduct/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getProduct(id));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品sku最新价格信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getSkuPrice/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuPrice(skuId));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品详细信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getProductDetails/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductDetails&gt; <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getProductDetails(id));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品sku规则详细信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getSkuSpecValue/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String, Long&gt;&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuSpecValue(id));<br>&#125;<br><br><span class="hljs-meta">@Operation(summary = &quot;获取商品sku库存信息&quot;)</span><br><span class="hljs-meta">@InnerAuth</span><br><span class="hljs-meta">@GetMapping(value = &quot;/getSkuStock/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuStockVo&gt; <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> R.ok(productService.getSkuStock(skuId));<br>&#125;<br></code></pre></td></tr></table></figure><p>（4）IProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ProductSku <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId)</span>;<br><br>Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(Long id)</span>;<br><br>SkuPrice <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(Long skuId)</span>;<br><br>ProductDetails <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(Long id)</span>;<br><br>Map&lt;String, Long&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(Long id)</span>;<br><br>SkuStockVo <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(Long skuId)</span>;<br></code></pre></td></tr></table></figure><p>（5）ProductServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ProductSku <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-keyword">return</span> productSkuMapper.selectById(skuId);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> productMapper.selectById(id);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SkuPrice <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;().eq(ProductSku::getId, skuId).select(ProductSku::getSalePrice, ProductSku::getMarketPrice));<br>    <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuPrice</span>();<br>    BeanUtils.copyProperties(productSku, skuPrice);<br>    <span class="hljs-keyword">return</span> skuPrice;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ProductDetails <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-keyword">return</span> productDetailsMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductDetails&gt;().eq(ProductDetails::getProductId, id));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Map&lt;String, Long&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(Long id)</span> &#123;<br>    List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;().eq(ProductSku::getProductId, id).select(ProductSku::getId, ProductSku::getSkuSpec));<br>    <br>    Map&lt;String,Long&gt; skuSpecValueMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    productSkuList.forEach(item -&gt; &#123;<br>        skuSpecValueMap.put(item.getSkuSpec(), item.getId());<br>    &#125;);<br>    <span class="hljs-keyword">return</span> skuSpecValueMap;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SkuStockVo <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-type">SkuStock</span> <span class="hljs-variable">skuStock</span> <span class="hljs-operator">=</span> skuStockMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;SkuStock&gt;().eq(SkuStock::getSkuId, skuId));<br>    <span class="hljs-type">SkuStockVo</span> <span class="hljs-variable">skuStockVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkuStockVo</span>();<br>    BeanUtils.copyProperties(skuStock, skuStockVo);<br>    <span class="hljs-keyword">return</span> skuStockVo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、openFeign接口定义"><a href="#2、openFeign接口定义" class="headerlink" title="2、openFeign接口定义"></a>2、openFeign接口定义</h4><p>操作模块：api-product</p><p>（1）RemoteProductService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/product/getProductSku/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductSku&gt; <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getProduct/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getSkuPrice/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getProductDetails/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;ProductDetails&gt; <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getSkuSpecValue/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String, Long&gt;&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/product/getSkuStock/&#123;skuId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> R&lt;SkuStockVo&gt; <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;skuId&quot;)</span> Long skuId, <span class="hljs-meta">@RequestHeader(SecurityConstants.FROM_SOURCE)</span> String source)</span>;<br></code></pre></td></tr></table></figure><p><strong>说明：将product模块Product、ProductDetails实体类移取到api-product模块</strong></p><p>（2）RemoteProductFallbackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;ProductSku&gt; <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品信息失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;SkuPrice&gt; <span class="hljs-title function_">getSkuPrice</span><span class="hljs-params">(Long skuId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku价格失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;ProductDetails&gt; <span class="hljs-title function_">getProductDetails</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品详情失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String, Long&gt;&gt; <span class="hljs-title function_">getSkuSpecValue</span><span class="hljs-params">(Long id, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku规格失败:&quot;</span> + throwable.getMessage());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> R&lt;SkuStockVo&gt; <span class="hljs-title function_">getSkuStock</span><span class="hljs-params">(Long skuId, String source)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.fail(<span class="hljs-string">&quot;获取商品sku库存失败:&quot;</span> + throwable.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-4-业务接口开发"><a href="#2-1-4-业务接口开发" class="headerlink" title="2.1.4 业务接口开发"></a>2.1.4 业务接口开发</h3><h4 id="1、ItemController"><a href="#1、ItemController" class="headerlink" title="1、ItemController"></a>1、ItemController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;商品详情接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/item&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IItemService itemService;<br><br>    <span class="hljs-meta">@Operation(summary = &quot;商品详情&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;skuId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">item</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long skuId)</span> &#123;<br>        <span class="hljs-keyword">return</span> success(itemService.item(skuId));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ItemVo"><a href="#2、ItemVo" class="headerlink" title="2、ItemVo"></a>2、ItemVo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.channel.domain;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(description = &quot;商品详情对象&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemVo</span> &#123;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品sku信息&quot;)</span><br>   <span class="hljs-keyword">private</span> ProductSku productSku;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品信息&quot;)</span><br>   <span class="hljs-keyword">private</span> Product product;<br><br>   <span class="hljs-meta">@Schema(description = &quot;最新价格信息&quot;)</span><br>   <span class="hljs-keyword">private</span> SkuPrice skuPrice;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品轮播图列表&quot;)</span><br>   <span class="hljs-keyword">private</span> List&lt;String&gt; sliderUrlList;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品详情图片列表&quot;)</span><br>   <span class="hljs-keyword">private</span> List&lt;String&gt; detailsimagesUrlList;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品规格信息&quot;)</span><br>   <span class="hljs-keyword">private</span> JSONArray specValueList;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品库存信息&quot;)</span><br>   <span class="hljs-keyword">private</span> SkuStockVo skuStockVo;<br><br>   <span class="hljs-meta">@Schema(description = &quot;商品规格对应商品skuId信息&quot;)</span><br>   <span class="hljs-keyword">private</span> Map&lt;String,Long&gt; skuSpecValueMap;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、IItemService"><a href="#3、IItemService" class="headerlink" title="3、IItemService"></a>3、IItemService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IItemService</span> &#123;<br>    ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、ItemServiceImpl"><a href="#4、ItemServiceImpl" class="headerlink" title="4、ItemServiceImpl"></a>4、ItemServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.service.impl;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ItemServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IItemService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RemoteProductService remoteProductService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span> &#123;<br>        <span class="hljs-type">ItemVo</span> <span class="hljs-variable">itemVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemVo</span>();<br><br>        <span class="hljs-comment">//获取sku信息</span><br>        R&lt;ProductSku&gt; productSkuResult = remoteProductService.getProductSku(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productSkuResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productSkuResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuResult.getData();<br>        itemVo.setProductSku(productSku);<br><br>        <span class="hljs-comment">//获取商品信息</span><br>        R&lt;Product&gt; productResult = remoteProductService.getProduct(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productResult.getData();<br>        itemVo.setProduct(product);<br>        itemVo.setSliderUrlList(Arrays.asList(product.getSliderUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br>        itemVo.setSpecValueList(JSON.parseArray(product.getSpecValue()));<br><br>        <span class="hljs-comment">//获取商品最新价格</span><br>        R&lt;SkuPrice&gt; skuPriceResult = remoteProductService.getSkuPrice(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuPriceResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> skuPriceResult.getData();<br>        itemVo.setSkuPrice(skuPrice);<br><br>        <span class="hljs-comment">//获取商品详情</span><br>        R&lt;ProductDetails&gt; productDetailsResult = remoteProductService.getProductDetails(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productDetailsResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productDetailsResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductDetails</span> <span class="hljs-variable">productDetails</span> <span class="hljs-operator">=</span> productDetailsResult.getData();<br>        itemVo.setDetailsimagesUrlList(Arrays.asList(productDetails.getimagesUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br><br>        <span class="hljs-comment">//获取商品规格对应商品skuId信息</span><br>        R&lt;Map&lt;String, Long&gt;&gt; skuSpecValueResult = remoteProductService.getSkuSpecValue(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuSpecValueResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuSpecValueResult.getMsg());<br>        &#125;<br>        Map&lt;String, Long&gt; skuSpecValueMap = skuSpecValueResult.getData();<br>        itemVo.setSkuSpecValueMap(skuSpecValueMap);<br><br>        <span class="hljs-comment">//获取商品库存信息</span><br>        R&lt;SkuStockVo&gt; skuStockResult = remoteProductService.getSkuStock(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuStockResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuStockResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuStockVo</span> <span class="hljs-variable">skuStockVo</span> <span class="hljs-operator">=</span> skuStockResult.getData();<br>        itemVo.setSkuStockVo(skuStockVo);<br><br>        <span class="hljs-keyword">return</span> itemVo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、接口测试"><a href="#5、接口测试" class="headerlink" title="5、接口测试"></a>5、接口测试</h4><p>测试方向：</p><p>1、后端接口单独测试</p><p>2、配合前端项目测试</p><h2 id="2-2-商品详情页面优化"><a href="#2-2-商品详情页面优化" class="headerlink" title="2.2 商品详情页面优化"></a>2.2 商品详情页面优化</h2><h3 id="2-2-1-思路"><a href="#2-2-1-思路" class="headerlink" title="2.2.1 思路"></a>2.2.1 思路</h3><p>虽然咱们实现了页面需要的功能，但是考虑到该页面是被用户高频访问的，所以性能需要优化。一般一个系统最大的性能瓶颈，就是数据库的io操作。从数据库入手也是调优性价比最高的切入点。</p><p>一般分为两个层面：</p><ul><li>一是提高数据库sql本身的性能</li><li>二是尽量避免直接查询数据库。</li></ul><p>重点要讲的是另外一个层面：尽量避免直接查询数据库。</p><p>解决办法就是：<strong>缓存</strong></p><h3 id="2-2-2-缓存常见问题"><a href="#2-2-2-缓存常见问题" class="headerlink" title="2.2.2 缓存常见问题"></a>2.2.2 缓存常见问题</h3><p>缓存最常见的4个问题： 面试</p><ol><li>缓存穿透</li><li>缓存雪崩</li><li>缓存击穿</li><li>数据一致性</li></ol><p><strong>缓存穿透</strong>: 是指查询一个不存在的数据，由于缓存无法命中，将去查询数据库，但是数据库也无此记录，并且出于容错考虑，我们没有将这次查询的null写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><ul><li><p>解决1 ：空结果也进行缓存，但它的过期时间会很短，最长不超过五分钟，但是不能防止随机穿透。</p></li><li><p>解决2 ：使用布隆过滤器或者Redis的Bitmap来解决随机穿透问题</p></li></ul><h6 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h6><p>一种高效的概率型数据结构，用于判断一个元素是否在一个集合中</p><h6 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h6><p>一种高效率的判断数据是否存在的数据结构，适用于大量布尔值类型数据，适合数据范围已知且唯一的场景</p><p><strong>缓存雪崩</strong>:是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><ul><li><p>解决1：原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li><li><p>解决2：如果单节点宕机，可以采用集群部署方式防止雪崩</p></li></ul><p><strong>缓存击穿</strong>: 是指对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：如果这个key在大量请求同时进来之前正好失效，那么所有对这个key的数据查询都落到db，我们称为缓存击穿。</p><p>与缓存雪崩的区别：</p><ol><li>击穿是一个热点key失效</li><li>雪崩是很多key集体失效</li></ol><ul><li>解决：锁</li></ul><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps2.jpg" alt style="zoom: 50%;"> <!--<img src="/第2章_商品详情/wps2.jpg" alt="" style="zoom: 50%;" />  --><p><strong>数据一致性</strong>：在当前环境下，通常我们会首选redis缓存来减轻我们数据库访问压力。但是也会遇到以下这种情况：大量用户来访问我们系统，首先会去查询缓存， 如果缓存中没有数据，则去查询数据库，然后更新数据到缓存中，并且如果数据库中的数据发生了改变则需要同步到redis中，同步过程中需要保证 MySQL与redis数据一致性问题</p><ul><li>解决1：使用延时双删策略</li></ul><p>延时双删策略是一种常见的保证MySQL和Redis数据一致性的方法。其主要流程包括：先删除缓存，然后更新数据库。这个过程完成后，大约在数据库从库更新后再次删除缓存。具体的步骤如下：</p><p>第一步，先执行redis.del(key)操作删除缓存；</p><p>第二步，然后执行写数据库的操作；</p><p>第三步，休眠一段时间（例如500毫秒），根据具体的业务时间来定；</p><p>第四步，再次执行redis.del(key)操作删除缓存。</p><p>延时双删策略通过这种方式尝试达到最终的数据一致性，但是这并不是强一致性，因为MySQL和Redis主从节点数据的同步并不是实时的，所以需要等待一段时间以增强它们的数据一致性。同时，由于读写是并发的，可能出现缓存和数据库数据不一致的问题</p><ul><li>解决2：使用canal解决</li></ul><h2 id="2-3-数据一致性-延时双删策略"><a href="#2-3-数据一致性-延时双删策略" class="headerlink" title="2.3 数据一致性-延时双删策略"></a>2.3 数据一致性-延时双删策略</h2><h3 id="2-3-1-问题分析"><a href="#2-3-1-问题分析" class="headerlink" title="2.3.1 问题分析"></a>2.3.1 问题分析</h3><p>在查询商品详情数据时，为避免频繁io，提高查询效率，在详情数据获取的同时，利用缓存机制，将详情数据存储到redis实现的缓存机制中，但带来效率提升的同时也带来了问题，就是如果在商品修改之后，因为业务数据更新等原因，对于mysql中商品原数据进行了修改，将导致redis中缓存数据和mysql中原始数据不一致的问题，这里可以使用<strong>延迟双删</strong>来保证缓存与数据库数据一致性！</p><h3 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h3><p>在ProductServiceImpl类的修改商品方法添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(Product product)</span> &#123;<br>    <span class="hljs-comment">//1 删除缓存</span><br>    List&lt;Long&gt; skuIdList =  product.getProductSkuList().stream()<br>        .map(ProductSku::getId).collect(Collectors.toList());<br>    skuIdList.forEach(skuId -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:&quot;</span> + skuId;<br>        <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>    &#125;);<br><br>    <span class="hljs-comment">//2 之前的业务代码，执行更新商品操作.....</span><br><br><br>    <span class="hljs-comment">//3 休眠一段时间</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <br>    <span class="hljs-comment">//4 再次执行操作删除缓存</span><br>    skuIdList.forEach(skuId -&gt; &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:&quot;</span> + skuId;<br>        <span class="hljs-built_in">this</span>.redisTemplate.delete(dataKey);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-分布式锁"><a href="#2-4-分布式锁" class="headerlink" title="2.4 分布式锁"></a>2.4 分布式锁</h2><h3 id="2-4-1-本地锁的局限性"><a href="#2-4-1-本地锁的局限性" class="headerlink" title="2.4.1 本地锁的局限性"></a>2.4.1 本地锁的局限性</h3><p>之前，我们学习过synchronized 及lock锁，这些锁都是本地锁。接下来写一个案例，演示本地锁的问题</p><h4 id="1、编写测试代码"><a href="#1、编写测试代码" class="headerlink" title="1、编写测试代码"></a>1、编写测试代码</h4><p>在<code>product</code>中新建TestController中添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.controller;<br><br><span class="hljs-meta">@Tag(name = &quot;测试接口&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;testLock&quot;)</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>        testService.testLock();<br>        <span class="hljs-keyword">return</span> AjaxResult.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestService</span> &#123;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.product.service.impl;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestService</span> &#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 查询Redis中的num值</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String)<span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>      <span class="hljs-comment">// 没有该值return</span><br>      <span class="hljs-keyword">if</span> (StringUtils.isBlank(value))&#123;<br>         <span class="hljs-keyword">return</span> ;<br>      &#125;<br>      <span class="hljs-comment">// 有值就转成成int</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>      <span class="hljs-comment">// 把Redis中的num值+1</span><br>      <span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：通过reids客户端设置num&#x3D;0</p><p>重启<code>product</code>服务</p><h4 id="2、使用工具测试"><a href="#2、使用工具测试" class="headerlink" title="2、使用工具测试"></a>2、使用工具测试</h4><p>第一步：安装jmeter工具</p><p>第二步：配置网关并重启网关</p><p>配置本地锁测试接口为白名单</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 不校验白名单</span><br><span class="hljs-attr">ignore:</span><br>  <span class="hljs-attr">whites:</span><br>   <span class="hljs-string">...省略</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/product/test/**</span><br></code></pre></td></tr></table></figure><p><strong>重启网关</strong></p><p>第三步：测试</p><p><strong>注意：将Windows防火墙关闭！！！！！！！！！！</strong></p><ul><li>使用jmeter工具压力测试：并发100</li></ul><p>查看Redis中的结果：</p><p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/image-9578.png"></p><h4 id="3、使用本地锁"><a href="#3、使用本地锁" class="headerlink" title="3、使用本地锁"></a>3、使用本地锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">// 查询Redis中的num值</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String)<span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>   <span class="hljs-comment">// 没有该值return</span><br>   <span class="hljs-keyword">if</span> (StringUtils.isBlank(value))&#123;<br>      <span class="hljs-keyword">return</span> ;<br>   &#125;<br>   <span class="hljs-comment">// 有值就转成成int</span><br>   <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>   <span class="hljs-comment">// 把Redis中的num值+1</span><br>   <span class="hljs-built_in">this</span>.stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用jmeter工具压力测试：并发100</li></ul><h4 id="4、本地锁问题演示"><a href="#4、本地锁问题演示" class="headerlink" title="4、本地锁问题演示"></a>4、本地锁问题演示</h4><p>接下来<code>product</code>启动9205 9215 9225三个运行实例：</p><p>第一步：拷贝配置</p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528122174.png" alt style="zoom:50%;"><!--<img src="/第2章_商品详情/1709528122174.png" alt="" style="zoom:50%;" />--><p>第二步：修改端口</p><p><strong>选择vm options</strong></p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528275403.png" alt style="zoom:50%;"><!--<img src="/第2章_商品详情/1709528275403.png" alt="" style="zoom:50%;" />->**添加命令行参数:** <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">-<span class="hljs-type">Dserver</span>.<span class="hljs-keyword">port</span>=9215<br></code></pre></td></tr></table></figure><img src="1709528467470.png" alt="" style="zoom:50%;" /><!--<img src="/第2章_商品详情/1709528467470.png" alt="" style="zoom:50%;" />--><p><strong>同样的，再复制并配置一个实例，端口为9525</strong></p><p>第三步：启动product的三个实例</p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/1709528694339.png" alt style="zoom:67%;"><!--<img src="/第2章_商品详情/1709528694339.png" alt="" style="zoom:67%;" />--><p>第四步：通过网关压力测试本地锁</p><p>以上测试，可以发现：</p><p>本地锁只能锁住同一工程内的资源，在分布式系统里面都存在局限性。</p><p>此时需要分布式锁。</p><h3 id="2-4-2-分布式锁实现的解决方案"><a href="#2-4-2-分布式锁实现的解决方案" class="headerlink" title="2.4.2 分布式锁实现的解决方案"></a>2.4.2 分布式锁实现的解决方案</h3><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li>基于数据库实现分布式锁</li><li>基于缓存（ Redis等）</li><li>基于Zookeeper</li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li>高性能：Redis最高</li><li>可靠性：zookeeper最高</li></ol><p>因为Redis具备高性能、高可用、高并发的特性，这里，我们就基于Redis实现分布式锁。</p><p> 分布式锁的关键是**多进程共享的内存标记(锁)**，因此只要我们在Redis中放置一个这样的标记(数据)就可以了。不过在实现过程中，不要忘了我们需要实现下列目标：</p><ul><li><strong>多进程可见</strong>：多进程可见，否则就无法实现分布式效果</li><li><strong>避免死锁</strong>：死锁的情况有很多，我们要思考各种异常导致死锁的情况，保证锁可以被释放</li><li><strong>排它</strong>：同一时刻，只能有一个进程获得锁</li><li><strong>高可用</strong>：避免锁服务宕机或处理好宕机的补救措施(redis集群架构：1.主从复制 2.哨兵 3.cluster集群)</li></ul><p>分布式锁使用的逻辑如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">尝试获取锁<br>成功：执行业务代码    <br>执行业务  <br><span class="hljs-keyword">try</span>&#123;<br>获取锁<br>业务代码-宕机<br>&#125; <span class="hljs-keyword">catch</span>()&#123;<br><br>&#125;<span class="hljs-keyword">finally</span>&#123; <br>释放锁<br>&#125;<br> 失败：等待；<br></code></pre></td></tr></table></figure><h3 id="2-4-3-使用Redis实现分布式锁"><a href="#2-4-3-使用Redis实现分布式锁" class="headerlink" title="2.4.3 使用Redis实现分布式锁"></a>2.4.3 使用Redis实现分布式锁</h3><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps10.jpg" alt style="zoom:67%;"><!--<img src="/第2章_商品详情/wps10.jpg" alt="" style="zoom:67%;" />--><ol><li>多个客户端同时获取锁（setnx）</li><li>获取成功，执行业务逻辑：从db获取数据，放入缓存，执行完成释放锁（del）</li><li>其他客户端等待重试</li></ol><h4 id="1、分布式锁初版"><a href="#1、分布式锁初版" class="headerlink" title="1、分布式锁初版"></a>1、分布式锁初版</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 采用SpringDataRedis实现分布式锁</span><br><span class="hljs-comment"> * 原理：执行业务方法前先尝试获取锁（setnx存入key val），如果获取锁成功再执行业务代码，业务执行完毕后将锁释放(del key)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-string">&quot;lock&quot;</span>);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-comment">//获取锁成功，执行业务代码</span><br>        <span class="hljs-comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>        <span class="hljs-comment">//2.如果值为空则非法直接返回即可</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(value)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.对num值进行自增加一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br><br>        <span class="hljs-comment">//4.将锁释放</span><br>        stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>);<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            <span class="hljs-built_in">this</span>.testLock();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启，服务集群，通过网关压力测试：</p><p>基本实现。</p><p><strong>问题：</strong>setnx刚好获取到锁，业务逻辑出现异常，导致锁无法释放</p><p>解决：设置过期时间，自动释放锁。</p><h4 id="2、优化之设置锁的过期时间"><a href="#2、优化之设置锁的过期时间" class="headerlink" title="2、优化之设置锁的过期时间"></a>2、优化之设置锁的过期时间</h4><p>设置过期时间有两种方式：</p><ol><li>首先想到通过expire设置过期时间（缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放）</li><li>在set时指定过期时间（推荐）</li></ol><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps13-17271638201541.jpg" alt style="zoom:67%;"> <!--<img src="/第2章_商品详情/wps13-17271638201541.jpg" alt="" style="zoom:67%;" /> --><p>设置过期时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-string">&quot;lock&quot;</span>, <span class="hljs-number">3</span>, TimeUnit.SECONDS); <br></code></pre></td></tr></table></figure><p>压力测试肯定也没有问题。自行测试</p><p>问题：可能会释放其他服务器的锁。</p><p>场景：如果业务逻辑的执行时间是7s。执行流程如下</p><ol><li><p>index1业务逻辑没执行完，3秒后锁被自动释放。</p></li><li><p>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p></li><li><p>index3获取到锁，执行业务逻辑</p><p>. index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。</p></li></ol><p>最终等于没锁的情况。</p><p>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p><h4 id="3、优化之UUID防误删"><a href="#3、优化之UUID防误删" class="headerlink" title="3、优化之UUID防误删"></a>3、优化之UUID防误删</h4><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps15.jpg" alt style="zoom:67%;"> <!--<img src="/第2章_商品详情/wps15.jpg" alt="" style="zoom:67%;" /> --><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, uuid, <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-comment">//获取锁成功，执行业务代码</span><br>        <span class="hljs-comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>        <span class="hljs-comment">//2.如果值为空则非法直接返回即可</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(value)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.对num值进行自增加一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br><br>        <span class="hljs-comment">//4.将锁释放</span><br>        <span class="hljs-keyword">if</span>(uuid.equals((String)stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;lock&quot;</span>))) &#123;<br>            stringRedisTemplate.delete(<span class="hljs-string">&quot;lock&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            <span class="hljs-built_in">this</span>.testLock();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>问题：</strong>删除操作缺乏原子性。</p><p>场景：</p><p>​1、index1执行删除时，查询到的lock值确实和uuid相等</p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps17.jpg" alt style="zoom:67%;"> <!--<img src="/第2章_商品详情/wps17.jpg" alt="" style="zoom:67%;" /> --><p>​2、index1执行删除前，lock刚好过期时间已到，被Redis自动释放，在Redis中没有了锁。</p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps18.jpg" alt style="zoom: 67%;"><!--<img src="/第2章_商品详情/wps18.jpg" alt="" style="zoom: 67%;" /> --><p>​3、index2获取了lock,index2线程获取到了cpu的资源，开始执行方法</p><p>​4、index1执行删除，此时会把index2的lock删除。</p><p>index1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，开始执行</p><img src="/2024/07/10/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC2%E7%AB%A0_%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85/wps19.jpg" alt style="zoom:67%;"> <!--<img src="/第2章_商品详情/wps19.jpg" alt="" style="zoom:67%;" /> --><p>删除了index2的锁！</p><h4 id="4、优化之LUA脚本保证删除的原子性"><a href="#4、优化之LUA脚本保证删除的原子性" class="headerlink" title="4、优化之LUA脚本保证删除的原子性"></a>4、优化之LUA脚本保证删除的原子性</h4><p>释放锁的LUA脚本：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>] <span class="hljs-keyword">then</span> <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>redis java客户端使用LUA脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过execute可以执行LUA脚本，参数1：脚本字符串，参数2：脚本返回值类型,参数3：keys列表，参数4：argv列表</span><br>stringRedisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;(script , Boolean.class),list,args...)<br></code></pre></td></tr></table></figure><p>使用LUA脚本优化分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 采用SpringDataRedis实现分布式锁</span><br><span class="hljs-comment"> * 原理：执行业务方法前先尝试获取锁（setnx存入key val），如果获取锁成功再执行业务代码，业务执行完毕后将锁释放(del key)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">//0.先尝试获取锁 setnx key val</span><br>    <span class="hljs-comment">//问题：锁可能存在线程间相互释放</span><br>    <span class="hljs-comment">//Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(&quot;lock&quot;, &quot;lock&quot;, 10, TimeUnit.SECONDS);</span><br>    <span class="hljs-comment">//解决：锁值设置为uuid</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;lock&quot;</span>, uuid, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br><br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        <span class="hljs-comment">//获取锁成功，执行业务代码</span><br>        <span class="hljs-comment">//1.先从redis中通过key num获取值  key提前手动设置 num 初始值：0</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;num&quot;</span>);<br>        <span class="hljs-comment">//2.如果值为空则非法直接返回即可</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(value)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//3.对num值进行自增加一</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(value);<br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;num&quot;</span>, String.valueOf(++num));<br><br>        <span class="hljs-comment">//4.将锁释放 判断uuid</span><br>        <span class="hljs-comment">//问题：删除操作缺乏原子性。</span><br>        <span class="hljs-comment">//if(uuid.equals(stringRedisTemplate.opsForValue().get(&quot;lock&quot;)))&#123; //线程一：判断是满足是当前线程锁的值</span><br>        <span class="hljs-comment">//    //条件满足，此时锁正好到期，redis锁自动释放了线程2获取锁成功，线程1将线程2的锁删除</span><br>        <span class="hljs-comment">//    stringRedisTemplate.delete(&quot;lock&quot;);</span><br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//解决：redis执行lua脚本保证原子，lua脚本执行会作为一个整体执行</span><br><br>        <span class="hljs-comment">//执行脚本参数 参数1：脚本对象封装lua脚本，参数二：lua脚本中需要key参数（KEYS[i]）  参数三：lua脚本中需要参数值 ARGV[i]</span><br>        <span class="hljs-comment">//4.1 先创建脚本对象 DefaultRedisScript泛型脚本语言返回值类型 Long 0：失败 1：成功</span><br>        DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        <span class="hljs-comment">//4.2设置脚本文本</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>                <span class="hljs-string">&quot;then\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>                <span class="hljs-string">&quot;else\n&quot;</span> +<br>                <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>                <span class="hljs-string">&quot;end&quot;</span>;<br>        redisScript.setScriptText(script);<br>        <span class="hljs-comment">//4.3 设置响应类型</span><br>        redisScript.setResultType(Long.class);<br>        stringRedisTemplate.execute(redisScript, Arrays.asList(<span class="hljs-string">&quot;lock&quot;</span>), uuid);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//睡眠</span><br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            <span class="hljs-comment">//自旋重试</span><br>            <span class="hljs-built_in">this</span>.testLock();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-4-分布式锁总结"><a href="#2-4-4-分布式锁总结" class="headerlink" title="2.4.4 分布式锁总结"></a>2.4.4 分布式锁总结</h3><p>为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下几个条件：</p><ul><li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p></li><li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li><li><p>加锁和解锁必须具有原子性。</p></li></ul><h3 id="2-4-5-改造获取商品详情信息"><a href="#2-4-5-改造获取商品详情信息" class="headerlink" title="2.4.5 改造获取商品详情信息"></a>2.4.5 改造获取商品详情信息</h3><p>操作模块：<code>product</code></p><p>操作类：com.product.service.impl.ProductServiceImpl#getProductSku</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 根据SkuID查询SKU商品信息</span><br><span class="hljs-comment"> * @param skuId</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ProductSku <span class="hljs-title function_">getProductSku</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//1.优先从缓存中获取数据</span><br>        <span class="hljs-comment">//1.1 构建业务数据Key 形式：前缀+业务唯一标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:&quot;</span> + skuId;<br>        <span class="hljs-comment">//1.2 查询Redis获取业务数据</span><br>        <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> (ProductSku) redisTemplate.opsForValue().get(dataKey);<br>        <span class="hljs-comment">//1.3 命中缓存则直接返回</span><br>        <span class="hljs-keyword">if</span> (productSku != <span class="hljs-literal">null</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;命中缓存，直接返回，线程ID：&#123;&#125;，线程名称：&#123;&#125;&quot;</span>, Thread.currentThread().getId(), Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> productSku;<br>        &#125;<br>        <span class="hljs-comment">//2.尝试获取分布式锁（set k v ex nx可能获取锁失败）</span><br>        <span class="hljs-comment">//2.1 构建锁key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;product:sku:lock:&quot;</span> + skuId;<br>        <span class="hljs-comment">//2.2 采用UUID作为线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockVal</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">//2.3 利用Redis提供set nx ex 获取分布式锁</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().setIfAbsent(lockKey, lockVal, <span class="hljs-number">5</span>, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-comment">//3.获取锁成功执行业务,将查询业务数据放入缓存Redis</span><br>            log.info(<span class="hljs-string">&quot;获取锁成功：&#123;&#125;，线程名称：&#123;&#125;&quot;</span>, Thread.currentThread().getId(), Thread.currentThread().getName());<br>            <span class="hljs-keyword">try</span> &#123;<br>                productSku = <span class="hljs-built_in">this</span>.getProductSkuFromDB(skuId);<br>                <span class="hljs-type">long</span> <span class="hljs-variable">ttl</span> <span class="hljs-operator">=</span> productSku == <span class="hljs-literal">null</span> ? <span class="hljs-number">1</span> * <span class="hljs-number">60</span> : <span class="hljs-number">10</span> * <span class="hljs-number">60</span>;<br>                redisTemplate.opsForValue().set(dataKey, productSku, ttl, TimeUnit.SECONDS);<br>                <span class="hljs-keyword">return</span> productSku;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//4.业务执行完毕释放锁</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">scriptText</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1]\n&quot;</span> +<br>                    <span class="hljs-string">&quot;then\n&quot;</span> +<br>                    <span class="hljs-string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +<br>                    <span class="hljs-string">&quot;else\n&quot;</span> +<br>                    <span class="hljs-string">&quot;    return 0\n&quot;</span> +<br>                    <span class="hljs-string">&quot;end&quot;</span>;<br>                DefaultRedisScript&lt;Long&gt; redisScript = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>                redisScript.setScriptText(scriptText);<br>                redisScript.setResultType(Long.class);<br>                redisTemplate.execute(redisScript, Arrays.asList(lockKey), lockVal);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//5.获取锁失败则自旋（业务要求必须执行）</span><br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            log.error(<span class="hljs-string">&quot;获取锁失败，自旋：&#123;&#125;，线程名称：&#123;&#125;&quot;</span>, Thread.currentThread().getId(), Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getProductSku(skuId);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">//兜底处理方案：Redis服务有问题，将业务数据获取自动从数据库获取</span><br>        log.error(<span class="hljs-string">&quot;[商品服务]查询商品信息异常：&#123;&#125;&quot;</span>, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getProductSkuFromDB(skuId);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> ProductSku <span class="hljs-title function_">getProductSkuFromDB</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-keyword">return</span> productSkuMapper.selectById(skuId);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-Redis的Bitmap解决缓存穿透"><a href="#2-5-Redis的Bitmap解决缓存穿透" class="headerlink" title="2.5 Redis的Bitmap解决缓存穿透"></a>2.5 Redis的Bitmap解决缓存穿透</h2><h3 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1 概述"></a>2.5.1 概述</h3><p>Redis 的 Bitmap（位图）是一种特殊的字符串数据类型，它利用字符串类型键（key）来存储一系列连续的二进制位（bits），每个位可以独立地表示一个布尔值（0 或 1）。这种数据结构非常适合用于存储和操作大量二值状态的数据，尤其在需要高效空间利用率和特定位操作场景中表现出色。</p><h3 id="2-5-2-常见操作命令"><a href="#2-5-2-常见操作命令" class="headerlink" title="2.5.2 常见操作命令"></a>2.5.2 常见操作命令</h3><ul><li><code>setbit key offset value</code>：设置或清除指定偏移量上的位（bit）。<code>offset</code> 是从0开始的位索引，<code>value</code> 可以为 0 或 1。</li><li><code>getbit key offset</code>：返回指定偏移量上的位值。</li></ul><h3 id="2-5-3-整合"><a href="#2-5-3-整合" class="headerlink" title="2.5.3 整合"></a>2.5.3 整合</h3><h4 id="1、初始化数据"><a href="#1、初始化数据" class="headerlink" title="1、初始化数据"></a>1、初始化数据</h4><p>在<code>product</code> 模块的启动类中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCustomConfig</span><br><span class="hljs-meta">@EnableRyFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductApplication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProductApplication.class,args);<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductSkuMapper productSkuMapper;<br><br>    <span class="hljs-comment">//商品功能</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:product:data&quot;</span>;<br>        <span class="hljs-comment">//查询mysql里面商品skuId</span><br>        List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="hljs-literal">null</span>);<br>        productSkuList.forEach(item -&gt; &#123;<br>            <span class="hljs-comment">//为了测试，添加到redis里面</span><br>            redisTemplate.opsForValue().setBit(key,item.getId(),<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、sku加入Bitmap"><a href="#2、sku加入Bitmap" class="headerlink" title="2、sku加入Bitmap"></a>2、sku加入Bitmap</h4><p>商品上架时将数据添加到Bitmap中</p><p>操作：ProductServiceImpl.updateStatus方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStatus</span><span class="hljs-params">(Long id, Integer status)</span> &#123;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    product.setId(id);<br>    <span class="hljs-keyword">if</span>(status == <span class="hljs-number">1</span>) &#123;<br>        product.setStatus(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:product:data&quot;</span>;<br>        List&lt;ProductSku&gt; productSkuList = productSkuMapper<br>                .selectList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;ProductSku&gt;()<br>                        .eq(ProductSku::getProductId, id));<br>        productSkuList.forEach(item -&gt; &#123;<br>            redisTemplate.opsForValue().setBit(key,item.getId(),<span class="hljs-literal">true</span>);<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        product.setStatus(-<span class="hljs-number">1</span>);<br>    &#125;<br>    productMapper.updateById(product);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、sku详情页添加Bitmap"><a href="#3、sku详情页添加Bitmap" class="headerlink" title="3、sku详情页添加Bitmap"></a>3、sku详情页添加Bitmap</h4><p>操作模块：<code>channel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">//远程调用商品微服务接口之前 提前知道用户访问商品SKUID是否存在于bitmap中</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sku:product:data&quot;</span>;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().getBit(key, skuId);<br>        <span class="hljs-keyword">if</span> (!flag) &#123;<br>            log.error(<span class="hljs-string">&quot;用户查询商品sku不存在：&#123;&#125;&quot;</span>, skuId);<br>            <span class="hljs-comment">//查询数据不存在直接返回空对象</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;用户查询商品sku不存在&quot;</span>);<br>        &#125;<br> ...   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-异步编排"><a href="#2-6-异步编排" class="headerlink" title="2.6 异步编排"></a>2.6 异步编排</h2><h3 id="2-6-1-问题分析"><a href="#2-6-1-问题分析" class="headerlink" title="2.6.1 .问题分析"></a>2.6.1 .问题分析</h3><p>问题：查询商品详情页的逻辑非常复杂，数据的获取都需要远程调用，必然需要花费更多的时间。</p><p>假如商品详情页的每个查询，需要如下标注的时间才能完成</p><ol><li>获取sku的基本信息1s<br>. 获取商品信息 1.5s<br>. 商品最新价格 0.5s</li></ol><p>那么，用户需要3s后才能看到商品详情页的内容。很显然是不能接受的。如果有多个线程同时完成这4步操作，也许只需要1.5s即可完成响应。</p><p><code>CompletableFuture</code>可以使原本串行执行的代码，变为并行执行，提高代码执行速度。 </p><h3 id="2-6-2-优化商品详情页"><a href="#2-6-2-优化商品详情页" class="headerlink" title="2.6.2 优化商品详情页"></a>2.6.2 优化商品详情页</h3><h4 id="1、ThreadPoolConfig"><a href="#1、ThreadPoolConfig" class="headerlink" title="1、ThreadPoolConfig"></a>1、ThreadPoolConfig</h4><p>全局自定义线程池配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.channel.configure;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ThreadPoolExecutor <span class="hljs-title function_">threadPoolExecutor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//当前系统可用的处理器数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">processorsCount</span> <span class="hljs-operator">=</span> Runtime.getRuntime().availableProcessors();<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                processorsCount * <span class="hljs-number">2</span>,<br>                processorsCount * <span class="hljs-number">2</span>,<br>                <span class="hljs-number">0</span>,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">200</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-comment">//new ThreadPoolExecutor.CallerRunsPolicy()</span><br>                <span class="hljs-comment">//自定义拒绝策略</span><br>                (runnable, executor) -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">200</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    &#125;<br>                    <span class="hljs-comment">//再次将拒绝任务提交给线程池执行</span><br>                    executor.submit(runnable);<br>                &#125;<br>        );<br>        <span class="hljs-comment">//线程池创建,核心线程同时创建</span><br>        <span class="hljs-comment">//threadPoolExecutor.prestartCoreThread();</span><br>        threadPoolExecutor.prestartAllCoreThreads();<br>        <span class="hljs-keyword">return</span> threadPoolExecutor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、ItemServiceImpl"><a href="#2、ItemServiceImpl" class="headerlink" title="2、ItemServiceImpl"></a>2、ItemServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ThreadPoolExecutor threadPoolExecutor;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ItemVo <span class="hljs-title function_">item</span><span class="hljs-params">(Long skuId)</span> &#123;<br>    <span class="hljs-comment">//远程调用商品微服务接口之前 提前知道用户访问商品SKUID是否存在与布隆过滤器</span><br>    RBloomFilter&lt;Object&gt; bloomFilter = redissonClient.getBloomFilter(<span class="hljs-string">&quot;sku:bloom:filter&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!bloomFilter.contains(skuId)) &#123;<br>        <span class="hljs-comment">//查询数据不存在直接返回空对象</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(<span class="hljs-string">&quot;用户查询商品sku不存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">ItemVo</span> <span class="hljs-variable">itemVo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemVo</span>();<br>    <span class="hljs-comment">//获取sku信息</span><br>    CompletableFuture&lt;ProductSku&gt; skuCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;<br>        R&lt;ProductSku&gt; productSkuResult = remoteProductService.getProductSku(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productSkuResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productSkuResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuResult.getData();<br>        itemVo.setProductSku(productSku);<br>        <span class="hljs-keyword">return</span> productSku;<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品信息</span><br>    CompletableFuture&lt;Void&gt; productComCompletableFuture = skuCompletableFuture.thenAcceptAsync(productSku -&gt; &#123;<br>        R&lt;Product&gt; productResult = remoteProductService.getProduct(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productResult.getData();<br>        itemVo.setProduct(product);<br>        itemVo.setSliderUrlList(Arrays.asList(product.getSliderUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br>        itemVo.setSpecValueList(JSON.parseArray(product.getSpecValue()));<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品最新价格</span><br>    CompletableFuture&lt;Void&gt; skuPriceCompletableFuture = CompletableFuture.runAsync(() -&gt; &#123;<br>        R&lt;SkuPrice&gt; skuPriceResult = remoteProductService.getSkuPrice(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuPriceResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuPriceResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuPrice</span> <span class="hljs-variable">skuPrice</span> <span class="hljs-operator">=</span> skuPriceResult.getData();<br>        itemVo.setSkuPrice(skuPrice);<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品详情</span><br>    CompletableFuture&lt;Void&gt; productDetailsComCompletableFuture = skuCompletableFuture.thenAcceptAsync(productSku -&gt; &#123;<br>        R&lt;ProductDetails&gt; productDetailsResult = remoteProductService.getProductDetails(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == productDetailsResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(productDetailsResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">ProductDetails</span> <span class="hljs-variable">productDetails</span> <span class="hljs-operator">=</span> productDetailsResult.getData();<br>        itemVo.setDetailsimagesUrlList(Arrays.asList(productDetails.getimagesUrls().split(<span class="hljs-string">&quot;,&quot;</span>)));<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品规格对应商品skuId信息</span><br>    CompletableFuture&lt;Void&gt; skuSpecValueComCompletableFuture = skuCompletableFuture.thenAcceptAsync(productSku -&gt; &#123;<br>        R&lt;Map&lt;String, Long&gt;&gt; skuSpecValueResult = remoteProductService.getSkuSpecValue(productSku.getProductId(), SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuSpecValueResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuSpecValueResult.getMsg());<br>        &#125;<br>        Map&lt;String, Long&gt; skuSpecValueMap = skuSpecValueResult.getData();<br>        itemVo.setSkuSpecValueMap(skuSpecValueMap);<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//获取商品库存信息</span><br>    CompletableFuture&lt;Void&gt; skuStockVoComCompletableFuture = CompletableFuture.runAsync(() -&gt; &#123;<br>        R&lt;SkuStockVo&gt; skuStockResult = remoteProductService.getSkuStock(skuId, SecurityConstants.INNER);<br>        <span class="hljs-keyword">if</span> (R.FAIL == skuStockResult.getCode()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceException</span>(skuStockResult.getMsg());<br>        &#125;<br>        <span class="hljs-type">SkuStockVo</span> <span class="hljs-variable">skuStockVo</span> <span class="hljs-operator">=</span> skuStockResult.getData();<br>        itemVo.setSkuStockVo(skuStockVo);<br>    &#125;, threadPoolExecutor);<br><br>    <span class="hljs-comment">//x.组合以上七个异步任务</span><br>    CompletableFuture.allOf(<br>            skuCompletableFuture,<br>            productComCompletableFuture,<br>            skuPriceCompletableFuture,<br>            productDetailsComCompletableFuture,<br>            skuSpecValueComCompletableFuture,<br>            skuStockVoComCompletableFuture<br>    ).join();<br>    <span class="hljs-keyword">return</span> itemVo;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1、项目搭建</title>
    <link href="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <url>/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-项目搭建"><a href="#第1章-项目搭建" class="headerlink" title="第1章 项目搭建"></a>第1章 项目搭建</h1><h2 id="1-1-项目简介"><a href="#1-1-项目简介" class="headerlink" title="1.1 项目简介"></a>1.1 项目简介</h2><p>本项目是基于<code>若依</code>微服务版本框架开发的一个电商系统，项目包含平台管理端与手机H5端。有一套完善的电商业务流程：商品管理、商品详情、购物车、单点登录、订单、支付、库存管理等，其中覆盖了分布式文件系统、高速缓存、消息队列等多种业务场景和技术实现。</p><h3 id="1-1-1-为什么我们要讲电商？"><a href="#1-1-1-为什么我们要讲电商？" class="headerlink" title="1.1.1 为什么我们要讲电商？"></a>1.1.1 为什么我们要讲电商？</h3><p>因为就互联网平台来说，电商网站有很多典型的特征：</p><ul><li>访问量大</li><li>数据量大</li><li>有一定的业务复杂性</li><li>涉及支付考虑一定安全性{幂等性}</li></ul><h3 id="1-1-2-电商的主要模式"><a href="#1-1-2-电商的主要模式" class="headerlink" title="1.1.2 电商的主要模式"></a>1.1.2 电商的主要模式</h3><p><strong>1、B2B（Business to Business）</strong></p><p>  B2B （ Business to Business）是指进行电子商务交易的供需双方都是商家（或企业、公司），她（他）们使用了互联网的技术或各种商务网络平台，完成商务交易的过程。电子商务是现代 B2B marketing的一种具体主要的表现形式。</p><p>  案例：阿里巴巴1688</p><p><strong>2、C2C（Consumer to Customer）</strong></p><p>  C2C即 Customer（Consumer） to Customer（Consumer），意思就是消费者个人间的电子商务行为。比如一个消费者有一台电脑，通过网络进行交易，把它出售给另外一个消费者，此种交易类型就称为C2C电子商务。</p><p>案例：淘宝、易趣、瓜子二手车、闲鱼</p><p><strong>3、B2C（Business-to-Customer）</strong></p><p>  B2C是Business-to-Customer的缩写，而其中文简称为“商对客”。“商对客”是电子商务的一种模式，也就是通常说的直接面向消费者销售产品和服务商业零售模式。这种形式的电子商务一般以网络零售业为主，主要借助于互联网开展在线销售活动。B2C即企业通过互联网为消费者提供一个新型的购物环境——网上商店，消费者通过网络在网上购物、网上支付等消费行为。</p><p>  案例：唯品会、乐蜂网</p><p> <strong>4、B2B2C（Business to Business to Consumer）</strong>  </p><p>  B2B2C是一种电子商务类型的网络购物商业模式，B是BUSINESS的简称，C是CUSTOMER的简称，第一个B指的是商品或服务的供应商，第二个B指的是从事电子商务的企业，C则是表示消费者。</p><p>案例：京东商城、天猫商城</p><p><strong>5、C2B（Consumer to Business）</strong></p><p>  C2B（Consumer to Business，即消费者到企业），是互联网经济时代新的商业模式。这一模式改变了原有生产者（企业和机构）和消费者的关系，是一种消费者贡献价值（Create Value）， 企业和机构消费价值（Consume Value）。</p><p>  C2B模式和我们熟知的供需模式（DSM, Demand SupplyModel）恰恰相反，<strong>真正的C2B 应该先有消费者需求产生而后有企业生产，即先有消费者提出需求，后有生产企业按需求组织生产</strong>。通常情况为消费者根据自身需求定制产品和价格，或主动参与产品设计、生产和定价，产品、价格等彰显消费者的个性化需求，生产企业进行定制化生产。</p><p>案例：猪八戒   </p><p><strong>6、O2O（Online To Offline）</strong></p><p>  O2O即Online To Offline（在线离线&#x2F;线上到线下），是指将线下的商务机会与互联网结合，让互联网成为线下交易的平台，这个概念最早来源于美国。O2O的概念非常广泛，既可涉及到线上，又可涉及到线下,可以通称为O2O。主流商业管理课程均对O2O这种新型的商业模式有所介绍及关注。</p><p>  案例：美团、饿了么</p><h3 id="1-1-3-我们能从这个项目中学到什么？"><a href="#1-1-3-我们能从这个项目中学到什么？" class="headerlink" title="1.1.3 我们能从这个项目中学到什么？"></a>1.1.3 我们能从这个项目中学到什么？</h3><h4 id="1、温故知新"><a href="#1、温故知新" class="headerlink" title="1、温故知新"></a>1、温故知新</h4><p>尚品甄选作为一个前后端分离的项目，可以巩固以前的前端+后端知识，同时加入了新的技术点与技术点应用场景，<strong>掌握电商业务流程</strong></p><p>尚品甄选分为后台系统和前台系统。</p><p><strong>后台系统功能</strong>:(用户登录、系统管理员列表、角色管理、权限规则管理、商品管理、商品分类、商品规格、…)</p><p><strong>前台系统功能</strong>: (首页商品分类查询、分类模块：分类查询、根据分类查询商品数据、登录功能、用户收货地址管理、购物车模块、订单模块…)</p><h4 id="2、核心技术"><a href="#2、核心技术" class="headerlink" title="2、核心技术"></a>2、核心技术</h4><ul><li><strong>SpringBoot</strong>：简化新Spring应用的初始搭建以及开发过程；</li><li><strong>SpringCloud</strong>：基于Spring Boot实现的云原生应用开发工具，SpringCloud使用的技术：（Spring Cloud Gateway、Spring Cloud Alibaba Nacos、Spring Cloud Alibaba Sentinel、Spring Cloud Task和Spring Cloud Feign等）</li><li><strong>SpringBoot+SpringCloudAlibaba(Nacos，Sentinel)+Cloud OpenFeign</strong></li><li>MyBatis-Plus：持久层框架，也依赖mybatis</li><li>Redis：内存做缓存  </li><li>Redisson：基于redis的Java驻内存数据网格 - 框架；操作redis的框架</li><li>RabbitMQ：消息中间件；大型分布式项目是标配；分布式事务最终一致性</li><li>ThreadPoolExecutor：线程池来实现异步操作，提高效率</li><li>Knife4J：接口文档工具</li><li>MinIO（私有化对象存储集群）：分布式文件存储 类似于OSS（公有）</li><li>支付宝支付：alipay.com</li><li>MySQL：关系型数据库</li><li>Lombok: 实体类的中get&#x2F;set 生成的jar包</li><li>Ngrok&#x2F;natapp：内网穿透</li><li>Docker：容器化技术;  生产环境Redis（运维人员）；快速搭建环境Docker run</li></ul><p>前端技术栈</p><ul><li>Vue 3： Vue.js 的最新版本</li><li>Element Plus：一个基于 Vue.js 3.0 的组件库，它是 Element UI 的升级版本</li><li>Vite：一种新型前端构建工具</li><li>Node.js： JavaScript 运行环境</li></ul><h4 id="3、需要掌握的解决方案"><a href="#3、需要掌握的解决方案" class="headerlink" title="3、需要掌握的解决方案"></a>3、需要掌握的解决方案</h4><p>微服务架构、缓存解决方案、分布式事务、后台管理、文件管理系统等</p><p>课前说明：</p><ul><li><p>建议内存16个G以上</p></li><li><p>培养自己独立阅读代码的能力</p></li><li><p>帮助大家分析 解构业务需求</p></li><li><p>新的知识点，难点敲</p></li><li><p>重复的功能 自己开发</p></li></ul><h2 id="1-2-若依框架简介"><a href="#1-2-若依框架简介" class="headerlink" title="1.2 若依框架简介"></a>1.2 若依框架简介</h2><p>官网：<a href="https://doc.ruoyi.vip/">https://doc.ruoyi.vip/</a></p><p>微服务版本文档：<a href="https://doc.ruoyi.vip/ruoyi-cloud/">https://doc.ruoyi.vip/ruoyi-cloud/</a></p><h3 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h3><p><strong>RuoYi-Cloud</strong> 是一个 Java EE 分布式微服务架构平台，基于经典技术组合（Spring Boot、Spring Cloud &amp; Alibaba、Vue、Element），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源。</p><h3 id="1-2-2-架构图"><a href="#1-2-2-架构图" class="headerlink" title="1.2.2 架构图"></a>1.2.2 架构图</h3><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/fe8a5f53_1915710.png"></p><!--![](/第1章_项目搭建/fe8a5f53_1915710.png)--><h3 id="1-2-3-在线体验"><a href="#1-2-3-在线体验" class="headerlink" title="1.2.3 在线体验"></a>1.2.3 在线体验</h3><ul><li><p>若依官网：<a href="http://ruoyi.vip/">http://ruoyi.vip(opens new window)</a></p></li><li><p>演示地址：<a href="http://cloud.ruoyi.vip/">http://cloud.ruoyi.vip(opens new window)</a></p></li><li><p>代码下载：<a href="https://gitee.com/y_project/RuoYi-Cloud">https://gitee.com/y_project/RuoYi-Cloud</a></p></li></ul><h2 id="1-3-准备软件环境"><a href="#1-3-准备软件环境" class="headerlink" title="1.3 准备软件环境"></a>1.3 准备软件环境</h2><p>请参考《尚硅谷_尚品甄选项目_附录1_准备软件环境.md》</p><h2 id="1-4-搭建项目环境"><a href="#1-4-搭建项目环境" class="headerlink" title="1.4 搭建项目环境"></a>1.4 搭建项目环境</h2><h3 id="1-4-1-服务端"><a href="#1-4-1-服务端" class="headerlink" title="1.4.1 服务端"></a>1.4.1 服务端</h3><h4 id="1、下载若依源码"><a href="#1、下载若依源码" class="headerlink" title="1、下载若依源码"></a>1、下载若依源码</h4><p>下载”RuoYi-Cloud 微服务版“</p><p><a href="https://ruoyi.vip/">https://ruoyi.vip/</a></p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708329697454.png" alt style="zoom:67%;"><!--<img src="/第1章_项目搭建/1708329697454.png" alt="" style="zoom:67%;" />--><p>当前RuoYi-Cloud 微服务版本：3.6.3</p><p>查看项目版本如图：</p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708329877689.png"></p><!--![](第1章_项目搭建/1708329877689-17314037300501.png)--><p>项目版本jdk为：1.8，spring-boot为：2.7.18，不是我们预期的版本，因此我们给改项目做了升级，升级后的项目模板在：资料&#x2F;项目模板&#x2F;parent.zip</p><p>升级后的项目版本如图：</p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708330112547.png"></p><!--![](第1章_项目搭建/1708330112547-17314037468535.png)--><h4 id="2、导入项目"><a href="#2、导入项目" class="headerlink" title="2、导入项目"></a>2、导入项目</h4><p>第一步：解压课件资料</p><p>解压课件资料&#x2F;项目模板下的<code>parent.rar</code>到工作空间</p><p>第二步：修改maven配置</p><p>修改maven配置为自己安装的</p><p>第三步：导入项目源码</p><p>导入项目源码到idea，如图：</p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708330563136.png" alt style="zoom:67%;"><!--<img src="/第1章_项目搭建/1708330563136.png" alt="" style="zoom:67%;" />--><p>项目模块介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">com.     <br>├── gateway         <span class="hljs-comment">// 网关模块 [8080]</span><br>├── auth            <span class="hljs-comment">// 认证中心 [9200]</span><br>├── api             <span class="hljs-comment">// 接口模块</span><br>│       └── api-system                        <span class="hljs-comment">// 系统接口</span><br>├── common          <span class="hljs-comment">// 通用模块</span><br>│       └── common-core                         <span class="hljs-comment">// 核心模块</span><br>│       └── common-datascope                    <span class="hljs-comment">// 权限范围</span><br>│       └── common-datasource                   <span class="hljs-comment">// 多数据源</span><br>│       └── common-log                          <span class="hljs-comment">// 日志记录</span><br>│       └── common-redis                        <span class="hljs-comment">// 缓存服务</span><br>│       └── common-security                     <span class="hljs-comment">// 安全模块</span><br>├── modules         <span class="hljs-comment">// 业务模块</span><br>│       └── system                              <span class="hljs-comment">// 系统模块 [9201]</span><br>│       └── gen                                 <span class="hljs-comment">// 代码生成 [9202]</span><br>│       └── job                                 <span class="hljs-comment">// 定时任务 [9203]</span><br>│       └── file                                <span class="hljs-comment">// 文件服务 [9300]</span><br>├── ui              <span class="hljs-comment">// 前端框架 [80]</span><br>├── visual          <span class="hljs-comment">// 图形化管理模块</span><br>│       └── monitor                             <span class="hljs-comment">// 监控中心 [9100]</span><br>├──pom.xml                <span class="hljs-comment">// 公共依赖</span><br></code></pre></td></tr></table></figure><h4 id="3、导入数据库表"><a href="#3、导入数据库表" class="headerlink" title="3、导入数据库表"></a>3、导入数据库表</h4><p>导入数据库脚本：资料&#x2F;sql&#x2F;system.sql【系统管理相关数据库表】</p><p>导入数据库脚本：资料&#x2F;sql&#x2F;sql【尚品甑选业务相关数据库表】</p><h4 id="4、启动项目"><a href="#4、启动项目" class="headerlink" title="4、启动项目"></a>4、启动项目</h4><p>第一步：导入nacos配置文件</p><ul><li><p>启动nacos，访问nacos控制台：http:&#x2F;&#x2F;虚拟机IP:8848&#x2F;nacos&#x2F;</p></li><li><p>在nacos控制台：配置管理 -&gt;  配置列表 导入配置文件</p></li><li><p>配置文件资源：资料&#x2F;nacos配置&#x2F;DEFAULT_GROUP.zip</p></li></ul><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709186383216.png" alt style="zoom:80%;"><!--<img src="/第1章_项目搭建/1709186383216.png" alt="" style="zoom:80%;" />--><ul><li>导入成功后，如图：</li></ul><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709187073010.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709187073010.png" alt="" style="zoom:50%;" />--><p>第二步：修改nacos配置</p><p>说明：</p><p>​    涉及数据源的地方都要修改，mysql、redis、minio等等，地址需要修改为自己虚拟机的地址</p><p><strong>例如：</strong> system-dev.yml   </p><p>​使用了redis和mysql，需要修改连接地址</p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709187274932.png"></p><!--![](第1章_项目搭建/1709187274932-17314037661627.png)--><p><strong>参考上面 检查并修改其他配置文件中的连接地址</strong></p><p>第三步：运行项目模块</p><p>修改各个模块nacos配置中心、注册中心地址、sentinel地址</p><p>启动没有先后顺序</p><p>GatewayApplication （网关模块 必须）</p><p>AuthApplication （认证模块 必须）</p><p>SystemApplication （系统模块 必须）<br>…【其他模块】</p><p><strong>注意：</strong>定时任务模块不要启动，未导入表，未使用</p><h3 id="1-4-2-前端"><a href="#1-4-2-前端" class="headerlink" title="1.4.2 前端"></a>1.4.2 前端</h3><h4 id="1、前端项目部署"><a href="#1、前端项目部署" class="headerlink" title="1、前端项目部署"></a>1、前端项目部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">node版本 node-v20.11.1-x64</span><br>node -v<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装yarn</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装yarn出现问题，可以忽略校验</span><br>npm config set strict-ssl false<br>npm install -g yarn<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目目录</span><br>cd ui<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>yarn --registry=https://registry.npmmirror.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>yarn dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建测试环境 yarn build:stage</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建生产环境 yarn build:prod</span><br></code></pre></td></tr></table></figure><h4 id="2、前端项目修改"><a href="#2、前端项目修改" class="headerlink" title="2、前端项目修改"></a>2、前端项目修改</h4><p>第一步：修改图表</p><ul><li><p>拷贝课件 <code> 资料\图标\favicon.ico</code> 到ui项目 <code>public</code>目录下替换默认图标</p></li><li><p>修改ui项目 <code>index.html</code>中的标题图标默认使用上面的图标</p></li><li><p>修改ui项目<code>src\layout\components\Sidebar\Logo.vue</code>中使用的菜单栏图标</p><p><strong>注意：</strong>一共两处</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;logo&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/favicon.ico&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-logo&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709192362693.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709192362693.png" alt="" style="zoom:50%;" />--></li></ul><p>第二步：修改项目标题</p><ul><li><p>修改登录页<code>src\views\login.vue</code>页面中的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>尚品甄选后台管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改标签和菜单栏标题:</p><p>修改<code>.env.development</code>和 <code>.env.production</code>文件中的标题</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">尚品甄选管理系统</span><br></code></pre></td></tr></table></figure><p>效果图：</p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709192763831.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709192763831.png" alt="" style="zoom:50%;" />--></li></ul><h2 id="1-5-若依-源码分析"><a href="#1-5-若依-源码分析" class="headerlink" title="1.5 若依-源码分析"></a>1.5 若依-源码分析</h2><p>参考<code>系统管理-&gt; 角色管理</code> </p><h3 id="1-5-1-前端请求"><a href="#1-5-1-前端请求" class="headerlink" title="1.5.1  前端请求"></a>1.5.1  前端请求</h3><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709252394421.png"></p><!--![](第1章_项目搭建/1709252394421-17314037854889.png)--><p><strong>返回的分页数据：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;rows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-29 04:42:28&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;超级管理员&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;delFlag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;超级管理员&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleSort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dataScope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;createTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2024-02-29 04:42:28&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateBy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updateTime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;remark&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;普通角色&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;delFlag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;普通角色&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleKey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;common&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;roleSort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dataScope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptCheckStrictly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;flag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;menuIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;deptIds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;permissions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;查询成功&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-2-后端分析"><a href="#1-5-2-后端分析" class="headerlink" title="1.5.2 后端分析"></a>1.5.2 后端分析</h3><p><code>modules下的system模块</code>处理系统管理相关请求，包括角色的CRUD</p><h4 id="1、SysRoleController"><a href="#1、SysRoleController" class="headerlink" title="1、SysRoleController"></a>1、SysRoleController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/role&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysRoleController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseController</span> <span class="hljs-comment">//BaseController提供了一些通用方法</span><br>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysRoleService roleService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysUserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysDeptService deptService;<br><br>    <span class="hljs-meta">@RequiresPermissions(&quot;system:role:list&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span> <span class="hljs-comment">//查询角色的分页数据</span><br>    <span class="hljs-keyword">public</span> TableDataInfo <span class="hljs-title function_">list</span><span class="hljs-params">(SysRole role)</span><span class="hljs-comment">//role用来pojo入参获取查询参数</span><br>    &#123;<br>        startPage(); <span class="hljs-comment">//调用BaseController中的分页方法</span><br>        List&lt;SysRole&gt; list = roleService.selectRoleList(role); <span class="hljs-comment">//执行分页查询</span><br>        <span class="hljs-keyword">return</span> getDataTable(list);<span class="hljs-comment">//调用BaseController中的方法封装分页数据</span><br>    &#125;<br>    <span class="hljs-comment">//.....省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、BaseController"><a href="#2、BaseController" class="headerlink" title="2、BaseController"></a>2、BaseController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseController</span><br>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将前台传递过来的日期格式的字符串，自动转化为Date类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@InitBinder</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinder</span><span class="hljs-params">(WebDataBinder binder)</span><br>    &#123;<br>        <span class="hljs-comment">// Date 类型转换</span><br>        binder.registerCustomEditor(Date.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyEditorSupport</span>()<br>                                    &#123;<br>                                        <span class="hljs-meta">@Override</span><br>                                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAsText</span><span class="hljs-params">(String text)</span><br>                                        &#123;<br>                                            setValue(DateUtils.parseDate(text));<br>                                        &#125;<br>                                    &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置请求分页数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPage</span><span class="hljs-params">()</span><br>    &#123;<br>        PageUtils.startPage();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理分页的线程变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearPage</span><span class="hljs-params">()</span><br>    &#123;<br>        PageUtils.clearPage();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应请求分页数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br>    <span class="hljs-keyword">protected</span> TableDataInfo <span class="hljs-title function_">getDataTable</span><span class="hljs-params">(List&lt;?&gt; list)</span><br>    &#123;<br>        <span class="hljs-type">TableDataInfo</span> <span class="hljs-variable">rspData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableDataInfo</span>();<br>        rspData.setCode(HttpStatus.SUCCESS);<br>        rspData.setRows(list);<br>        rspData.setMsg(<span class="hljs-string">&quot;查询成功&quot;</span>);<br>        rspData.setTotal(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>(list).getTotal());<br>        <span class="hljs-keyword">return</span> rspData;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(String message)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回失败消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回失败消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(String message)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">warn</span><span class="hljs-params">(String message)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.warn(message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应返回结果</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rows 影响行数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> AjaxResult <span class="hljs-title function_">toAjax</span><span class="hljs-params">(<span class="hljs-type">int</span> rows)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> rows &gt; <span class="hljs-number">0</span> ? AjaxResult.success() : AjaxResult.error();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应返回结果</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> result 结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> AjaxResult <span class="hljs-title function_">toAjax</span><span class="hljs-params">(<span class="hljs-type">boolean</span> result)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> result ? success() : error();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PageUtils</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageUtils</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageHelper</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置请求分页数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startPage</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">PageDomain</span> <span class="hljs-variable">pageDomain</span> <span class="hljs-operator">=</span> TableSupport.buildPageRequest();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> pageDomain.getPageNum();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> pageDomain.getPageSize();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderBy</span> <span class="hljs-operator">=</span> SqlUtil.escapeOrderBySql(pageDomain.getOrderBy());<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">reasonable</span> <span class="hljs-operator">=</span> pageDomain.getReasonable();<br>        PageHelper.startPage(pageNum, pageSize, orderBy).setReasonable(reasonable);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理分页的线程变量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearPage</span><span class="hljs-params">()</span><br>    &#123;<br>        PageHelper.clearPage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、AjaxResult"><a href="#3、AjaxResult" class="headerlink" title="3、AjaxResult"></a>3、AjaxResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxResult</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;<br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-comment">/** 状态码 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CODE_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;code&quot;</span>;<br><br>    <span class="hljs-comment">/** 返回内容 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MSG_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;msg&quot;</span>;<br><br>    <span class="hljs-comment">/** 数据对象 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATA_TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AjaxResult</span><span class="hljs-params">()</span><br>    &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AjaxResult</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(CODE_TAG, code);<br>        <span class="hljs-built_in">super</span>.put(MSG_TAG, msg);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个新创建的 AjaxResult 对象</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AjaxResult</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(CODE_TAG, code);<br>        <span class="hljs-built_in">super</span>.put(MSG_TAG, msg);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotNull(data))<br>        &#123;<br>            <span class="hljs-built_in">super</span>.put(DATA_TAG, data);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(<span class="hljs-string">&quot;操作成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功数据</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(<span class="hljs-string">&quot;操作成功&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.success(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回成功消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">success</span><span class="hljs-params">(String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(HttpStatus.SUCCESS, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">warn</span><span class="hljs-params">(String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.warn(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 警告消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">warn</span><span class="hljs-params">(String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(HttpStatus.WARN, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(<span class="hljs-string">&quot;操作失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> AjaxResult.error(msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(String msg, Object data)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(HttpStatus.ERROR, msg, data);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回错误消息</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 状态码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg 返回内容</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 错误消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AjaxResult <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AjaxResult</span>(code, msg, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否为成功消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSuccess</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.equals(HttpStatus.SUCCESS, <span class="hljs-built_in">this</span>.get(CODE_TAG));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否为警告消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWarn</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.equals(HttpStatus.WARN, <span class="hljs-built_in">this</span>.get(CODE_TAG));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否为错误消息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isError</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Objects.equals(HttpStatus.ERROR, <span class="hljs-built_in">this</span>.get(CODE_TAG));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方便链式调用</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">put</span><span class="hljs-params">(String key, Object value)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>.put(key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、SysRoleServiceImpl"><a href="#4、SysRoleServiceImpl" class="headerlink" title="4、SysRoleServiceImpl"></a>4、SysRoleServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysRoleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ISysRoleService</span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysRoleMapper roleMapper;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件分页查询角色数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> role 角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 角色数据集合信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@DataScope(deptAlias = &quot;d&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;SysRole&gt; <span class="hljs-title function_">selectRoleList</span><span class="hljs-params">(SysRole role)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> roleMapper.selectRoleList(role);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、SysRoleMapper"><a href="#5、SysRoleMapper" class="headerlink" title="5、SysRoleMapper"></a>5、SysRoleMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SysRoleMapper</span><br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件分页查询角色数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> role 角色信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 角色数据集合信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;SysRole&gt; <span class="hljs-title function_">selectRoleList</span><span class="hljs-params">(SysRole role)</span>;<br>    <span class="hljs-comment">//..........省略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6、SysRoleMapper-xml"><a href="#6、SysRoleMapper-xml" class="headerlink" title="6、SysRoleMapper.xml"></a>6、SysRoleMapper.xml</h4><p>省略</p><h2 id="1-6-若依-权限控制"><a href="#1-6-若依-权限控制" class="headerlink" title="1.6 若依-权限控制"></a>1.6 若依-权限控制</h2><h3 id="1-6-1-介绍"><a href="#1-6-1-介绍" class="headerlink" title="1.6.1 介绍"></a>1.6.1 介绍</h3><p> <code>权限控制</code>主要目的是保护系统的安全性和完整性,防止未经授权的用户获取敏感信息、执行非法操作或对系统进行恶意操作 。</p><p>常见的权限控制框架有SpringSecurity和Shiro。</p><p>若依的权限管理是通过<code>RBAC</code>（Role-based Access Control 基于角色的访问控制）模型自己设计的。</p><p>RBAC模型将权限控制分为角色管理和权限管理两个部分。在若依中，角色是指对系统的一类用户或操作者的定义，而权限是指对系统中某个资源或操作的访问控制。通过为每个角色分配相应的权限，可以实现对系统的全面管理和控制。</p><p>具体来说，若依的权限管理包括以下几个方面：</p><ol><li><code>菜单管理</code>：通过对系统菜单进行管理，可以控制用户在系统中能够访问的页面和功能。</li><li><code>按钮权限</code>：在系统中，某些操作需要特定的权限才能进行，例如删除、修改等操作。通过对按钮权限的控制，可以限制用户对系统的访问和操作。</li><li><code>数据权限</code>：在某些情况下，需要根据用户的角色或部门来限制其对数据的访问。通过数据权限的设置，可以实现对数据的细粒度控制。</li><li><code>API接口权限</code>：在若依中，API也可以通过权限的方式进行控制。通过对API的权限进行管理，可以限制用户对API的访问和使用。</li></ol><h3 id="1-6-2-数据库表结构设计"><a href="#1-6-2-数据库表结构设计" class="headerlink" title="1.6.2 数据库表结构设计"></a>1.6.2 数据库表结构设计</h3><p>在数据库表结构方面，若依采用了RBAC模型的设计。其中，主要包括以下表：</p><ul><li><code>sys_menu</code>：存储系统菜单信息，包括菜单ID、菜单名称、访问路径、菜单类型等字段。</li><li><code>sys_role</code>：存储系统角色信息，包括角色ID、角色名称、角色标识、角色描述等字段。</li><li><code>sys_user</code>：存储系统用户信息，包括用户ID、用户名、密码、昵称、邮箱、电话等字段。</li><li><code>sys_role_menu</code>：存储角色和菜单之间的关联关系，包括角色ID和菜单ID两个字段。</li><li><code>sys_user_role</code>：存储用户和角色之间的关联关系，包括用户ID和角色ID两个字段。</li></ul><p>通过这些表的设计，可以实现对系统中菜单、角色和用户的管理。同时，通过角色和菜单之间的关联关系，可以实现对菜单访问权限的控制。通过用户和角色之间的关联关系，可以实现对用户访问权限的控制。</p><h3 id="1-6-3-菜单管理"><a href="#1-6-3-菜单管理" class="headerlink" title="1.6.3 菜单管理"></a>1.6.3 菜单管理</h3><p><strong>目录、菜单和按钮的区别</strong></p><p>在若依（RuoYi）中，菜单和目录是两个不同的概念，它们之间的区别如下：</p><p><strong>1.目录（Directory）：</strong></p><p>目录是用来组织和分类菜单的容器。目录本身没有功能，它只是一个容器，可以包含若干个菜单。目录通常是一个抽象的概念，用于将一组相关的菜单组织在一起。</p><p>在若依中，目录是以“系统管理”、“运营管理”等大模块的方式组织菜单的，用于区分不同的功能模块。目录通常以左侧的菜单树的形式展现，用户可以通过点击不同的目录来展开或收缩对应的菜单列表。</p><p><strong>2.菜单（Menu）：</strong></p><p>菜单是具有一定功能的操作项，通常是一组具有相同功能的页面或功能点的集合。每个菜单通常对应一个页面或者一个功能模块。</p><p>在若依中，菜单通常是以左侧的树形菜单的形式展现，用户可以通过点击不同的菜单来跳转到对应的页面或功能模块。每个菜单都有一个唯一的标识符，通常以URL的形式表示。</p><p><strong>3.按钮（Button）：</strong></p><p>按钮是指菜单中的操作按钮，用于触发一些具体的操作。在若依中，按钮通常是与表格或表单等组件配合使用的，用于进行数据的增删改查等操作。按钮通常会与权限控制结合起来，只有拥有相应权限的用户才能看到并使用该按钮。</p><p>总的来说，目录、菜单、按钮是若依系统中的三种不同的概念。目录是为了方便管理菜单和模块，菜单是系统的核心功能模块，按钮是菜单中的具体操作按钮。在实际应用中，它们通常会结合起来，形成一个完整的用户界面和操作流程。</p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/59c605682ca0437d9bc62a392e73a34a.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/cf1ea32c22424d769deb356246e031f5.png"></p><!--![](第1章_项目搭建/59c605682ca0437d9bc62a392e73a34a-173140380115611.png)![](第1章_项目搭建/cf1ea32c22424d769deb356246e031f5-173140380376213.png)--><h3 id="1-6-4-菜单权限"><a href="#1-6-4-菜单权限" class="headerlink" title="1.6.4 菜单权限"></a>1.6.4 菜单权限</h3><p>在若依中，实现不同用户看到不同的菜单可以通过以下步骤实现：</p><ol><li>在数据库中维护菜单的权限信息，可以为每个菜单设置一个权限标识。</li><li>在用户登录系统时，将该用户所拥有的菜单权限信息从数据库中获取出来。</li><li>根据用户的菜单权限信息动态生成菜单，使用户只能看到其拥有权限的菜单。</li></ol><p>用户登录之后会请求后端的SysMenuController#getRouters接口获取登录用户可访问的菜单数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> m.menu_id, m.parent_id, m.menu_name, m.path, m.component, m.`query`, m.visible, m.status, ifnull(m.perms,<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">as</span> perms, m.is_frame, m.is_cache, m.menu_type, m.icon, m.order_num, m.create_time<br><span class="hljs-keyword">from</span> sys_menu m<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_role_menu rm <span class="hljs-keyword">on</span> m.menu_id <span class="hljs-operator">=</span> rm.menu_id<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_user_role ur <span class="hljs-keyword">on</span> rm.role_id <span class="hljs-operator">=</span> ur.role_id<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_role ro <span class="hljs-keyword">on</span> ur.role_id <span class="hljs-operator">=</span> ro.role_id<br>    <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> sys_user u <span class="hljs-keyword">on</span> ur.user_id <span class="hljs-operator">=</span> u.user_id<br><span class="hljs-keyword">where</span> u.user_id <span class="hljs-operator">=</span> #&#123;userId&#125; <span class="hljs-keyword">and</span> m.menu_type <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>) <span class="hljs-keyword">and</span> m.status <span class="hljs-operator">=</span> <span class="hljs-number">0</span>  <span class="hljs-keyword">AND</span> ro.status <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> m.parent_id, m.order_num<br></code></pre></td></tr></table></figure><p>菜单类型（M目录 C菜单 F按钮）；菜单状态（0显示 1隐藏）</p><p>前端会根据该接口返回的数据渲染出不同的菜单。</p><h3 id="1-6-5-api接口权限"><a href="#1-6-5-api接口权限" class="headerlink" title="1.6.5 api接口权限"></a>1.6.5 api接口权限</h3><p><strong>配置方法</strong></p><p>每一个按钮基本上都会对应着一个后端的接口，前端会根据权限标志显示或者隐藏按钮，但是如果用户不点击按钮，直接通过http请求工具请求后端咋办？所以接口权限也是要有的，该权限和按钮上权限完全一致。</p><p>若依系统实现了这部分功能，实现模块：common-security，比如，用户管理页面中的修改用户按钮对应的后端接口长这个样子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:user:edit&quot;)</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">edit</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> SysUser user)</span> &#123;<br>    ...<br>    <span class="hljs-keyword">return</span> toAjax();<br>&#125;<br></code></pre></td></tr></table></figure><p>和其对应的前端按钮权限标志一样</p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/066f308ddde54ab3b03e30509542e516.png"></p><!--![](第1章_项目搭建/066f308ddde54ab3b03e30509542e516-173140380871315.png)--><p>前端控制</p><p>v-hasPermi&#x3D;”[‘system:user:edit’]”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-button link type=&quot;primary&quot; icon=&quot;Edit&quot; @click=&quot;handleUpdate(scope.row)&quot; <br>           v-hasPermi=&quot;[&#x27;system:user:edit&#x27;]&quot;&gt;&lt;/el-button&gt;<br></code></pre></td></tr></table></figure><h4 id="1、后台权限注解"><a href="#1、后台权限注解" class="headerlink" title="1、后台权限注解"></a>1、后台权限注解</h4><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1708478479379.png"></p><!--![](第1章_项目搭建/1708478479379-173140381224317.png)--><h5 id="RequiresLogin"><a href="#RequiresLogin" class="headerlink" title="@RequiresLogin"></a>@RequiresLogin</h5><p><code>@RequiresLogin</code>注解用于配置接口要求用户必须登录才可访问，它没有参数</p><p>示例1: 以下代码表示必须拥有<code>admin</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresLogin(&quot;admin&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">getInfo</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RequiresPermissions"><a href="#RequiresPermissions" class="headerlink" title="@RequiresPermissions"></a>@RequiresPermissions</h5><p><code>@RequiresPermissions</code>注解用于配置接口要求用户拥有某（些）权限才可访问，它拥有两个参数</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String[]</td><td>权限列表</td></tr><tr><td>logical</td><td>Logical</td><td>权限之间的判断关系，默认为Logical.AND</td></tr></tbody></table><p>示例1: 以下代码表示必须拥有<code>system:user:add</code>权限才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&quot;system:user:add&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span> <br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2: 以下代码表示必须拥有<code>system:user:add</code>和<code>system:user:edit</code>权限才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(&#123;&quot;system:user:add&quot;, &quot;system:user:edit&quot;&#125;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例3: 以下代码表示需要拥有<code>system:user:add</code>或<code>system:user:edit</code>权限才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresPermissions(value = &#123;&quot;system:user:add&quot;, &quot;system:user:edit&quot;&#125;, logical = Logical.OR)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="RequiresRoles"><a href="#RequiresRoles" class="headerlink" title="@RequiresRoles"></a>@RequiresRoles</h5><p><code>@RequiresRoles</code>注解用于配置接口要求用户拥有某（些）角色才可访问，它拥有两个参数</p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String[]</td><td>角色列表</td></tr><tr><td>logical</td><td>Logical</td><td>角色之间的判断关系，默认为Logical.AND</td></tr></tbody></table><p>示例1: 以下代码表示必须拥有<code>admin</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&quot;admin&quot;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例2: 以下代码表示必须拥有<code>admin</code>和<code>common</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(&#123;&quot;admin&quot;, &quot;common&quot;&#125;)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例3: 以下代码表示需要拥有<code>admin</code>或<code>common</code>角色才可访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequiresRoles(value = &#123;&quot;admin&quot;, &quot;common&quot;&#125;, logical = Logical.OR)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">save</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> AjaxResult.success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、实现原理"><a href="#2、实现原理" class="headerlink" title="2、实现原理"></a>2、实现原理</h4><p>实现原理：一个拦截器【HeaderInterceptor】 + 一个AOP【PreAuthorizeAspect】</p><p>springboot 拦截器与AOP执行顺序：</p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/2701366-20220126215341038-1195230476.png"></p><!--![](第1章_项目搭建/2701366-20220126215341038-1195230476-173140381907719.png)--><p>拦截器HeaderInterceptor负责解析用户token信息，并将解析出的用户信息存入<strong>ThreadLocal</strong>中，然后PreAuthorizeAspect负责解析权限注解，判断当前用户是否拥有注解权限。</p><h2 id="1-7-若依-系统日志"><a href="#1-7-若依-系统日志" class="headerlink" title="1.7 若依-系统日志"></a>1.7 若依-系统日志</h2><p>实现模块：common-log</p><p>在实际开发中，对于某些关键业务，我们通常需要记录该操作的内容，一个操作调一次记录方法，每次还得去收集参数等等，会造成大量代码重复。 我们希望代码中只有业务相关的操作，在项目中使用注解来完成此项功能。</p><p>在需要被记录日志的<code>controller</code>方法上添加<code>@Log</code>注解，使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log(title = &quot;用户管理&quot;, businessType = BusinessType.INSERT)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">addSave</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> success(...);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-1-注解参数说明"><a href="#1-7-1-注解参数说明" class="headerlink" title="1.7.1 注解参数说明"></a>1.7.1 注解参数说明</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>String</td><td>空</td><td>操作模块</td></tr><tr><td>businessType</td><td>BusinessType</td><td>OTHER</td><td>操作功能（<code>OTHER</code>其他、<code>INSERT</code>新增、<code>UPDATE</code>修改、<code>DELETE</code>删除、<code>GRANT</code>授权、<code>EXPORT</code>导出、<code>IMPORT</code>导入、<code>FORCE</code>强退、<code>GENCODE</code>生成代码、<code>CLEAN</code>清空数据）</td></tr><tr><td>operatorType</td><td>OperatorType</td><td>MANAGE</td><td>操作人类别（<code>OTHER</code>其他、<code>MANAGE</code>后台用户、<code>MOBILE</code>手机端用户）</td></tr><tr><td>isSaveRequestData</td><td>boolean</td><td>true</td><td>是否保存请求的参数</td></tr><tr><td>isSaveResponseData</td><td>boolean</td><td>true</td><td>是否保存响应的参数</td></tr><tr><td>excludeParamNames</td><td>String[]</td><td>{}</td><td>排除指定的请求参数</td></tr></tbody></table><h3 id="1-7-2-自定义操作功能"><a href="#1-7-2-自定义操作功能" class="headerlink" title="1.7.2 自定义操作功能"></a>1.7.2 自定义操作功能</h3><p>1、在<code>BusinessType</code>中新增业务操作类型如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试</span><br><span class="hljs-comment"> */</span><br>TEST,<br></code></pre></td></tr></table></figure><p>2、在<code>sys_dict_data</code>字典数据表中初始化操作业务类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">insert into sys_dict_data <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">25</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;测试&#x27;</span>,     <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;sys_oper_type&#x27;</span>,       <span class="hljs-string">&#x27;&#x27;</span>,   <span class="hljs-string">&#x27;primary&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2018-03-16 11-33-00&#x27;</span>, <span class="hljs-string">&#x27;ry&#x27;</span>, <span class="hljs-string">&#x27;2018-03-16 11-33-00&#x27;</span>, <span class="hljs-string">&#x27;测试操作&#x27;</span>)</span>;<br></code></pre></td></tr></table></figure><p>3、在<code>Controller</code>中使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log(title = &quot;测试标题&quot;, businessType = BusinessType.TEST)</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">test</span><span class="hljs-params">(...)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> success(...);<br>&#125;<br></code></pre></td></tr></table></figure><p>操作日志记录逻辑实现代码[LogAspect.java]<br>登录系统（系统管理-操作日志）可以查询操作日志列表和详细信息。</p><h2 id="1-8-项目数据模型"><a href="#1-8-项目数据模型" class="headerlink" title="1.8 项目数据模型"></a>1.8 项目数据模型</h2><h3 id="1-8-1-用户"><a href="#1-8-1-用户" class="headerlink" title="1.8.1 用户"></a>1.8.1 用户</h3><p><strong>user</strong></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103330960.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726100450588-17219594939428.png"></p><!--![](第1章_项目搭建/image-20240726103330960-173140382376121.png)![](第1章_项目搭建/image-20240726100450588-17219594939428-173140382594523.png)--><h3 id="1-8-2-商品"><a href="#1-8-2-商品" class="headerlink" title="1.8.2 商品"></a>1.8.2 商品</h3><h4 id="1、核心概念"><a href="#1、核心概念" class="headerlink" title="1、核心概念"></a>1、核心概念</h4><p><strong>（1）商品规格介绍</strong></p><p>在电商项目中，商品规格指的是商品属性、型号、尺寸、颜色等具体描述商品特点和属性的标准化信息。</p><p>以手机为例子，它的规格可能包括以下几个方面：</p><ul><li><p>操作系统：Android、iOS、HarmonyOS 等。</p></li><li><p>屏幕尺寸：5.5 吋、6.7 吋等。</p></li><li><p>分辨率：1920x1080、2960x1440、2532x1170 等。</p></li><li><p>运行内存：6GB、8GB、12GB 等。</p></li><li><p>存储容量：64GB、128GB、256GB 等。</p></li><li><p>摄像头：单摄、双摄、四摄等。</p></li><li><p>电池容量：3500mAh、4500mAh、5000mAh 等。</p></li></ul><p>以T恤衫举例子，它的规格可能包括以下几个方面：</p><ul><li><p>颜色：白色</p></li><li><p>尺码：S、M、L、XL等</p></li><li><p>款式：圆领、V领、印花等</p></li></ul><p><strong>（2）SPU和SKU</strong></p><ul><li><strong>SPU</strong></li></ul><p>SPU &#x3D; Standard Product Unit （标准化产品单元）, SPU是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的<strong>集合</strong>，该<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>描述了一个产品的特性。通俗点讲就是泛指一类商品，这种商品具有相同的属性。</p><ul><li><strong>SKU</strong></li></ul><p>SKU &#x3D; stock keeping unit(库存量单位) SKU即库存进出计量的单位（买家购买、商家进货、供应商备货、工厂生产都是依据SKU进行的）。是和具体的属性值有直接的关联关系。SKU是<strong>物理上不可分割的最小存货单元。</strong>也就是说一款商品，可以<strong>根据SKU来确定具体的货物存量。</strong></p><p>以手机为例，假设有一款名为 “XPhone” 的手机品牌，它推出了一款型号为 “X10” 的手机。这款手机一共有以下几种属性：</p><ul><li><p>颜色：黑色、白色、金色</p></li><li><p>存储容量：64GB、128GB</p></li><li><p>内存大小：4GB、6GB</p></li></ul><p>那么，<strong>“X10” 这款手机就是商品的 SPU，它包含的属性。根据不同的属性组合，可以形成多个不同的 SKU。</strong>如下所示：</p><table><thead><tr><th align="center">SPU</th><th align="center">SKU</th><th align="center">颜色</th><th align="center">存储容量</th><th align="center">内存大小</th></tr></thead><tbody><tr><td align="center">X10</td><td align="center">SKU1</td><td align="center">黑色</td><td align="center">64GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU2</td><td align="center">白色</td><td align="center">64GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU3</td><td align="center">金色</td><td align="center">64GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU4</td><td align="center">黑色</td><td align="center">128GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU5</td><td align="center">白色</td><td align="center">128GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU6</td><td align="center">金色</td><td align="center">128GB</td><td align="center">4GB</td></tr><tr><td align="center">X10</td><td align="center">SKU7</td><td align="center">黑色</td><td align="center">64GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU8</td><td align="center">白色</td><td align="center">64GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU9</td><td align="center">金色</td><td align="center">64GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU10</td><td align="center">黑色</td><td align="center">128GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU11</td><td align="center">白色</td><td align="center">128GB</td><td align="center">6GB</td></tr><tr><td align="center">X10</td><td align="center">SKU12</td><td align="center">金色</td><td align="center">128GB</td><td align="center">6GB</td></tr></tbody></table><p>再以衣服为例，假设有一家服装网店推出了一款名为 “A衬衫” 的衣服。这款衣服一共有以下几种属性：</p><ul><li><p>尺寸：S、M、L、XL</p></li><li><p>颜色：白色、黑色、灰色、蓝色</p></li></ul><p>那么，“A衬衫” 这款衣服就是这个商品的 SPU，它包含所有属性。而根据不同的属性组合，可以形成多个不同的 SKU。如下所示：</p><table><thead><tr><th align="center">SPU</th><th align="center">SKU</th><th align="center">尺寸</th><th align="center">颜色</th></tr></thead><tbody><tr><td align="center">A衬衫</td><td align="center">SKU1</td><td align="center">S</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU2</td><td align="center">M</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU3</td><td align="center">L</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU4</td><td align="center">XL</td><td align="center">白色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU5</td><td align="center">S</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU6</td><td align="center">M</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU7</td><td align="center">L</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU8</td><td align="center">XL</td><td align="center">黑色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU9</td><td align="center">S</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU10</td><td align="center">M</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU11</td><td align="center">L</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU12</td><td align="center">XL</td><td align="center">灰色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU13</td><td align="center">S</td><td align="center">蓝色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU14</td><td align="center">M</td><td align="center">蓝色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU15</td><td align="center">L</td><td align="center">蓝色</td></tr><tr><td align="center">A衬衫</td><td align="center">SKU16</td><td align="center">XL</td><td align="center">蓝色</td></tr></tbody></table><h4 id="2、表结构"><a href="#2、表结构" class="headerlink" title="2、表结构"></a>2、表结构</h4><p><strong>product</strong></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103420674.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726101727253.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726101802666.png"></p><!--![](第1章_项目搭建/image-20240726103420674-173140383119425.png)![](第1章_项目搭建/image-20240726101727253-173140383285727.png)![](第1章_项目搭建/image-20240726101802666-173140383750829.png)--><h3 id="1-8-3-订单"><a href="#1-8-3-订单" class="headerlink" title="1.8.3 订单"></a>1.8.3 订单</h3><p><strong>order</strong></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103452574.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726101954204.png"></p><!--![](第1章_项目搭建/image-20240726103452574-173140384047931.png)![](第1章_项目搭建/image-20240726101954204-173140384261433.png)--><h3 id="1-8-4-支付"><a href="#1-8-4-支付" class="headerlink" title="1.8.4 支付"></a>1.8.4 支付</h3><p><strong>payment</strong></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103509551.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726102104506.png"></p><!--![](第1章_项目搭建/image-20240726103509551-173140384529035.png)![](第1章_项目搭建/image-20240726102104506-173140384687637.png)--><h3 id="1-8-5-其他"><a href="#1-8-5-其他" class="headerlink" title="1.8.5 其他"></a>1.8.5 其他</h3><p><strong>system</strong></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103528064.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726102935701.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726102558088.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240726103243276.png"></p><!--![](第1章_项目搭建/image-20240726103528064-173140385023239.png)![](第1章_项目搭建/image-20240726102935701-173140385256341.png)![](第1章_项目搭建/image-20240726102558088-173140385464443.png)![](第1章_项目搭建/image-20240726103243276-173140385666845.png)--><h2 id="1-9-后台功能演示"><a href="#1-9-后台功能演示" class="headerlink" title="1.9 后台功能演示"></a>1.9 后台功能演示</h2><h3 id="1-9-1-品牌管理"><a href="#1-9-1-品牌管理" class="headerlink" title="1.9.1 品牌管理"></a>1.9.1 品牌管理</h3><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729104745252.png"></p><!--![](第1章_项目搭建/image-20240729104745252-173140385974247.png)--><h3 id="1-9-2-分类管理"><a href="#1-9-2-分类管理" class="headerlink" title="1.9.2 分类管理"></a>1.9.2 分类管理</h3><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729104824522.png"></p><!--![](第1章_项目搭建/image-20240729104824522-173140386203849.png)--><h3 id="1-9-3-商品管理"><a href="#1-9-3-商品管理" class="headerlink" title="1.9.3 商品管理"></a>1.9.3 商品管理</h3><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729104903667.png"></p><p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/image-20240729105010959.png"></p><!--![](第1章_项目搭建/image-20240729104903667-173140386622351.png)![](第1章_项目搭建/image-20240729105010959-173140386857353.png)--><h2 id="1-10-代码推送到远程仓库"><a href="#1-10-代码推送到远程仓库" class="headerlink" title="1.10 代码推送到远程仓库"></a>1.10 代码推送到远程仓库</h2><h3 id="1-10-1-新建远程仓库"><a href="#1-10-1-新建远程仓库" class="headerlink" title="1.10.1 新建远程仓库"></a>1.10.1 新建远程仓库</h3><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257136041.png" alt style="zoom: 50%;"><!--<img src="/第1章_项目搭建/1709257136041.png" alt="" style="zoom: 50%;" />--><h3 id="1-10-2-提交代码推送到远程仓库"><a href="#1-10-2-提交代码推送到远程仓库" class="headerlink" title="1.10.2 提交代码推送到远程仓库"></a>1.10.2 提交代码推送到远程仓库</h3><h4 id="1、查看gitee远程仓库地址"><a href="#1、查看gitee远程仓库地址" class="headerlink" title="1、查看gitee远程仓库地址"></a>1、查看gitee远程仓库地址</h4><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257242191.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709257242191.png" alt="" style="zoom:50%;" />--><h4 id="2、参考上图推送代码到远程仓库"><a href="#2、参考上图推送代码到远程仓库" class="headerlink" title="2、参考上图推送代码到远程仓库"></a>2、参考上图推送代码到远程仓库</h4><p><strong>初始化本地仓库：</strong></p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257399703.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709257399703.png" alt="" style="zoom:50%;" />--><p><strong>提交到本地仓库：</strong></p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257590932.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709257590932.png" alt="" style="zoom:50%;" />--><p><strong>推送到远程仓库：</strong></p><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257844638.png" alt style="zoom:50%;"><img src="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC1%E7%AB%A0_%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/1709257927073.png" alt style="zoom:50%;"><!--<img src="/第1章_项目搭建/1709257844638.png" alt="" style="zoom:50%;" /><img src="/第1章_项目搭建/1709257927073.png" alt="" style="zoom:50%;" />-->]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>0、准备相关软件环境</title>
    <link href="/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC0%E7%AB%A0_%E5%87%86%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/07/04/%E9%A1%B9%E7%9B%AE/%E5%B0%8F%E5%9E%8B%E7%94%B5%E5%95%86%E6%A8%A1%E6%8B%9F/%E7%AC%AC0%E7%AB%A0_%E5%87%86%E5%A4%87%E8%BD%AF%E4%BB%B6%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="准备相关软件环境"><a href="#准备相关软件环境" class="headerlink" title="准备相关软件环境"></a>准备相关软件环境</h2><h3 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h3><p>环境安装：</p><blockquote><p>yum -y install gcc-c++</p></blockquote><p>第一步：安装必要的一些系统工具</p><blockquote><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p></blockquote><p>第二步：添加软件源信息</p><blockquote><p>yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" title="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><p>第三步：更新并安装Docker-CE</p><blockquote><p>yum makecache fast<br>yum -y install docker-ce</p></blockquote><p>第四步：开启Docker服务</p><blockquote><p>service docker start<br>systemctl enable docker</p></blockquote><p>第五步：测试是否安装成功</p><blockquote><p>docker -v</p></blockquote><p><strong>第六步：配置镜像加速器</strong></p><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p><blockquote><p>sudo mkdir -p &#x2F;etc&#x2F;docker</p></blockquote><p>新建daemon.json文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://registry.dockermirror.com&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>sudo systemctl daemon-reload<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker</p></blockquote><h3 id="2、安装mysql"><a href="#2、安装mysql" class="headerlink" title="2、安装mysql"></a>2、安装mysql</h3><p><strong>已安装的忽略</strong></p><p>第一步：拉取镜像</p><blockquote><p>docker pull mysql:8.0.29</p></blockquote><p>第二步：启动</p><blockquote><p>docker run –name mysql –restart&#x3D;always -v mysql-data:&#x2F;var&#x2F;lib&#x2F;mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;root -d mysql:8.0.29</p></blockquote><p>第三步：测试mysql</p><p>进入容器：</p><blockquote><p>docker exec -it mysql  &#x2F;bin&#x2F;bash</p></blockquote><p>登录mysql：</p><blockquote><p>mysql -u root -p</p><p>输入密码：root</p></blockquote><p>如果顺利进入，安装成功</p><blockquote><p>#修改默认密码校验方式<br>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;</p></blockquote><h3 id="3、按照Redis"><a href="#3、按照Redis" class="headerlink" title="3、按照Redis"></a>3、按照Redis</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><blockquote><p>docker pull redis:7.0.10</p></blockquote><p>第二步：启动</p><blockquote><p>docker run –name&#x3D;redis -d -p 6379:6379  –restart&#x3D;always redis:7.0.10</p></blockquote><h3 id="4、安装nacos"><a href="#4、安装nacos" class="headerlink" title="4、安装nacos"></a>4、安装nacos</h3><p>已安装或能访问忽略</p><p>第一步：拉取镜像</p><blockquote><p>docker pull nacos&#x2F;nacos-server:v2.1.1</p></blockquote><p>第二步：启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-e MODE=standalone \<br>-p 8848:8848 \<br>-p 9848:9848 \<br>-p 9849:9849 \<br>--name nacos2.1.1 \<br>--restart=always \<br>nacos/nacos-server:v2.1.1<br></code></pre></td></tr></table></figure><h3 id="5、安装minio"><a href="#5、安装minio" class="headerlink" title="5、安装minio"></a>5、安装minio</h3><h4 id="5-1-Minio介绍"><a href="#5-1-Minio介绍" class="headerlink" title="5.1 Minio介绍"></a>5.1 Minio介绍</h4><p>官网：<a href="https://www.minio.org.cn/">https://www.minio.org.cn/</a></p><p>MinIO是一个开源的分布式对象存储服务器，支持S3协议并且可以在多节点上实现数据的高可用和容错。它采用Go语言开发，拥有轻量级、高性能、</p><p>易部署等特点，并且可以自由选择底层存储介质。</p><p>MinIO的主要特点包括：</p><p>1、高性能：MinIO基于GO语言编写，具有高速、轻量级、高并发等性能特点，还支持多线程和缓存等机制进行优化，可以快速地处理大规模数据。</p><p>2、可扩展性：MinIO采用分布式存储模式，支持水平扩展，通过增加节点数量来扩展存储容量和性能，支持自动数据迁移和负载均衡。</p><p>3、安全性：MinIO提供了多种安全策略，如访问控制列表（ACL）、服务端加密（SSE）、传输层安全性（TLS）等，可以保障数据安全和隐私。</p><p>4、兼容性：MinIO兼容AWS S3 API，还支持其他云服务提供商的API，比如GCP、Azure等，可以通过简单的配置实现互操作性。</p><p>5、简单易用：MinIO的部署和管理非常简单，只需要运行一个二进制包即可启动服务，同时提供了Web界面和命令行工具等方便的管理工具。</p><p><strong>S3协议</strong>是Amazon Web Services (AWS) 提供的对象存储服务（Simple Storage Service）的API协议。它是一种 RESTful风格的Web服务接口，使</p><p>用HTTP&#x2F;HTTPS协议进行通信，支持多种编程语言和操作系统，并实现了数据的可靠存储、高扩展性以及良好的可用性。</p><p>已安装或能访问忽略</p><h4 id="5-2-Minio安装"><a href="#5-2-Minio安装" class="headerlink" title="5.2 Minio安装"></a>5.2 Minio安装</h4><p>第一步：拉取镜像</p><blockquote><p>docker pull minio&#x2F;minio</p></blockquote><p>第二步：启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run \<br>-p 9000:9000 \<br>-p 9001:9001 \<br>--name=minio \<br>-d --restart=always \<br>-e &quot;MINIO_ROOT_USER=admin&quot; \<br>-e &quot;MINIO_ROOT_PASSWORD=admin123456&quot; \<br>-v minio-data:/data \<br>-v minio-config:/root/.minio \<br>minio/minio server /data --console-address &quot;:9001&quot;<br></code></pre></td></tr></table></figure><p>浏览器访问：<a href="http://ip:9001/minio/login%EF%BC%8C%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81admin/admin123456%E7%99%BB%E5%BD%95" title="http://IP:9001/minio/login，登录使用自定义账户密码admin/admin123456登录">http://IP:9001/minio/login，登录使用自定义账户密码admin/admin123456登录</a></p><p><strong>注意</strong>：文件上传时，需要调整一下linux 服务器的时间与windows 时间一致！</p><blockquote><p>第一步：安装ntp服务<br>yum -y install ntp<br>第二步：开启开机启动服务<br>systemctl enable ntpd<br>第三步：启动服务<br>systemctl start ntpd<br>第四步：更改时区<br>timedatectl set-timezone Asia&#x2F;Shanghai<br>第五步：启用ntp同步<br>timedatectl set-ntp yes<br>第六步：同步时间<br>ntpq -p</p></blockquote><h3 id="6、安装rabbitmq"><a href="#6、安装rabbitmq" class="headerlink" title="6、安装rabbitmq"></a>6、安装rabbitmq</h3><p>第一步：拉取镜像</p><blockquote><p>docker pull rabbitmq:3.12.0-management</p></blockquote><p>第二步：启动</p><blockquote><p>docker run -d –name&#x3D;rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12.0-management</p></blockquote><p>第三步：安装延迟队列插件 </p><ol><li><p>首先下载rabbitmq_delayed_message_exchange-3.12.0.ez文件上传到RabbitMQ所在服务器，下载地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a>         </p><p><strong>注意：也可以使用课件资料&#x2F;rabbitmq插件目录中下载好的</strong></p></li><li><p>切换到插件所在目录，执行<code>docker cp rabbitmq_delayed_message_exchange-3.12.0.ez rabbitmq:/plugins</code>命令，将刚插件拷贝到容器内plugins目录下</p></li><li><p>执行<code>docker exec -it rabbitmq /bin/bash</code>命令进入到容器内部</p></li><li><p>执行<code>cd plugins</code>进入plugins目录,然后执行<code>ls -l|grep delay </code>命令查看插件是否copy成功</p></li><li><p>在容器内plugins目录下，执行<code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange </code>命令启用插件</p></li><li><p>exit命令退出RabbitMQ容器内部，然后执行<code> docker restart rabbitmq</code>命令重启RabbitMQ容器</p></li></ol><h3 id="7、环境测试"><a href="#7、环境测试" class="headerlink" title="7、环境测试"></a>7、环境测试</h3><p>使用mysql&#x2F;redis客户端工具远程连接mysql&#x2F;redis测试</p><p>nacos控制台访问测试:  <code>http://虚拟机IP:8848/nacos      </code>   账号密码：nacos&#x2F;nacos</p><p>rabbitmq控制台访问测试：<code>http://虚拟机IP:15672 </code> 账号密码：guest&#x2F;guest</p><p>minio控制台访问测试：<code>http://虚拟机IP:9001</code>  账号密码：admin&#x2F;admin123456</p><p><strong>注意：如果访问失败</strong></p><p>1、检查容器是否创建启动成功，可能是端口号占用导致，需要先关闭占用端口号的进程或修改当前容器的端口号</p><p>2、检查防火墙是否关闭，如果未关闭，可以执行<code>systemctl  stop firewalld.service </code>, <code>systemctl disable firewalld.service</code> 关闭</p><p>3、配置虚拟机允许IPv4地址跳转</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 修改配置文件：</span><br>vim /usr/lib/sysctl.d/<span class="hljs-number">00</span>-<span class="hljs-params">system</span>.conf<br><span class="hljs-comment"># 添加</span><br>net.ipv4.ip_forward=<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 保存退出 重启网络</span><br><span class="hljs-params">system</span>ctl restart network<br><span class="hljs-comment"># 重启docker</span><br><span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>小型电商模拟</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7、消息超时</title>
    <link href="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/"/>
    <url>/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="消息超时"><a href="#消息超时" class="headerlink" title="消息超时"></a>消息超时</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p>TTL 全称 Time To Live（存活时间&#x2F;过期时间）。</p><p>当消息到达存活时间后，还没有被消费，会被自动清除。</p><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20240806094631068.png"></p><h1 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2 具体实现"></a>2 具体实现</h1><h2 id="一、队列层面设置"><a href="#一、队列层面设置" class="headerlink" title="一、队列层面设置"></a>一、队列层面设置</h2><h3 id="1、设置"><a href="#1、设置" class="headerlink" title="1、设置"></a>1、设置</h3><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107162548129.png"></p><p>别忘了设置绑定关系：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107162705883.png"></p><h3 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h3><ul><li>不启动消费端程序</li><li>向设置了过期时间的队列中发送100条消息</li><li>等10秒后，看是否全部被过期删除</li></ul><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107163052001.png"></p><h2 id="二、消息层面设置"><a href="#二、消息层面设置" class="headerlink" title="二、消息层面设置"></a>二、消息层面设置</h2><h3 id="1、设置-1"><a href="#1、设置-1" class="headerlink" title="1、设置"></a>1、设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;<br><br><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTTL</span><span class="hljs-params">()</span> &#123;  <br>  <br>    <span class="hljs-comment">// 1、创建消息后置处理器对象  </span><br>    <span class="hljs-type">MessagePostProcessor</span> <span class="hljs-variable">messagePostProcessor</span> <span class="hljs-operator">=</span> (Message message) -&gt; &#123;  <br>  <br>        <span class="hljs-comment">// 设定 TTL 时间，以毫秒为单位</span><br>        message.getMessageProperties().setExpiration(<span class="hljs-string">&quot;5000&quot;</span>);  <br>  <br>        <span class="hljs-keyword">return</span> message;<br>    &#125;;<br>  <br>    <span class="hljs-comment">// 2、发送消息  </span><br>    rabbitTemplate.convertAndSend(    <br>            EXCHANGE_DIRECT,     <br>            ROUTING_KEY,     <br>            <span class="hljs-string">&quot;Hello atguigu&quot;</span>, messagePostProcessor);    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、查看效果"><a href="#2、查看效果" class="headerlink" title="2、查看效果"></a>2、查看效果</h3><p>这次我们是发送到普通队列上：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC7%E7%AB%A0%20%E6%B6%88%E6%81%AF%E8%B6%85%E6%97%B6/image-20231107163534385.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9、延迟队列</title>
    <link href="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
    <url>/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><ul><li><p>延迟队列存储的对象肯定是对应的延时消息，所谓”延时消息”是指当消息被发送以后，并不想让消费者立即拿到消息，而是等待指定时间后，消费者才拿到这个消息进行消费。</p></li><li><p>场景：在订单系统中，一个用户下单之后通常有30分钟的时间进行支付，如果30分钟之内没有支付成功，那么这个订单将进行取消处理。这时就可以使用延时队列将订单信息发送到延时队列。</p></li><li><p>需求：</p></li></ul><ol><li><p>下单后，30分钟未支付，取消订单，回滚库存。</p></li><li><p>新用户注册成功30分钟后，发送短信问候。</p></li></ol><ul><li>实现：</li></ul><p>使用延迟队列实现</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240806095835083.png"></p><p>很可惜，在RabbitMQ中并未提供延迟队列功能</p><p>我们可以采用以下方案实现：</p><p>方案1：借助消息超时时间+死信队列</p><p>方案2：给RabbitMQ安装插件</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240806100015448.png"></p><p>注：使用消息超时时间+死信队列，前面已经演示过了</p><h1 id="2-延迟插件"><a href="#2-延迟插件" class="headerlink" title="2 延迟插件"></a>2 延迟插件</h1><h2 id="一、插件简介"><a href="#一、插件简介" class="headerlink" title="一、插件简介"></a>一、插件简介</h2><ul><li>官网地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange</a></li><li>延迟极限：最多两天</li></ul><h2 id="二、插件安装"><a href="#二、插件安装" class="headerlink" title="二、插件安装"></a>二、插件安装</h2><h3 id="1、确定卷映射目录"><a href="#1、确定卷映射目录" class="headerlink" title="1、确定卷映射目录"></a>1、确定卷映射目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker inspect rabbitmq<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;Mounts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;volume&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rabbitmq-plugin&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/rabbitmq-plugin/_data&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/plugins&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RW&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Propagation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;Type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;volume&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cca7bc3012f5b76bd6c47a49ca6911184f9076f5f6263b41f4b9434a7f269b11&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/docker/volumes/cca7bc3012f5b76bd6c47a49ca6911184f9076f5f6263b41f4b9434a7f269b11/_data&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Destination&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/var/lib/rabbitmq&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;local&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;RW&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Propagation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>和容器内&#x2F;plugins目录对应的宿主机目录是：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;rabbitmq-plugin&#x2F;_data</p><h3 id="2、下载延迟插件"><a href="#2、下载延迟插件" class="headerlink" title="2、下载延迟插件"></a>2、下载延迟插件</h3><p>官方文档说明页地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20231107180045135.png"></p><p>下载插件安装文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez<br>mv rabbitmq_delayed_message_exchange-3.13.0.ez /var/lib/docker/volumes/rabbitmq-plugin/_data<br></code></pre></td></tr></table></figure><h3 id="3、启用插件"><a href="#3、启用插件" class="headerlink" title="3、启用插件"></a>3、启用插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">登录进入容器内部</span><br>docker exec -it rabbitmq /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">rabbitmq-plugins命令所在目录已经配置到<span class="hljs-variable">$PATH</span>环境变量中了，可以直接调用</span><br>rabbitmq-plugins enable rabbitmq_delayed_message_exchange<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出Docker容器</span><br>exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启Docker容器</span><br>docker restart rabbitmq<br></code></pre></td></tr></table></figure><h3 id="4、确认"><a href="#4、确认" class="headerlink" title="4、确认"></a>4、确认</h3><p>确认点1：查看当前节点已启用插件的列表：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240321115348525.png"></p><p>确认点2：如果创建新交换机时可以在type中看到x-delayed-message选项，那就说明插件安装好了</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20231107181914265.png"></p><h2 id="三、创建交换机"><a href="#三、创建交换机" class="headerlink" title="三、创建交换机"></a>三、创建交换机</h2><p>rabbitmq_delayed_message_exchange插件在工作时要求交换机是<span style="color:blue;font-weight:bolder;">x-delayed-message</span>类型才可以，创建方式如下：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240319163915574.png"></p><p>关于<span style="color:blue;font-weight:bolder;">x-delayed-type</span>参数的理解：</p><blockquote><p>原本指定交换机类型的地方使用了x-delayed-message这个值，那么这个交换机除了支持延迟消息之外，到底是direct、fanout、topic这些类型中的哪一个呢？</p><p>这里就额外使用x-delayed-type来指定交换机本身的类型</p></blockquote><h2 id="四、代码测试"><a href="#四、代码测试" class="headerlink" title="四、代码测试"></a>四、代码测试</h2><h3 id="1、生产者端代码"><a href="#1、生产者端代码" class="headerlink" title="1、生产者端代码"></a>1、生产者端代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDelayMessage</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(<br>            EXCHANGE_DELAY,<br>            ROUTING_KEY_DELAY,<br>            <span class="hljs-string">&quot;测试基于插件的延迟消息 [&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;hh:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) + <span class="hljs-string">&quot;]&quot;</span>,<br>            messageProcessor -&gt; &#123;<br><br>                <span class="hljs-comment">// 设置延迟时间：以毫秒为单位</span><br>                messageProcessor.getMessageProperties().setHeader(<span class="hljs-string">&quot;x-delay&quot;</span>, <span class="hljs-string">&quot;10000&quot;</span>);<br><br>                <span class="hljs-keyword">return</span> messageProcessor;<br>            &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、消费者端代码"><a href="#2、消费者端代码" class="headerlink" title="2、消费者端代码"></a>2、消费者端代码</h3><h4 id="①情况A：资源已创建"><a href="#①情况A：资源已创建" class="headerlink" title="①情况A：资源已创建"></a>①情况A：资源已创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDelayMessageListener</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.delay.video&quot;</span>;<br>    <br>    <span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_DELAY&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        log.info(<span class="hljs-string">&quot;[生产者]&quot;</span> + dataString);<br>        log.info(<span class="hljs-string">&quot;[消费者]&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;hh:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②情况B：资源未创建"><a href="#②情况B：资源未创建" class="headerlink" title="②情况B：资源未创建"></a>②情况B：资源未创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;  <br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;  <br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.*;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;  <br><br><span class="hljs-keyword">import</span> java.io.IOException;  <br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDelayMessageListener</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.delay.video&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.key.delay.video&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_DELAY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.delay.video&quot;</span>;<br>  <br>    <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(  </span><br><span class="hljs-meta">        value = @Queue(value = QUEUE_DELAY, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),  </span><br><span class="hljs-meta">        exchange = @Exchange(  </span><br><span class="hljs-meta">                value = EXCHANGE_DELAY,   </span><br><span class="hljs-meta">                durable = &quot;true&quot;,   </span><br><span class="hljs-meta">                autoDelete = &quot;false&quot;,   </span><br><span class="hljs-meta">                type = &quot;x-delayed-message&quot;,   </span><br><span class="hljs-meta">                arguments = @Argument(name = &quot;x-delayed-type&quot;, value = &quot;direct&quot;)),  </span><br><span class="hljs-meta">        key = &#123;ROUTING_KEY_DELAY&#125;  </span><br><span class="hljs-meta">    ))</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        log.info(<span class="hljs-string">&quot;[生产者]&quot;</span> + dataString);  <br>        log.info(<span class="hljs-string">&quot;[消费者]&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;hh:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));  <br>        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);  <br>    &#125;  <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、执行效果"><a href="#3、执行效果" class="headerlink" title="3、执行效果"></a>3、执行效果</h3><h4 id="①交换机类型"><a href="#①交换机类型" class="headerlink" title="①交换机类型"></a>①交换机类型</h4><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240319171359652.png"></p><h4 id="②生产者端效果"><a href="#②生产者端效果" class="headerlink" title="②生产者端效果"></a>②生产者端效果</h4><p><span style="color:blue;font-weight:bolder;">注意</span>：使用rabbitmq_delayed_message_exchange插件后，即使消息成功发送到队列上，也会导致returnedMessage()方法执行</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240321115605608.png"></p><h4 id="③消费者端效果"><a href="#③消费者端效果" class="headerlink" title="③消费者端效果"></a>③消费者端效果</h4><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC9%E7%AB%A0%20%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/image-20240321115646548.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8、死信队列</title>
    <link href="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
    <url>/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-什么是死信队列"><a href="#1-1-什么是死信队列" class="headerlink" title="1.1 什么是死信队列"></a>1.1 什么是死信队列</h2><p>死信队列，英文缩写：DLX 。DeadLetter Exchange（死信交换机），当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX。</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20240806095014641.png"></p><p>先从概念解释上搞清楚这个定义，死信，顾名思义就是无法被消费的消息，字面意思可以这样理解，一般来说，producer将消息投递到broker或者直接到queue里了，consumer从queue取出消息进行消费，但某些时候由于特定的原因导致queue中的某些消息无法被消费，这样的消息如果没有后续的处理，就变成了死信，有死信，自然就有了死信队列；</p><h2 id="1-2-消息成为死信的三种情况"><a href="#1-2-消息成为死信的三种情况" class="headerlink" title="1.2 消息成为死信的三种情况"></a>1.2 <strong>消息成为死信的三种情况</strong></h2><ul><li><strong>拒绝：</strong>消费者拒接消息，basicNack()&#x2F;basicReject()，并且不把消息重新放入原目标队列，requeue&#x3D;false</li><li><strong>溢出：</strong>队列中消息数量到达限制。比如队列最大只能存储10条消息，且现在已经存储了10条，此时如果再发送一条消息进来，根据先进先出原则，队列中最早的消息会变成死信</li><li><strong>超时：</strong>消息到达超时时间未被消费</li></ul><h2 id="1-3-死信的处理方式"><a href="#1-3-死信的处理方式" class="headerlink" title="1.3 死信的处理方式"></a>1.3 死信的处理方式</h2><p>死信的产生既然不可避免，那么就需要从实际的业务角度和场景出发，对这些死信进行后续的处理，常见的处理方式大致有下面几种，</p><p><strong>① 丢弃，</strong>如果不是很重要，可以选择丢弃</p><p><strong>② 记录死信入库，</strong>然后做后续的业务分析或处理</p><p><strong>③ 通过死信队列，</strong>由负责监听死信的应用程序进行处理</p><p>综合来看，更常用的做法是第三种，即通过死信队列，将产生的死信通过程序的配置路由到指定的死信队列，然后应用监听死信队列，对接收到的死信做后续的处理，</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><h2 id="一、测试相关准备"><a href="#一、测试相关准备" class="headerlink" title="一、测试相关准备"></a>一、测试相关准备</h2><h3 id="1、创建死信交换机和死信队列"><a href="#1、创建死信交换机和死信队列" class="headerlink" title="1、创建死信交换机和死信队列"></a>1、创建死信交换机和死信队列</h3><p>常规设定即可，没有特殊设置：</p><ul><li>死信交换机：exchange.dead.letter.video</li><li>死信队列：queue.dead.letter.video</li><li>死信路由键：routing.key.dead.letter.video</li></ul><h3 id="2、创建正常交换机和正常队列"><a href="#2、创建正常交换机和正常队列" class="headerlink" title="2、创建正常交换机和正常队列"></a>2、创建正常交换机和正常队列</h3><p><span style="color:blue;font-weight:bolder;">注意</span>：一定要注意正常队列有诸多限定和设置，这样才能让无法处理的消息进入死信交换机</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20240318165821774.png"></p><ul><li>正常交换机：exchange.normal.video</li><li>正常队列：queue.normal.video</li><li>正常路由键：routing.key.normal.video</li></ul><p>全部设置完成后参照如下细节：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20240318165927279.png"></p><h3 id="3、Java代码中的相关常量声明"><a href="#3、Java代码中的相关常量声明" class="headerlink" title="3、Java代码中的相关常量声明"></a>3、Java代码中的相关常量声明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.normal.video&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DEAD_LETTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.dead.letter.video&quot;</span>;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.key.normal.video&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_DEAD_LETTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing.key.dead.letter.video&quot;</span>;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NORMAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.normal.video&quot;</span>;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_DEAD_LETTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.dead.letter.video&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="二、消费端拒收消息"><a href="#二、消费端拒收消息" class="headerlink" title="二、消费端拒收消息"></a>二、消费端拒收消息</h2><h3 id="1、发送消息的代码"><a href="#1、发送消息的代码" class="headerlink" title="1、发送消息的代码"></a>1、发送消息的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageButReject</span><span class="hljs-params">()</span> &#123;  <br>    rabbitTemplate  <br>            .convertAndSend(  <br>                    EXCHANGE_NORMAL,  <br>                    ROUTING_KEY_NORMAL,  <br>                    <span class="hljs-string">&quot;测试死信情况1：消息被拒绝&quot;</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、接收消息的代码"><a href="#2、接收消息的代码" class="headerlink" title="2、接收消息的代码"></a>2、接收消息的代码</h3><h4 id="①监听正常队列"><a href="#①监听正常队列" class="headerlink" title="①监听正常队列"></a>①监听正常队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_NORMAL&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageNormal</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 监听正常队列，但是拒绝消息</span><br>    log.info(<span class="hljs-string">&quot;★[normal]消息接收到，但我拒绝。&quot;</span>);<br>    channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="②监听死信队列"><a href="#②监听死信队列" class="headerlink" title="②监听死信队列"></a>②监听死信队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_DEAD_LETTER&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageDead</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>    <span class="hljs-comment">// 监听死信队列  </span><br>    log.info(<span class="hljs-string">&quot;★[dead letter]dataString = &quot;</span> + dataString);<br>    log.info(<span class="hljs-string">&quot;★[dead letter]我是死信监听方法，我接收到了死信消息&quot;</span>);<br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、执行结果"><a href="#3、执行结果" class="headerlink" title="3、执行结果"></a>3、执行结果</h3><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107170523503.png"></p><h2 id="三、消息数量超过队列容纳极限"><a href="#三、消息数量超过队列容纳极限" class="headerlink" title="三、消息数量超过队列容纳极限"></a>三、消息数量超过队列容纳极限</h2><h3 id="1、发送消息的代码-1"><a href="#1、发送消息的代码-1" class="headerlink" title="1、发送消息的代码"></a>1、发送消息的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMultiMessage</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;  <br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_NORMAL,  <br>                ROUTING_KEY_NORMAL,  <br>                <span class="hljs-string">&quot;测试死信情况2：消息数量超过队列的最大容量&quot;</span> + i);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、接收消息的代码-1"><a href="#2、接收消息的代码-1" class="headerlink" title="2、接收消息的代码"></a>2、接收消息的代码</h3><p>消息接收代码不再拒绝消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;QUEUE_NORMAL&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageNormal</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 监听正常队列</span><br>    log.info(<span class="hljs-string">&quot;★[normal]消息接收到。&quot;</span>);<br>    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>重启微服务使代码修改生效。</p><h3 id="3、执行效果"><a href="#3、执行效果" class="headerlink" title="3、执行效果"></a>3、执行效果</h3><p>正常队列的参数如下图所示：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107171231765.png"></p><p>生产者发送20条消息之后，消费端死信队列接收到前10条消息：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/img87.png"></p><h2 id="四、消息超时未消费"><a href="#四、消息超时未消费" class="headerlink" title="四、消息超时未消费"></a>四、消息超时未消费</h2><h3 id="1、发送消息的代码-2"><a href="#1、发送消息的代码-2" class="headerlink" title="1、发送消息的代码"></a>1、发送消息的代码</h3><p>正常发送一条消息即可，所以使用第一个例子的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTimeout</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate<br>            .convertAndSend(<br>                    EXCHANGE_NORMAL,<br>                    ROUTING_KEY_NORMAL,<br>                    <span class="hljs-string">&quot;测试死信情况3：消息超时&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、执行效果"><a href="#2、执行效果" class="headerlink" title="2、执行效果"></a>2、执行效果</h3><p>队列参数生效：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107172002297.png"></p><p>因为没有消费端监听程序，所以消息未超时前滞留在队列中：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107172234849.png"></p><p>消息超时后，进入死信队列：</p><p><img src="/2024/06/06/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC8%E7%AB%A0%20%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/image-20231107172042460.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5、消息百分百成功投递</title>
    <link href="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/"/>
    <url>/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h1 id="消息百分百成功投递"><a href="#消息百分百成功投递" class="headerlink" title="消息百分百成功投递"></a>消息百分百成功投递</h1><h1 id="1-消息百分百成功投递"><a href="#1-消息百分百成功投递" class="headerlink" title="1 消息百分百成功投递"></a>1 消息百分百成功投递</h1><p>谈到消息的可靠性投递，无法避免的，在实际的工作中会经常碰到，比如一些核心业务需要保障消息不丢失，接下来我们看一个可靠性投递的流程图，说明可靠性投递的概念：</p><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/wps1-17229105587141.jpg"> </p><p>Step 1： 首先把消息信息(业务数据）存储到数据库中，紧接着，我们再把这个消息记录也存储到一张消息记录表里（或者另外一个同源数据库的消息记录表）</p><p>Step 2：发送消息到MQ Broker节点（采用confirm方式发送，会有异步的返回结果）</p><p>Step 3、4：生产者端接受MQ Broker节点返回的Confirm确认消息结果，然后进行更新消息记录表里的消息状态。比如默认Status &#x3D; 0 当收到消息确认成功后，更新为1即可！</p><p>Step 5：但是在消息确认这个过程中可能由于网络闪断、MQ Broker端异常等原因导致 回送消息失败或者异常。这个时候就需要发送方（生产者）对消息进行可靠性投递了，保障消息不丢失，100%的投递成功！（有一种极限情况是闪断，Broker返回的成功确认消息，但是生产端由于网络闪断没收到，这个时候重新投递可能会造成消息重复，需要消费端去做幂等处理）所以我们需要有一个定时任务，（比如每5分钟拉取一下处于中间状态的消息，当然这个消息可以设置一个超时时间，比如超过1分钟 Status &#x3D; 0 ，也就说明了1分钟这个时间窗口内，我们的消息没有被确认，那么会被定时任务拉取出来）</p><p>Step 6：接下来我们把中间状态的消息进行重新投递 retry send，继续发送消息到MQ ，当然也可能有多种原因导致发送失败</p><p>Step 7：我们可以采用设置最大努力尝试次数，比如投递了3次，还是失败，那么我们可以将最终状态设置为Status &#x3D; 2 ，最后 交由人工解决处理此类问题（或者把消息转储到失败表中）。</p><h1 id="2-消息幂等性保障"><a href="#2-消息幂等性保障" class="headerlink" title="2 消息幂等性保障"></a>2 消息幂等性保障</h1><p>幂等性指一次和多次请求某一个资源,对于资源本身应该具有同样的结果。也就是说,其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC5%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%99%BE%E5%88%86%E7%99%BE%E6%88%90%E5%8A%9F%E6%8A%95%E9%80%92/wps2-17229106077093.jpg"> </p><p>在MQ中指,消费多条相同的消息,得到与消费该消息一次相同的结果。</p><p><strong>消息幂等性保障 乐观锁机制</strong></p><p>生产者发送消息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span>,money<span class="hljs-operator">=</span><span class="hljs-number">500</span>,version<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>消费者接收消息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span>,money<span class="hljs-operator">=</span><span class="hljs-number">500</span>,version<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span>,money<span class="hljs-operator">=</span><span class="hljs-number">500</span>,version<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>消费者需要保证幂等性：第一次执行SQL语句</p><p>第一次执行：version&#x3D;1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> , version <span class="hljs-operator">=</span> version <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>消费者需要保证幂等性：第二次执行SQL语句</p><p>第二次执行：version&#x3D;2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> account <span class="hljs-keyword">set</span> money <span class="hljs-operator">=</span> money <span class="hljs-operator">-</span> <span class="hljs-number">500</span> , version <span class="hljs-operator">=</span> version <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6、消费端限流</title>
    <link href="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/"/>
    <url>/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20240806094300945.png"></p><ul><li>生产者发送10000个消息</li><li>消费端并发能力上限：同时处理1000个请求</li><li>设定：</li></ul><p>​每次最多从队列取回1000个请求</p><h1 id="二、生产者端代码"><a href="#二、生产者端代码" class="headerlink" title="二、生产者端代码"></a>二、生产者端代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        rabbitTemplate.convertAndSend(<br>                EXCHANGE_DIRECT,<br>                ROUTING_KEY,<br>                <span class="hljs-string">&quot;Hello atguigu&quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、消费者端代码"><a href="#三、消费者端代码" class="headerlink" title="三、消费者端代码"></a>三、消费者端代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2、正常业务操作</span><br>log.info(<span class="hljs-string">&quot;消费端接收到消息内容：&quot;</span> + dataString);<br><br><span class="hljs-comment">// System.out.println(10 / 0);</span><br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 3、给 RabbitMQ 服务器返回 ACK 确认信息</span><br>channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h1 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h1><h2 id="1、未使用prefetch"><a href="#1、未使用prefetch" class="headerlink" title="1、未使用prefetch"></a>1、未使用prefetch</h2><ul><li>不要启动消费端程序，如果正在运行就把它停了</li><li>运行生产者端程序发送100条消息</li><li>查看队列中消息的情况：</li></ul><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107155915253.png"></p><ul><li><p>说明：</p><ul><li>Ready表示已经发送到队列的消息数量</li><li>Unacked表示已经发送到消费端但是消费端尚未返回ACK信息的消息数量</li><li>Total未被删除的消息总数</li></ul></li><li><p>接下来启动消费端程序，再查看队列情况：</p></li></ul><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160233539.png"></p><ul><li>能看到消息全部被消费端取走了，正在逐个处理、确认，说明有多少消息消费端就并发处理多少</li></ul><h2 id="2、设定prefetch"><a href="#2、设定prefetch" class="headerlink" title="2、设定prefetch"></a>2、设定prefetch</h2><h3 id="①YAML配置"><a href="#①YAML配置" class="headerlink" title="①YAML配置"></a>①YAML配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 设置每次最多从消息队列服务器取回多少消息</span><br></code></pre></td></tr></table></figure><h3 id="②测试流程"><a href="#②测试流程" class="headerlink" title="②测试流程"></a>②测试流程</h3><ul><li>停止消费端程序</li><li>运行生产者端程序发送100条消息</li><li>查看队列中消息的情况：</li></ul><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160820062.png"></p><ul><li>接下来启动消费端程序，持续观察队列情况：</li></ul><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160922632.png"></p><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160936216.png"></p><p><img src="/2024/06/05/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC6%E7%AB%A0%20%E6%B6%88%E8%B4%B9%E7%AB%AF%E9%99%90%E6%B5%81/image-20231107160951639.png"></p><ul><li>能看到消息不是一次性全部取回的，而是有个过程</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1、RabbitMQ概述和安装</title>
    <link href="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <url>/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ概述和安装"><a href="#RabbitMQ概述和安装" class="headerlink" title="RabbitMQ概述和安装"></a>RabbitMQ概述和安装</h1><h1 id="一、消息中间件概述"><a href="#一、消息中间件概述" class="headerlink" title="一、消息中间件概述"></a>一、消息中间件概述</h1><h2 id="1-为什么学习消息队列"><a href="#1-为什么学习消息队列" class="headerlink" title="1 为什么学习消息队列"></a>1 为什么学习消息队列</h2><p>在互联网应用中，经常需要对庞大的海量数据进行监控，随着网络技术和软件开发技术的不断提高，在实战开发中MQ的使用与日俱增，特别是RabbitMQ在分布式系统中存储转发消息，可以保证数据不丢失，也能保证高可用性，即集群部署的时候部分机器宕机可以继续运行。在大型电子商务类网站，如京东、淘宝、去哪儿等网站有着深入的应用 。</p><p>消息队列的主要作用是<strong>消除高并发访问高峰，加快网站的响应速度</strong>。</p><p>在不使用消息队列的情况下，用户的请求数据直接写入数据库，在高并发的情况下，会对数据库造成巨大的压力，同时也使得系统响应延迟加剧。</p><h2 id="2-什么是消息中间件"><a href="#2-什么是消息中间件" class="headerlink" title="2 什么是消息中间件"></a>2 什么是消息中间件</h2><p>MQ全称为<strong>Message Queue</strong>， 消息队列(MQ)是一种应用程序对应用程序的通信方法。</p><p>介绍：消息队列就是基础数据结构中的“先进先出”的一种数据机构。想一下，生活中买东西，需要排队，先排的人先买消费，就是典型的“先进先出”。</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-9860.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-9860.png)--><p><strong>消息传递：</strong>指的是程序之间通过消息发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。</p><p><strong>排队：</strong>指的是应用程序通过队列来通信。</p><p><strong>业务场景说明：</strong></p><p>消息队列在大型电子商务类网站，如京东、淘宝、去哪儿等网站有着深入的应用，为什么会产生消息队列？有几个原因：</p><p>不同进程（process）之间传递消息时，两个进程之间<strong>耦合</strong>程度过高，改动一个进程，引发必须修改另一个进程，为了<strong>隔离</strong>这两个进程，在两进程间抽离出一层（一个模块），所有两进程之间传递的消息，都必须通过消息队列来传递，单独修改某一个进程，不会影响另一个；</p><p>不同进程（process）之间传递消息时，为了实现标准化，将消息的格式规范化了，并且，某一个进程接受的<strong>消息太多</strong>，一下子无法处理完，并且也有先后顺序，必须对收到的消息<strong>进行排队</strong>，因此诞生了事实上的消息队列；</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong>。</p><h2 id="3-消息队列应用场景"><a href="#3-消息队列应用场景" class="headerlink" title="3 消息队列应用场景"></a>3 消息队列应用场景</h2><p>首先我们先说一下消息中间件的主要的作用：</p><p>　　<strong>[1]异步处理</strong></p><p>　　<strong>[2]解耦服务</strong></p><p>　　<strong>[3]流量削峰</strong></p><p>​        <font style="color:red">分布式事务</font></p><p>上面的三点是我们使用消息中间件最主要的目的.</p><h3 id="3-1-应用解耦"><a href="#3-1-应用解耦" class="headerlink" title="3.1 应用解耦"></a>3.1 应用解耦</h3><ul><li>以下单功能为例，如下图，存在功能耦合度高的问题。</li><li>用户下单，需要保存订单，更新购物车，更新库存，还要更新积分，如果在操作过程中，有任何一个环节失败了，最终会导致操作失败，返回错误信息</li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-8298.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-8298.png)--><ul><li>而采用消息队列方式，可以很好的解决耦合度过高问题</li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-8001.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-8001.png)--><h3 id="3-2-异步处理"><a href="#3-2-异步处理" class="headerlink" title="3.2 异步处理"></a>3.2 异步处理</h3><p>场景说明：用户注册后，需要发注册邮件和注册短信，传统的做法有两种</p><ul><li><p>串行的方式</p></li><li><p>并行的方式</p></li></ul><p><strong>(1)</strong> <strong>串行方式：</strong></p><p>将注册信息写入数据库后，发送注册邮件，再发送注册短信，以上三个任务全部完成后才返回给客户端。 这有一个问题是，邮件，短信并不是必须的，它只是一个通知，而这种做法让客户端等待没有必要等待的东西。</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps1.jpg"> </p><!--![](/第1章 RabbitMQ概述和安装/wps1.jpg) --><p><strong>(2)</strong> <strong>并行方式：</strong></p><p>将注册信息写入数据库后，发送邮件的同时，发送短信，以上三个任务完成后，返回给客户端，并行的方式能提高处理的时间。</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps2.jpg"> </p><!--![](/第1章 RabbitMQ概述和安装/wps2.jpg) --><p>假设三个业务节点分别使用50ms，串行方式使用时间150ms，并行使用时间100ms。虽然并行已经提高了处理时间，但是，前面说过，邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功，应该是写入数据库后就返回.</p><p><strong>(3)消息队列</strong><br>引入消息队列后，把发送邮件，短信不是必须的业务逻辑异步处理</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps3.jpg"> </p><!--![](/第1章 RabbitMQ概述和安装/wps3.jpg) --><p>由此可以看出，引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计)，</p><p>引入消息队列后处理后，响应时间是串行的3分之1，是并行的2分之1。</p><p><strong>传统模式的缺点：</strong></p><p>· 一些非必要的业务逻辑以同步的方式运行，太耗费时间。</p><p><strong>中间件模式的的优点：</strong></p><p>· 将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度</p><h3 id="3-3-流量削峰"><a href="#3-3-流量削峰" class="headerlink" title="3.3 流量削峰"></a>3.3 流量削峰</h3><p>流量削峰一般在秒杀活动中应用广泛</p><p><strong>场景：</strong> 秒杀活动，一般会因为流量过大，导致应用挂掉，为了解决这个问题，一般在应用前端加入消息队列。</p><p><strong>传统模式</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps4.jpg"> </p><!--![](/第1章 RabbitMQ概述和安装/wps4.jpg) --><p><strong>传统模式的缺点：</strong></p><p>· 并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常</p><p><strong>中间件模式：</strong></p><p>消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/wps5.jpg"> </p><!--![](/第1章 RabbitMQ概述和安装/wps5.jpg) --><p><strong>中间件模式的的优点：</strong></p><p>系统A慢慢按照数据库能处理的并发量，从消息队列中拉取消息。在生产中，这个短暂的高峰期积压是允许的。</p><p><strong>流量削峰也叫做削峰填谷</strong></p><p>使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在 3消费完积压的消息，这就叫做“填谷”</p><h2 id="4-AMQP-和-JMS"><a href="#4-AMQP-和-JMS" class="headerlink" title="4 AMQP 和 JMS"></a><strong>4 AMQP 和 JMS</strong></h2><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p><h3 id="4-1-AMQP"><a href="#4-1-AMQP" class="headerlink" title="4.1. AMQP"></a><strong>4.1. AMQP</strong></h3><p>AMQP是一种<strong>高级消息队列协议（Advanced Message Queuing Protocol），更准确的说是一种binary wire-level protocol（</strong>链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h3 id="4-2-JMS"><a href="#4-2-JMS" class="headerlink" title="4.2. JMS"></a><strong>4.2. JMS</strong></h3><p>JMS即<strong>Java消息服务（JavaMessage Service）</strong>应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><h3 id="4-3-AMQP-与-JMS-区别"><a href="#4-3-AMQP-与-JMS-区别" class="headerlink" title="4.3. AMQP 与 JMS 区别"></a><strong>4.3. AMQP 与 JMS 区别</strong></h3><p>· JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</p><p>· JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</p><p>· JMS规定了两种消息模式；而AMQP的消息模式更加丰富</p><h2 id="5-消息队列产品"><a href="#5-消息队列产品" class="headerlink" title="5 消息队列产品"></a><strong>5 消息队列产品</strong></h2><p>市场上常见的消息队列有如下：</p><p>· ActiveMQ：基于JMS</p><p>· ZeroMQ：基于C语言开发</p><p>· Rabbitmq:基于AMQP协议，erlang语言开发，稳定性好</p><p>· RocketMQ：基于JMS，阿里巴巴产品</p><p>· Kafka：类似MQ的产品；分布式消息系统，高吞吐量</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-3981.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-3981.png)--><h2 id="6-RabbitMQ介绍"><a href="#6-RabbitMQ介绍" class="headerlink" title="6 RabbitMQ介绍"></a>6 RabbitMQ介绍</h2><h3 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1 简介"></a>6.1 简介</h3><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。</p><p>AMQP，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议，是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同的开发语言等条件的限制。2006年，AMQP 规范发布。类比HTTP。 </p><p>2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</p><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a> </p><p>RabbitMQ提供了<strong>多种工作模式</strong>：简单模式，work模式 ，Publish&#x2F;Subscribe发布与订阅模式，Routing路由模式，Topics主题模式等</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a> </p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-2095.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-2986.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-2095.png)![](/第1章 RabbitMQ概述和安装/image-2986.png)--><h3 id="6-2-RabbitMQ基础架构"><a href="#6-2-RabbitMQ基础架构" class="headerlink" title="6.2 RabbitMQ基础架构"></a>6.2 RabbitMQ基础架构</h3><ul><li><strong>基础架构图</strong></li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-4889.png"> </p><!--![](/第1章 RabbitMQ概述和安装/image-4889.png) --><ul><li><strong>RabbitMQ相关概念</strong></li></ul><p><strong>Broker：</strong>接收和分发消息的应用，RabbitMQ Server就是 Message Broker</p><p><strong>Virtual host：</strong>出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p><p><strong>Connection：</strong>publisher／consumer 和 broker 之间的 TCP 连接</p><p><strong>Channel：</strong>如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</p><p><strong>Exchange：</strong>message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到queue 中去。常用的类型有：**direct (point-to-point)**， <strong>topic (publish-subscribe)</strong> and <strong>fanout (multicast)</strong></p><p><strong>Queue：</strong>存储消息的容器，消息最终被送到这里，等待 consumer 取走</p><p><strong>Binding：</strong>exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h1 id="二、RabbitMQ安装"><a href="#二、RabbitMQ安装" class="headerlink" title="二、RabbitMQ安装"></a>二、RabbitMQ安装</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取镜像</span><br>docker pull rabbitmq:3.13-management<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 参数：后台运行 Docker 容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--name 参数：设置容器名称</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 参数：映射端口号，格式是“宿主机端口号:容器内端口号”。5672供客户端程序访问，15672供后台管理界面访问</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 参数：卷映射目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-e 参数：设置容器内的环境变量，这里我们设置了登录RabbitMQ管理后台的默认用户和密码</span><br>docker run -d \<br>--name rabbitmq \<br>-p 5672:5672 \<br>-p 15672:15672 \<br>-v rabbitmq-plugin:/plugins \<br>-e RABBITMQ_DEFAULT_USER=guest \<br>-e RABBITMQ_DEFAULT_PASS=123456 \<br>rabbitmq:3.13-management<br></code></pre></td></tr></table></figure><h2 id="2-验证"><a href="#2-验证" class="headerlink" title="2 验证"></a>2 验证</h2><p>访问后台管理界面：<a href="http://192.168.200.100:15672/">http://192.168.200.100:15672</a></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-2610.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-2610.png)--><p>使用上面创建Docker容器时指定的默认用户名、密码登录：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-3997.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-6743.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-3997.png)![](/第1章 RabbitMQ概述和安装/image-6743.png)--><h2 id="3-可能的问题1：Docker升级"><a href="#3-可能的问题1：Docker升级" class="headerlink" title="3 可能的问题1：Docker升级"></a>3 可能的问题1：Docker升级</h2><h3 id="3-1-问题现象"><a href="#3-1-问题现象" class="headerlink" title="3.1 问题现象"></a>3.1 问题现象</h3><p>在使用Docker拉取RabbitMQ镜像的时候，如果遇到提示：missing signature key，那就说明Docker版本太低了，需要升级</p><p>比如我目前的Docker版本如下图所示：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-5299.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-5299.png)--><h3 id="3-2-解决办法"><a href="#3-2-解决办法" class="headerlink" title="3.2 解决办法"></a>3.2 解决办法</h3><blockquote><p>基于CentOS7</p></blockquote><h4 id="①卸载当前Docker"><a href="#①卸载当前Docker" class="headerlink" title="①卸载当前Docker"></a>①卸载当前Docker</h4><p>更好的办法是安装Docker前曾经给服务器拍摄了快照，此时恢复快照；</p><p>如果不曾拍摄快照，那只能执行卸载操作了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum erase -y docker \<br>docker-client \<br>docker-client-latest \<br>docker-common \<br>docker-latest \<br>docker-latest-logrotate \<br>docker-logrotate \<br>docker-selinux \<br>docker-engine-selinux \<br>docker-engine \<br>docker-ce<br></code></pre></td></tr></table></figure><h4 id="②升级yum库"><a href="#②升级yum库" class="headerlink" title="②升级yum库"></a>②升级yum库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update -y<br></code></pre></td></tr></table></figure><h4 id="③安装Docker最新版"><a href="#③安装Docker最新版" class="headerlink" title="③安装Docker最新版"></a>③安装Docker最新版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>如果这一步看到提示：没有可用软件包 docker-ce，那就添加Docker的yum源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="④设置Docker服务"><a href="#④设置Docker服务" class="headerlink" title="④设置Docker服务"></a>④设置Docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br>systemctl enable docker<br></code></pre></td></tr></table></figure><h3 id="3-3-验证"><a href="#3-3-验证" class="headerlink" title="3.3 验证"></a>3.3 验证</h3><p>上述操作执行完成后，再次查看Docker版本：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-8105.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-8105.png)--><h2 id="4-可能的问题：拉取镜像失败"><a href="#4-可能的问题：拉取镜像失败" class="headerlink" title="4 可能的问题：拉取镜像失败"></a>4 可能的问题：拉取镜像失败</h2><h3 id="1、问题现象"><a href="#1、问题现象" class="headerlink" title="1、问题现象"></a>1、问题现象</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC1%E7%AB%A0%20RabbitMQ%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/image-3339.png"></p><!--![](/第1章 RabbitMQ概述和安装/image-3339.png)--><h3 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h3><h4 id="①daemon-json"><a href="#①daemon-json" class="headerlink" title="①daemon.json"></a>①daemon.json</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建或修改 docker 守护进程配置文件：daemon.json</span><br>vim /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><h4 id="②修改镜像源"><a href="#②修改镜像源" class="headerlink" title="②修改镜像源"></a>②修改镜像源</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: <span class="hljs-string">[&quot;https://registry.dockermirror.com&quot;]</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="③重启docker服务"><a href="#③重启docker服务" class="headerlink" title="③重启docker服务"></a>③重启docker服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart docker<br></code></pre></td></tr></table></figure><h4 id="④查看修改后的镜像源"><a href="#④查看修改后的镜像源" class="headerlink" title="④查看修改后的镜像源"></a>④查看修改后的镜像源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker info<br></code></pre></td></tr></table></figure><p>部分内容举例如下：</p><blockquote><p>…… </p><p>Docker Root Dir: &#x2F;var&#x2F;lib&#x2F;docker<br> Debug Mode: false<br> Experimental: false<br> Insecure Registries:<br>  127.0.0.0&#x2F;8<br> Registry Mirrors:<br>  <a href="https://registry.dockermirror.com/">https://registry.dockermirror.com/</a><br> Live Restore Enabled: fals</p></blockquote><p>最后再尝试重新拉取所需镜像</p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2、RabbitMQ入门案例</title>
    <link href="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <url>/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ入门案例"><a href="#RabbitMQ入门案例" class="headerlink" title="RabbitMQ入门案例"></a>RabbitMQ入门案例</h1><h1 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h1><p>生产者发送消息，消费者接收消息，用最简单的方式实现</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240806084908636.png"></p><!--![](/第2章 RabbitMQ入门案例/image-20240806084908636.png)--><h1 id="二、创建队列"><a href="#二、创建队列" class="headerlink" title="二、创建队列"></a>二、创建队列</h1><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725175936170.png"></p><!--![](/第2章 RabbitMQ入门案例/image-20240725175936170.png)--><p>队列名称：atguigu.queue.simple</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725180208216.png"></p><!--![](/第2章 RabbitMQ入门案例/image-20240725180208216.png)--><h1 id="三、Java-客户端：整合-SpringBoot"><a href="#三、Java-客户端：整合-SpringBoot" class="headerlink" title="三、Java 客户端：整合 SpringBoot"></a>三、Java 客户端：整合 SpringBoot</h1><h2 id="1、生产者端工程"><a href="#1、生产者端工程" class="headerlink" title="1、生产者端工程"></a>1、生产者端工程</h2><h3 id="①创建module"><a href="#①创建module" class="headerlink" title="①创建module"></a>①创建module</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/img75.png"></p><!--![](/第2章 RabbitMQ入门案例/img75.png)--><h3 id="②配置POM"><a href="#②配置POM" class="headerlink" title="②配置POM"></a>②配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③YAML"><a href="#③YAML" class="headerlink" title="③YAML"></a>③YAML</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">rabbitmq:</span> <br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.47</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span> <br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span> <br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><h3 id="④主启动类"><a href="#④主启动类" class="headerlink" title="④主启动类"></a>④主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  <br>  <br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProducerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQProducerMainType.class, args);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑤测试程序"><a href="#⑤测试程序" class="headerlink" title="⑤测试程序"></a>⑤测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.test;<br>  <br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQTest</span> &#123;  <br>  <br>    <span class="hljs-comment">// 在简单模式下，没有用到交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <br>    <span class="hljs-comment">// 在简单模式下，消息直接发送到队列，此时生产者端需要把队列名称从路由键参数这里传入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_SIMPLE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.queue.simple&quot;</span>;<br>  <br>    <span class="hljs-comment">// 注入 RabbitTemplate 执行</span><br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageSimple</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_DIRECT,   <span class="hljs-comment">// 指定交换机名称</span><br>                ROUTING_KEY_SIMPLE, <span class="hljs-comment">// 指定路由键名称</span><br>                <span class="hljs-string">&quot;Hello atguigu&quot;</span>);   <span class="hljs-comment">// 消息内容，也就是消息数据本身</span><br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑥测试效果"><a href="#⑥测试效果" class="headerlink" title="⑥测试效果"></a>⑥测试效果</h3><p>消息发送到了队列中：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725193430307.png"></p><!--![](/第2章 RabbitMQ入门案例/image-20240725193430307.png)--><h2 id="2、消费端工程"><a href="#2、消费端工程" class="headerlink" title="2、消费端工程"></a>2、消费端工程</h2><h3 id="①创建module-1"><a href="#①创建module-1" class="headerlink" title="①创建module"></a>①创建module</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/img76-17306871500848.png"></p><!--![](/第2章 RabbitMQ入门案例/img76-17306871500848.png)--><h3 id="②配置POM-1"><a href="#②配置POM-1" class="headerlink" title="②配置POM"></a>②配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="③YAML-1"><a href="#③YAML-1" class="headerlink" title="③YAML"></a>③YAML</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.47</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure><h3 id="④主启动类-1"><a href="#④主启动类-1" class="headerlink" title="④主启动类"></a>④主启动类</h3><p>仿照生产者工程的主启动类，改一下类名即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConsumerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQConsumerMainType.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑤监听器"><a href="#⑤监听器" class="headerlink" title="⑤监听器"></a>⑤监听器</h3><ul><li>使用 @RabbitListener 注解设定要监听的队列名称</li><li>消息数据使用和发送端一样的数据类型接收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.simple&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;messageContent = &quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="⑥执行测试"><a href="#⑥执行测试" class="headerlink" title="⑥执行测试"></a>⑥执行测试</h3><p>监听方法不能直接运行，请大家通过主启动类运行微服务。消费端取走消息之后，队列中就没有消息了：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC2%E7%AB%A0%20RabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/image-20240725194639024.png"></p><!--![](/第2章 RabbitMQ入门案例/image-20240725194639024.png)-->]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4、消息的可靠性投递</title>
    <link href="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/"/>
    <url>/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/</url>
    
    <content type="html"><![CDATA[<h1 id="消息的可靠性投递"><a href="#消息的可靠性投递" class="headerlink" title="消息的可靠性投递"></a>消息的可靠性投递</h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-问题引入"><a href="#1-1-问题引入" class="headerlink" title="1.1 问题引入"></a>1.1 问题引入</h2><ul><li><strong>正常的下单流程</strong></li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092424473.png"></p><ul><li><strong>故障情况1：</strong></li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092503472.png"></p><p>消息没有发送到消息队列上，后果：消费者拿不到消息，业务功能缺失，数据错误</p><ul><li><strong>故障情况2：</strong></li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092558221.png"></p><p>消息成功存入消息队列，但是消息队列服务器宕机了，原本保存在内存中的消息也丢失了，即使服务器重新启动，消息也找不回来了。后果：消费者拿不到消息，业务功能缺失，数据错误</p><ul><li><strong>故障情况3：</strong></li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20240806092653865.png"></p><p>消息成功存入消息队列，但是消费端出现问题，例如：宕机、抛异常等等。后果：业务功能缺失，数据错误</p><h2 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h2><ul><li><p>故障情况1：消息没有发送到消息队列在生产者端进行确认，具体操作中我们会分别针对交换机和队列来确认，如果没有成功发送到消息队列服务器上，那就可以尝试重新发送</p></li><li><p>故障情况2：消息队列服务器宕机导致内存中消息丢失解决思路：消息持久化到硬盘上，哪怕服务器重启也不会导致消息丢失</p></li><li><p>故障情况3：消费端宕机或抛异常导致消息没有成功被消费消费端消费消息成功，给服务器返回ACK信息，然后消息队列删除该消息消费端消费消息失败，给服务器端返回NACK信息，同时把消息恢复为待消费的状态，这样就可以再次取回消息，重试一次（当然，这就需要消费端接口支持幂等性）</p></li></ul><h1 id="2-故障1解决：生产者端消息确认机制"><a href="#2-故障1解决：生产者端消息确认机制" class="headerlink" title="2 故障1解决：生产者端消息确认机制"></a>2 故障1解决：生产者端消息确认机制</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li>在使用 RabbitMQ 的时候，作为消息发送方希望<strong>杜绝任何消息丢失</strong>或者<strong>投递失败</strong>场景。RabbitMQ 为我们提供了<strong>两种方式</strong>用来<strong>控制消息的投递可靠性模式</strong>。</li></ul><p><strong>·</strong> <strong>confirm 确认模式</strong></p><p><strong>·</strong> <strong>return 退回模式</strong></p><ul><li><strong>rabbitmq 整个消息投递的路径为：</strong></li></ul><p>producer—&gt;rabbitmq broker—&gt;exchange—&gt;queue—&gt;consumer</p><p><strong>·</strong> 消息从 producer 到 exchange 则会返回一个 confirmCallback 。</p><p><strong>·</strong> 消息从 exchange–&gt;queue 投递失败则会返回一个 returnCallback 。</p><p>我们将利用这两个 callback 控制消息的可靠性投递</p><h2 id="二、创建module"><a href="#二、创建module" class="headerlink" title="二、创建module"></a>二、创建module</h2><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/img77.png"></p><h2 id="三、搭建环境"><a href="#三、搭建环境" class="headerlink" title="三、搭建环境"></a>三、搭建环境</h2><h3 id="1、配置POM"><a href="#1、配置POM" class="headerlink" title="1、配置POM"></a>1、配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、主启动类"><a href="#2、主启动类" class="headerlink" title="2、主启动类"></a>2、主启动类</h3><p>没有特殊设定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  <br>  <br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQProducerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQProducerMainType.class, args);  <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、YAML"><a href="#3、YAML" class="headerlink" title="3、YAML"></a>3、YAML</h3><p><span style="color:blue;font-weight:bold;">注意</span>：publisher-confirm-type和publisher-returns是两个必须要增加的配置，如果没有则本节功能不生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">publisher-confirm-type:</span> <span class="hljs-string">CORRELATED</span> <span class="hljs-comment"># 交换机的确认</span><br>    <span class="hljs-attr">publisher-returns:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 队列的确认</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.atguigu.mq.config.MQProducerAckConfig:</span> <span class="hljs-string">info</span><br></code></pre></td></tr></table></figure><h2 id="四、创建配置类"><a href="#四、创建配置类" class="headerlink" title="四、创建配置类"></a>四、创建配置类</h2><h3 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h3><p>在这里我们为什么要创建这个配置类呢？首先，我们需要声明回调函数来接收RabbitMQ服务器返回的确认信息：</p><table><thead><tr><th>方法名</th><th>方法功能</th><th>所属接口</th><th>接口所属类</th></tr></thead><tbody><tr><td>confirm()</td><td>确认消息是否发送到交换机</td><td>ConfirmCallback</td><td>RabbitTemplate</td></tr><tr><td>returnedMessage()</td><td>确认消息是否发送到队列</td><td>ReturnsCallback</td><td>RabbitTemplate</td></tr></tbody></table><p>然后，就是对RabbitTemplate的功能进行增强，因为回调函数所在对象必须设置到RabbitTemplate对象中才能生效。</p><p>原本RabbitTemplate对象并没有生产者端消息确认的功能，要给它设置对应的组件才可以。</p><p>而设置对应的组件，需要调用RabbitTemplate对象下面两个方法：</p><table><thead><tr><th>设置组件调用的方法</th><th>所需对象类型</th></tr></thead><tbody><tr><td>setConfirmCallback()</td><td>ConfirmCallback接口类型</td></tr><tr><td>setReturnCallback()</td><td>ReturnCallback接口类型</td></tr></tbody></table><h3 id="2、API说明"><a href="#2、API说明" class="headerlink" title="2、API说明"></a>2、API说明</h3><h4 id="①ConfirmCallback接口"><a href="#①ConfirmCallback接口" class="headerlink" title="①ConfirmCallback接口"></a>①ConfirmCallback接口</h4><p>这是RabbitTemplate内部的一个接口，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A callback for publisher confirmations.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConfirmCallback</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Confirmation callback.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> correlationData correlation data for the callback.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ack true for ack, false for nack</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cause An optional cause, for nack, when available, otherwise null.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, <span class="hljs-meta">@Nullable</span> String cause)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>生产者端发送消息之后，回调confirm()方法</p><ul><li>ack参数值为true：表示消息成功发送到了交换机</li><li>ack参数值为false：表示消息没有发送到交换机</li></ul><h4 id="②ReturnCallback接口"><a href="#②ReturnCallback接口" class="headerlink" title="②ReturnCallback接口"></a>②ReturnCallback接口</h4><p>同样也RabbitTemplate内部的一个接口，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A callback for returned messages.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReturnsCallback</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returned message callback.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> returned the returned message and metadata.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returned)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><span style="color:blue;font-weight:bold;">注意</span>：接口中的returnedMessage()方法<span style="color:blue;font-weight:bold;font-size:25px;">仅</span>在消息<span style="color:blue;font-weight:bold;font-size:25px;">没有</span>发送到队列时调用</p><p>ReturnedMessage类中主要属性含义如下：</p><table><thead><tr><th>属性名</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>message</td><td>org.springframework.amqp.core.Message</td><td>消息以及消息相关数据</td></tr><tr><td>replyCode</td><td>int</td><td>应答码，类似于HTTP响应状态码</td></tr><tr><td>replyText</td><td>String</td><td>应答码说明</td></tr><tr><td>exchange</td><td>String</td><td>交换机名称</td></tr><tr><td>routingKey</td><td>String</td><td>路由键名称</td></tr></tbody></table><h3 id="3、配置类代码"><a href="#3、配置类代码" class="headerlink" title="3、配置类代码"></a>3、配置类代码</h3><h4 id="①要点1"><a href="#①要点1" class="headerlink" title="①要点1"></a>①要点1</h4><p>加@Component注解，加入IOC容器</p><h4 id="②要点2"><a href="#②要点2" class="headerlink" title="②要点2"></a>②要点2</h4><p>配置类自身实现ConfirmCallback、ReturnCallback这两个接口，然后通过this指针把配置类的对象设置到RabbitTemplate对象中。</p><p>操作封装到了一个专门的void init()方法中。</p><p>为了保证这个void init()方法在应用启动时被调用，我们使用@PostConstruct注解来修饰这个方法。</p><p>关于@PostConstruct注解大家可以参照以下说明：</p><blockquote><p>@PostConstruct注解是<span style="color:blue;font-weight:bolder;">Java中的一个标准注解</span>，它用于指定在<span style="color:blue;font-weight:bolder;">对象创建之后立即执行</span>的方法。当使用依赖注入（如Spring框架）或者其他方式创建对象时，@PostConstruct注解可以确保在对象完全初始化之后，执行相应的方法。</p><p>使用@PostConstruct注解的方法必须满足以下条件：</p><ol><li><span style="color:blue;font-weight:bolder;">方法不能有任何参数</span>。</li><li><span style="color:blue;font-weight:bolder;">方法必须是非静态的</span>。</li><li><span style="color:blue;font-weight:bolder;">方法不能返回任何值</span>。</li></ol><p>当容器实例化一个带有@PostConstruct注解的Bean时，它会在<span style="color:blue;font-weight:bolder;">调用构造函数之后</span>，并在<span style="color:blue;font-weight:bolder;">依赖注入完成之前</span>调用被@PostConstruct注解标记的方法。这样，我们可以在该方法中进行一些初始化操作，比如读取配置文件、建立数据库连接等。</p></blockquote><h4 id="③代码"><a href="#③代码" class="headerlink" title="③代码"></a>③代码</h4><p>有了以上说明，下面我们就可以展示配置类的整体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.config;<br><br><span class="hljs-keyword">import</span> jakarta.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.ReturnedMessage;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MQProducerAckConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        rabbitTemplate.setConfirmCallback(<span class="hljs-built_in">this</span>);<br>        rabbitTemplate.setReturnsCallback(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">confirm</span><span class="hljs-params">(CorrelationData correlationData, <span class="hljs-type">boolean</span> ack, String cause)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ack) &#123;<br>            log.info(<span class="hljs-string">&quot;消息发送到交换机成功！数据：&quot;</span> + correlationData);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;消息发送到交换机失败！数据：&quot;</span> + correlationData + <span class="hljs-string">&quot; 原因：&quot;</span> + cause);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">returnedMessage</span><span class="hljs-params">(ReturnedMessage returned)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;消息主体: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(returned.getMessage().getBody()));<br>        log.info(<span class="hljs-string">&quot;应答码: &quot;</span> + returned.getReplyCode());<br>        log.info(<span class="hljs-string">&quot;描述：&quot;</span> + returned.getReplyText());<br>        log.info(<span class="hljs-string">&quot;消息使用的交换器 exchange : &quot;</span> + returned.getExchange());<br>        log.info(<span class="hljs-string">&quot;消息使用的路由键 routing : &quot;</span> + returned.getRoutingKey());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、发送消息"><a href="#五、发送消息" class="headerlink" title="五、发送消息"></a>五、发送消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.test;<br>  <br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQTest</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage</span><span class="hljs-params">()</span> &#123;  <br>        rabbitTemplate.convertAndSend(  <br>                EXCHANGE_DIRECT,   <br>                ROUTING_KEY,   <br>                <span class="hljs-string">&quot;Hello atguigu&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>通过调整代码，测试如下三种情况：</p><ul><li>交换机正确、路由键正确</li><li>交换机正确、路由键不正确，无法发送到队列</li><li>交换机不正确，无法发送到交换机</li></ul><h1 id="3-故障2解决：交换机和队列持久化"><a href="#3-故障2解决：交换机和队列持久化" class="headerlink" title="3 故障2解决：交换机和队列持久化"></a>3 故障2解决：交换机和队列持久化</h1><h2 id="一、测试非持久化交换机和队列"><a href="#一、测试非持久化交换机和队列" class="headerlink" title="一、测试非持久化交换机和队列"></a>一、测试非持久化交换机和队列</h2><h3 id="1、创建非持久化交换机"><a href="#1、创建非持久化交换机" class="headerlink" title="1、创建非持久化交换机"></a>1、创建非持久化交换机</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106192621173.png"></p><p>创建之后，可以在列表中看到：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106192708597.png"></p><h3 id="2、创建非持久化队列"><a href="#2、创建非持久化队列" class="headerlink" title="2、创建非持久化队列"></a>2、创建非持久化队列</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106195216265.png"></p><p>创建之后，可以在列表中看到：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106195132627.png"></p><h3 id="3、绑定"><a href="#3、绑定" class="headerlink" title="3、绑定"></a>3、绑定</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106195748319.png"></p><h3 id="4、发送消息"><a href="#4、发送消息" class="headerlink" title="4、发送消息"></a>4、发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_TRANSIENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.transient.user&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_TRANSIENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTransient</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(<br>            EXCHANGE_TRANSIENT,<br>            ROUTING_KEY_TRANSIENT,<br>            <span class="hljs-string">&quot;Hello atguigu user~~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、查看已发送消息"><a href="#5、查看已发送消息" class="headerlink" title="5、查看已发送消息"></a>5、查看已发送消息</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106200245531.png"></p><p>结论：临时性的交换机和队列也能够接收消息，但如果RabbitMQ服务器重启之后会怎么样呢？</p><h3 id="6、重启RabbitMQ服务器"><a href="#6、重启RabbitMQ服务器" class="headerlink" title="6、重启RabbitMQ服务器"></a>6、重启RabbitMQ服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart rabbitmq<br></code></pre></td></tr></table></figure><p>重启之后，刚才临时性的交换机和队列都没了。在交换机和队列这二者中，队列是消息存储的容器，队列没了，消息就也跟着没了。</p><h2 id="二、持久化的交换机和队列"><a href="#二、持久化的交换机和队列" class="headerlink" title="二、持久化的交换机和队列"></a>二、持久化的交换机和队列</h2><p>我们其实不必专门创建持久化的交换机和队列，因为它们默认就是持久化的。接下来我们只需要确认一下：存放到队列中，尚未被消费端取走的消息，是否会随着RabbitMQ服务器重启而丢失？</p><h3 id="1、发送消息"><a href="#1、发送消息" class="headerlink" title="1、发送消息"></a>1、发送消息</h3><p>运行以前的发送消息方法即可，不过要关掉消费端程序</p><h3 id="2、在管理界面查看消息"><a href="#2、在管理界面查看消息" class="headerlink" title="2、在管理界面查看消息"></a>2、在管理界面查看消息</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106200934265.png"></p><h3 id="3、重启RabbitMQ服务器"><a href="#3、重启RabbitMQ服务器" class="headerlink" title="3、重启RabbitMQ服务器"></a>3、重启RabbitMQ服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart rabbitmq<br></code></pre></td></tr></table></figure><h3 id="4、再次查看消息"><a href="#4、再次查看消息" class="headerlink" title="4、再次查看消息"></a>4、再次查看消息</h3><p>仍然还在：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/image-20231106201123268.png"></p><h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><p>在后台管理界面创建交换机和队列时，默认就是持久化的模式。</p><p>此时消息也是持久化的，不需要额外设置。</p><h1 id="4-故障3解决：消费端消息确认"><a href="#4-故障3解决：消费端消息确认" class="headerlink" title="4 故障3解决：消费端消息确认"></a>4 故障3解决：消费端消息确认</h1><h2 id="一、ACK"><a href="#一、ACK" class="headerlink" title="一、ACK"></a>一、ACK</h2><p>ACK是acknowledge的缩写，表示已确认</p><h2 id="二、默认情况"><a href="#二、默认情况" class="headerlink" title="二、默认情况"></a>二、默认情况</h2><p>默认情况下，消费端取回消息后，默认会自动返回ACK确认消息，所以在前面的测试中消息被消费端消费之后，RabbitMQ得到ACK确认信息就会删除消息</p><p>但实际开发中，消费端根据消息队列投递的消息执行对应的业务，未必都能执行成功，如果希望能够多次重试，那么默认设定就不满足要求了</p><p>所以还是要修改成手动确认</p><h2 id="三、创建消费端module"><a href="#三、创建消费端module" class="headerlink" title="三、创建消费端module"></a>三、创建消费端module</h2><h3 id="1、配置POM-1"><a href="#1、配置POM-1" class="headerlink" title="1、配置POM"></a>1、配置POM</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、YAML"><a href="#2、YAML" class="headerlink" title="2、YAML"></a>2、YAML</h3><p>增加针对监听器的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span> <span class="hljs-comment"># 把消息确认模式改为手动确认</span><br></code></pre></td></tr></table></figure><h3 id="3、主启动类"><a href="#3、主启动类" class="headerlink" title="3、主启动类"></a>3、主启动类</h3><p>没有特殊设定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConsumerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQConsumerMainType.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、消费端监听器"><a href="#四、消费端监听器" class="headerlink" title="四、消费端监听器"></a>四、消费端监听器</h2><h3 id="1、创建监听器类"><a href="#1、创建监听器类" class="headerlink" title="1、创建监听器类"></a>1、创建监听器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.order&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、在接收消息的方法上应用注解"><a href="#2、在接收消息的方法上应用注解" class="headerlink" title="2、在接收消息的方法上应用注解"></a>2、在接收消息的方法上应用注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 修饰监听方法</span><br><span class="hljs-meta">@RabbitListener(</span><br><span class="hljs-meta">        // 设置绑定关系</span><br><span class="hljs-meta">        bindings = @QueueBinding(</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">            // 配置队列信息：durable 为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span><br><span class="hljs-meta">            value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">            // 配置交换机信息：durable 为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span><br><span class="hljs-meta">            exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">            // 配置路由键信息</span><br><span class="hljs-meta">            key = &#123;ROUTING_KEY&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、接收消息方法内部逻辑"><a href="#3、接收消息方法内部逻辑" class="headerlink" title="3、接收消息方法内部逻辑"></a>3、接收消息方法内部逻辑</h3><ul><li>业务处理成功：手动返回ACK信息，表示消息成功消费</li><li>业务处理失败：手动返回NACK信息，表示消息消费失败。此时有两种后续操作供选择：<ul><li>把消息重新放回消息队列，RabbitMQ会重新投递这条消息，那么消费端将重新消费这条消息——从而让业务代码再执行一遍</li><li>不把消息放回消息队列，返回reject信息表示拒绝，那么这条消息的处理就到此为止</li></ul></li></ul><h3 id="4、相关API"><a href="#4、相关API" class="headerlink" title="4、相关API"></a>4、相关API</h3><p>先回到PPT理解“deliveryTag：交付标签机制”</p><p>下面我们探讨的三个方法都是来自于com.rabbitmq.client.<span style="color:blue;font-weight:bolder;">Channel</span>接口</p><h4 id="①basicAck-方法"><a href="#①basicAck-方法" class="headerlink" title="①basicAck()方法"></a>①basicAck()方法</h4><ul><li>方法功能：给Broker返回ACK确认信息，表示消息已经在消费端成功消费，这样Broker就可以把消息删除了</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean multiple</td><td>取值为true：为小于、等于deliveryTag的消息批量返回ACK信息<br>取值为false：仅为指定的deliveryTag返回ACK信息</td></tr></tbody></table><h4 id="②basicNack-方法"><a href="#②basicNack-方法" class="headerlink" title="②basicNack()方法"></a>②basicNack()方法</h4><ul><li>方法功能：给Broker返回NACK信息，表示消息在消费端消费失败，此时Broker的后续操作取决于参数requeue的值</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean multiple</td><td>取值为true：为小于、等于deliveryTag的消息批量返回ACK信息<br>取值为false：仅为指定的deliveryTag返回ACK信息</td></tr><tr><td>boolean requeue</td><td>取值为true：Broker将消息重新放回队列，接下来会重新投递给消费端<br>取值为false：Broker将消息标记为已消费，不会放回队列</td></tr></tbody></table><h4 id="③basicReject-方法"><a href="#③basicReject-方法" class="headerlink" title="③basicReject()方法"></a>③basicReject()方法</h4><ul><li>方法功能：根据指定的deliveryTag，对该消息表示拒绝</li><li>参数列表：</li></ul><table><thead><tr><th>参数名称</th><th>含义</th></tr></thead><tbody><tr><td>long deliveryTag</td><td>Broker给每一条进入队列的消息都设定一个唯一标识</td></tr><tr><td>boolean requeue</td><td>取值为true：Broker将消息重新放回队列，接下来会重新投递给消费端<br>取值为false：Broker将消息标记为已消费，不会放回队列</td></tr></tbody></table><ul><li>basicNack()和basicReject()有啥区别？<ul><li>basicNack()有批量操作</li><li>basicReject()没有批量操作</li></ul></li></ul><h3 id="5、完整代码示例"><a href="#5、完整代码示例" class="headerlink" title="5、完整代码示例"></a>5、完整代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exchange.direct.order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;queue.order&quot;</span>;<br><br>    <span class="hljs-comment">// 修饰监听方法</span><br>    <span class="hljs-meta">@RabbitListener(</span><br><span class="hljs-meta">            // 设置绑定关系</span><br><span class="hljs-meta">            bindings = @QueueBinding(</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">                // 配置队列信息：durable 为 true 表示队列持久化；autoDelete 为 false 表示关闭自动删除</span><br><span class="hljs-meta">                value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">                // 配置交换机信息：durable 为 true 表示队列持久化；autoDelete 为 false 表示关闭自动删除</span><br><span class="hljs-meta">                exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">                // 配置路由键信息</span><br><span class="hljs-meta">                key = &#123;ROUTING_KEY&#125;</span><br><span class="hljs-meta">    ))</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String dataString, Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-comment">// 1、获取当前消息的 deliveryTag 值备用</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">deliveryTag</span> <span class="hljs-operator">=</span> message.getMessageProperties().getDeliveryTag();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 2、正常业务操作</span><br>            log.info(<span class="hljs-string">&quot;消费端接收到消息内容：&quot;</span> + dataString);<br>            <br>            <span class="hljs-comment">// System.out.println(10 / 0);</span><br><br>            <span class="hljs-comment">// 3、给 RabbitMQ 服务器返回 ACK 确认信息</span><br>            channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            <span class="hljs-comment">// 4、获取信息，看当前消息是否曾经被投递过</span><br>            <span class="hljs-type">Boolean</span> <span class="hljs-variable">redelivered</span> <span class="hljs-operator">=</span> message.getMessageProperties().getRedelivered();<br><br>            <span class="hljs-keyword">if</span> (!redelivered) &#123;<br>                <span class="hljs-comment">// 5、如果没有被投递过，那就重新放回队列，重新投递，再试一次</span><br>                channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 6、如果已经被投递过，且这一次仍然进入了 catch 块，那么返回拒绝且不再放回队列</span><br>                channel.basicReject(deliveryTag, <span class="hljs-literal">false</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五、要点总结"><a href="#五、要点总结" class="headerlink" title="五、要点总结"></a>五、要点总结</h2><ul><li>要点1：把消息确认模式改为<span style="color:blue;font-weight:bold;">手动确认</span></li><li>要点2：调用Channel对象的方法返回信息<ul><li>ACK：Acknowledgement，表示消息处理成功</li><li>NACK：Negative Acknowledgement，表示消息处理失败</li><li>Reject：拒绝，同样表示消息处理失败</li></ul></li><li>要点3：后续操作<ul><li>requeue为true：重新放回队列，重新投递，再次尝试</li><li>requeue为false：不放回队列，不重新投递</li></ul></li><li>要点4：deliveryTag 消息的唯一标识，查找具体某一条消息的依据</li></ul><h2 id="六、流程梳理"><a href="#六、流程梳理" class="headerlink" title="六、流程梳理"></a>六、流程梳理</h2><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC4%E7%AB%A0%20%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png"></p><h2 id="七、多啰嗦一句"><a href="#七、多啰嗦一句" class="headerlink" title="七、多啰嗦一句"></a>七、多啰嗦一句</h2><p>消费端如果设定消息重新放回队列，Broker重新投递消息，那么消费端就可以再次消费消息，这是一种“重试”机制，这需要消费端代码支持“<span style="color:blue;font-weight:bold;">幂等性</span>”——这属于前置知识，不展开了。</p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3、RabbitMQ工作模式</title>
    <link href="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ工作模式"><a href="#RabbitMQ工作模式" class="headerlink" title="RabbitMQ工作模式"></a>RabbitMQ工作模式</h1><ul><li>RabbitMQ提供了<strong>多种工作模式</strong>：简单模式，work模式 ，Publish&#x2F;Subscribe发布与订阅模式，Routing路由模式，Topics主题模式等</li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806102313708.png"></p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a> </p><h1 id="1-Work-queues工作队列模式"><a href="#1-Work-queues工作队列模式" class="headerlink" title="1 Work queues工作队列模式"></a><strong>1 Work queues工作队列模式</strong></h1><h2 id="1-1-模式说明"><a href="#1-1-模式说明" class="headerlink" title="1.1 模式说明"></a><strong>1.1 模式说明</strong></h2><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806084946234.png"> </p><p>Work Queues与入门程序的简单模式相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度</p><h2 id="1-2-工作队列模式代码"><a href="#1-2-工作队列模式代码" class="headerlink" title="1.2 工作队列模式代码"></a>1.2 工作队列模式代码</h2><h3 id="1-2-1-生产者代码"><a href="#1-2-1-生产者代码" class="headerlink" title="1.2.1 生产者代码"></a>1.2.1 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_WORK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.queue.work&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageWork</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        rabbitTemplate.convertAndSend(<br>                EXCHANGE_DIRECT,<br>                ROUTING_KEY_WORK,<br>                <span class="hljs-string">&quot;Hello atguigu &quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>发送消息效果</strong></li></ul><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725203346015.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725203322613.png"></p><h3 id="1-2-2-消费者代码"><a href="#1-2-2-消费者代码" class="headerlink" title="1.2.2 消费者代码"></a>1.2.2 消费者代码</h3><h4 id="①创建模块，配置POM"><a href="#①创建模块，配置POM" class="headerlink" title="①创建模块，配置POM"></a>①创建模块，配置POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="②YAML"><a href="#②YAML" class="headerlink" title="②YAML"></a>②YAML</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.47</span><span class="hljs-number">.100</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><h4 id="③主启动类"><a href="#③主启动类" class="headerlink" title="③主启动类"></a>③主启动类</h4><p>仿照生产者工程的主启动类，改一下类名即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitMQConsumerMainType</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RabbitMQConsumerMainType.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="④监听器"><a href="#④监听器" class="headerlink" title="④监听器"></a>④监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br>    <br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverPort;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.work&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Server Port:&quot;</span> + serverPort + <span class="hljs-string">&quot; Message Content:&quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-3-运行效果"><a href="#1-2-3-运行效果" class="headerlink" title="1.2.3 运行效果"></a>1.2.3 运行效果</h3><h4 id="①消费端A"><a href="#①消费端A" class="headerlink" title="①消费端A"></a>①消费端A</h4><blockquote><p>Server Port:10000 Message Content:Hello atguigu 0<br>Server Port:10000 Message Content:Hello atguigu 2<br>Server Port:10000 Message Content:Hello atguigu 4<br>Server Port:10000 Message Content:Hello atguigu 6<br>Server Port:10000 Message Content:Hello atguigu 8</p></blockquote><h4 id="②消费端B"><a href="#②消费端B" class="headerlink" title="②消费端B"></a>②消费端B</h4><blockquote><p>Server Port:20000 Message Content:Hello atguigu 1<br>Server Port:20000 Message Content:Hello atguigu 3<br>Server Port:20000 Message Content:Hello atguigu 5<br>Server Port:20000 Message Content:Hello atguigu 7<br>Server Port:20000 Message Content:Hello atguigu 9</p></blockquote><h1 id="2-订阅模式类型"><a href="#2-订阅模式类型" class="headerlink" title="2 订阅模式类型"></a><strong>2 订阅模式类型</strong></h1><p>订阅模式示例图：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085107277.png"> </p><p>前面2个案例中，只有3个角色：</p><p>· P：生产者，也就是要发送消息的程序</p><p>· C：消费者：消息的接受者，会一直等待消息到来。</p><p>· queue：消息队列，图中红色部分</p><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><p>· P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</p><p>· C：消费者，消息的接受者，会一直等待消息到来。</p><p>· Queue：消息队列，接收消息、缓存消息。</p><p>· Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。</p><p><strong>Exchange有常见以下3种类型</strong>：</p><p>o Fanout：广播，将消息交给所有绑定到交换机的队列</p><p>o Direct：定向，把消息交给符合指定routing key 的队列</p><p>o Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</p><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h1 id="3-Publish-Subscribe发布订阅模式"><a href="#3-Publish-Subscribe发布订阅模式" class="headerlink" title="3 Publish&#x2F;Subscribe发布订阅模式"></a>3 Publish&#x2F;Subscribe发布订阅模式</h1><p>一句话总结</p><p>在队列接收消息中间加了一个交换机，交换机可以设定路由规则将消息分发到对应的队列里面，然后消费者设定规则去对应队列里面获取消息数据</p><h2 id="3-1-模式说明"><a href="#3-1-模式说明" class="headerlink" title="3.1 模式说明"></a>3.1 模式说明</h2><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085123819.png"> </p><p>发布订阅模式：<br>1、每个消费者监听自己的队列。<br>2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收<br>到消息</p><h2 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h2><h3 id="1-创建组件"><a href="#1-创建组件" class="headerlink" title="1 创建组件"></a>1 创建组件</h3><ul><li>名称列表</li></ul><table><thead><tr><th>组件</th><th>组件名称</th></tr></thead><tbody><tr><td>交换机</td><td>atguigu.exchange.fanout</td></tr><tr><td>队列</td><td>atguigu.queue.fanout01<br>atguigu.queue.fanout02</td></tr></tbody></table><h3 id="2-创建交换机"><a href="#2-创建交换机" class="headerlink" title="2 创建交换机"></a>2 创建交换机</h3><p><span style="color:blue;"><strong>注意</strong></span>：发布订阅模式要求交换机是Fanout类型</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725210428356.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725210526288.png"></p><h3 id="3-创建队列并绑定交换机"><a href="#3-创建队列并绑定交换机" class="headerlink" title="3 创建队列并绑定交换机"></a>3 创建队列并绑定交换机</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725210906899.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725211118200.png"></p><p>此时可以到交换机下查看绑定关系：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725211206904.png"></p><h3 id="4-生产者代码"><a href="#4-生产者代码" class="headerlink" title="4 生产者代码"></a>4 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_FANOUT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.exchange.fanout&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageFanout</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(EXCHANGE_FANOUT, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Hello fanout ~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-消费者代码"><a href="#5-消费者代码" class="headerlink" title="5 消费者代码"></a>5 消费者代码</h3><p>两个监听器可以写在同一个微服务中，分别监听两个不同队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.fanout01&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage01</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Consumer01 Message Content:&quot;</span> + messageContent);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.fanout02&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage02</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Consumer02 Message Content:&quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-运行效果"><a href="#6-运行效果" class="headerlink" title="6 运行效果"></a>6 运行效果</h3><p>先启动消费者，然后再运行生产者程序发送消息：</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725212632041.png"></p><h2 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h2><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><strong>发布订阅模式与工作队列模式的区别：</strong></p><ul><li>工作队列模式本质上是绑定默认交换机</li><li>发布订阅模式绑定指定交换机</li><li>监听同一个队列的消费端程序彼此之间是竞争关系</li><li>绑定同一个交换机的多个队列在发布订阅模式下，消息是广播的，每个队列都能接收到消息</li></ul><h1 id="4-Routing路由模式"><a href="#4-Routing路由模式" class="headerlink" title="4 Routing路由模式"></a>4 Routing路由模式</h1><h2 id="4-1-模式说明"><a href="#4-1-模式说明" class="headerlink" title="4.1 模式说明"></a>4.1 模式说明</h2><p>路由模式特点：</p><p>· 队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）</p><p>· 消息的发送方在 向 Exchange发送消息时，也必须指定消息的 RoutingKey。</p><p>· Exchange不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的Routingkey与消息的 Routing key完全一致，才会接收到消息</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085148987.png"> </p><p>图解：</p><p>· P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p><p>· X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p><p>· C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p><p>· C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><h2 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h2><h3 id="1-创建组件-1"><a href="#1-创建组件-1" class="headerlink" title="1 创建组件"></a>1 创建组件</h3><ul><li>组件清单</li></ul><p>没有特殊设置，名称外的其它参数都使用默认值：</p><table><thead><tr><th>组件</th><th>组件名称</th></tr></thead><tbody><tr><td>交换机</td><td>atguigu.exchange.direct</td></tr><tr><td>路由键</td><td>atguigu.routing.key.good</td></tr><tr><td>队列</td><td>atguigu.queue.direct</td></tr></tbody></table><h3 id="2-绑定"><a href="#2-绑定" class="headerlink" title="2 绑定"></a>2 绑定</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725214547261.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725214608820.png"></p><h3 id="3-生产者代码"><a href="#3-生产者代码" class="headerlink" title="3 生产者代码"></a>3 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_DIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.exchange.direct&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_GOOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.routing.key.good&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageRouting</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(EXCHANGE_DIRECT, ROUTING_KEY_GOOD, <span class="hljs-string">&quot;Hello routing ~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-消费者代码"><a href="#4-消费者代码" class="headerlink" title="4 消费者代码"></a>4 消费者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.direct&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessageRouting</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Message Content:&quot;</span> + messageContent);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5 运行结果"></a>5 运行结果</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725215245500.png"></p><h1 id="5-Topics通配符模式"><a href="#5-Topics通配符模式" class="headerlink" title="5 Topics通配符模式"></a>5 Topics通配符模式</h1><h2 id="5-1-模式说明"><a href="#5-1-模式说明" class="headerlink" title="5.1. 模式说明"></a><strong>5.1. 模式说明</strong></h2><p>Topic类型与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key 的时候<strong>使用通配符</strong>！</p><p>Routingkey 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： item.insert</p><p>通配符规则：</p><p>#：匹配零个或多个词</p><p>*：匹配不多不少恰好1个词</p><p>举例：</p><p>item.#：能够匹配item.insert.abc 或者 item.insert</p><p>item.*：只能匹配item.insert</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085214905.png"> </p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/wps14.jpg"> </p><p>图解：</p><p>· 红色Queue：绑定的是usa.# ，因此凡是以 usa.开头的routing key 都会被匹配到</p><p>· 黄色Queue：绑定的是#.news ，因此凡是以 .news结尾的 routing key 都会被匹配</p><h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h2><h3 id="1-创建组件-2"><a href="#1-创建组件-2" class="headerlink" title="1 创建组件"></a>1 创建组件</h3><ul><li>组件清单</li></ul><table><thead><tr><th>组件</th><th>组件名称</th></tr></thead><tbody><tr><td>交换机</td><td>atguigu.exchange.topic</td></tr><tr><td>路由键</td><td>#.error<br>order.*<br>*.*</td></tr><tr><td>队列</td><td>atguigu.queue.message<br>atguigu.queue.order</td></tr></tbody></table><h3 id="2-创建交换机-1"><a href="#2-创建交换机-1" class="headerlink" title="2 创建交换机"></a>2 创建交换机</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725220957833.png"></p><h3 id="3-绑定关系"><a href="#3-绑定关系" class="headerlink" title="3 绑定关系"></a>3 绑定关系</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725222339828.png"></p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725222805072.png"></p><h3 id="4-生产者代码-1"><a href="#4-生产者代码-1" class="headerlink" title="4 生产者代码"></a>4 生产者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_TOPIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.exchange.topic&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_ERROR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;#.error&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_ORDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;order.*&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY_ALL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;*.*&quot;</span>;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessageTopic</span><span class="hljs-params">()</span> &#123;<br>    rabbitTemplate.convertAndSend(EXCHANGE_TOPIC, <span class="hljs-string">&quot;order.info&quot;</span>, <span class="hljs-string">&quot;message order info ...&quot;</span>);<br>    rabbitTemplate.convertAndSend(EXCHANGE_TOPIC, <span class="hljs-string">&quot;goods.info&quot;</span>, <span class="hljs-string">&quot;message goods info ...&quot;</span>);<br>    rabbitTemplate.convertAndSend(EXCHANGE_TOPIC, <span class="hljs-string">&quot;goods.error&quot;</span>, <span class="hljs-string">&quot;message goods error ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-消费者代码-1"><a href="#5-消费者代码-1" class="headerlink" title="5 消费者代码"></a>5 消费者代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mq.listener;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<br><span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMessageListener</span> &#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.message&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage01</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Queue Message:&quot;</span> + messageContent);<br>    &#125;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &#123;&quot;atguigu.queue.order&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processMessage02</span><span class="hljs-params">(String messageContent, Message message, Channel channel)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Queue Order:&quot;</span> + messageContent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-运行效果-1"><a href="#6-运行效果-1" class="headerlink" title="6 运行效果"></a>6 运行效果</h3><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240725223737173.png"></p><h1 id="6-模式总结"><a href="#6-模式总结" class="headerlink" title="6 模式总结"></a>6 模式总结</h1><h2 id="1、简单模式-HelloWorld"><a href="#1、简单模式-HelloWorld" class="headerlink" title="1、简单模式 HelloWorld"></a><strong>1、简单模式 HelloWorld</strong></h2><p>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085244893.png"> </p><h2 id="2、工作队列模式-Work-Queue"><a href="#2、工作队列模式-Work-Queue" class="headerlink" title="2、工作队列模式 Work Queue"></a><strong>2、工作队列模式 Work Queue</strong></h2><p>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085305207.png"> </p><h2 id="3、发布订阅模式-Publish-subscribe"><a href="#3、发布订阅模式-Publish-subscribe" class="headerlink" title="3、发布订阅模式 Publish&#x2F;subscribe"></a><strong>3、发布订阅模式 Publish&#x2F;subscribe</strong></h2><p>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085325073.png"> </p><h2 id="4、路由模式-Routing"><a href="#4、路由模式-Routing" class="headerlink" title="4、路由模式 Routing"></a><strong>4、路由模式 Routing</strong></h2><p>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p> <img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085354471.png"></p><h2 id="5、通配符模式-Topic"><a href="#5、通配符模式-Topic" class="headerlink" title="5、通配符模式 Topic"></a><strong>5、通配符模式 Topic</strong></h2><p>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p> <img src="/2024/06/04/%E6%8A%80%E6%9C%AF%E6%A0%88/RabbitMQ/%E7%AC%AC3%E7%AB%A0%20RabbitMQ%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/image-20240806085413115.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ShardingSphere5</title>
    <link href="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/"/>
    <url>/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="第01章-高性能架构模式"><a href="#第01章-高性能架构模式" class="headerlink" title="第01章 高性能架构模式"></a>第01章 高性能架构模式</h1><p>互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的<code>第一种方式是“读写分离”</code>，<code>第二种方式是“数据库分片”</code>。</p><h2 id="1、读写分离架构"><a href="#1、读写分离架构" class="headerlink" title="1、读写分离架构"></a>1、读写分离架构</h2><p><strong>读写分离原理：</strong>读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是其基本架构图：</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/362d22168bf344687ec0c206aa115807.jpg"></p><!--![img](ShardingSphere5入门到实战/362d22168bf344687ec0c206aa115807.jpg)--><p><strong>读写分离的基本实现：</strong></p><ul><li><code>主库负责处理事务性的增删改操作，从库负责处理查询操作</code>，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</li><li>读写分离是<code>根据 SQL 语义的分析</code>，<code>将读操作和写操作分别路由至主库与从库</code>。</li><li>通过<code>一主多从</code>的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。 </li><li>使用<code>多主多从</code>的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li></ul><p><strong>下图展示了根据业务需要，将用户表的写操作和读操路由到不同的数据库的方案：</strong></p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220804223138651.png"></p><!--![image-20220804223138651](ShardingSphere5入门到实战/image-20220804223138651.png)--><h2 id="2、CAP-理论"><a href="#2、CAP-理论" class="headerlink" title="2、CAP 理论"></a><strong>2、CAP 理论</strong></h2><p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer’s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。<code>对于设计分布式系统的架构师来说，CAP 是必须掌握的理论。</code></p><p>在一个<code>分布式系统中</code>，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。</p><ul><li><p>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</p></li><li><p>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应<code>（不是错误和超时的响应）</code></p></li><li><p>P 分区容忍性（Partition Tolerance）：当出现网络分区后<code>（可能是丢包，也可能是连接中断，还可能是拥塞）</code>，系统能够继续“履行职责”</p></li><li><ul><li><p><strong>CAP特点：</strong></p><ul><li><p>在实际设计过程中，每个系统不可能只处理一种数据，而是包含多种类型的数据，<code>有的数据必须选择 CP，有的数据必须选择 AP，分布式系统理论上不可能选择 CA 架构。</code></p><ul><li>CP：如下图所示，<code>为了保证一致性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 需要返回 Error，提示客户端 C“系统现在发生了错误”，</code>这种处理方式<code>违背了可用性</code>（Availability）的要求，因此 CAP 三者只能满足 CP。</li></ul><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/6e7d7bd54d7a4eb67918080863d354d7.png"></p></li></ul><!--![img](ShardingSphere5入门到实战/6e7d7bd54d7a4eb67918080863d354d7.png)--><ul><li><p>AP：如下图所示，<code>为了保证可用性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 将当前自己拥有的数据 x 返回给客户端 C 了</code>，而实际上当前最新的数据已经是 y 了，这就<code>不满足一致性</code>（Consistency）的要求了，因此 CAP 三者只能满足 AP。注意：这里 N2 节点返回 x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为 x 是旧的数据，并不是一个错乱的值，只是不是最新的数据而已。</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/2ccafe41de9bd7f8dec4658f004310d6.png"></p><!--![img](ShardingSphere5入门到实战/2ccafe41de9bd7f8dec4658f004310d6.png)</li></ul><p>–&gt;</p><ul><li><p>CAP 理论中的 <code>C 在实践中是不可能完美实现的</code>，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到<code>强一致性</code>，但应用可以采用适合的方式达到<code>最终一致性</code>。具有如下特点：</p><ul><li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</li><li><code>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</code></li></ul></li></ul></li></ul></li></ul><h2 id="3、数据库分片架构"><a href="#3、数据库分片架构" class="headerlink" title="3、数据库分片架构"></a>3、数据库分片架构</h2><p><strong>读写分离的问题：</strong></p><p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要<code>将存储分散到多台数据库服务器上</code>。</p><p><strong>数据分片：</strong></p><p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行<code>分库和分表</code>。数据分片的拆分方式又分为<code>垂直分片和水平分片</code>。</p><h3 id="3-1、垂直分片"><a href="#3-1、垂直分片" class="headerlink" title="3.1、垂直分片"></a>3.1、垂直分片</h3><p><strong>垂直分库：</strong></p><p><code>按照业务拆分的方式称为垂直分片，又称为纵向拆分</code>，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。 </p><p><img src="/71f41d46cc5c0405f4d4dc944b4350c9.jpg"></p><!--![img](ShardingSphere5入门到实战/71f41d46cc5c0405f4d4dc944b4350c9.jpg)--><p>下图展示了根据业务需要，将用户表和订单表垂直分片到不同的数据库的方案：</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220804221855449.png"></p><!--![image-20220804221855449](ShardingSphere5入门到实战/image-20220804221855449.png)--><p>垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。<code>如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。</code></p><p><strong>垂直分表：</strong></p><p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code></p><p>假设有一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此，我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><p>垂直分表引入的复杂性主要体现在表操作的数量要增加。例如，原来只要一次查询就可以获取 name、age、sex、nickname、description，现在需要两次查询，一次查询获取 name、age、sex，另外一次查询获取 nickname、description。</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/136bc2f01919edcb8271df6f7e71af40.jpg"></p><!--![img](ShardingSphere5入门到实战/136bc2f01919edcb8271df6f7e71af40.jpg)--><h3 id="3-2、水平分片"><a href="#3-2、水平分片" class="headerlink" title="3.2、水平分片"></a>3.2、水平分片</h3><p><code>水平分片又称为横向拆分。</code> 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表），如下图所示。</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220804222212087.png"></p><!--![image-20220804222212087](ShardingSphere5入门到实战/image-20220804222212087.png)--><p><code>单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</code></p><ul><li><p><strong>水平分表：</strong>单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p></li><li><p><strong>水平分库：</strong>如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p></li></ul><blockquote><p><strong>阿里巴巴Java开发手册：</strong></p><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p><p>说明：如果预计三年后的数据量根本达不到这个级别，<code>请不要在创建表时就分库分表</code>。</p></blockquote><h1 id="第02章-解决方案"><a href="#第02章-解决方案" class="headerlink" title="第02章 解决方案"></a>第02章 解决方案</h1><p>读写分离和数据分片具体的实现方式一般有两种：  <code>程序代码封装</code>和<code>中间件封装</code>。</p><h2 id="1、程序代码封装"><a href="#1、程序代码封装" class="headerlink" title="1、程序代码封装"></a>1、程序代码封装</h2><p>程序代码封装指在代码中抽象一个<code>数据访问层（或中间层封装）</code>，实现读写操作分离和数据库服务器连接的管理。</p><p><strong>其基本架构是：</strong>以读写分离为例</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/f8d538f9201e3ebee37dfdcd1922e9df.jpg"></p><!--![img](ShardingSphere5入门到实战/f8d538f9201e3ebee37dfdcd1922e9df.jpg)--><h2 id="2、中间件封装"><a href="#2、中间件封装" class="headerlink" title="2、中间件封装"></a>2、中间件封装</h2><p>中间件封装指的是<code>独立一套系统出来</code>，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器。</p><p><strong>基本架构是：</strong>以读写分离为例</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/2a2dba7f07581fd055d9cd5a3aa8388e.jpg"></p><!--![img](ShardingSphere5入门到实战/2a2dba7f07581fd055d9cd5a3aa8388e.jpg)--><h2 id="3、常用解决方案"><a href="#3、常用解决方案" class="headerlink" title="3、常用解决方案"></a>3、常用解决方案</h2><ul><li><p>Apache ShardingSphere</p><ul><li>程序代码封装：ShardingSphere-JDBC</li><li>中间件封装：ShardingSphere-Proxy</li></ul><p>官网：<a href="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a></p><p>文档：<a href="https://shardingsphere.apache.org/document/5.4.0/cn/overview/">https://shardingsphere.apache.org/document/5.4.0/cn/overview/</a></p></li><li><p>MyCat：数据库中间件</p></li></ul><h1 id="第03章-MySQL主从同步"><a href="#第03章-MySQL主从同步" class="headerlink" title="第03章 MySQL主从同步"></a>第03章 MySQL主从同步</h1><h2 id="1、MySQL主从同步原理"><a href="#1、MySQL主从同步原理" class="headerlink" title="1、MySQL主从同步原理"></a>1、MySQL主从同步原理</h2><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220714133617856.png"></p><!--![img](ShardingSphere5入门到实战/image-20220714133617856.png)--><p><strong>基本原理：</strong></p><p>slave会从master读取binlog来进行数据同步</p><p><strong>具体步骤：</strong></p><ul><li><code>step1：</code>master将数据改变记录到<code>二进制日志（binary log）</code>中。</li><li><code>step2：</code> 当slave上执行 <code>start slave</code> 命令之后，slave会创建一个 <code>IO 线程</code>用来连接master，请求master中的binlog。</li><li><code>step3：</code>当slave连接master时，master会创建一个 <code>log dump 线程</code>，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</li><li><code>step4：</code>IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 <code>中继日志（relay log）</code> 中。</li><li><code>step5：</code>slave的<code>SQL线程</code>，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</li></ul><h2 id="2、一主多从配置"><a href="#2、一主多从配置" class="headerlink" title="2、一主多从配置"></a>2、一主多从配置</h2><p>服务器规划：使用<code>docker</code>方式创建，<code>主从服务器IP一致，端口号不一致</code></p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220807183231101.png"></p><!--![image-20220807183231101](ShardingSphere5入门到实战/image-20220807183231101.png)--><ul><li>主服务器：容器名<code>atguigu-mysql-master</code>，端口<code>3306</code></li><li>从服务器：容器名<code>atguigu-mysql-slave1</code>，端口<code>3307</code></li><li>从服务器：容器名<code>atguigu-mysql-slave2</code>，端口<code>3308</code></li></ul><p><strong>注意：</strong>如果此时防火墙是开启的，<code>则先关闭防火墙，并重启docker</code>，否则后续安装的MySQL无法启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭docker</span><br>systemctl stop docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span><br>systemctl start docker<br></code></pre></td></tr></table></figure><h3 id="2-1、准备主服务器"><a href="#2-1、准备主服务器" class="headerlink" title="2.1、准备主服务器"></a>2.1、准备主服务器</h3><ul><li><strong>step1：在docker中创建并启动MySQL主服务器：</strong><code>端口3306</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3306:3306 \<br>-v /atguigu/mysql/master/conf:/etc/mysql/conf.d \<br>-v /atguigu/mysql/master/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name atguigu-mysql-master \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><ul><li><strong>step2：创建MySQL主服务器配置文件：</strong></li></ul><p>默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /atguigu/mysql/master/conf/my.cnf<br></code></pre></td></tr></table></figure><p>配置如下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 服务器唯一id，默认值1</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"># 设置日志格式，默认值ROW</span><br><span class="hljs-attr">binlog_format</span>=<span class="hljs-string">STATEMENT</span><br><span class="hljs-comment"># 二进制日志名，默认binlog</span><br><span class="hljs-comment"># log-bin=binlog</span><br><span class="hljs-comment"># 设置需要复制的数据库，默认复制全部数据库</span><br><span class="hljs-comment">#binlog-do-db=mytestdb1</span><br><span class="hljs-comment">#binlog-do-db=mytestdb2</span><br><span class="hljs-comment"># 设置不需要复制的数据库</span><br><span class="hljs-comment">#binlog-ignore-db=mysql</span><br><span class="hljs-comment">#binlog-ignore-db=information_schema</span><br><span class="hljs-comment">#binlog-ignore-db=performance_schema</span><br><span class="hljs-comment">#binlog-ignore-db=sys</span><br></code></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart atguigu-mysql-master<br></code></pre></td></tr></table></figure><p><code>binlog格式说明：</code></p><ul><li>binlog_format&#x3D;STATEMENT：日志记录的是主机数据库的<code>写指令</code>，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</li><li>binlog_format&#x3D;ROW（默认）：日志记录的是主机数据库的<code>写后的数据</code>，批量操作时性能较差，解决now()或者  user()或者  @@hostname 等操作在主从机器上不一致的问题。</li><li>binlog_format&#x3D;MIXED：是以上两种level的混合使用，<code>有函数用ROW，没函数用STATEMENT</code></li></ul><p><code>binlog-ignore-db和binlog-do-db的优先级问题：</code></p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/0.08703112216569037.png"></p><!--![img](ShardingSphere5入门到实战/0.08703112216569037.png)--><ul><li><strong>step3：使用命令行登录MySQL主服务器：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 进入容器：env LANG=C.UTF-8 避免容器中显示中文乱码</span><br>docker <span class="hljs-keyword">exec</span> <span class="hljs-operator">-</span>it atguigu<span class="hljs-operator">-</span>mysql<span class="hljs-operator">-</span>master env LANG<span class="hljs-operator">=</span>C.UTF<span class="hljs-number">-8</span> <span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>bash<br><span class="hljs-comment">-- 进入容器内的mysql命令行</span><br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<br><span class="hljs-comment">-- 修改默认密码校验方式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">-- 刷新权限，可以不用重启服务器</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><ul><li><strong>step4：主机中创建slave用户：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建slave用户</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;atguigu_slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-comment">-- 设置密码</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;atguigu_slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">-- 授予复制权限</span><br><span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;atguigu_slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-comment">-- 刷新权限</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><ul><li><strong>step5：主机中查询master状态：</strong></li></ul><p>执行完此步骤后<code>不要再操作主服务器MYSQL</code>，防止主服务器状态值变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> MASTER STATUS;<br></code></pre></td></tr></table></figure><p>记下<code>File</code>和<code>Position</code>的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220804191852164.png"></p><!--![image-20220804191852164](ShardingSphere5入门到实战/image-20220804191852164.png)--><h3 id="2-2、准备从服务器1"><a href="#2-2、准备从服务器1" class="headerlink" title="2.2、准备从服务器1"></a>2.2、准备从服务器1</h3><p>可以配置多台从机slave1、slave2…，这里以配置slave1为例，<strong>请参考slave1独立完成slave2的配置</strong></p><ul><li><strong>step1：在docker中创建并启动MySQL从服务器：</strong><code>端口3307</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3307:3306 \<br>-v /atguigu/mysql/slave1/conf:/etc/mysql/conf.d \<br>-v /atguigu/mysql/slave1/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name atguigu-mysql-slave1 \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><ul><li><strong>step2：创建MySQL从服务器配置文件：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /atguigu/mysql/slave1/conf/my.cnf<br></code></pre></td></tr></table></figure><p>配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="hljs-comment">#relay-log=relay-bin</span><br></code></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart atguigu-mysql-slave1<br></code></pre></td></tr></table></figure><ul><li><strong>step3：使用命令行登录MySQL从服务器：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 进入容器：</span><br>docker <span class="hljs-keyword">exec</span> <span class="hljs-operator">-</span>it atguigu<span class="hljs-operator">-</span>mysql<span class="hljs-operator">-</span>slave1 env LANG<span class="hljs-operator">=</span>C.UTF<span class="hljs-number">-8</span> <span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>bash<br><span class="hljs-comment">-- 进入容器内的mysql命令行</span><br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<br><span class="hljs-comment">-- 修改默认密码校验方式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">-- 刷新权限</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><ul><li><strong>step4：在从机上配置主从关系：</strong></li></ul><p>在<strong>从机</strong>上执行以下SQL操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">CHANGE MASTER <span class="hljs-keyword">TO</span> MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;192.168.6.121&#x27;</span>, <br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;atguigu_slave&#x27;</span>,MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>, MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;binlog.000003&#x27;</span>,MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">1357</span>; <br></code></pre></td></tr></table></figure><h3 id="2-3、准备从服务器2"><a href="#2-3、准备从服务器2" class="headerlink" title="2.3、准备从服务器2"></a>2.3、准备从服务器2</h3><p>参考2.2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3308:3306 \<br>-v /atguigu/mysql/slave2/conf:/etc/mysql/conf.d \<br>-v /atguigu/mysql/slave2/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name atguigu-mysql-slave2 \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /atguigu/mysql/slave2/conf/my.cnf<br></code></pre></td></tr></table></figure><p>配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">3</span><br><span class="hljs-comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="hljs-comment">#relay-log=relay-bin</span><br></code></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart atguigu-mysql-slave2<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 进入容器：</span><br>docker <span class="hljs-keyword">exec</span> <span class="hljs-operator">-</span>it atguigu<span class="hljs-operator">-</span>mysql<span class="hljs-operator">-</span>slave2 env LANG<span class="hljs-operator">=</span>C.UTF<span class="hljs-number">-8</span> <span class="hljs-operator">/</span>bin<span class="hljs-operator">/</span>bash<br><span class="hljs-comment">-- 进入容器内的mysql命令行</span><br>mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>p<br><span class="hljs-comment">-- 修改默认密码校验方式</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">-- 刷新权限</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">CHANGE MASTER <span class="hljs-keyword">TO</span> MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;192.168.6.121&#x27;</span>, <br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;atguigu_slave&#x27;</span>,MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>, MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;binlog.000003&#x27;</span>,MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">1357</span>; <br></code></pre></td></tr></table></figure><h3 id="2-4、启动主从同步"><a href="#2-4、启动主从同步" class="headerlink" title="2.4、启动主从同步"></a>2.4、启动主从同步</h3><p>分别在两台从机上启动从机的复制功能，执行SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> SLAVE;<br><span class="hljs-comment">-- 查看状态（不需要分号）</span><br><span class="hljs-keyword">SHOW</span> SLAVE STATUS\G<br></code></pre></td></tr></table></figure><p><strong>两个关键进程：</strong>下面两个参数都是Yes，则说明主从配置成功！</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220715000533951.png"></p><!--![img](ShardingSphere5入门到实战/image-20220715000533951.png)--><h3 id="2-5、测试主从同步"><a href="#2-5、测试主从同步" class="headerlink" title="2.5、测试主从同步"></a>2.5、测试主从同步</h3><p>在主机中执行以下SQL，在从机中查看数据库、表和数据是否已经被同步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_user;<br>USE db_user;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user (<br> id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br> uname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br> <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_user(uname) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;zhang3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_user(uname) <span class="hljs-keyword">VALUES</span>(@<span class="hljs-variable">@hostname</span>);<br></code></pre></td></tr></table></figure><h3 id="2-6、常见问题"><a href="#2-6、常见问题" class="headerlink" title="2.6、常见问题"></a><strong>2.6、常见问题</strong></h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>启动主从同步后，常见错误是<code>Slave_IO_Running： No 或者 Connecting</code> 的情况，此时查看下方的 <code>Last_IO_ERROR</code>错误日志，根据日志中显示的错误信息在网上搜索解决方案即可</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220714235426120.png"></p><!--![img](ShardingSphere5入门到实战/image-20220714235426120.png)--><p><strong>典型的错误例如：</strong><code>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;Client requested master to start replication from position &amp;gt; file size&#39;</code></p><p><strong>解决方案：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在从机停止slave</span><br><span class="hljs-comment">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。</span><br>stop slave; <br><br><span class="hljs-comment">-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。</span><br>reset slave;<br><br><span class="hljs-comment">-- 在主机上执行。功能说明：删除所有的binlog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。</span><br><span class="hljs-comment">-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；</span><br>reset master;<br><br><span class="hljs-comment">-- 还原主服务器之前的操作</span><br><br><span class="hljs-comment">-- 在主机查看mater状态</span><br><span class="hljs-keyword">SHOW</span> MASTER STATUS;<br><span class="hljs-comment">-- 在主机刷新日志</span><br>FLUSH LOGS;<br><span class="hljs-comment">-- 再次在主机查看mater状态（会发现File和Position发生了变化）</span><br><span class="hljs-keyword">SHOW</span> MASTER STATUS;<br><span class="hljs-comment">-- 修改从机连接主机的SQL，并重新连接即可</span><br></code></pre></td></tr></table></figure><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>启动docker容器后提示 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code></p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220715004850504.png"></p><!--![img](ShardingSphere5入门到实战/image-20220715004850504.png)--><p>此错误，虽然不影响主从同步的搭建，但是如果想从<code>远程客户端通过以下方式连接</code>docker中的MySQL则没法连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\administrator&gt;mysql -h 192.168.100.201 -P 3306 -u root -p<br></code></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件：</span><br>vim /usr/lib/sysctl.d/00-system.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">追加</span><br>net.ipv4.ip_forward=1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">接着重启网络</span><br>systemctl restart network<br></code></pre></td></tr></table></figure><h1 id="第04章-ShardingSphere-JDBC读写分离"><a href="#第04章-ShardingSphere-JDBC读写分离" class="headerlink" title="第04章 ShardingSphere-JDBC读写分离"></a>第04章 ShardingSphere-JDBC读写分离</h1><h2 id="1、创建SpringBoot程序"><a href="#1、创建SpringBoot程序" class="headerlink" title="1、创建SpringBoot程序"></a>1、创建SpringBoot程序</h2><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><p>项目名：sharding-jdbc-demo</p><p>SpringBoot版本：<strong>3.0.5.RELEASE</strong></p><h3 id="1-2、添加依赖"><a href="#1-2、添加依赖" class="headerlink" title="1.2、添加依赖"></a>1.2、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--兼容jdk17和spring boot3--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.yaml<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>snakeyaml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3、创建实体类"><a href="#1-3、创建实体类" class="headerlink" title="1.3、创建实体类"></a>1.3、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String uname;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4、创建Mapper"><a href="#1-4、创建Mapper" class="headerlink" title="1.4、创建Mapper"></a>1.4、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5、配置-Spring-Boot"><a href="#1-5、配置-Spring-Boot" class="headerlink" title="1.5、配置 Spring Boot"></a>1.5、配置 Spring Boot</h3><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置 DataSource Driver</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">org.apache.shardingsphere.driver.ShardingSphereDriver</span><br><span class="hljs-comment"># 指定 YAML 配置文件</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:shardingsphere:classpath:shardingsphere.yaml</span><br></code></pre></td></tr></table></figure><h3 id="1-6、配置shardingsphere"><a href="#1-6、配置shardingsphere" class="headerlink" title="1.6、配置shardingsphere"></a>1.6、配置shardingsphere</h3><p>shardingsphere.yaml</p><p>模式配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mode:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">Standalone</span><br>  <span class="hljs-attr">repository:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">JDBC</span><br></code></pre></td></tr></table></figure><p>数据源配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-attr">write_ds:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3306/db_user</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">read_ds_0:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3307/db_user</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">read_ds_1:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3308/db_user</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>读写分离配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!READWRITE_SPLITTING</span><br>    <span class="hljs-attr">dataSources:</span><br>      <span class="hljs-attr">readwrite_ds:</span><br>        <span class="hljs-attr">writeDataSourceName:</span> <span class="hljs-string">write_ds</span><br>        <span class="hljs-attr">readDataSourceNames:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">read_ds_0</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">read_ds_1</span><br>        <span class="hljs-attr">transactionalReadQueryStrategy:</span> <span class="hljs-string">PRIMARY</span> <span class="hljs-comment"># 事务内读请求的路由策略，可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC</span><br>        <span class="hljs-attr">loadBalancerName:</span> <span class="hljs-string">random</span><br>    <span class="hljs-attr">loadBalancers:</span><br>      <span class="hljs-attr">random:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">RANDOM</span><br></code></pre></td></tr></table></figure><p>输出sql：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">props:</span><br>  <span class="hljs-attr">sql-show:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><h3 id="2-1、主从复制测试"><a href="#2-1、主从复制测试" class="headerlink" title="2.1、主从复制测试"></a>2.1、主从复制测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShardingJdbcDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入数据的测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUname(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        userMapper.insert(user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、负载均衡测试"><a href="#2-2、负载均衡测试" class="headerlink" title="2.2、负载均衡测试"></a>2.2、负载均衡测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 负载均衡测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>负载均衡算法配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!READWRITE_SPLITTING</span><br>    <span class="hljs-attr">loadBalancers:</span><br>      <span class="hljs-attr">random:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">RANDOM</span><br>      <span class="hljs-attr">round_robin:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">ROUND_ROBIN</span><br>      <span class="hljs-attr">weight:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">WEIGHT</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">read_ds_0:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">read_ds_1:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="2-3、事务测试"><a href="#2-3、事务测试" class="headerlink" title="2.3、事务测试"></a>2.3、事务测试</h3><p><strong>transactionalReadQueryStrategy: PRIMARY</strong> </p><p>事务内读请求的路由策略，可选值：</p><p>PRIMARY（路由至主库）</p><p>FIXED（同一事务内路由至固定数据源）</p><p>DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC</p><p><strong>测试1：</strong></p><p>不添加@Transactional：insert对主库操作，select对从库操作</p><p><strong>测试2：</strong></p><p>添加@Transactional：则insert和select按照transactionalReadQueryStrategy的配置执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 事务测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Transactional</span><span class="hljs-comment">//开启事务</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTrans</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUname(<span class="hljs-string">&quot;铁锤&quot;</span>);<br>    userMapper.insert(user);<br><br>    List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>在JUnit环境下的@Transactional注解，默认情况下就会对事务进行回滚（即使在没加注解@Rollback，也会对事务回滚）</p><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220810163534068.png" alt="image-20220810163534068"></p><p>ShardingSphere-JDBC远程连接的方式默认的密码加密规则是：mysql_native_password</p><p>因此需要在服务器端修改服务器的密码加密规则，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="第05章-ShardingSphere-JDBC垂直分片"><a href="#第05章-ShardingSphere-JDBC垂直分片" class="headerlink" title="第05章 ShardingSphere-JDBC垂直分片"></a>第05章 ShardingSphere-JDBC垂直分片</h1><h2 id="1、准备服务器"><a href="#1、准备服务器" class="headerlink" title="1、准备服务器"></a>1、准备服务器</h2><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220807232456342.png"></p><!--![image-20220807232456342](ShardingSphere5入门到实战/image-20220807232456342.png)--><ul><li><p>服务器：容器名<code>server-user</code>，端口 <code>3301</code></p></li><li><p>服务器：容器名<code>server-order</code>，端口<code>3302</code></p></li></ul><h3 id="1-1、创建server-user容器"><a href="#1-1、创建server-user容器" class="headerlink" title="1.1、创建server-user容器"></a>1.1、创建server-user容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3301:3306 \<br>-v /atguigu/server/user/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/user/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-user \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-user env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_user;<br>USE db_user;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user (<br> id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br> uname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br> <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br></code></pre></td></tr></table></figure><h3 id="1-2、创建server-order容器"><a href="#1-2、创建server-order容器" class="headerlink" title="1.2、创建server-order容器"></a>1.2、创建server-order容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3302:3306 \<br>-v /atguigu/server/order/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/order/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-order \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-order env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_order;<br>USE db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order (<br>  id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br></code></pre></td></tr></table></figure><h2 id="2、程序实现"><a href="#2、程序实现" class="headerlink" title="2、程序实现"></a>2、程序实现</h2><h3 id="2-1、创建实体类"><a href="#2-1、创建实体类" class="headerlink" title="2.1、创建实体类"></a>2.1、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_order&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String orderNo;<br>    <span class="hljs-keyword">private</span> Long userId;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、创建Mapper"><a href="#2-2、创建Mapper" class="headerlink" title="2.2、创建Mapper"></a>2.2、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Order&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、配置垂直分片"><a href="#2-3、配置垂直分片" class="headerlink" title="2.3、配置垂直分片"></a>2.3、配置垂直分片</h3><p>模式配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mode:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">Standalone</span><br>  <span class="hljs-attr">repository:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">JDBC</span><br></code></pre></td></tr></table></figure><p>数据源配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-attr">user_ds:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3301/db_user</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">order_ds:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3302/db_order</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>垂直分片（分库）配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-attr">tables:</span><br>      <span class="hljs-attr">t_user:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">user_ds.t_user</span><br>      <span class="hljs-attr">t_order:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">order_ds.t_order</span><br></code></pre></td></tr></table></figure><p>输出sql：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">props:</span><br>  <span class="hljs-attr">sql-show:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="3、测试垂直分片"><a href="#3、测试垂直分片" class="headerlink" title="3、测试垂直分片"></a>3、测试垂直分片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 垂直分片：插入数据测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderAndUser</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUname(<span class="hljs-string">&quot;强哥&quot;</span>);<br>    userMapper.insert(user);<br><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU001&quot;</span>);<br>    order.setUserId(user.getId());<br>    orderMapper.insert(order);<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 垂直分片：查询数据测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectFromOrderAndUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.selectById(<span class="hljs-number">1L</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第06章-ShardingSphere-JDBC水平分片"><a href="#第06章-ShardingSphere-JDBC水平分片" class="headerlink" title="第06章 ShardingSphere-JDBC水平分片"></a>第06章 ShardingSphere-JDBC水平分片</h1><h2 id="1、准备服务器-1"><a href="#1、准备服务器-1" class="headerlink" title="1、准备服务器"></a>1、准备服务器</h2><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20220808033239206-16954435082271.png"></p><!--![image-20220808033239206](ShardingSphere5入门到实战/image-20220808033239206-16954435082271.png)--><ul><li><p>服务器：容器名<code>server-order0</code>，端口<code>3310</code></p></li><li><p>服务器：容器名<code>server-order1</code>，端口<code>3311</code></p></li></ul><h3 id="1-1、创建server-order0容器"><a href="#1-1、创建server-order0容器" class="headerlink" title="1.1、创建server-order0容器"></a>1.1、创建server-order0容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3310:3306 \<br>-v /atguigu/server/order0/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/order0/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-order0 \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-order0 env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><p><code>注意：</code>水平分片的id需要在业务层实现，<code>不能依赖数据库的主键自增</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_order;<br>USE db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order0 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order1 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br></code></pre></td></tr></table></figure><h3 id="1-2、创建server-order1容器"><a href="#1-2、创建server-order1容器" class="headerlink" title="1.2、创建server-order1容器"></a>1.2、创建server-order1容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3311:3306 \<br>-v /atguigu/server/order1/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/order1/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-order1 \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-order1 env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong>和server-order0相同</li></ul><p><code>注意：</code>水平分片的id需要在业务层实现，不能依赖数据库的主键自增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_order;<br>USE db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order0 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order1 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br></code></pre></td></tr></table></figure><h2 id="2、水平分片"><a href="#2、水平分片" class="headerlink" title="2、水平分片"></a>2、水平分片</h2><h3 id="2-1、配置一个分片节点"><a href="#2-1、配置一个分片节点" class="headerlink" title="2.1、配置一个分片节点"></a>2.1、配置一个分片节点</h3><p>模式配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mode:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">Standalone</span><br>  <span class="hljs-attr">repository:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">JDBC</span><br></code></pre></td></tr></table></figure><p>数据源配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-attr">user_ds:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3301/db_user</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">order_ds_0:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3310/db_order</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">order_ds_1:</span><br>    <span class="hljs-attr">dataSourceClassName:</span> <span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br>    <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">jdbcUrl:</span> <span class="hljs-string">jdbc:mysql://192.168.6.121:3311/db_order</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>配置一个order分片节点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-attr">tables:</span><br>      <span class="hljs-attr">t_user:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">user_ds.t_user</span><br>      <span class="hljs-attr">t_order:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">order_ds_0.t_order0</span><br></code></pre></td></tr></table></figure><p>输出sql：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">props:</span><br>  <span class="hljs-attr">sql-show:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>修改Order实体类的主键策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@TableId(type = IdType.AUTO)//依赖数据库的主键自增策略</span><br><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><span class="hljs-comment">//分布式id</span><br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 水平分片：插入数据测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrder</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU001&quot;</span>);<br>    order.setUserId(<span class="hljs-number">1L</span>);<br>    orderMapper.insert(order);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-、分布式序列算法"><a href="#2-2-、分布式序列算法" class="headerlink" title="2.2 、分布式序列算法"></a>2.2 、分布式序列算法</h3><p><strong>雪花算法：</strong></p><p>水平分片需要关注全局序列，因为不能简单的使用基于数据库的主键自增。</p><p>分库分表以后表的主键字段就不能使用自增策略，因为可能出现重复数据。</p><p>分布式系统中的主键生成策略：</p><p>1、uuid</p><p>2、redis    </p><p>3、雪花算法</p><p><a href="https://so.csdn.net/so/search?q=%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95&spm=1001.2101.3001.7020">雪花算法</a>是推特开源的分布式ID生成算法，用于在不同的机器上生成唯一的ID的算法。该算法生成一个64bit的数字作为分布式ID，保证这个ID自增</p><p>并且全局唯一。</p><p>生成的64位ID结构如下：</p><p><img src="/2024/04/29/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/ShardingSphere5/ShardingSphere5%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98/image-20230118232739869.png"></p><!--![image-20230118232739869](ShardingSphere5入门到实战/image-20230118232739869.png)--> <p>雪花算法是 64 位 的二进制，一共包含了四部分：</p><p>1、1位是符号位，也就是最高位，始终是0，没有任何意义，因为要是唯一计算机二进制补码中就是负数，0才是正数。</p><p>2、41位是时间戳，具体到毫秒，41位的二进制可以使用69年，如果时间计算基准年为1970年，那么到2039年就不能再用了，当前也可以指定一个基准年。</p><p>3、10位是机器标识，可以全部用作机器ID，也可以用来标识机房ID + 机器ID，10位最多可以表示1024台机器。</p><p>4、12位是计数序列号，也就是同一台机器上同一时间，理论上还可以同时生成不同的ID，12位的序列号能够区分出4096个ID。</p><h3 id="2-2、水平分库配置"><a href="#2-2、水平分库配置" class="headerlink" title="2.2、水平分库配置"></a>2.2、水平分库配置</h3><p>使用<strong>行表达式：</strong><a href="https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/#%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F">核心概念 :: ShardingSphere (apache.org)</a></p><p>将数据 分片到order_ds_0和order_ds_1中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">order_ds_$&#123;0..1&#125;.t_order0</span><br></code></pre></td></tr></table></figure><p><strong>分片算法配置</strong></p><p>分片规则：</p><ul><li>order表中<code>user_id</code>为偶数时，数据插入<code>server-order0服务器</code></li><li>order表中<code>user_id</code>为奇数时，数据插入<code>server-order1服务器</code></li></ul><p>分片好处：同一个用户的订单数据，被插入到同一台服务器上，查询一个用户的订单时效率较高。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-attr">tables:</span><br>      <span class="hljs-attr">t_user:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">user_ds.t_user</span><br>      <span class="hljs-attr">t_order:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">order_ds_$&#123;0..1&#125;.t_order0</span><br>        <span class="hljs-attr">databaseStrategy:</span><br>          <span class="hljs-attr">standard:</span><br>            <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">user_id</span><br>            <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">userid_inline</span><br><br>    <span class="hljs-attr">shardingAlgorithms:</span><br>      <span class="hljs-attr">userid_inline:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">order_ds_$&#123;user_id</span> <span class="hljs-string">%</span> <span class="hljs-number">2</span><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 水平分片：分库插入数据测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderDatabaseStrategy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + System.currentTimeMillis());<br>        order.setUserId(i + <span class="hljs-number">1</span>);<br>        orderMapper.insert(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、水平分表配置"><a href="#2-3、水平分表配置" class="headerlink" title="2.3、水平分表配置"></a>2.3、水平分表配置</h3><p>将数据 分片到order_ds_0和order_ds_1的t_order0和t_order1中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">order_ds_$&#123;0..1&#125;.t_order$&#123;0..1&#125;</span><br></code></pre></td></tr></table></figure><p><strong>分片算法配置</strong></p><p>分片规则：order表中<code>id</code>为偶数时，数据插入<code>t_order0数据库</code>，<code>id</code>为奇数时，数据插入<code>t_order1数据库</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>    <span class="hljs-attr">tables:</span><br>      <span class="hljs-attr">t_user:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">user_ds.t_user</span><br>      <span class="hljs-attr">t_order:</span><br>        <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">order_ds_$&#123;0..1&#125;.t_order$&#123;0..1&#125;</span><br>        <span class="hljs-attr">databaseStrategy:</span><br>          <span class="hljs-attr">standard:</span><br>            <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">user_id</span><br>            <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">userid_inline</span><br>        <span class="hljs-attr">tableStrategy:</span><br>          <span class="hljs-attr">standard:</span><br>            <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">id</span><br>            <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">orderid_inline</span><br><br>    <span class="hljs-attr">shardingAlgorithms:</span><br>      <span class="hljs-attr">userid_inline:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">order_ds_$&#123;user_id</span> <span class="hljs-string">%</span> <span class="hljs-number">2</span><span class="hljs-string">&#125;</span><br>      <span class="hljs-attr">orderid_inline:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props:</span><br>          <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">t_order$&#123;id</span> <span class="hljs-string">%</span> <span class="hljs-number">2</span><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 水平分片：分表插入数据测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderTableStrategy</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + System.currentTimeMillis());<br>        order.setUserId(<span class="hljs-number">1L</span>);<br>        orderMapper.insert(order);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + System.currentTimeMillis());<br>        order.setUserId(<span class="hljs-number">2L</span>);<br>        orderMapper.insert(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、多表关联"><a href="#3、多表关联" class="headerlink" title="3、多表关联"></a>3、多表关联</h2><h3 id="3-1、创建关联表"><a href="#3-1、创建关联表" class="headerlink" title="3.1、创建关联表"></a>3.1、创建关联表</h3><p>在<code>server-order0、server-order1</code>服务器中分别创建两张订单详情表<code>t_order_item0、t_order_item1</code></p><p>我们希望<code>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</code>，因此，这两张表我们使用相同的分片策略。</p><p>那么在<code>t_order_item</code>中我们也需要创建<code>order_no</code>和<code>user_id</code>这两个分片键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order_item0(<br>    id <span class="hljs-type">BIGINT</span>,<br>    user_id <span class="hljs-type">BIGINT</span>,<br>    order_id <span class="hljs-type">BIGINT</span>,<br>    price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    count <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order_item1(<br>    id <span class="hljs-type">BIGINT</span>,<br>    user_id <span class="hljs-type">BIGINT</span>,<br>    order_id <span class="hljs-type">BIGINT</span>,<br>    price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    count <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br></code></pre></td></tr></table></figure><h3 id="3-2、创建实体类"><a href="#3-2、创建实体类" class="headerlink" title="3.2、创建实体类"></a>3.2、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_order_item&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItem</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span> <span class="hljs-comment">//分布式id</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-keyword">private</span> Long orderId;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> Integer count;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、创建Mapper"><a href="#3-3、创建Mapper" class="headerlink" title="3.3、创建Mapper"></a>3.3、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shargingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderItemMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;OrderItem&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、配置关联表"><a href="#3-4、配置关联表" class="headerlink" title="3.4、配置关联表"></a>3.4、配置关联表</h3><p>t_order_item的分片表、分片策略、分布式序列策略和t_order一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">rules</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">-</span> <span class="hljs-string">!SHARDING</span><br>    <span class="hljs-attr">tables</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">t_user</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">actualDataNodes</span>: <span class="hljs-string">user_ds.t_user</span><br>      <span class="hljs-attr">t_order</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">actualDataNodes</span>: <span class="hljs-string">order_ds_$&#123;0..1&#125;.t_order$&#123;0..1&#125;</span><br>        <span class="hljs-attr">databaseStrategy</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">standard</span>:<span class="hljs-string"></span><br>            <span class="hljs-attr">shardingColumn</span>: <span class="hljs-string">user_id</span><br>            <span class="hljs-attr">shardingAlgorithmName</span>: <span class="hljs-string">userid_inline</span><br>        <span class="hljs-attr">tableStrategy</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">standard</span>:<span class="hljs-string"></span><br>            <span class="hljs-attr">shardingColumn</span>: <span class="hljs-string">id</span><br>            <span class="hljs-attr">shardingAlgorithmName</span>: <span class="hljs-string">orderid_inline</span><br>      <span class="hljs-attr">t_order_item</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">actualDataNodes</span>: <span class="hljs-string">order_ds_$&#123;0..1&#125;.t_order_item$&#123;0..1&#125;</span><br>        <span class="hljs-attr">databaseStrategy</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">standard</span>:<span class="hljs-string"></span><br>            <span class="hljs-attr">shardingColumn</span>: <span class="hljs-string">user_id</span><br>            <span class="hljs-attr">shardingAlgorithmName</span>: <span class="hljs-string">userid_inline</span><br>        <span class="hljs-attr">tableStrategy</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">standard</span>:<span class="hljs-string"></span><br>            <span class="hljs-attr">shardingColumn</span>: <span class="hljs-string">order_id</span><br>            <span class="hljs-attr">shardingAlgorithmName</span>: <span class="hljs-string">orderid_item_inline</span><br><br>    <span class="hljs-attr">shardingAlgorithms</span>:<span class="hljs-string"></span><br>      <span class="hljs-attr">userid_inline</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">algorithm-expression</span>: <span class="hljs-string">order_ds_$&#123;user_id % 2&#125;</span><br>      <span class="hljs-attr">orderid_inline</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">algorithm-expression</span>: <span class="hljs-string">t_order$&#123;id % 2&#125;</span><br>      <span class="hljs-attr">orderid_item_inline</span>:<span class="hljs-string"></span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">INLINE</span><br>        <span class="hljs-attr">props</span>:<span class="hljs-string"></span><br>          <span class="hljs-attr">algorithm-expression</span>: <span class="hljs-string">t_order_item$&#123;order_id % 2&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-5、测试插入数据"><a href="#3-5、测试插入数据" class="headerlink" title="3.5、测试插入数据"></a>3.5、测试插入数据</h3><p>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 测试关联表插入</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderAndOrderItem</span><span class="hljs-params">()</span>&#123;<br><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>         <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>         order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + System.currentTimeMillis());<br>         order.setUserId(<span class="hljs-number">1L</span>);<br>         orderMapper.insert(order);<br><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123;<br>             <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>             orderItem.setUserId(<span class="hljs-number">1L</span>);<br>             orderItem.setOrderId(order.getId());<br>             orderItem.setPrice(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">10</span>));<br>             orderItem.setCount(<span class="hljs-number">2</span>);<br>             orderItemMapper.insert(orderItem);<br>         &#125;<br>     &#125;<br><br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>         <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>         order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + System.currentTimeMillis());<br>         order.setUserId(<span class="hljs-number">2L</span>);<br>         orderMapper.insert(order);<br><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123;<br>             <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>             orderItem.setUserId(<span class="hljs-number">2L</span>);<br>             orderItem.setOrderId(order.getId());<br>             orderItem.setPrice(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">5</span>));<br>             orderItem.setCount(<span class="hljs-number">2</span>);<br>             orderItemMapper.insert(orderItem);<br>         &#125;<br>     &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>MySQL</category>
      
      <category>ShardingSphere</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL高级二</title>
    <link href="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/"/>
    <url>/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MySQL基础日志"><a href="#1-MySQL基础日志" class="headerlink" title="1 MySQL基础日志"></a>1 MySQL基础日志</h1><h2 id="1-1-日志分类"><a href="#1-1-日志分类" class="headerlink" title="1.1 日志分类"></a>1.1 日志分类</h2><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。MySQL有多种类型的日志，用于记录数据库的操作和状态。以下是一些常见的MySQL日志：</p><p>1、错误日志（Error Log）：记录MySQL服务器在启动、运行过程中发生的错误和异常情况，如启动错误、语法错误等。</p><p>2、查询日志（Query Log）：记录所有执行的查询语句，包括SELECT、INSERT、UPDATE、DELETE等操作。可以用于分析查询性能和调试问题，但需要注意对于高负载的系统，开启查询日志可能会对性能产生影响。</p><p>3、慢查询日志（Slow Query Log）：记录执行时间超过指定阈值的查询语句。慢查询日志可以帮助你找出执行时间较长的查询，以便进行性能优化。</p><p>4、二进制日志（Binary Log）：记录所有对数据库的更改操作，包括数据修改、表结构变更等。二进制日志可以用于数据恢复、主从复制等场景。</p><p>5、事务日志（Transaction Log）：也称为重做日志（Redo Log），记录正在进行的事务的更改操作。事务日志用于保证数据库的ACID特性，并支持崩溃恢复。</p><h1 id="2-MySQL事务日志"><a href="#2-MySQL事务日志" class="headerlink" title="2 MySQL事务日志"></a>2 MySQL事务日志</h1><h2 id="2-1-事务概述"><a href="#2-1-事务概述" class="headerlink" title="2.1 事务概述"></a>2.1 事务概述</h2><p>概述：就是由多个操作组成的一个逻辑单元，组成这个逻辑单元的多个操作要么都成功要么都失败。</p><p>作用：保证数据的一致性</p><p>举例：转账</p><h2 id="2-2-ACID四大特性"><a href="#2-2-ACID四大特性" class="headerlink" title="2.2 ACID四大特性"></a>2.2 ACID四大特性</h2><p><strong>A：原子性(Atomicity)</strong></p><p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p><strong>C：一致性(Consistency)</strong></p><p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p><p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p><p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p><p><strong>I：隔离性(Isolation)</strong></p><p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。</p><p>事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p><strong>D：持久性(Durability)</strong></p><p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p><p>注意：</p><p>1、事务的隔离性由 <strong>锁机制</strong> 实现。</p><p>2、而事务的原子性、一致性和持久性由事务的 <strong>redo日志</strong>和<strong>undo日志</strong>来保证。</p><ul><li><p>redo log称为重做日志 ，它记录了对数据库进行修改的操作，包括插入、更新和删除等。Redo日志的主要作用是保证数据库的持久性和恢复能力。</p></li><li><p>undo log称为回滚日志 ，它记录了对数据库进行修改的操作的<strong>逆操作</strong>，用于实现事务的回滚和MVCC（多版本并发控制）。</p></li></ul><h2 id="2-3-undo日志"><a href="#2-3-undo日志" class="headerlink" title="2.3 undo日志"></a>2.3 undo日志</h2><h3 id="2-3-1-undo日志简介"><a href="#2-3-1-undo日志简介" class="headerlink" title="2.3.1 undo日志简介"></a>2.3.1 undo日志简介</h3><p>为了保证 <strong>原子性</strong> ROLLBACK 把数据改回原先的样子，这个过程称之为 <strong>回滚</strong> </p><p>如何保证原子性呢? </p><p>1、你<strong>插入一条记录</strong>时，至少要把这条记录的<strong>主键值记录</strong>下来，之后回滚的时候只需要把这个主键值对应的<strong>记录删除</strong>掉就好了(对于INSER，INNODB存储引擎会完成一个DELETE)。</p><p>2、你<strong>删除一条记录</strong>时，至少把这条记录的<strong>内容都记录</strong>下来，这样之后回滚时再把这些内容组成的<strong>记录插入</strong>到表中就好了(对于每个DELETE，INNODB存储引擎会执行一个INSERT)。</p><p>3、你<strong>修改一条记录</strong>时，至少要把修改这条记录前的<strong>旧值都记录</strong>下来，这样之后回滚时把这条<strong>记录更新</strong>为旧值就好了(对于每个UPDATE,INNODB存储引擎会执行一个反向的UPDATE,将修改之前的行放回去)。</p><p>MySQL把这些为了回滚而记录的这些内容称之为<strong>撤销日志</strong>或者<strong>回滚日志</strong>(undo log)</p><p>redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中<strong>更新数据</strong>的<strong>前置操作</strong>其实是要先写入一个undo log。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230621074108422.png"></p><!--![image-20230621074108422](MySQL课件补充/image-20230621074108422.png)--><p>undo日志作用：</p><p>1、回滚数据</p><p>2、MVCC</p><h3 id="2-3-2-undo-log存储结构"><a href="#2-3-2-undo-log存储结构" class="headerlink" title="2.3.2 undo log存储结构"></a>2.3.2 undo log存储结构</h3><h4 id="回滚段与undo页"><a href="#回滚段与undo页" class="headerlink" title="回滚段与undo页"></a>回滚段与undo页</h4><p>InnoDB对undo log的管理采用段的方式，也就是回滚段（<strong>rollback segment</strong>） 。每个回滚段记录了 1024 个 <strong>undo log segment</strong> ，而在每个undo log segment段中进行 <strong>undo页</strong> (存储的就是回滚记录)的申请。 在 InnoDB1.1版本之前 （不包括1.1版本），只有一个rollback segment，因此支持同时在线的事务限制为 1024 。虽然对绝大多数的应用来说都已经够用。 从1.1版本开始InnoDB支持最大 128个rollback segment ，故其支持同时在线的事务限制提高到 了 128*1024 。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230629145317132.png"></p><!--![image-20230629145317132](MySQL课件补充/image-20230629145317132.png)--> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过如下的SQL语句查询回滚段的大小</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">SHOW VARIABLES LIKE <span class="hljs-string">&#x27;innodb_rollback_segments&#x27;</span>;</span><br>+--------------------------+-------+<br>| Variable_name            | Value |<br>+--------------------------+-------+<br>| innodb_rollback_segments | 128   |<br>+--------------------------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="undo页的重用"><a href="#undo页的重用" class="headerlink" title="undo页的重用"></a>undo页的重用</h4><p>在MySQL中，undo页的重用是指当事务提交或回滚后，<strong>之前使用的undo页可以被重新利用</strong>来存储新的事务的undo信息</p><h4 id="回滚段与事务"><a href="#回滚段与事务" class="headerlink" title="回滚段与事务"></a>回滚段与事务</h4><p>1、每个事务只会使用一个回滚段，一个回滚段在同一时刻可能会服务于多个事务。</p><p>2、当一个事务开始的时候，会制定一个回滚段，在事务进行的过程中，当数据被修改时，原始的数据会被复制到回滚段。</p><p>3、当事务提交时，InnoDB存储引擎会做以下两件事情： </p><ul><li>将undo log放入列表中，以供之后的purge(<strong>清理</strong>)操作 </li><li>判断undo log所在的页是否可以重用，若可以分配给下个事务使用</li></ul><h4 id="回滚段中的数据分类"><a href="#回滚段中的数据分类" class="headerlink" title="回滚段中的数据分类"></a>回滚段中的数据分类</h4><h5 id="uncommitted-undo-information"><a href="#uncommitted-undo-information" class="headerlink" title="uncommitted undo information"></a>uncommitted undo information</h5><p>未提交的回滚数据（uncommitted undo information）是指在<strong>事务执行过程中所做的修改，但尚未提交的数据</strong>。<strong>只对当前正在执行的事务可见</strong>。</p><h5 id="committed-undo-information"><a href="#committed-undo-information" class="headerlink" title="committed undo information"></a>committed undo information</h5><p>已经提交但未过期的回滚数据（committed undo information）是指在事务执行过程中所做的修改，并且已经成功提交到数据库中的数据。<strong>对其他事务可见</strong>，可以被读取和修改。已经提交的回滚数据只有<strong>在没有过期的情况下才能被保留</strong>。过期数据是指由于某些原因（如长时间未使用）而被标记为可回收的数据。</p><h5 id="expired-undo-information"><a href="#expired-undo-information" class="headerlink" title="expired undo information"></a>expired undo information</h5><p>事务已经提交并过期的数据（expired undo information）是指在事务执行过程中所做的修改，并且已经成功提交到数据库中，但由于某些原因被标记为可回收的数据。<strong>过期的回滚数据可能会被后续的事务覆盖或清理，以释放存储空间或提高性能。</strong>这意味着虽然这些数据已经成功提交，但它们<strong>可能不再对其他事务可见或可访问。</strong></p><p>需要注意的是，过期的回滚数据的处理方式可能因数据库管理系统而异。一些数据库系统会自动清理过期数据，而另一些则需要手动管理和清理。</p><h3 id="2-3-3-undo-log类型"><a href="#2-3-3-undo-log类型" class="headerlink" title="2.3.3 undo log类型"></a>2.3.3 undo log类型</h3><p>在InnoDB存储引擎中，undo log分为：insert undo log和update undo log</p><h4 id="insert-undo-log"><a href="#insert-undo-log" class="headerlink" title="insert undo log"></a>insert undo log</h4><p>Insert undo log（插入撤销日志）是数据库中用于记录<strong>插入操作</strong>的一种撤销日志。因为insert操作的记录，只对事务本身可见，对其他事务不可见(这是事务的隔离性的要求)，因此 undo log可以在<strong>事务提交之后删除</strong>。</p><h4 id="update-undo-log"><a href="#update-undo-log" class="headerlink" title="update undo log"></a>update undo log</h4><p>Update undo log（更新撤销日志）是数据库中用于记录<strong>更新操作(delete、update)<strong>的一种撤销日志。该undo log可能需要提供MVCC机制，因此不能</strong>在事务提交时就进行删除。提交是放入undo log链表，等待purge线程进行最后的删除。</strong></p><h3 id="2-3-4-undo-log的生命周期"><a href="#2-3-4-undo-log的生命周期" class="headerlink" title="2.3.4 undo log的生命周期"></a>2.3.4 undo log的生命周期</h3><h4 id="undo-log生成过程"><a href="#undo-log生成过程" class="headerlink" title="undo log生成过程"></a>undo log生成过程</h4><h5 id="简要生成过程"><a href="#简要生成过程" class="headerlink" title="简要生成过程"></a>简要生成过程</h5><p>假设有2个数值，分别为A&#x3D;1和B&#x3D;2, 然后将A修改为3，B修改为4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、start transaction ;<br>2、记录A=1到undo log  ;<br>3、update A = 3;<br>4、记录A=3到redo log  ;<br>5、记录B=2到undo log  ;<br>6、update B = 4 ;<br>7、记录B=4到redo log  ;<br>8、将redo log刷新到磁盘<br>9、commit<br></code></pre></td></tr></table></figure><p>异常情况分析：</p><p>1、在1~8步骤的任意一步系统宕机，事务未提交，该事务就不会对磁盘上的数据做任何影响。</p><p>2、如果在8~9之间宕机，恢复之后可以选择回滚，也可以选择继续完成事务提交，因为此时redo log已经持久化。</p><p>3、若在9之后系统宕机，内存映射中变更的数据还来不及刷回磁盘，那么系统恢复之后，可以根据redo log把数据刷回磁盘。</p><h5 id="详细生成过程"><a href="#详细生成过程" class="headerlink" title="详细生成过程"></a>详细生成过程</h5><p>对于InnoDB引擎来说，每个行记录除了记录本身的数据之外，还有几个隐藏的列：</p><p>1、DB_ROW_ID: 如果没有为表显式的定义主键，并且表中也没有定义唯一索引，那么InnoDB会自动为表添加一个row_id的隐藏列作为主键。</p><p>2、DB_TRX_ID: 每个事务都会分配一个事务的ID，当对某条记录发生变更时，就会将这个事务的事务ID写入trx_id中。</p><p>3、DB_ROLL_PTR: 回滚指针，本质上就是指向undo log的指针。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230621085633180.png"></p><!--![image-20230621085633180](MySQL课件补充/image-20230621085633180.png)--> <p>当我们执行INSERT时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (name) <span class="hljs-keyword">VALUES</span> (&quot;tom&quot;);<br></code></pre></td></tr></table></figure><p>插入的数据都会生成一条insert undo log , 并且数据的回滚指针会指向它。undo log会记录undo log的序号，插入主键的列和值…., 那么在进行rollback的时候，通过主键直接把对应的数据删除即可。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230621085924320.png"></p><!--![image-20230621085924320](MySQL课件补充/image-20230621085924320.png)--> <p>当我们执行UPDATE时：</p><p>对于更新的操作会产生update undo log，并且会分更新主键的和不更新主键的，假设现在执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sun&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230621090118337.png"></p><!--![image-20230621090118337](MySQL课件补充/image-20230621090118337.png)--> <p>这时会把老的记录写入新的undo log，让回滚指针指向定的undo log，它的undo log是1，并且新的undo log会指向老的undo log(undo no &#x3D; 0)。</p><p>假设现在执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230621090421981.png"></p><!--![image-20230621090421981](MySQL课件补充/image-20230621090421981.png)--> <p>对于更新主键的操作，会先<strong>把原来的数据deletemark标识打开</strong>，这时并没有真正的删除数据，真正的删除会交给<strong>清理线程</strong>去判断，然后在后面插入一条新的数据，新数据也会产生undo log，并且undo log的序号会递增。</p><p>可以发现每次对数据的变更都会产生一个undo log，当一条记录被变更多次时，那么，就会产生多条undo log，undo log记录的是变更前的日志，并且每个undo log的序号是递增的，那么，要当回滚的时候，按照序号依次向前，这样就会找到原始数据了。</p><h4 id="回滚流程"><a href="#回滚流程" class="headerlink" title="回滚流程"></a>回滚流程</h4><p>以上面的例子来说，假设执行rollback，那么，对应的流程应该是这样：</p><p>1、通过undo no&#x3D;3的日志把id&#x3D;2的数据删除 </p><p>2、通过undo no&#x3D;2的日志把id&#x3D;1的数据的deletemark还原成0 </p><p>3、通过undo no&#x3D;1的日志把id&#x3D;1的数据的name还原成Tom </p><p>4、通过undo no&#x3D;0的日志把id&#x3D;1的数据删除</p><h4 id="undo-log的删除"><a href="#undo-log的删除" class="headerlink" title="undo log的删除"></a>undo log的删除</h4><p>1、针对于insert undo log 因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。 </p><p>2、针对于update undo log 该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。</p><h1 id="3-MySQL锁"><a href="#3-MySQL锁" class="headerlink" title="3 MySQL锁"></a>3 MySQL锁</h1><p>事务的 <strong>隔离性</strong> 由这章讲述的 <strong>锁</strong> 来实现。</p><h2 id="3-1-锁概述"><a href="#3-1-锁概述" class="headerlink" title="3.1 锁概述"></a>3.1 锁概述</h2><p><strong>锁</strong>是计算机协调多个进程或者线程<strong>并发访问某一个资源</strong>的机制。数据在任何时刻<strong>最多只有一个线程</strong>在访问，保证数据的完整性和一致性。</p><h2 id="3-2-并发事务带来的问题"><a href="#3-2-并发事务带来的问题" class="headerlink" title="3.2 并发事务带来的问题"></a>3.2 并发事务带来的问题</h2><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p><p><strong>脏读（Dirty read）</strong>: 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p><p><strong>丢失修改（Lost to modify）</strong>：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A&#x3D;20，事务2也读取A&#x3D;20，事务1修改A&#x3D;A-1，事务2也修改A&#x3D;A-1，最终结果A&#x3D;19，事务1的修改被丢失。</p><p><strong>不可重复读（Unrepeatableread）</strong>：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务修改了该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p><p><strong>幻读（Phantom read）</strong>：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p><h2 id="3-3-并发事务的解决方案"><a href="#3-3-并发事务的解决方案" class="headerlink" title="3.3 并发事务的解决方案"></a>3.3 并发事务的解决方案</h2><p>解决方案：对事务进行隔离</p><p>MySQL的四种隔离级别如下:</p><p>**读未提交(READ UNCOMMITTED)**：这个隔离级别下，其他事务可以看到本事务没有提交的部分修改。因此，会造成脏读的问题(读取到了其他事务未提交的部分，而之后该事务进行了回滚)。这个级别的性能没有足够大的优势，但是又有很多的问题，因此很少使用。</p><p>sql演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建数据库表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> goods_innodb(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">primary</span> key(id)<br>)ENGINE<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br># 插入数据<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> goods_innodb(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;华为&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> goods_innodb(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;小米&#x27;</span>);<br><br># 会话一<br><span class="hljs-keyword">set</span> session transaction isolation level read uncommitted ;# 设置事务的隔离级别为read uncommitted<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br><br># 会话二<br><span class="hljs-keyword">set</span> session transaction isolation level read uncommitted ;# 设置事务的隔离级别为read uncommitted<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">update</span> goods_innodb <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;中兴&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;   # 修改数据<br><br># 会话一<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br></code></pre></td></tr></table></figure><p>**读已提交(READ COMMITTED)**：其他事务只能读取到本事务已经提交的部分。这个隔离级别有不可重复读的问题，在同一个事务内的两次读取，拿到的结果竟然不一样，因为，另外一个事务对数据进行了修改。</p><p>sql演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 会话一<br><span class="hljs-keyword">set</span> session transaction isolation level read committed ;# 设置事务的隔离级别为read committed<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br><br># 会话二<br><span class="hljs-keyword">set</span> session transaction isolation level read committed ;# 设置事务的隔离级别为read committed<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">update</span> goods_innodb <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;小米&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> ;   # 修改数据<br><br># 会话一<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br><br># 会话二<br><span class="hljs-keyword">commit</span>;# 提交事务<br><br># 会话一<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br></code></pre></td></tr></table></figure><p><strong>REPEATABLE READ(可重复读)<strong>：可重复读隔离级别解决了上面不可重复读的问题(看名字也知道)，但是不能完全解决幻读。MySql默认的事务隔离级别就是：</strong>REPEATABLE READ</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@global</span>.transaction_isolation ;<br></code></pre></td></tr></table></figure><p>sql演示(解决不可重复读)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 会话一<br><span class="hljs-keyword">set</span> session transaction isolation level REPEATABLE READ ;<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br><br># 会话二<br><span class="hljs-keyword">set</span> session transaction isolation level REPEATABLE READ ;<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">update</span> goods_innodb <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;荣耀&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ;   # 修改数据<br><br># 会话一<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br><br># 会话二<br><span class="hljs-keyword">commit</span>;# 提交事务<br><br># 会话一<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br></code></pre></td></tr></table></figure><p>sql演示(测试不会出现幻读的情况)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 会话一<br><span class="hljs-keyword">set</span> session transaction isolation level REPEATABLE READ ;<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br><br># 会话二<br><span class="hljs-keyword">set</span> session transaction isolation level REPEATABLE READ ;<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> goods_innodb(name) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;小米&#x27;</span>);      # 插入数据<br><span class="hljs-keyword">commit</span>;# 提交事务<br><br># 会话一<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb ;# 查询数据<br></code></pre></td></tr></table></figure><p>sql演示(测试出现幻读的情况)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 表结构进行修改<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> goods_innodb <span class="hljs-keyword">ADD</span> version <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> ;<br><br># 会话一<br><span class="hljs-keyword">set</span> session transaction isolation level REPEATABLE READ ;<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb <span class="hljs-keyword">where</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;# 查询一条不满足条件的数据<br><br># 会话二<br><span class="hljs-keyword">set</span> session transaction isolation level REPEATABLE READ ;<br><span class="hljs-keyword">start</span> transaction ;# 开启事务<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> goods_innodb(name, version) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;vivo&#x27;</span>, <span class="hljs-number">1</span>);    # 插入一条满足条件的数据 <br><span class="hljs-keyword">commit</span>;# 提交事务<br><br># 会话一<br><span class="hljs-keyword">update</span> goods_innodb <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;金立&#x27;</span> <span class="hljs-keyword">where</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;    # 将version为<span class="hljs-number">1</span>的数据更改为<span class="hljs-string">&#x27;金立&#x27;</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> goods_innodb <span class="hljs-keyword">where</span> version <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;# 查询一条不满足条件的数据<br></code></pre></td></tr></table></figure><p>**SERIALIZABLE(可串行化)**：这是最高的隔离级别，可以解决上面提到的所有问题，因为他强制将所以的操作串行执行，这会导致并发性能极速下降，因此也不是很常用。</p><h2 id="3-4-并发事务访问情况说明"><a href="#3-4-并发事务访问情况说明" class="headerlink" title="3.4 并发事务访问情况说明"></a>3.4 并发事务访问情况说明</h2><p>并发事务访问相同记录的情况大致可以划分为3种：读-读情况、写-写情况、读-写或写-读情况</p><h3 id="3-4-1-读-读情况"><a href="#3-4-1-读-读情况" class="headerlink" title="3.4.1 读-读情况"></a>3.4.1 读-读情况</h3><p><strong>读-读</strong>情况，即并发事务相继<strong>读取相同的记录</strong> 。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。</p><h3 id="3-4-2-写-写情况"><a href="#3-4-2-写-写情况" class="headerlink" title="3.4.2 写-写情况"></a>3.4.2 写-写情况</h3><p>写-写 情况，即并发事务相继对相同的记录做出改动。 在这种情况下会发生 <strong>脏写(脏写读取、脏写覆盖)</strong> 的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们排队执行 ，这个排队的过程其实是通过<strong>锁</strong>来实现的。这个所谓 的锁其实是一个 内存中的结构 ，在事务执行前本来是没有锁的，也就是说一开始是没有 锁结构 和记录进行关联的，如图所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623085931717.png"></p><!--![image-20230623085931717](MySQL课件补充/image-20230623085931717.png)--> <p>当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的<strong>锁结构</strong> ，当没有的时候 就会在内存中生成一个 锁结构 与之关联。比如，事务 T1 要对这条记录做改动，就需要生成一个 锁结构 与之关联：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623090948272.png"></p><!--![image-20230623090948272](MySQL课件补充/image-20230623090948272.png)-->  <p>在锁结构中存在很多的信息，为了简化理解，只把两个比较重要的属性拿出来：</p><p>1、trx信息：代表这个锁结构是哪一个事务生成的</p><p>2、is_waiting: 代表当前事务是否在线等待</p><p>当事务T1改动了这条记录后，就生成了一个锁结构与该条记录关联，因为之前没有别的事务为这条记录加锁，所以is_waiting属性就是false，我们把这个场景就称之为获取锁成功，或者加锁成功。然后就可以继续进行操作了。</p><p>在事务T1提交之前，另外一个事务T2也想对该记录做更改，那么，先看看有没有锁结构与该条记录关联，发现有一个锁结构与之关联，然后也生成了一个锁结构与这条记录关联，不过锁结构的is_waiting属性就是true，表示当前事务需要等待，我们把这个场景就称之为获取锁失败，或者加锁失败。如下图所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623090651438.png"></p><!--![image-20230623090651438](MySQL课件补充/image-20230623090651438.png)--> <p>当事务T1提交之后，就会把该事务生成的<strong>锁结构释放掉</strong>，然后看看有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把<strong>事务T2对应的锁结构的is_waiting属性设置为false</strong>，然后，把该事务对应的线程唤醒，让他继续执行，此时，事务T2就算获取到了锁，效果如下所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623090921426.png"></p><!--![image-20230623090921426](MySQL课件补充/image-20230623090921426.png)--> <h3 id="3-4-3-读-写情况"><a href="#3-4-3-读-写情况" class="headerlink" title="3.4.3 读-写情况"></a>3.4.3 读-写情况</h3><p>读-写 或 写-读 ，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生 脏读 、 不可重 复读 、 幻读 的问题。</p><p>使用事务的隔离级别解决，原理有两种：</p><p>1、使用<strong>MVCC</strong>：读操作利用多版本并发控制（ MVCC ），写操作进行加锁 。</p><p>2、读、写操作都采用 加锁 的方式。</p><h2 id="3-5-锁的分类"><a href="#3-5-锁的分类" class="headerlink" title="3.5 锁的分类"></a>3.5 锁的分类</h2><p>从对数据操作的粒度分 ： </p><p>1） 表锁：操作时，会锁定整个表。</p><p>2）页面锁：操作时，会锁定某一页的数据。</p><p>3） 行锁：操作时，会锁定当前操作行。</p><p>从对数据操作的类型分：</p><p>1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p><p>2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><h2 id="3-6-InnoDB行锁"><a href="#3-6-InnoDB行锁" class="headerlink" title="3.6 InnoDB行锁"></a>3.6 InnoDB行锁</h2><h3 id="3-6-1-加锁特点"><a href="#3-6-1-加锁特点" class="headerlink" title="3.6.1 加锁特点"></a>3.6.1 加锁特点</h3><p>行锁特点 ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p><p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</p><p>InnoDB  实现了以下两种类型的行锁。</p><p>1、共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</p><p>2、排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据进行读取和修改。</p><p><strong>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</strong></p><p><strong>对于普通SELECT语句，InnoDB不会加任何锁；</strong></p><p>可以通过以下语句显示给记录集加共享锁或排他锁 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">共享锁（S）：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> ... LOCK <span class="hljs-keyword">IN</span> SHARE MODE<br>排他锁（X) ：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> ... <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span><br></code></pre></td></tr></table></figure><h3 id="3-6-2-案例准备工作"><a href="#3-6-2-案例准备工作" class="headerlink" title="3.6.2 案例准备工作"></a>3.6.2 案例准备工作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test_innodb_lock(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>sex <span class="hljs-type">varchar</span>(<span class="hljs-number">1</span>)<br>)engine <span class="hljs-operator">=</span> innodb <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;100&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;400&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;500&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;600&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;700&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;800&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;900&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test_innodb_lock <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;200&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>);<br><br><span class="hljs-keyword">create</span> index idx_test_innodb_lock_id <span class="hljs-keyword">on</span> test_innodb_lock(id);<br><span class="hljs-keyword">create</span> index idx_test_innodb_lock_name <span class="hljs-keyword">on</span> test_innodb_lock(name);<br></code></pre></td></tr></table></figure><h3 id="3-6-3-行锁基本演示"><a href="#3-6-3-行锁基本演示" class="headerlink" title="3.6.3 行锁基本演示"></a>3.6.3 行锁基本演示</h3><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554354615030.png"> 关闭自动提交功能</td><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554354601867.png">  关闭自动提交功能</td></tr><tr><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554354713628.png"> 可以正常的查询出全部的数据</td><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554354717336.png"> 可以正常的查询出全部的数据</td></tr><tr><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554354830589.png">查询id 为3的数据 ；</td><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554354832708.png">获取id为3的数据 ；</td></tr><tr><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554382789984.png"> 更新id为3的数据，但是不提交；</td><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554382905352.png"> 更新id为3 的数据， 出于等待状态</td></tr><tr><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554382977653.png"> 通过commit， 提交事务</td><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554383044542.png"> 解除阻塞，更新正常进行</td></tr><tr><td>以上， 操作的都是同一行的数据，接下来，演示不同行的数据 ：</td><td></td></tr><tr><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554385220580.png"> 更新id为3数据，正常的获取到行锁 ， 执行更新 ；</td><td><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554385236768.png"> 由于与Session-1 操作不是同一行，获取当前行锁，执行更新；</td></tr></tbody></table><!--| Session-1                                                    | Session-2                                                    || ------------------------------------------------------------ | ------------------------------------------------------------ || ![1554354615030](MySQL课件补充/1554354615030.png) 关闭自动提交功能 | ![1554354601867](MySQL课件补充/1554354601867.png)  关闭自动提交功能 || ![1554354713628](MySQL课件补充/1554354713628.png) 可以正常的查询出全部的数据 | ![1554354717336](MySQL课件补充/1554354717336.png) 可以正常的查询出全部的数据 || ![1554354830589](MySQL课件补充/1554354830589.png)查询id 为3的数据 ； | ![1554354832708](MySQL课件补充/1554354832708.png)获取id为3的数据 ； || ![1554382789984](MySQL课件补充/1554382789984.png) 更新id为3的数据，但是不提交； | ![1554382905352](MySQL课件补充/1554382905352.png) 更新id为3 的数据， 出于等待状态 || ![1554382977653](MySQL课件补充/1554382977653.png) 通过commit， 提交事务 | ![1554383044542](MySQL课件补充/1554383044542.png) 解除阻塞，更新正常进行 || 以上， 操作的都是同一行的数据，接下来，演示不同行的数据 ：   |                                                              || ![1554385220580](MySQL课件补充/1554385220580.png) 更新id为3数据，正常的获取到行锁 ， 执行更新 ； | ![1554385236768](MySQL课件补充/1554385236768.png) 由于与Session-1 操作不是同一行，获取当前行锁，执行更新； |--><h3 id="3-6-4-无索引，行锁升级为表锁"><a href="#3-6-4-无索引，行锁升级为表锁" class="headerlink" title="3.6.4 无索引，行锁升级为表锁"></a>3.6.4 无索引，行锁升级为表锁</h3><p><strong>如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。</strong>一定需要注意索引失效的问题。</p><p>查看当前表的索引 ： show  index  from test_innodb_lock ;</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554385956215.png"> </p><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td>关闭事务的自动提交<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386287454.png"></td><td>关闭事务的自动提交<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386312524.png"></td></tr><tr><td>执行更新语句 ：<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386654793.png"></td><td>执行更新语句， 但处于阻塞状态：<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386685610.png"></td></tr><tr><td>提交事务：<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386721653.png"></td><td>解除阻塞，执行更新成功 ：<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386750004.png"></td></tr><tr><td></td><td>执行提交操作 ：<img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1554386804807.png"></td></tr></tbody></table><!--![1554385956215](MySQL课件补充/1554385956215.png) | Session-1                                                    | Session-2                                                    || ------------------------------------------------------------ | ------------------------------------------------------------ || 关闭事务的自动提交![1554386287454](MySQL课件补充/1554386287454.png) | 关闭事务的自动提交![1554386312524](MySQL课件补充/1554386312524.png) || 执行更新语句 ：![1554386654793](MySQL课件补充/1554386654793.png) | 执行更新语句， 但处于阻塞状态：![1554386685610](MySQL课件补充/1554386685610.png) || 提交事务：![1554386721653](MySQL课件补充/1554386721653.png)  | 解除阻塞，执行更新成功 ：![1554386750004](MySQL课件补充/1554386750004.png) ||                                                              | 执行提交操作 ：![1554386804807](MySQL课件补充/1554386804807.png) |--><p>由于 执行更新时 ， name字段本来为varchar类型， 我们是作为数字类型使用，存在类型转换，索引失效，最终行锁变为表锁 ；</p><h3 id="3-6-6-InnoDB-行锁争用情况"><a href="#3-6-6-InnoDB-行锁争用情况" class="headerlink" title="3.6.6 InnoDB 行锁争用情况"></a>3.6.6 InnoDB 行锁争用情况</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_row_lock%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/1556455943670.png"></p><!--![1556455943670](MySQL课件补充/1556455943670.png)--><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Innodb_row_lock_current_waits</span>: <span class="hljs-string">当前正在等待锁定的数量</span><br><span class="hljs-attr">Innodb_row_lock_time</span>: <span class="hljs-string">从系统启动到现在锁定总时间长度</span><br><span class="hljs-attr">Innodb_row_lock_time_avg</span>:<span class="hljs-string">每次等待所花平均时长</span><br><span class="hljs-attr">Innodb_row_lock_time_max</span>:<span class="hljs-string">从系统启动到现在等待最长的一次所花的时间</span><br><span class="hljs-attr">Innodb_row_lock_waits</span>: <span class="hljs-string">系统启动后到现在总共等待的次数</span><br><br><span class="hljs-attr">当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span><br></code></pre></td></tr></table></figure><h1 id="4-MySQL中的MVCC"><a href="#4-MySQL中的MVCC" class="headerlink" title="4 MySQL中的MVCC"></a>4 MySQL中的MVCC</h1><h2 id="4-1-MVCC概述"><a href="#4-1-MVCC概述" class="headerlink" title="4.1 MVCC概述"></a>4.1 MVCC概述</h2><p>一想到并发控制，很多人第一反应就是加锁，的确，加锁确实是解决并发问题最常见的方案。但是，其实除了加锁以外，在数据库领域，还有一种无锁的方案可以来实现并发控制，那就是大名鼎鼎的MVCC。</p><p>MVCC （Multiversion Concurrency Control），多版本并发控制。顾名思义，MVCC 是通过<strong>数据行的多个版本管理来实现数据库的并发控制</strong> 。</p><p>这项技术使得在InnoDB的事务隔离级别下执行 <strong>一致性读</strong> 操作有了保 证。换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样 在做查询的时候就不用等待另一个事务释放锁。</p><p>在数据库中，对数据的操作主要有2中，分别是读和写，而在并发场景下，就可能出现以下三种情况：</p><blockquote><p>读-读并发</p><p>写-写并发</p><p>读-写并发</p></blockquote><p>我们都知道，在没有写的情况下发读-读并是不会出现问题的，而写-写并发这种情况比较常用的就是通过加锁的方式实现。那么，<strong>【读-写并发】则可以通过MVCC的机制解决。</strong></p><h2 id="4-2-快照读和当前读"><a href="#4-2-快照读和当前读" class="headerlink" title="4.2 快照读和当前读"></a>4.2 快照读和当前读</h2><p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理 读-写冲突 ，做到 即使有<strong>读写冲突</strong>时，也能做到 <strong>不加锁 ，非阻塞并发读</strong> ，而这个读指的就是 快照读 , 而非 当前读 。当前 读实际上是一种加锁的操作，是悲观锁的实现。而MVCC本质是采用乐观锁思想的一种方式。</p><h3 id="4-2-1-快照读"><a href="#4-2-1-快照读" class="headerlink" title="4.2.1 快照读"></a>4.2.1 快照读</h3><p>快照读又叫<strong>一致性读</strong>，读取的是快照数据。<strong>不加锁的简单的 SELECT 都属于快照读</strong>，即不加锁的非阻塞 读；比如这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> xx_table <span class="hljs-keyword">WHERE</span> ...<br></code></pre></td></tr></table></figure><p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于MVCC，它在很多情况下， 避免了加锁操作，降低了开销。 既然是基于多版本，那么<strong>快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</strong>。 快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。</p><h3 id="4-2-2-当前读"><a href="#4-2-2-当前读" class="headerlink" title="4.2.2 当前读"></a>4.2.2 当前读</h3><p>和快照读相对应的另外一个概念叫做当前读，<strong>当前读读取的是记录的最新版本</strong>（最新数据，而不是历史版本的数据），读取时还要保证其他并发事务 不能修改当前记录，会对读取的记录进行加锁。<strong>加锁的 SELECT，或者对数据进行增删改都会进行当前读</strong>。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> xx_table LOCK <span class="hljs-keyword">IN</span> SHARE MODE;  # 共享锁<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> xx_table <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;# 排它锁<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> xx_table ...# 排它锁<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> xx_table ...# 排它锁<br><span class="hljs-keyword">UPDATE</span> xx_table ...# 排它锁<br></code></pre></td></tr></table></figure><h2 id="4-3-隐藏字段以及Undo-Log版本链"><a href="#4-3-隐藏字段以及Undo-Log版本链" class="headerlink" title="4.3 隐藏字段以及Undo Log版本链"></a>4.3 隐藏字段以及Undo Log版本链</h2><p>对于使用 InnoDB 存储引擎的表来说，它的聚簇索引记录中都包含两个必 要的隐藏列。 </p><p>1、trx_id ：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的 <strong>事务id</strong> 赋值给 trx_id 隐藏列。 </p><p>2、roll_pointer ：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到 undo日志 中，然 后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623113348581.png"></p><!--![image-20230623113348581](MySQL课件补充/image-20230623113348581.png)--> <p><strong>insert undo只在事务回滚时起作用</strong>，当事务提交后，该类型的undo日志就没用了，它占用的Undo Log Segment也会被系统回收（也就是该undo日志占用的Undo页面链表要么被重用，要么被释放）。</p><p>假设 id &#x3D; 100 的事务 A <strong>插入一条行</strong>记录（id &#x3D; 1, username &#x3D; “Jack”, age &#x3D; 18），那么，这行记录的两个隐藏字段 trx_id &#x3D; 100 和 roll_pointer指向一个空的 undo log，因为在这之前并没有事务操作 id &#x3D; 1 的这行记录。如图所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623120729145.png"></p><!--![image-20230623120729145](MySQL课件补充/image-20230623120729145.png)--> <p>然后，id &#x3D; 200 的事务 B 修改了这条行记录，把 age 从 18 修改成了 20，于是，这条行记录的 trx_id就变成了 200，roll_pointer就指向事务 A 生成的 undo log ：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623120845318.png"></p><!--![image-20230623120845318](MySQL课件补充/image-20230623120845318.png)--> <p>接着，id &#x3D; 300 的事务 C 再次修改了这条行记录，把 age 从 20 修改成了 30，如下图：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623120926172.png"></p><!--![image-20230623120926172](MySQL课件补充/image-20230623120926172.png)--> <p>可以看到，每次修改行记录都会更新 trx_id 和 roll_pointer 这两个隐藏字段，之前的多个数据快照对应的 undo log 会通过 roll_pointer 指针串联起来，从而形成一个<strong>版本链</strong>。MVCC 这个机制，其实就是靠 update undo log 实现的。</p><p>那么，一条记录在同一时刻可能有多个事务在执行，那么，undo log会有一条记录的多个快照，那么在这一时刻发生SELECT要进行快照读的时候，要读哪个快照呢？</p><h2 id="4-4-MVCC之ReadView"><a href="#4-4-MVCC之ReadView" class="headerlink" title="4.4 MVCC之ReadView"></a>4.4 MVCC之ReadView</h2><h3 id="4-4-1-ReadView简介"><a href="#4-4-1-ReadView简介" class="headerlink" title="4.4.1 ReadView简介"></a>4.4.1 ReadView简介</h3><p><strong>Read View 主要来帮我们解决可见性的问题的</strong>，即他会来告诉我们本次事务应该看到哪个快照，不应该看到哪个快照。</p><p>MVCC主要针对的是READ COMMITTED、REPEATABLE READ</p><p>1、READ UNCOMMITTED 隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。</p><p>2、SERIALIZABLE 隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</p><p>3、READ COMMITTED 和 REPEATABLE READ 隔离级别的事务，都必须保证读到 <strong>已经提交了的</strong> 事务修改过的记录。</p><p>这个ReadView中主要包含4个比较重要的内容，分别如下：</p><p>1、creator_trx_id ，创建这个 Read View 的事务 ID。</p><p>2、m_ids，生成 ReadView 时有哪些事务在执行但是还没提交的（称为 ”<strong>活跃事务</strong>“），这些活跃事务的 id 就存在这个字段里。</p><p>3、min_trx_id：m_ids 里最小的值</p><p>4、max_trx_id：生成 ReadView 时 InnoDB 将分配给下一个事务的 ID 的值（事务 ID 是递增分配的，越后面申请的事务 ID 越大）max_trx_id是系统最大的事务id值，这里要注意是系统中的事务id，需要区别于正在活跃的事务ID。</p><p>注意：max_trx_id并不是trx_ids中的最大值，事务id是递增分配的。比如，现在有id为1， 2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时， m_ids就包括1和2，min_trx_id的值就是1，max_trx_id的值就是4。</p><h3 id="4-4-2-ReadView工作原理"><a href="#4-4-2-ReadView工作原理" class="headerlink" title="4.4.2 ReadView工作原理"></a>4.4.2 ReadView工作原理</h3><p>通过一个例子来理解下 ReaView 机制是如何做到判断当前事务能够看见哪些版本的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 创建数据库表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>age <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">primary</span> key(id)<br>)ENGINE<span class="hljs-operator">=</span>innodb <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><p>假设表中已经被之前的事务 A（id &#x3D; 100）插入了一条行记录（id &#x3D; 1, username &#x3D; “Jack”, age &#x3D; 18），如图所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623121312957.png"></p><!--![image-20230623121312957](MySQL课件补充/image-20230623121312957.png)--> <hr><p>接下来，有两个事务 B（id &#x3D; 200） 和 C（id &#x3D; 300）过来<strong>并发执行</strong>，事务 C 想要更新（update）这行 id &#x3D; 1 的记录，而事务 B（select）想要查询这行数据，这两个事务都执行了相应的操作，但是<strong>还没有进行提交</strong>：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623121412041.png"></p><!--![image-20230623121412041](MySQL课件补充/image-20230623121412041.png)--> <p>如果现在事务 B 开启了一个 ReadView，在这个 ReadView 里面：</p><p>1、m_ids 就包含了当前的活跃事务的 id，即事务 B 和事务 C 这两个 id，200 和 300</p><p>2、min_trx_id就是 200</p><p>3、max_trx_id是下一个能够分配的事务的 id，那就是 301</p><p>4、creator_trx_id是当前创建 ReadView 事务 B 的 id 200</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623121606073.png"></p><!--![image-20230623121606073](MySQL课件补充/image-20230623121606073.png)--> <p>现在事务 B 进行第一次查询，会把使用行记录的隐藏字段 <strong>trx_id 和 ReadView 的 min_trx_id 进行下判断</strong>，此时，发现 trx_id 是100，小于 ReadView 里的 min_trx_id（200），这说明在事务 B 开始之前，修改这行记录的事务 A 已经提交了，所以开始于事务 A 提交之后的事务 B是可以查到事务 A 对这行记录的更新的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">row.trx_id <span class="hljs-operator">&amp;</span>lt; ReadView.min_trx_id<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623121849654.png"></p><!--![image-20230623121849654](MySQL课件补充/image-20230623121849654.png)--> <p>接着事务 C 过来修改这行记录，把 age &#x3D; 18 改成了 age &#x3D; 20，所以这行记录的 trx_id就变成了 300，同时 roll_pointer指向了事务 C 修改之前生成的 undo log：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623121949894.png"></p><!--![image-20230623121949894](MySQL课件补充/image-20230623121949894.png)--> <p>那这个时候事务 B 再次进行查询操作，会发现这行记录的 trx_id（300）大于 ReadView 的 min_trx_id（200），并且小于 max_trx_id（301）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">row.trx_id <span class="hljs-operator">&amp;</span>gt; ReadView.min_trx_id <span class="hljs-operator">&amp;</span>amp;<span class="hljs-operator">&amp;</span>amp; row.trx_id <span class="hljs-operator">&amp;</span>lt; max_trx_id<br></code></pre></td></tr></table></figure><p>这说明一个问题，就是更新这行记录的事务很有可能也存在于 ReadView 的 m_ids（活跃事务）中。所以事务 B 会去判断下 ReadView 的 m_ids 里面是否存在 trx_id &#x3D; 300的事务，显然是存在的，这就表示这个 id &#x3D; 300 的事务是跟自己（事务 B）在同一时间段并发执行的事务，也就说明这行 age &#x3D; 20 的记录事务 B 是不能查询到的。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623122306320.png"></p><!--![image-20230623122306320](MySQL课件补充/image-20230623122306320.png)--> <p>既然无法查询，那该咋整？事务 B 这次的查询操作能够查到啥呢？ 没错，undo log 版本链！</p><p>这时事务 B 就会顺着这行记录的 roll_pointer 指针往下找，就会找到最近的一条trx_id &#x3D; 100 的 undo log，而自己的 id 是 200，即说明这个 trx_id &#x3D; 100 的 undo log 版本必然是在事务 B 开启之前就已经提交的了。所以事务 B 的这次查询操作读到的就是这个版本的数据即 age &#x3D; 18。</p><p>通过上述的例子，我们得出的结论是，<strong>通过 undo log 版本链和 ReadView 机制，可以保证一个事务不会读到并发执行的另一个事务的更新</strong>。</p><hr><p>那自己修改的值，自己能不能读到呢？肯定可以读到。不过上面的例子我们只涉及到了 ReadView 中的前三个字段，而 <strong>creator_trx_id</strong> 就与自己读自己的修改有关，所以这里还是图解出来让大家更进一步理解下 ReadView 机制：</p><p>假设事务 C 的修改已经提交了，然后事务 B 更新了这行记录，把 age &#x3D; 20 改成了 age &#x3D; 66，如下图所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623124002089.png"></p><!--![image-20230623124002089](MySQL课件补充/image-20230623124002089.png)--> <p>然后，事务 B 再来查询这条记录，发现 trx_id &#x3D; 200与 ReadView 里的 creator_trx_id &#x3D; 200 一样，这就说明这是我自己刚刚修改的啊，当然可以被查询到。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">row.trx_id <span class="hljs-operator">=</span> ReadView.creator_trx_id<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623124329590.png"></p><!--![image-20230623124329590](MySQL课件补充/image-20230623124329590.png)--> <hr><p>那如果在事务 B 的执行期间，突然开了一个 id &#x3D; 500 的事务 D，并更新这行记录 age &#x3D; 88 会更新成功吗？事务可否正常提交？然后事务 B 再去读这行记录，读到的是88吗？</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623124410244.png"></p><!--![image-20230623124410244](MySQL课件补充/image-20230623124410244.png)--> <p>答案：66。因为事务B修改了数据66，增加了排他锁，事务还未结束，锁还没有释放。事务D无法修改数据为88，处于等待锁状态。</p><p>如果这个时候事务 B 再去查询这行记录，就会发现 trx_id &#x3D; 500大于 ReadView 中的 max_trx_id &#x3D; 301，这说明事务 B 执行期间，有另外一个事务正要更新数据，所以不能查询到另外一个事务的更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">row.trx_id <span class="hljs-operator">&amp;</span>gt; ReadView.max_trx_id<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623124531685.png"></p><!--![image-20230623124531685](MySQL课件补充/image-20230623124531685.png)--> <p>那通过上述的例子，我们得出的结论是，<strong>通过 undo log 版本链和 ReadView 机制，可以保证一个事务只可以读到该事务自己修改的数据或该事务开始之前的数据</strong>。</p><h3 id="4-4-3-ReadView总结"><a href="#4-4-3-ReadView总结" class="headerlink" title="4.4.3 ReadView总结"></a>4.4.3 ReadView总结</h3><h4 id="ReadView的规则"><a href="#ReadView的规则" class="headerlink" title="ReadView的规则"></a>ReadView的规则</h4><p>1、如果被访问版本的trx_id属性值与ReadView中的 creator_trx_id 值相同，意味着当前事务在访问 它自己修改过的记录，所以，该版本可以被当前事务访问。 </p><p>row.trx_id &#x3D; ReadView.creator_trx_id</p><p>2、如果被访问版本的trx_id属性值小于ReadView中的 min_trx_id 值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。</p><p>row.trx_id &lt; ReadView.min_trx_id</p><p>3、如果row.trx_id &gt; ReadView.min_trx_id &amp;&amp; row.trx_id &lt; max_trx_id说明，在执行当前事务的时候很有可能存在一个并发事务，然后，需要判断当前行记录的事务的id，是否在ReadView的m_ids（活跃事务）中，如果存在就说明的确存在一个并发事务，在进行数据读取的时候不允许读取当前行记录，可以通过行记录的回滚指针读取undo log获取数据。</p><p>row.trx_id &gt; ReadView.min_trx_id &amp;&amp; row.trx_id &lt; max_trx_id</p><p>4、如果row.trx_id &gt; max_trx_id，说明在执行当前事务的时候，有另外一个事务执行了并且提交了，那么，当前事务在读取数据的时候不允许读取当前行数据，可以通过行记录的回滚指针读取undo log获取数据。</p><p>row.trx_id &gt; max_trx_id</p><h4 id="MVCC整体操作流程"><a href="#MVCC整体操作流程" class="headerlink" title="MVCC整体操作流程"></a>MVCC整体操作流程</h4><p>了解了这些概念之后，我们来看下当查询一条记录的时候，系统如何通过MVCC找到它： </p><p>1、首先，获取事务自己的版本号，也就是事务 ID； </p><p>2、获取 ReadView； </p><p>3、查询得到的数据，然后与 ReadView 中的事务版本号进行比较； </p><p>4、如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；</p><p>最后返回符合规则的数据。 在隔离级别为读已提交（Read Committed）时，一个事务中的每一次 SELECT 查询都会重新获取一次 Read View。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623125112202.png"></p><!--![image-20230623125112202](MySQL课件补充/image-20230623125112202.png)--> <p>注意：此时同样的查询语句都会重新获取一次 Read View，这时如果 Read View 不同，就可能产生不可重复读或者幻读的情况。</p><p>当隔离级别为可重复读的时候，就避免了不可重复读，这是因为一个事务只在第一次 SELECT 的时候会 获取一次 Read View，而后面所有的 SELECT 都会复用这个 Read View，如下表所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL%E8%AF%BE%E4%BB%B6%E8%A1%A5%E5%85%85/image-20230623125152008.png"></p><!--![image-20230623125152008](MySQL课件补充/image-20230623125152008.png)--> ]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL高级一</title>
    <link href="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <url>/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<!--![](timg.jpg)--><hr><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/timg.jpg"></p><h1 id="第01章-Linux下MySQL的安装与使用"><a href="#第01章-Linux下MySQL的安装与使用" class="headerlink" title="第01章 Linux下MySQL的安装与使用"></a>第01章 Linux下MySQL的安装与使用</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><h3 id="1-1、docker安装"><a href="#1-1、docker安装" class="headerlink" title="1.1、docker安装"></a>1.1、docker安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3309:3306 \<br>-v /atguigu/mysql/mysql8/conf:/etc/mysql/conf.d \<br>-v /atguigu/mysql/mysql8/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name atguigu-mysql8 \<br>--restart=always \<br>mysql:8.0.30<br></code></pre></td></tr></table></figure><h3 id="1-2、查看是否启动"><a href="#1-2、查看是否启动" class="headerlink" title="1.2、查看是否启动"></a>1.2、查看是否启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure><h3 id="1-3、测试远程链接"><a href="#1-3、测试远程链接" class="headerlink" title="1.3、测试远程链接"></a>1.3、测试远程链接</h3><p><strong>测试连接：</strong>MySQL 8 版本，图形连接时还会出现如下问题</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220625232225259.png"></p><!--![](MySQL8高级-架构和优化/image-20220625232225259.png)--><p>配置新连接报错：错误号码 2058，出现这个原因是MySQL 8 之前的版本中加密规则是mysql_native_password，而在MySQL 8之后，加密规则是caching_sha2_password。</p><p>解决方案有两种，一种是升级SQLyog和Navicat（因此，新版SQLyog和Navicat不会出现此问题），另一种是把MySQL用户登录密码加密规则还原成mysql_native_password。</p><p><strong>解决方法：</strong>登录你的 MySQL 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：<span class="hljs-built_in">env</span> LANG=C.UTF-8 避免容器中显示中文乱码</span><br>docker exec -it atguigu-mysql8 env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码校验方式</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><p>然后再重新配置SQLyog的连接，重新填写密码，则可连接成功了。 </p><h2 id="2、字符集"><a href="#2、字符集" class="headerlink" title="2、字符集"></a>2、字符集</h2><blockquote><p>Docker情况下安装的MySQL如何修改配置文件</p><ul><li>在<code>/atguigu/mysql/mysql8/conf</code> 下随便建一个 <code>xxx.cnf</code> 的文件，默认就是配置文件</li><li>字符编码等所有修改都直接改这个文件即可</li></ul></blockquote><h3 id="2-1、默认字符集"><a href="#2-1、默认字符集" class="headerlink" title="2.1、默认字符集"></a>2.1、默认字符集</h3><p><code>MySQL 8版本之前</code>，默认字符集为 latin1（ISO-8859-1） ，不支持中文，使用前必须设置字符集为utf8（utf8mb3）或utf8mb4。从MySQL 8开始，数据库的默认字符集为 utf8mb4 ，从而避免中文乱码的问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%char%&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="2-2、utf8与utf8mb4"><a href="#2-2、utf8与utf8mb4" class="headerlink" title="2.2、utf8与utf8mb4"></a>2.2、utf8与utf8mb4</h3><p>utf8 字符集表示一个字符需要使用1～4个字节，但是我们常用的一些字符使用1～3个字节就可以表示了。而字符集表示一个字符所用的最大字节长度，在某些方面会影响系统的存储和性能，所以设计MySQL的设计者偷偷的定义了两个概念：</p><p><strong>utf8mb3 ：</strong>阉割过的 utf8 字符集，只使用1～3个字节表示字符。（无法存储emoji表情）</p><p>MySQL5.7中的utf8是utf8mb3字符集</p><p><strong>utf8mb4 ：</strong>正宗的 utf8 字符集，使用1～4个字节表示字符。</p><p>MySQL8.0中的utf8是utf8mb4字符集</p><h2 id="3、-SQL大小写规范"><a href="#3、-SQL大小写规范" class="headerlink" title="3、 SQL大小写规范"></a>3、 SQL大小写规范</h2><h3 id="3-1、Windows和Linux的区别"><a href="#3-1、Windows和Linux的区别" class="headerlink" title="3.1、Windows和Linux的区别"></a>3.1、Windows和Linux的区别</h3><p><strong>Windows环境：</strong></p><p>全部不区分大小写</p><p><strong>Linux环境：</strong></p><p>1、数据库名、表名、表的别名、变量名<code>严格区分大小写</code>；</p><p>2、列名与列的别名<code>不区分大小写</code>。</p><p>3、关键字、函数名称<code>不区分大小写</code>；</p><h3 id="3-2、Linux下大小写规则设置（了解）"><a href="#3-2、Linux下大小写规则设置（了解）" class="headerlink" title="3.2、Linux下大小写规则设置（了解）"></a>3.2、Linux下大小写规则设置（了解）</h3><p>在MySQL 8中设置的具体步骤为：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">1、停止MySQL服务 <br>2、删除数据目录，即删除 <span class="hljs-string">/var/lib/mysql</span> 目录 <br>3、在MySQL配置文件（<span class="hljs-string">/etc/my.cnf</span> ）的 [mysqld] 中添加 lower_case_table_names=1 <br>4、初始化数据目录 mysqld <span class="hljs-params">--initialize</span> <span class="hljs-params">--user=mysql</span><br>5、启动MySQL服务 systemctl start mysqld<br></code></pre></td></tr></table></figure><blockquote><p>注意：不建议在开发过程中修改此参数，将会丢失所有数据</p></blockquote><h1 id="第02章-逻辑架构"><a href="#第02章-逻辑架构" class="headerlink" title="第02章 逻辑架构"></a>第02章 逻辑架构</h1><h2 id="1、逻辑架构剖析"><a href="#1、逻辑架构剖析" class="headerlink" title="1、逻辑架构剖析"></a>1、逻辑架构剖析</h2><h3 id="1-1、服务器处理客户端请求"><a href="#1-1、服务器处理客户端请求" class="headerlink" title="1.1、服务器处理客户端请求"></a>1.1、服务器处理客户端请求</h3><p>下面是MySQL5.7使用的<code>经典架构图</code>，MySQL 8中去掉了Caches&amp;Buffers部分：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/b7a8eb46-1168-434c-b63b-ec775affab7b.jpg"></p><!--![](MySQL8高级-架构和优化/b7a8eb46-1168-434c-b63b-ec775affab7b.jpg)--><h3 id="1-2、Connectors（客户端）"><a href="#1-2、Connectors（客户端）" class="headerlink" title="1.2、Connectors（客户端）"></a>1.2、Connectors（客户端）</h3><p>MySQL服务器之外的客户端程序，与具体的语言相关，例如Java中的JDBC，图形用户界面SQLyog等。<code>本质上都是在TCP连接上通过MySQL协议和MySQL服务器进行通信。</code></p><h3 id="1-3、MySQL-Server（服务器）"><a href="#1-3、MySQL-Server（服务器）" class="headerlink" title="1.3、MySQL Server（服务器）"></a>1.3、MySQL Server（服务器）</h3><h4 id="第1层：连接层"><a href="#第1层：连接层" class="headerlink" title="第1层：连接层"></a><strong>第1层：连接层</strong></h4><ul><li>客户端访问 MySQL 服务器前，做的<code>第一件事就是建立 TCP 连接</code>。</li><li>经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做<code>身份认证、权限获取</code>。<ul><li>用户名或密码不对<code>，会收到一个</code>Access denied for user<code>错误，客户端程序结束执行</code></li><li><code>用户名密码认证通过</code>，会从权限表<code>查出账号拥有的权限</code>与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li></ul></li><li>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</li></ul><h4 id="第2层：服务层"><a href="#第2层：服务层" class="headerlink" title="第2层：服务层"></a><strong>第2层：服务层</strong></h4><p><strong>Management Serveices &amp; Utilities： 系统管理和控制工具</strong></p><p><strong>SQL Interface：SQL接口：</strong></p><ul><li><code>接收用户的SQL命令，并且返回用户需要查询的结果。</code>比如SELECT … FROM就是调用SQL Interface </li><li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</li></ul><p><strong>Parser：解析器：</strong></p><p>在SQL命令传递到解析器的时候会被解析器验证和解析。解析器中SQL 语句进行<code>词法分析、语法分析、语义分析</code>，并为其创建<code>语法树</code>。</p><ul><li><p>词法分析：将整个语句拆分成一个个字段</p></li><li><p>语法分析：将词法分析拆分出的字段，按照MySQl语法规则，生成解析树</p></li><li><p>语义分析：<code>检查解析树是否合法</code>，比如查看表是否存在，列是否存在</p></li></ul><p>典型的解析树如下：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220702002430362.png"></p><!--![](MySQL8高级-架构和优化/image-20220702002430362.png)--><p><strong>Optimizer：查询优化器：</strong></p><ul><li>SQL语句在语法解析后、查询前会使用查询优化器对查询进行优化，<code>确定SQL语句的执行路径，生成一个执行计划</code>。</li></ul><p><strong>Caches &amp; Buffers： 查询缓存组件：</strong></p><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、查询优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</li><li>这个查询缓存可以在不同客户端之间共享 。 </li><li><strong>问：大多数情况查询缓存就是个鸡肋，为什么呢？</strong><ul><li>只有相同的SQL语句才会命中查询缓存。两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中。</li><li>在两条查询之间 有 INSERT 、 UPDATE 、 DELETE 、 TRUNCATE TABLE 、 ALTER TABLE 、 DROP TABLE 或 DROP DATABASE 语句也会导致缓存失效</li><li>因此 MySQL的查询缓存命中率不高。<code>所以在MySQL 8之后就抛弃了这个功能。</code></li></ul></li></ul><h4 id="第3层：引擎层"><a href="#第3层：引擎层" class="headerlink" title="第3层：引擎层"></a><strong>第3层：引擎层</strong></h4><p>存储引擎层（ Storage Engines），<code>负责MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作，服务器通过API与存储引擎进行通信</code>。不同的存储引擎具有的功能不同，管理的表有不同的存储结构，采用的存取算法也不同，这样我们可以根据自己的实际需要进行选取。例如MyISAM引擎和InnoDB引擎。</p><h3 id="1-4、存储层"><a href="#1-4、存储层" class="headerlink" title="1.4、存储层"></a>1.4、存储层</h3><p>所有的数据、数据库、表的定义、表的每一行的内容、索引，都是存在<code>文件系统</code> 上，以文件的方式存在，并完成与存储引擎的交互。</p><h3 id="1-5、查询流程说明"><a href="#1-5、查询流程说明" class="headerlink" title="1.5、查询流程说明"></a>1.5、查询流程说明</h3><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220914161040788.png"></p><!--![](MySQL8高级-架构和优化/image-20220914161040788.png)--><p><strong>首先，</strong><code>MySQL客户端通过协议与MySQL服务器建连接，通过SQL接口发送SQL语句，先检查查询缓存，如果命中，直接返回结果，否则进行语句解析。</code>也就是说，在解析查询之前，服务器会先访问查询缓存，如果某个查询结果已经位于缓存中，服务器就不会再对查询进行解析、优化、以及执行。它仅仅将缓存中的结果返回给用户即可，这将大大提高系统的性能。</p><p><strong>接下来是解析过程，</strong><code>MySQL解析器通过关键字将SQL语句进行解析，并生成一棵对应的解析树，</code>解析器使用MySQL语法规则验证和解析SQL语句。例如，它将验证是否使用了错误的关键字，或者使用关键字的顺序是否正确，引号能否前后匹配等；<code>预处理器则根据MySQL规则进一步检查解析树是否合法，</code>例如，这里将检查数据表和数据列是否存在，还会解析名字和别名，看是否有歧义等<code>，并生成一棵新解析树</code>，新解析树可能和旧解析树结构一致。</p><p><strong>然后是优化过程，</strong><code>MySQL优化程序会对我们的语句做一些优化，将查询的IO成本和CPU成本降到最低。优化的结果就是生成一个执行计划。</code>这个执行计划表明了应该使用哪些索引执行查询，以及表之间的连接顺序是啥样，必要时将子查询转换为连接、表达式简化等等。我们可以使用EXPLAIN语句来查看某个语句的执行计划。</p><p><strong>最后，</strong><code>进入执行阶段。</code>完成查询优化后，<code>查询执行引擎</code>会按照生成的执行计划调用存储引擎提供的接口执行SQL查询并将结果返回给客户端。在MySQL8以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存，再返回给客户端。</p><h2 id="2、SQL执行流程"><a href="#2、SQL执行流程" class="headerlink" title="2、SQL执行流程"></a>2、SQL执行流程</h2><p>利用<code>SHOW VARIABLES</code> 可以查看SQL的执行流程。使用前需要先开启该功能：</p><h3 id="2-1、MySQL8"><a href="#2-1、MySQL8" class="headerlink" title="2.1、MySQL8"></a>2.1、MySQL8</h3><blockquote><p>直接观察navicat的剖析即可</p></blockquote><p><code>1.开启profiling</code></p><p>确认profiling是否开启</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%profiling%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220702072007905.png"></p><!--![](MySQL8高级-架构和优化/image-20220702072007905.png)--><p>profiling&#x3D;0 代表关闭，我们需要把 profiling 打开，即设置为 1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> profiling <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">-- profiling = ON</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220702073213225.png"></p><!--![](MySQL8高级-架构和优化/image-20220702073213225.png)--><p><code>2.显示查询</code></p><p>执行任意SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> atguigudb.employee; <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> atguigudb.employee <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <br></code></pre></td></tr></table></figure><p>显示最近的几次查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> PROFILES;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220702074559798.png"></p><!--![](MySQL8高级-架构和优化/image-20220702074559798.png)--><p><code>3.查看执行流程</code></p><p><strong>查看最后一个SQL的执行流程：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> PROFILE;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220702080919952.png"></p><!--![](MySQL8高级-架构和优化/image-20220702080919952.png)--><p><strong>查看指定SQL的执行流程：查询指定的 Query ID</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> PROFILE <span class="hljs-keyword">FOR</span> QUERY <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p><strong>查询更丰富的内容：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> PROFILE cpu,block io <span class="hljs-keyword">FOR</span> QUERY <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220702080407463.png"></p><!--![](MySQL8高级-架构和优化/image-20220702080407463.png)--><ul><li>SHOW PROFILE 的常用查询参数:<ul><li><ul><li><p>①ALL：显示所有的开销信息。</p></li><li><p><code>②BLOCK IO：显示块IO开销。</code></p></li><li><p>③CONTEXT SWITCHES：上下文切换开销。</p></li><li><p><code>④CPU：显示CPU开销信息。</code></p></li><li><p>⑤IPC：显示发送和接收开销信息。</p></li><li><p>⑥MEMORY：显示内存开销信息。</p></li><li><p>⑦PAGE FAULTS：显示页面错误开销信息。</p></li><li><p>⑧SOURCE：显示和Source_function，Source_file，Source_line相关的开销信息。</p></li><li><p>⑨SWAPS：显示交换次数开销信息。</p></li></ul></li></ul></li></ul><h3 id="2-2、MySQL5-7（了解）"><a href="#2-2、MySQL5-7（了解）" class="headerlink" title="2.2、MySQL5.7（了解）"></a>2.2、MySQL5.7（了解）</h3><p><code>1. 查看查询缓存是否启用</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%query_cache_type%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>2. 开启查询缓存</code></p><p>修改配置文件：vim &#x2F;etc&#x2F;my.cnf<br>新增一行：query_cache_type&#x3D;1<br>重启MySQL：systemctl restart mysqld</p><p><code>3. 执行SQL并查看执行流程</code></p><p>参考MySQl8中执行流程的启用和查看方式，在MySQL5.7中查看执行流程</p><ul><li>第一次执行查询SQL：</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220703162615147.png"></p><!--![](MySQL8高级-架构和优化/image-20220703162615147.png)--><ul><li>第二次执行相同的SQL：</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220703162803963.png"></p><!--![](MySQL8高级-架构和优化/image-20220703162803963.png)--><h2 id="3、存储引擎"><a href="#3、存储引擎" class="headerlink" title="3、存储引擎"></a>3、存储引擎</h2><h3 id="3-1、查看存储引擎"><a href="#3-1、查看存储引擎" class="headerlink" title="3.1、查看存储引擎"></a>3.1、查看存储引擎</h3><p>查看MySQL提供什么存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> ENGINES;<br></code></pre></td></tr></table></figure><p>下面的结果表示MySQL中默认使用的存储引擎是InnoDB，支持事务，行锁，外键，支持分布式事务(XA)，支持保存点(回滚)</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220703164220030.png"></p><!--![](MySQL8高级-架构和优化/image-20220703164220030.png)--><p>也可以通过以下语句查看默认的存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%default_storage_engine%&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220703170334348.png"></p><!--![](MySQL8高级-架构和优化/image-20220703170334348.png)--><h3 id="3-2、设置存储引擎（了解）"><a href="#3-2、设置存储引擎（了解）" class="headerlink" title="3.2、设置存储引擎（了解）"></a>3.2、设置存储引擎（了解）</h3><p><code>方法1：</code></p><p>设置默认存储引擎：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> DEFAULT_STORAGE_ENGINE<span class="hljs-operator">=</span>MyISAM;<br></code></pre></td></tr></table></figure><p><code>方法2：</code></p><p>或者修改 my.cnf 文件：vim &#x2F;etc&#x2F;my.cnf<br>在[mysqld]节点下新增一行：default-storage-engine&#x3D;MyISAM<br>重启MySQL：systemctl restart mysqld</p><p><code>方法3：</code></p><p>我们可以为 不同的表设置不同的存储引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名( 建表语句 ) ENGINE <span class="hljs-operator">=</span> 存储引擎名称;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 ENGINE <span class="hljs-operator">=</span> 存储引擎名称;<br><br><span class="hljs-comment">-- 例如：</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(id <span class="hljs-type">INT</span>, `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>),age <span class="hljs-type">INT</span>,dept <span class="hljs-type">INT</span>) ENGINE <span class="hljs-operator">=</span> MyISAM;<br></code></pre></td></tr></table></figure><h3 id="3-3、各种引擎介绍"><a href="#3-3、各种引擎介绍" class="headerlink" title="3.3、各种引擎介绍"></a>3.3、各种引擎介绍</h3><p><code>1. InnoDB存储引擎</code></p><ul><li><p>InnoDB是MySQL的默认事务型引擎，它被设计用来<code>处理大量的短期(short-lived)事务</code>。可以确保事务的完整提交(Commit)和回滚(Rollback)。</p></li><li><p>除非有非常特别的原因需要使用其他的存储引擎，否则<code>应该优先考虑InnoDB引擎</code>。</p></li><li><p>InnoDB不仅缓存索引还要缓存真实数据， 对内存要求较 高 ，而且内存大小对性能有决定性的影响。</p></li></ul><p><code>2. MyISAM存储引擎</code></p><ul><li><p>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但<code>MyISAM不支持事务和行级锁</code>，有一个毫无疑问的缺陷就是崩溃后无法安全恢复。</p></li><li><p>优势是访问的 速度快 ，对事务完整性没有要求或者以SELECT、INSERT为主的应用。</p></li><li><p>MyISAM只缓存索引，不缓存真实数据。</p></li></ul><p><code>3. Archive引擎</code></p><ul><li><code>Archive档案存储引擎只支持INSERT和SELECT操作</code>。</li><li>Archive表适合日志和数据采集（档案）类应用。</li><li>根据英文的测试结论来看，Archive表比MyISAM表要小大约75%，比支持事务处理的InnoDB表小大约83%。</li></ul><p><code>4. Blackhole引擎（黑洞）</code></p><ul><li><code>Blackhole引擎没有实现任何存储机制，它会丢弃所有插入的数据，不做任何保存</code>。</li><li>但服务器会记录Blackhole表的日志，所以可以用于复制数据到备库，或者简单地记录到日志。但这种应用方式会碰到很多问题，因此并不推荐。</li></ul><p><code>5. CSV引擎</code> </p><ul><li><code>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但不支持索引</code>。</li><li>CSV引擎可以作为一种数据交换的机制，非常有用。</li><li>CSV存储的数据直接可以在操作系统里，用文本编辑器，或者excel读取。</li></ul><p><code>6. Memory引擎</code></p><ul><li>如果需要快速地访问数据，并且这些数据不会被修改，重启以后丢失也没有关系，那么使用Memory表是非常有用。</li><li>Memory表至少比MyISAM表要快一个数量级。</li></ul><p><code>7. Federated引擎</code></p><ul><li><code>Federated引擎是访问其他MySQL服务器的一个代理（跨库关联查询）</code>，尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题，因此默认是禁用的。</li></ul><h3 id="3-4、MyISAM和InnoDB的区别"><a href="#3-4、MyISAM和InnoDB的区别" class="headerlink" title="3.4、MyISAM和InnoDB的区别"></a>3.4、MyISAM和InnoDB的区别</h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>MyISAM</strong></th><th><strong>InnoDB</strong></th></tr></thead><tbody><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td>行锁，操作时只锁某一行，不对其它行有影响，适合高并发的操作</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响。支持聚簇索引</td></tr><tr><td>关注点</td><td>并发查询，节省资源、消耗少、简单业务</td><td>并发写、事务、更大更复杂的资源操作</td></tr><tr><td>默认使用</td><td>N</td><td>Y</td></tr><tr><td>自带系统表使用</td><td>Y</td><td>N</td></tr></tbody></table><h1 id="第03章-SQL预热"><a href="#第03章-SQL预热" class="headerlink" title="第03章 SQL预热"></a>第03章 SQL预热</h1><blockquote><p>课下练习：50道SQL复杂查询</p></blockquote><h2 id="1、创建测试数据"><a href="#1、创建测试数据" class="headerlink" title="1、创建测试数据"></a>1、创建测试数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_dept` (<br> `id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br> `deptName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>);<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_emp` (<br> `id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br> `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `age` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `deptId` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`empno` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br> KEY `idx_dept_id` (`deptId`)<br> #<span class="hljs-keyword">CONSTRAINT</span> `fk_dept_id` <span class="hljs-keyword">FOREIGN</span> KEY (`deptId`) <span class="hljs-keyword">REFERENCES</span> `t_dept` (`id`)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dept(id,deptName,address) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;华山&#x27;</span>,<span class="hljs-string">&#x27;华山&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dept(id,deptName,address) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;丐帮&#x27;</span>,<span class="hljs-string">&#x27;洛阳&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dept(id,deptName,address) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;峨眉&#x27;</span>,<span class="hljs-string">&#x27;峨眉山&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dept(id,deptName,address) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;武当&#x27;</span>,<span class="hljs-string">&#x27;武当山&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dept(id,deptName,address) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;明教&#x27;</span>,<span class="hljs-string">&#x27;光明顶&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_dept(id,deptName,address) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;少林&#x27;</span>,<span class="hljs-string">&#x27;少林寺&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;风清扬&#x27;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100001</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;岳不群&#x27;</span>,<span class="hljs-number">50</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100002</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;令狐冲&#x27;</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1</span>,<span class="hljs-number">100003</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;洪七公&#x27;</span>,<span class="hljs-number">70</span>,<span class="hljs-number">2</span>,<span class="hljs-number">100004</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;乔峰&#x27;</span>,<span class="hljs-number">35</span>,<span class="hljs-number">2</span>,<span class="hljs-number">100005</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;灭绝师太&#x27;</span>,<span class="hljs-number">70</span>,<span class="hljs-number">3</span>,<span class="hljs-number">100006</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;周芷若&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">100007</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;张三丰&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">4</span>,<span class="hljs-number">100008</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;张无忌&#x27;</span>,<span class="hljs-number">25</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100009</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_emp(id,NAME,age,deptId,empno) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;韦小宝&#x27;</span>,<span class="hljs-number">18</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100010</span>);<br></code></pre></td></tr></table></figure><h2 id="2、常见七种JOIN查询"><a href="#2、常见七种JOIN查询" class="headerlink" title="2、常见七种JOIN查询"></a>2、常见七种JOIN查询</h2><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/af2eb76c-a503-4845-8fd4-3f7cd3441831.jpg"></p><!--![](MySQL8高级-架构和优化/af2eb76c-a503-4845-8fd4-3f7cd3441831.jpg)--><p><strong>需求1：</strong>查询<code>所有有部门的员工</code>信息以及他所在的部门信息</p><p>在A、和B中都存在的数据 &#x3D;&gt; <code>查询A、B两表交集</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp a <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p><strong>需求2：</strong>查询<code>所有用户</code>，并显示其部门信息（如果员工没有所在部门，也会被列出） &#x3D;&gt; <code>查询A的全集</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p><strong>需求3：</strong>列出<code>所有部门</code>，并显示其部门的员工信息（如果部门没有员工，也会被列出）&#x3D;&gt; <code>查询B的全集</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p><strong>需求4：</strong>查询<code>没有加入任何部门的员工</code>（先查询所有员工，再过滤掉包含部门的数据） &#x3D;&gt; <code>查询A且不包含B</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id <br><span class="hljs-keyword">WHERE</span> b.id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><p><strong>需求5：</strong>查询<code>没有任何员工的部门</code> &#x3D;&gt; <code>查询B且不包含A</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id <br><span class="hljs-keyword">WHERE</span> a.id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><p><strong>需求6：</strong>查询<code>所有员工和所有部门</code> &#x3D;&gt; <code>AB全有</code></p><p>MySQL FULL JOIN 的实现：因为MySQL不支持FULL JOIN，下面是替代方法</p><p>LEFT JOIN + UNION(合并并去重) + RIGHT JOIN</p><blockquote><p>注意：</p><ul><li>UNION和UNION ALL要求字段数量和顺序都一致</li><li>如果确定两表结果不会重复，则使用UNION ALL提升效率</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id <br><span class="hljs-keyword">UNION</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p><strong>需求7：</strong>查询<code>没有加入任何部门的员工</code>，以及查询出部门下<code>没有任何员工的部门</code> &#x3D;&gt; <code>A的独有+B的独有</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id <br><span class="hljs-keyword">WHERE</span> b.id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <br><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> t_emp a <br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.deptid <span class="hljs-operator">=</span> b.id <br><span class="hljs-keyword">WHERE</span> a.id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="3、扩展掌门人"><a href="#3、扩展掌门人" class="headerlink" title="3、扩展掌门人"></a>3、扩展掌门人</h2><h3 id="3-1、增加掌门人字段"><a href="#3-1、增加掌门人字段" class="headerlink" title="3.1、增加掌门人字段"></a>3.1、增加掌门人字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> t_dept <span class="hljs-keyword">ADD</span> CEO <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>);<br><span class="hljs-keyword">UPDATE</span> t_dept <span class="hljs-keyword">SET</span> CEO<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">UPDATE</span> t_dept <span class="hljs-keyword">SET</span> CEO<span class="hljs-operator">=</span><span class="hljs-number">4</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;<br><span class="hljs-keyword">UPDATE</span> t_dept <span class="hljs-keyword">SET</span> CEO<span class="hljs-operator">=</span><span class="hljs-number">6</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br><span class="hljs-keyword">UPDATE</span> t_dept <span class="hljs-keyword">SET</span> CEO<span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">4</span>;<br><span class="hljs-keyword">UPDATE</span> t_dept <span class="hljs-keyword">SET</span> CEO<span class="hljs-operator">=</span><span class="hljs-number">9</span> <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h3 id="3-2、练习"><a href="#3-2、练习" class="headerlink" title="3.2、练习"></a>3.2、练习</h3><p><strong>需求1：</strong>求各个门派对应的掌门人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> b.deptname, a.name <span class="hljs-keyword">FROM</span> t_dept b <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_emp a <span class="hljs-keyword">ON</span> b.ceo <span class="hljs-operator">=</span> a.id;<br></code></pre></td></tr></table></figure><p><strong>需求2：</strong>求所有掌门人的平均年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(a.age) <span class="hljs-keyword">FROM</span> t_emp a <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> t_dept b <span class="hljs-keyword">ON</span> a.id <span class="hljs-operator">=</span> b.ceo;<br></code></pre></td></tr></table></figure><p><strong>需求3：</strong>求所有人物对应的掌门名称（4种写法分析）</p><ul><li>三表左连接方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 员工表(t_emp)、部门表(t_dept)、ceo(t_emp)表 关联查询</span><br><span class="hljs-keyword">SELECT</span> emp.name, ceo.name <span class="hljs-keyword">AS</span> ceoname <br><span class="hljs-keyword">FROM</span> t_emp emp<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_emp ceo <span class="hljs-keyword">ON</span> dept.ceo <span class="hljs-operator">=</span> ceo.id;<br></code></pre></td></tr></table></figure><ul><li>子查询方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>emp.name, <br>(<span class="hljs-keyword">SELECT</span> ceo.name <span class="hljs-keyword">FROM</span> t_emp ceo <span class="hljs-keyword">WHERE</span> ceo.id <span class="hljs-operator">=</span> dept.ceo) <span class="hljs-keyword">AS</span> ceoname<br><span class="hljs-keyword">FROM</span> t_emp emp<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id<br></code></pre></td></tr></table></figure><ul><li>临时表连接方式1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> emp_with_ceo_id.name, emp.name <span class="hljs-keyword">AS</span> ceoname <span class="hljs-keyword">FROM</span> <br><span class="hljs-comment">-- 查询所有员工及对应的ceo的id</span><br>( <br><span class="hljs-keyword">SELECT</span> emp.name, dept.ceo <br><span class="hljs-keyword">FROM</span> t_emp emp <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id <br>) emp_with_ceo_id<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_emp emp <span class="hljs-keyword">ON</span> emp_with_ceo_id.ceo <span class="hljs-operator">=</span> emp.id;<br></code></pre></td></tr></table></figure><ul><li>临时表连接方式2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> emp.name, ceo.ceoname <span class="hljs-keyword">FROM</span> t_emp emp <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br><span class="hljs-comment">-- 查询并创建临时表ceo：包含ceo的部门id和ceo的name</span><br>( <br><span class="hljs-keyword">SELECT</span> emp.deptId <span class="hljs-keyword">AS</span> deptId, emp.name <span class="hljs-keyword">AS</span> ceoname <br><span class="hljs-keyword">FROM</span> t_emp emp <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> t_dept dept <span class="hljs-keyword">ON</span> emp.id <span class="hljs-operator">=</span> dept.ceo <br>) ceo<br><span class="hljs-keyword">ON</span> emp.deptId <span class="hljs-operator">=</span> ceo.deptId;<br></code></pre></td></tr></table></figure><h1 id="第04章-MySQL索引"><a href="#第04章-MySQL索引" class="headerlink" title="第04章 MySQL索引"></a>第04章 MySQL索引</h1><h2 id="1、索引简介"><a href="#1、索引简介" class="headerlink" title="1、索引简介"></a>1、索引简介</h2><h3 id="1-1、什么是索引☆"><a href="#1-1、什么是索引☆" class="headerlink" title="1.1、什么是索引☆"></a>1.1、什么是索引<strong>☆</strong></h3><p>MySQL官方对索引的定义为：<strong>索引（Index）是帮助MySQL高效获取数据的数据结构。</strong><br><strong>索引的本质：</strong>索引是数据结构。你可以简单理解为<code>“排好序的快速查找数据结构”</code>。这些数据结构以某种方式指向数据， 可以在这些数据结构的基础上实现高级查找算法 。</p><h3 id="1-2、索引的优缺点☆"><a href="#1-2、索引的优缺点☆" class="headerlink" title="1.2、索引的优缺点☆"></a>1.2、索引的优缺点<strong>☆</strong></h3><p><strong>优点：</strong></p><p>（1）<code>提高数据检索的效率，降低数据库的IO成本</code><br>（2）保证表中每条记录的<code>唯一性</code> 。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220704024203535.png"></p><!--![](MySQL8高级-架构和优化/image-20220704024203535.png)--><p><strong>缺点：</strong><br>（1）创建索引和维护索引要<code>耗费时间</code> 。<br>（2）索引是存储在磁盘上的，因此需要<code>占用磁盘空间</code> 。 </p><h3 id="1-3、索引分类☆"><a href="#1-3、索引分类☆" class="headerlink" title="1.3、索引分类☆"></a>1.3、索引分类<strong>☆</strong></h3><ul><li>从功能逻辑上划分，索引主要有 4 种，分别是<code>普通索引、唯一索引、主键索引、全文索引</code>。</li><li>按照作用字段个数划分，索引可以分为<code>单列索引和联合索引</code>。</li><li>按照物理实现方式划分 ，索引可以分为 2 种，分别是<code>聚簇索引和非聚簇索引</code>。</li></ul><h2 id="2、树"><a href="#2、树" class="headerlink" title="2、树"></a>2、树</h2><h3 id="2-1、二叉树"><a href="#2-1、二叉树" class="headerlink" title="2.1、二叉树"></a>2.1、二叉树</h3><p><strong>二叉树</strong></p><p>树有很多种，每个节点<code>最多</code>只能有<code>两个子节点</code>的一种形式称为二叉树。二叉树的子节点分为左节点和右节点。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220805121226057.png"></p><!--![](MySQL8高级-架构和优化/image-20220805121226057.png)--><p><strong>二叉搜索树BST</strong></p><p><code>BST(Binary Sort(Search) Tree)：</code>对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。</p><p><code>特别说明：</code>如果有相同的值，可以将该节点放在左子节点或右子节点。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220708231318868.png"></p><!--![](MySQL8高级-架构和优化/image-20220708231318868.png)--><p>BST的生成演示：<a href="https://www.cs.usfca.edu/~galles/visualization/BST.html">https://www.cs.usfca.edu/~galles/visualization/BST.html</a></p><p> 下图就是<code>一种可能的索引方式示例</code>：</p><ul><li>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址：</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220704025815748.png"></p><!--![](MySQL8高级-架构和优化/image-20220704025815748.png)--><ul><li>为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找获取到相应数据，从而快速的检索出符合条件的记录：</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220704025257848.png"></p><!--![](MySQL8高级-架构和优化/image-20220704025257848.png)--><p><strong>BST的问题</strong></p><ul><li>上面演示的实际上是一个特殊的<code>二叉搜索树</code>，叫做<code>平衡 二叉搜索树</code>，  如果二叉树不平衡，例如左子树全部为空，从形式上看，更像一个单链表，不能发挥BST的优势。</li><li><code>解决方案：平衡二叉树(AVL)</code></li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220708231622916.png"></p><!--![](MySQL8高级-架构和优化/image-20220708231622916.png)--><p><strong>平衡二叉树（AVL）</strong></p><p>AVL树全称G.M. <code>A</code>delson-<code>V</code>elsky和E.M. <code>L</code>andis，这是两个人的人名。</p><p>平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以保证查询效率较高。</p><p><code>具有以下特点：</code></p><ul><li>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1</li><li>并且左右两个子树都是一棵平衡二叉树。</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220708235509010.png"></p><!--![](MySQL8高级-架构和优化/image-20220708235509010.png)--><p>AVL的生成演示：<a href="https://www.cs.usfca.edu/~galles/visualization/AVLtree.html">https://www.cs.usfca.edu/~galles/visualization/AVLtree.html</a></p><p><strong>AVL的问题</strong></p><p>众所周知，IO操作的效率很低，在大量数据存储中，查询时我们不能一下子将所有数据加载到内存中，只能逐节点加载（一个节点一次IO）。如果我们利用二叉树作为索引结构，<code>那么磁盘的IO次数和索引树的高度是相关的</code>。平衡二叉树由于树深度过大而造成磁盘IO读写过于频繁，进而导致效率低下。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220708233351509.png"></p><!--![](MySQL8高级-架构和优化/image-20220708233351509.png)--><p>为了提高查询效率，就需要 减少磁盘IO数 。<code>为了减少磁盘IO的次数，就需要尽量降低树的高度</code> ，需要把原来“瘦高”的树结构变的“矮胖”，树的每层的分叉越多越好。针对同样的数据，如果我们把二叉树改成 三叉树：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220708235725124.png"></p><!--![](MySQL8高级-架构和优化/image-20220708235725124.png)--><p>上面的例子中，我们将二叉树变成了三叉树，降低了树的高度。<code>如果能够在一个节点中存放更多的数据</code>，我们还可以进一步减少节点的数量，从而进一步降低树的高度。这就是<code>多叉树</code>。</p><h3 id="2-2、B树"><a href="#2-2、B树" class="headerlink" title="2.2、B树"></a>2.2、B树</h3><ul><li><code>B-Tree即B树，Balance Tree，平衡树,B树就是典型的多叉树，它的高度远小于平衡二叉树的高度</code>。</li><li><code>B树的阶：</code>节点的最多子节点个数。</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709054736482.png"></p><!--![](MySQL8高级-架构和优化/image-20220709054736482.png)--><p>上图所表示的 B 树就是一棵 3 阶的 B 树。假设一个磁盘块可以存储一个节点的数据。我们可以看下磁盘块 2，里面的关键字为（8，12），它有 3 个孩子 (3，5)，(9，10) 和 (13，15)，你能看到 (3，5) 小于 8，(9，10) 在 8 和 12 之间，而 (13，15)大于 12，三节点的子树的值大小仍然遵守 BST 二叉排序树的规则。</p><p><code>假设我们想要 查找的数据项是 9 ，那么步骤可以分为以下几步：</code></p><ol><li>第一次磁盘IO：找到根节点磁盘块1，读入内存，执行二分查找，9 小于 17 ，得到指针 P1； </li><li>第二次磁盘IO：按照指针P1找到磁盘块 2，读入内存，执行二分查找， 9 在 8 和 12 之间，得到指针 P2； </li><li>第三次磁盘IO：按照指针P2找到磁盘块 6，读入内存，执行二分查找， 找到了数据项 9。</li></ol><p>你能看出来在 B 树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比较，这个时间就是可以忽略不计的。<code>而读取磁盘块本身需要进行 I/O 操作，消耗的时间比在内存中进行比较所需要的时间要多，是数据查找用时的重要因素。</code> B 树相比于平衡二叉树来说磁盘 I&#x2F;O 操作要少 ，在数据查询中比平衡二叉树效率要高。<code>所以只要树的高度足够低，IO次数足够少，就可以提高查询性能</code> 。</p><p><strong>再举例：</strong></p><p><code>假设</code>使用B树作为索引结构，存放MySQL中的数据：</p><p><code>蓝色</code>部分表示数据的主键，<code>黄色</code>部分表示除主键外的其他数据，<code>紫色</code>部分表示指向子节点的指针</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709075255638.png"></p><!--![](MySQL8高级-架构和优化/image-20220709075255638.png)--><h2 id="3、MySQL的索引结构：B-tree"><a href="#3、MySQL的索引结构：B-tree" class="headerlink" title="3、MySQL的索引结构：B+tree"></a>3、MySQL的索引结构：B+tree</h2><h3 id="3-1、InnoDB中的索引"><a href="#3-1、InnoDB中的索引" class="headerlink" title="3.1、InnoDB中的索引"></a>3.1、InnoDB中的索引</h3><h4 id="3-1-1、设计索引"><a href="#3-1-1、设计索引" class="headerlink" title="3.1.1、设计索引"></a>3.1.1、设计索引</h4><p>假设有一个表index_demo，表中有2个INT类型的列，1个CHAR(1)类型的列，c1列为主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> index_demo(c1 <span class="hljs-type">INT</span>,c2 <span class="hljs-type">INT</span>,c3 <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>),<span class="hljs-keyword">PRIMARY</span> KEY(c1)) ;<br></code></pre></td></tr></table></figure><p>index_demo表的简化的行格式示意图如下：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709071958145.png"></p><!--![](MySQL8高级-架构和优化/image-20220709071958145.png)--><ul><li><code>record_type：</code>表示记录的类型， 0是普通记录、 2是最小记录、 3 是最大记录、1是B+树非叶子节点记录。</li><li><code>next_record：</code>表示下一条记录的相对位置，我们用箭头来表明下一条记录。</li><li><code>各个列的值：</code>这里只记录在 index_demo 表中的三个列，分别是 c1 、 c2 和 c3 。</li></ul><p>把一些记录放到页里的示意图就是<code>（这里一页就是一个磁盘块，代表一次IO）</code>：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709072138395.png"></p><!--![](MySQL8高级-架构和优化/image-20220709072138395.png)--><p><code>MySQL InnoDB的默认的页大小是16KB</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看默认页的大小</span><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Innodb_page_size&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220711220407169.png"></p><!--![](MySQL8高级-架构和优化/image-20220711220407169.png)--><p>因此数据存储在磁盘中，可能会占用多个数据页。如果各个页中的记录没有规律，我们就不得不依次遍历所有的数据页。<code>如果我们想快速的定位到需要查找的记录在哪些数据页中</code>，我们可以这样做 ：</p><ul><li><code>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值</code></li><li>给所有的页建立目录项</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709073749310.png"></p><!--![](MySQL8高级-架构和优化/image-20220709073749310.png)--><p>以<code>页28</code>为例，它对应<code>目录项2</code> ，这个目录项中包含着该页的<code>页号28</code>以及该页中用户记录的<code>最小主键值 5</code>。我们只需要把几个目录项在物理存储器上连续存储（比如：数组），就可以实现根据主键值快速查找某条记录的功能了。<code>比如：查找主键值为 20 的记录，具体查找过程分两步：</code></p><ol><li>先从目录项中根据二分法快速确定出<code>主键值为20的记录在目录项3中</code>（因为 12 ≤ 20 &lt; 209 ），<code>对应页9</code>。 </li><li>再到页9中根据二分法快速定位到主键值为 20 的用户记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为<code>索引</code> 。 </p><h4 id="3-1-2、InnoDB中的索引方案"><a href="#3-1-2、InnoDB中的索引方案" class="headerlink" title="3.1.2、InnoDB中的索引方案"></a>3.1.2、InnoDB中的索引方案</h4><p>我们新分配一个编号为30的页来专门存储<code>目录项记录</code>，页10、28、9、20专门存储<code>用户记录</code>： </p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709074801215.png"></p><!--![](MySQL8高级-架构和优化/image-20220709074801215.png)--><p><code>目录项记录和普通的用户记录的不同点：</code> </p><ul><li>目录项记录 的 record_type 值是1，而 普通用户记录 的 record_type 值是0。</li><li>目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，包含很多列，另外还有InnoDB自己添加的隐藏列。</li></ul><p><code>现在查找主键值为 20 的记录，具体查找过程分两步：</code></p><ol><li>先到页30中通过二分法快速定位到对应目录项，因为 12 ≤ 20 &lt; 209 ，就是页9。 </li><li>再到页9中根据二分法快速定位到主键值为 20 的用户记录。</li></ol><p><strong>更复杂的情况如下：</strong></p><p>我们生成了一个存储更高级目录项的 页33 ，这个页中的两条记录分别代表页30和页32，如果用户记录的主键值在 <code>[1, 320)</code> 之间，则到页30中查找更详细的目录项记录，如果主键值 不小于320 的话，就到页32中查找更详细的目录项记录。<strong>这个数据结构，它的名称是 B+树 。</strong> </p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709080648851.png"></p><!--![](MySQL8高级-架构和优化/image-20220709080648851.png)--><h3 id="3-2、B树和B-树对比☆"><a href="#3-2、B树和B-树对比☆" class="headerlink" title="3.2、B树和B+树对比☆"></a>3.2、B树和B+树对比<strong>☆</strong></h3><p><strong>B+</strong> <strong>树和</strong> <strong>B</strong> <strong>树的差异：</strong></p><ul><li><p>B+树中非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而B树中， 非叶子节点既保存索引，也保存数据记录 。 </p></li><li><p>B+树中所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。</p></li><li><p>B+树中非叶子节点的关键字也会同时存在于子节点中，并且是在子节点中所有关键字的最小值。</p></li></ul><p><strong>B+树为什么IO的次数会更少：</strong></p><ul><li><code>真实环境</code>中一个页存放的记录数量是非常大的（默认16KB），假设指针与键值占大约10字节，数据占 1 kb 的空间：</li><li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，则最多能存放 16 条记录。</li><li>如果B+树有2层，最多能存放约 <code>1600×16=25600</code> 条记录。</li><li>如果B+树有3层，最多能存放约 <code>1600×1600×16=40960000</code> 条记录。</li><li>如果存储千万级别的数据，只需要三层就够了</li></ul><p><code>B+树的非叶子节点不存储用户记录，只存储目录记录，相对B树每个节点可以存储更多的记录，树的高度会更矮胖，IO次数也会更少。</code></p><h3 id="3-3、聚簇索引☆"><a href="#3-3、聚簇索引☆" class="headerlink" title="3.3、聚簇索引☆"></a>3.3、聚簇索引<strong>☆</strong></h3><p><strong>特点：</strong></p><ul><li><p><code>索引和数据保存在同一个B+树中</code></p></li><li><p><code>页内的记录</code>是按照<code>主键</code>的大小顺序排成一个<code>单向链表</code> 。</p></li><li><p><code>页和页之间</code>也是根据页中记录的<code>主键</code>的大小顺序排成一个<code>双向链表</code> 。</p></li><li><p>非叶子节点存储的是记录的<code>主键+页号</code>。</p></li><li><p>叶子节点存储的是<code>完整的用户记录</code>。</p></li></ul><p><strong>优点：</strong></p><ul><li>数据访问更快 ，因为<code>索引和数据保存在同一个B+树中</code>，因此从聚簇索引中获取数据比非聚簇索引更快。</li><li>聚簇索引对于主键的<code>排序查找</code>和<code>范围查找</code>速度非常快。</li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于<code>数据都是紧密相连</code>，数据库可以从更少的数据块中提取数据，<code>节省了大量的IO操作</code> 。</li></ul><p><strong>缺点：</strong></p><ul><li>插入速度严重依赖于插入顺序 ，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<code>自增的ID列为主键</code>。</li><li>更新主键的代价很高 ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<code>主键为不可更新</code>。</li></ul><p><strong>限制：</strong></p><ul><li>只有InnoDB引擎支持聚簇索引，<code>MyISAM不支持聚簇索引</code>。</li><li>由于数据的物理存储排序方式只能有一种，所以<code>每个MySQL的表只能有一个聚簇索引</code>。</li><li>如果没有为表定义主键，InnoDB会选择<code>非空的唯一索引列代替</code>。如果没有这样的列，InnoDB会<code>隐式的定义一个主键</code>作为聚簇索引。</li><li>为了充分利用聚簇索引的聚簇特性，InnoDB中表的<code>主键应选择有序的id</code>，不建议使用无序的id，比如UUID、MD5、HASH、字符串作为主键，无法保证数据的顺序增长。</li></ul><h3 id="3-4、非聚簇索引☆"><a href="#3-4、非聚簇索引☆" class="headerlink" title="3.4、非聚簇索引☆"></a>3.4、非聚簇索引<strong>☆</strong></h3><p><strong>（二级索引、辅助索引）</strong></p><p><code>聚簇索引</code>，只能在搜索条件是<code>主键值</code>时才发挥作用，因为B+树中的数据都是按照主键进行排序的，如果我们想以别的列作为搜索条件，那么需要创建<code>非聚簇索引</code>。</p><p><strong>例如，</strong><code>以c2列作为搜索条件</code>，那么需要使<code>用c2列创建一棵B+树</code>，如下所示：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709130937991.png">&#96;</p><!--![](MySQL8高级-架构和优化/image-20220709130937991.png)--><p><strong>这个B+树与聚簇索引有几处不同：</strong></p><ul><li><p><code>页内的记录</code>是按照从<code>c2列</code>的大小顺序排成一个<code>单向链表</code> 。</p></li><li><p><code>页和页之间</code>也是根据页中记录的<code>c2列</code>的大小顺序排成一个<code>双向链表</code> 。</p></li><li><p>非叶子节点存储的是记录的<code>c2列+页号</code>。</p></li><li><p>叶子节点存储的并不是完整的用户记录，而只是<code>c2列+主键</code>这两个列的值。</p></li></ul><p><strong>例如：</strong>根据c2列的值查找c2&#x3D;4的记录，查找过程如下：</p><ol><li>根据<code>根页面44</code>定位到<code>页42</code>（因为<code>2 ≤  4 &lt; 9</code>）</li><li>由于<code>c2列没有唯一性约束</code>，所以c2&#x3D;4的记录可能分布在多个数据页中，又因为 <code>2 ≤ 4  ≤ 4</code>，所以确定实际存储用户记录的页在<code>页34和页35</code>中。</li><li>在页34和35中<code>定位到具体的记录</code>。</li><li>但是这个B+树的叶子节点<code>只存储了c2和c1（主键）</code>两个列，所以我们必须<code>再根据主键值去聚簇索引中再查找</code>一遍完整的用户记录。</li></ol><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220714101340016.png"></p><!--![](MySQL8高级-架构和优化/image-20220714101340016.png)--><p><strong>概念：回表</strong> </p><p>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根据c2列的值查找到完整的用户记录的话，仍然需要到聚簇索引中再查一遍，这个过程称为回表 。也就是根据c2列的值查询一条完整的用户记录需要<code>使用到 2棵B+树</code>！</p><p><strong>问题：</strong></p><p>为什么我们还需要一次回表操作呢？直接把完整的用户记录放到叶子节点不OK吗？</p><p><strong>回答：</strong><br>如果把完整的用户记录放到叶子节点是可以不用回表。但是<code>太占地方</code>了，相当于每建立一棵B+树都需要把所有的用户记录再都拷贝一遍，这就有点太浪费存储空间了。</p><p><strong>一张表可以有多个非聚簇索引：</strong></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709134109900.png"></p><!--![](MySQL8高级-架构和优化/image-20220709134109900.png)--><h3 id="3-5、联合索引"><a href="#3-5、联合索引" class="headerlink" title="3.5、联合索引"></a>3.5、联合索引</h3><p><code>为c2和c3列建立联合索引：</code></p><ul><li>各个页中的记录按照<code>c2</code>列进行排序。</li><li>在记录的<code>c2</code>列相同的情况下，采用<code>c3</code>列进行排序</li><li>B+树叶子节点处的记录由<code>c2列、c3列和主键c1列组成</code></li><li>本质上也是二级索引</li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712002627554.png"></p><!--![](MySQL8高级-架构和优化/image-20220712002627554.png)--><h3 id="3-6、覆盖索引☆"><a href="#3-6、覆盖索引☆" class="headerlink" title="3.6、覆盖索引☆"></a>3.6、覆盖索引<strong>☆</strong></h3><p>如果能通过读取索引就可以得到想要的数据，那就不需要读取用户记录，或者<code>不用再做回表</code>操作了。<code>一个索引包含了满足查询结果的数据就叫做覆盖索引。</code> </p><p>例如，如果为前面例子中的数据库表创建c2列索引，则如下SQL会使用覆盖索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># C1 主键 c2 普通索引<br><span class="hljs-keyword">SELECT</span> c1, c2 <span class="hljs-keyword">from</span> index_demo <span class="hljs-keyword">where</span> c2 <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h3 id="3-7、MyISAM中的索引☆"><a href="#3-7、MyISAM中的索引☆" class="headerlink" title="3.7、MyISAM中的索引☆"></a>3.7、MyISAM中的索引<strong>☆</strong></h3><p>MyISAM引擎使用 B+Tree 作为索引结构，<code>叶子节点的data域存放的是数据记录的地址</code> 。 </p><p>下图是MyISAM索引的原理图<code>（索引和数据分开存储，是非聚簇索引）</code>： </p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709180255597.png"></p><!--![](MySQL8高级-架构和优化/image-20220709180255597.png)--><p>如果我们在Col2上建立一个二级索引，则此索引的结构如下图所示<code>（是非聚簇索引）</code>：</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709180605148.png"></p><!--![](MySQL8高级-架构和优化/image-20220709180605148.png)--><h3 id="3-8、MyISAM与InnoDB对比☆"><a href="#3-8、MyISAM与InnoDB对比☆" class="headerlink" title="3.8、MyISAM与InnoDB对比☆"></a>3.8、MyISAM与InnoDB对比<strong>☆</strong></h3><ul><li><p>InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是分离的：</p><ul><li>InnoDB的表在磁盘上存储在以下文件中： <code>.ibd（表结构、索引和数据都存在一起,MySQL5.7表结构放在.frm中）</code></li><li>MyISAM的表在磁盘上存储在以下文件中：  <code>*.sdi（描述表结构，MySQL5.7是.frm）</code>、<code>*.MYD（数据）</code>，<code>*.MYI（索引）</code></li></ul></li><li><p>InnoDB中主键索引是聚簇索引，叶子节点中存储完整的数据记录；其他索引是非聚簇索引，存储相应记录主键的值 。</p></li><li><p>InnoDB要求表必须有主键 （ MyISAM可以没有 ）。如果没有显式指定，则MySQL系统会自动选择一个可以<code>非空且唯一</code>标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键。</p></li><li><p>MyISAM中无论是主键索引还是非主键索引都是非聚簇的，叶子节点记录的是数据的地址。</p></li><li><p><code>MyISAM的回表操作是十分快速的</code>，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p></li></ul><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709183820796.png"></p><!--![](MySQL8高级-架构和优化/image-20220709183820796.png)--><h2 id="4、索引操作"><a href="#4、索引操作" class="headerlink" title="4、索引操作"></a>4、索引操作</h2><h3 id="4-1、创建索引"><a href="#4-1、创建索引" class="headerlink" title="4.1、创建索引"></a>4.1、创建索引</h3><ul><li>随表一起创建索引：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customer (<br>    <br>  id <span class="hljs-type">INT</span> UNSIGNED AUTO_INCREMENT,<br>  customer_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  customer_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>),<br>    <br>  <span class="hljs-keyword">PRIMARY</span> KEY(id), <span class="hljs-comment">-- 主键索引：列设定为主键后会自动建立索引，唯一且不能为空。</span><br>  <span class="hljs-keyword">UNIQUE</span> INDEX uk_no (customer_no), <span class="hljs-comment">-- 唯一索引：索引列值必须唯一，允许有NULL值，且NULL可能会出现多次。</span><br>  KEY idx_name (customer_name), <span class="hljs-comment">-- 普通索引：既不是主键，列值也不需要唯一，单纯的为了提高查询速度而创建。</span><br>  KEY idx_no_name (customer_no,customer_name) <span class="hljs-comment">-- 复合索引：即一个索引包含多个列。</span><br>);<br></code></pre></td></tr></table></figure><ul><li>单独建创索引：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customer1 (<br>  id <span class="hljs-type">INT</span> UNSIGNED,<br>  customer_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>),<br>  customer_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-comment">-- 建表后创建索引</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY customer1(id); <span class="hljs-comment">-- 主键索引</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX uk_no <span class="hljs-keyword">ON</span> customer1(customer_no); <span class="hljs-comment">-- 唯一索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_name <span class="hljs-keyword">ON</span> customer1(customer_name);  <span class="hljs-comment">-- 普通索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_no_name <span class="hljs-keyword">ON</span> customer1(customer_no,customer_name); <span class="hljs-comment">-- 复合索引</span><br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 MODIFY id <span class="hljs-type">INT</span> UNSIGNED AUTO_INCREMENT, <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY customer1(id); <span class="hljs-comment">--创建自增的主键索引</span><br></code></pre></td></tr></table></figure><ul><li>使用ALTER命令：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (id); <span class="hljs-comment">-- 主键索引</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> INDEX uk_no (customer_no); <span class="hljs-comment">-- 唯一索引</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 <span class="hljs-keyword">ADD</span> INDEX idx_name (customer_name);   <span class="hljs-comment">-- 普通索引</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 <span class="hljs-keyword">ADD</span> INDEX idx_no_name (customer_no,customer_name);  <span class="hljs-comment">-- 复合索引</span><br></code></pre></td></tr></table></figure><h3 id="4-2、查看索引"><a href="#4-2、查看索引" class="headerlink" title="4.2、查看索引"></a>4.2、查看索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> customer;<br></code></pre></td></tr></table></figure><h3 id="4-3、删除索引"><a href="#4-3、删除索引" class="headerlink" title="4.3、删除索引"></a>4.3、删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX idx_name <span class="hljs-keyword">ON</span> customer; <span class="hljs-comment">-- 删除单值、唯一、复合索引</span><br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer MODIFY id <span class="hljs-type">INT</span> UNSIGNED, <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY; <span class="hljs-comment">-- 删除主键索引(有主键自增)</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> customer1 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY;  <span class="hljs-comment">-- 删除主键索引(没有主键自增)</span><br></code></pre></td></tr></table></figure><h2 id="5、索引的使用场景☆"><a href="#5、索引的使用场景☆" class="headerlink" title="5、索引的使用场景☆"></a>5、索引的使用场景<strong>☆</strong></h2><p><strong>哪些情况适合创建索引：</strong></p><ul><li>频繁作为WHERE查询条件的字段     id &#x3D; 聚簇索引，不需要回表 iphone</li><li>经常GROUP BY 和 ORDER BY的列    </li><li>字段的值有唯一性的限制 </li><li>DISTINCT字段需要创建索引</li><li>多表JOIN时，对连接字段创建索引</li><li>使用字符串前缀创建索引<ul><li><code>例如</code>一个字段 address varchar（120），我们可以创建索引的长度为（12）个字符，节省索引空间</li></ul></li><li>区分度高的列（重复的数据少）适合作为索引</li><li>使用频繁的列，放到联合索引的左侧</li></ul><p><strong>哪些情况不要创建索引：</strong></p><ul><li>WHERE、GROUP BY 、ORDER BY里用不到的字段不创建索引</li><li>表的数据记录太少</li><li>有大量重复数据的列上 </li><li>避免对经常增删改的表创建索引 </li><li>不要定义冗余或重复的索引</li></ul><h1 id="第05章-索引优化"><a href="#第05章-索引优化" class="headerlink" title="第05章 索引优化"></a>第05章 索引优化</h1><h2 id="1、数据库优化方案"><a href="#1、数据库优化方案" class="headerlink" title="1、数据库优化方案"></a>1、数据库优化方案</h2><p><strong>问题：</strong></p><p>哪些方法可以进行数据库调优？</p><p><strong>解决方案：</strong></p><ul><li><p>索引失效，没有充分利用到索引：<code>索引建立</code></p></li><li><p>关联查询太多JOIN（设计缺陷或不得已的需求）：<code>SQL优化</code></p></li><li><p>数据过多500W，2GB：分库分表</p></li><li><p>服务器调优及各个参数设置（缓冲、线程数等）：调整my.cnf</p></li></ul><h2 id="2、性能分析（EXPLAIN）"><a href="#2、性能分析（EXPLAIN）" class="headerlink" title="2、性能分析（EXPLAIN）"></a>2、性能分析（EXPLAIN）</h2><h3 id="2-1、EXPLAIN是什么"><a href="#2-1、EXPLAIN是什么" class="headerlink" title="2.1、EXPLAIN是什么"></a>2.1、EXPLAIN是什么</h3><p>查看SQL执行计划：使用EXPLAIN关键字可以<code>模拟优化器执行SQL查询语句</code>，从而知道MySQL是如何处理你的SQL语句的。<code>分析你的查询语句或是表结构的性能瓶颈</code>。</p><p><strong>用法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-operator">+</span> <span class="hljs-keyword">SQL</span>语句<br></code></pre></td></tr></table></figure><h3 id="2-2、数据准备"><a href="#2-2、数据准备" class="headerlink" title="2.2、数据准备"></a>2.2、数据准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">USE atguigudb;<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1(id <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) AUTO_INCREMENT, content <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (id));<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t2(id <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) AUTO_INCREMENT, content <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (id));<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t3(id <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) AUTO_INCREMENT, content <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (id));<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t4(id <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) AUTO_INCREMENT, content1 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span>, content2 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">PRIMARY</span> KEY (id));<br><br><span class="hljs-keyword">CREATE</span> INDEX idx_content1 <span class="hljs-keyword">ON</span> t4(content1);  <span class="hljs-comment">-- 创建普通索引</span><br><br># 以下新增<span class="hljs-keyword">sql</span>多执行几次，以便演示<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1(content) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">&#x27;t1_&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span><span class="hljs-number">1000</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t2(content) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">&#x27;t2_&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span><span class="hljs-number">1000</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t3(content) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">&#x27;t3_&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span><span class="hljs-number">1000</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t4(content1, content2) <span class="hljs-keyword">VALUES</span>(CONCAT(<span class="hljs-string">&#x27;t4_&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span><span class="hljs-number">1000</span>)), CONCAT(<span class="hljs-string">&#x27;t4_&#x27;</span>,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span><span class="hljs-number">1000</span>)));<br></code></pre></td></tr></table></figure><h3 id="2-3、各字段解释"><a href="#2-3、各字段解释" class="headerlink" title="2.3、各字段解释"></a>2.3、各字段解释</h3><h4 id="2-3-1、id"><a href="#2-3-1、id" class="headerlink" title="2.3.1、id"></a>2.3.1、id</h4><p>在一个完整的查询语句中，每个SELECT关键字，都对应一个唯一的id。同时通过id也可以知道操作表的顺序。</p><ul><li><strong>id相同：</strong>一个SELECT，id都是1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1, t2, t3;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710000757241.png"></p><!--![](MySQL8高级-架构和优化/image-20220710000757241.png)--><ul><li><strong>id不同：</strong>三个SELECT，id是1、2、3</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> t1.id <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> t1.id <span class="hljs-operator">=</span>(<br>  <span class="hljs-keyword">SELECT</span> t2.id <span class="hljs-keyword">FROM</span> t2 <span class="hljs-keyword">WHERE</span> t2.id <span class="hljs-operator">=</span>(<br>    <span class="hljs-keyword">SELECT</span> t3.id <span class="hljs-keyword">FROM</span> t3 <span class="hljs-keyword">WHERE</span> t3.content <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;000&#x27;</span><br>  )<br>);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806204009208.png"></p><!--![](MySQL8高级-架构和优化/image-20220806204009208.png)--><p><strong>注意：</strong>如果t3表查询无结果，则table列<code>t1</code>和<code>t2</code>处为<code>NULL</code></p><p><strong>注意：</strong>查询优化器可能对涉及子查询的语句进行优化，<code>转为连接查询</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> content <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> content <span class="hljs-keyword">FROM</span> t2 <span class="hljs-keyword">WHERE</span> content <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220711123408605.png"></p><!--![](MySQL8高级-架构和优化/image-20220711123408605.png)--><ul><li><strong>id为NULL：</strong>把t1和t2的查询结果合并，并创建名为&lt;union1,2&gt;的临时表，然后对结果去重</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t2;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710001512891.png"></p><!--![](MySQL8高级-架构和优化/image-20220710001512891.png)--><p>因此包含UNION ALL的执行计划中就没有这条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t2;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806205841029.png"></p><!--![](MySQL8高级-架构和优化/image-20220806205841029.png)--><p><strong>小结：</strong></p><ul><li>id如果相同，可以认为是一组，<code>从上往下顺序执行</code></li><li>在所有组中，<code>id值越大，越先执行</code></li><li>关注点：每个id号码，表示一趟独立的查询, <code>一个sql的查询趟数越少越好</code></li></ul><h4 id="2-3-2、table"><a href="#2-3-2、table" class="headerlink" title="2.3.2、table"></a>2.3.2、table</h4><ul><li><strong>单表：</strong>显示这一行的数据是关于哪张表的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710101402666.png"></p><!--![](MySQL8高级-架构和优化/image-20220710101402666.png)--><ul><li><strong>多表：</strong>关联查询中，显示在执行计划第一行的是驱动表，第二行是被驱动表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">EXPLAIN SELECT * FROM t1, t2 WHERE t1.id = t2.id;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220807014004193.png"></p><!--![](MySQL8高级-架构和优化/image-20220807014004193.png)--><h4 id="2-3-5、type-☆"><a href="#2-3-5、type-☆" class="headerlink" title="2.3.5、type ☆"></a>2.3.5、type <strong>☆</strong></h4><blockquote><p><strong>说明：</strong></p><p>结果值从最好到最坏依次是： </p><p><code>system &gt; const &gt; eq_ref &gt; ref</code> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <code>range &gt; index &gt; ALL</code> </p><p><code>比较重要的包含：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code></p><p>SQL 性能优化的目标：至少要达到 <code>range</code> 级别，要求是 <code>ref</code> 级别，最好是 <code>const</code>级别。（阿里巴巴<br>开发手册要求）</p></blockquote><ul><li><strong>ALL：</strong>全表扫描。Full Table Scan，将遍历全表以找到匹配的行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712065946659.png"></p><!--![](MySQL8高级-架构和优化/image-20220712065946659.png)--><ul><li><strong>index：</strong>全索引扫描。当使用<code>覆盖索引</code>，但需要扫描<code>全部的索引记录</code>时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> content1 <span class="hljs-keyword">FROM</span> t4;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806200359943.png"></p><!--![](MySQL8高级-架构和优化/image-20220806200359943.png)--><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> id <span class="hljs-keyword">FROM</span> t1;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712065815768.png"></p><!--![](MySQL8高级-架构和优化/image-20220712065815768.png)--><ul><li><strong>range：</strong>只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806211954646.png"></p><!--![](MySQL8高级-架构和优化/image-20220806211954646.png)--><ul><li><strong>ref：</strong>通过普通二级索引列与常量进行等值匹配时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t4 <span class="hljs-keyword">WHERE</span> content1 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806212137124.png"></p><!--![](MySQL8高级-架构和优化/image-20220806212137124.png)--><ul><li><p><strong>eq_ref：</strong>连接查询时通过<code>主键</code>或不允许NULL值的<code>唯一二级索引</code>列进行等值匹配时 <strong>?</strong> </p><p>数据量级，可能会影响索引的使用！ mysql 内部的优化器！</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1, t2 <span class="hljs-keyword">WHERE</span> t1.id <span class="hljs-operator">=</span> t2.id;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712070851089.png"></p><!--![](MySQL8高级-架构和优化/image-20220712070851089.png)--><ul><li><strong>const：</strong>根据<code>主键</code>或者<code>唯一二级索引</code>列与<code>常数</code>进行匹配时</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712070944090.png"></p><!--![](MySQL8高级-架构和优化/image-20220712070944090.png)--><ul><li><strong>system：</strong>MyISAM引擎中，当表中只有一条记录时。<code>（这是所有type的值中性能最高的场景）</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t(i <span class="hljs-type">int</span>) Engine<span class="hljs-operator">=</span>MyISAM;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>);<br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220711125730163.png"></p><!--![](MySQL8高级-架构和优化/image-20220711125730163.png)--><h4 id="2-3-6、possible-keys-和-key-☆"><a href="#2-3-6、possible-keys-和-key-☆" class="headerlink" title="2.3.6、possible_keys 和 key ☆"></a>2.3.6、possible_keys 和 key <strong>☆</strong></h4><ul><li><p><code>possible_keys</code>表示执行查询时<code>可能用到的索引</code>，一个或多个。 查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</p></li><li><p><code>keys</code>表示<code>实际使用的索引</code>。如果为NULL，则没有使用索引。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> id <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710142152514.png"></p><!--![](MySQL8高级-架构和优化/image-20220710142152514.png)--><h4 id="2-3-7、key-len-☆"><a href="#2-3-7、key-len-☆" class="headerlink" title="2.3.7、key_len ☆"></a>2.3.7、key_len <strong>☆</strong></h4><p>表示索引使用的字节数，根据这个值可以判断索引的使用情况，<code>检查是否充分利用了索引，针对联合索引值越大越好。</code></p><p><strong>如何计算：</strong></p><ol><li>先看索引上字段的类型+长度。比如：int&#x3D;4 ; varchar(20) &#x3D;20 ; char(20) &#x3D;20 </li><li>如果是varchar或者char这种字符串字段，视字符集要乘不同的值，比如utf8要乘 3(MySQL5.7)，如果是utf8mb4要乘4，GBK要乘2</li><li>varchar这种动态字符串要加2个字节</li><li>允许为空的字段要加1个字节</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_age_name <span class="hljs-keyword">ON</span> t_emp(age, `name`);<br><span class="hljs-comment">-- 测试1</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-number">30</span> <span class="hljs-keyword">AND</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ab%&#x27;</span>;<br><span class="hljs-comment">-- 测试2</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710130548971.png"></p><!--![](MySQL8高级-架构和优化/image-20220710130548971.png)--><h4 id="2-3-8、ref"><a href="#2-3-8、ref" class="headerlink" title="2.3.8、ref"></a>2.3.8、ref</h4><p>显示与key中的索引进行比较的列或常量。</p><ul><li><strong>const：</strong>  与索引列进行等值比较的东西是啥，const表示一个常数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t4 <span class="hljs-keyword">WHERE</span> content1 <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806213843328.png"></p><!--![](MySQL8高级-架构和优化/image-20220806213843328.png)--><ul><li><strong>ref&#x3D;atguigudb.t1.id</strong>   关联查询时出现，t2表和t1表的哪一列进行关联</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1, t2 <span class="hljs-keyword">WHERE</span> t1.id <span class="hljs-operator">=</span> t2.id;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220806214146640.png"></p><!--![](MySQL8高级-架构和优化/image-20220806214146640.png)--><h4 id="2-3-9、rows-☆"><a href="#2-3-9、rows-☆" class="headerlink" title="2.3.9、rows ☆"></a>2.3.9、rows <strong>☆</strong></h4><p>MySQL认为它执行查询时实际从索引树中查找到的行数。<code>值越小越好。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 如果是全表扫描，rows的值就是表中数据的估计行数</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp <span class="hljs-keyword">WHERE</span> empno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100001&#x27;</span>;<br><br><span class="hljs-comment">-- 如果是使用索引查询，rows的值就是预计扫描索引记录行数</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp <span class="hljs-keyword">WHERE</span> deptId <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710131916240.png"></p><!--![](MySQL8高级-架构和优化/image-20220710131916240.png)--><h4 id="2-3-10、filtered"><a href="#2-3-10、filtered" class="headerlink" title="2.3.10、filtered"></a>2.3.10、filtered</h4><p>最后查询出来的数据占所有服务器端（server）检查行数（rows）的<code>百分比</code>。<code>值越大越好</code>。</p><p>例如上一个例子。</p><h4 id="2-3-11、Extra-☆"><a href="#2-3-11、Extra-☆" class="headerlink" title="2.3.11、Extra ☆"></a>2.3.11、Extra <strong>☆</strong></h4><p>包含不适合在其他列中显示但十分重要的额外信息。通过这些额外信息来<code>理解MySQL到底将如何执行当前的查询语句</code>。MySQL提供的额外信息有好几十个，这里只挑比较重要的介绍。</p><ul><li><strong>Using where：</strong>使用了where，但在where上有字段没有创建索引。也可以理解为如果数据从引擎层被返回到server层进行过滤，那么就是Using where。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;风清扬&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220709215122017.png"></p><!--![](MySQL8高级-架构和优化/image-20220709215122017.png)--><ul><li><strong>Using filesort：</strong></li></ul><p>如果出现了Using filesort 说明排序没有使用上索引，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710172607190.png"></p><!--![](MySQL8高级-架构和优化/image-20220710172607190.png)--><p>如果排序操作无法使用到索引，只能在内存中（记录较少时）或者磁盘中（记录较多时）进行排序（filesort），如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> content;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710172926396.png"></p><!--![](MySQL8高级-架构和优化/image-20220710172926396.png)--><ul><li><strong>Using index：</strong><code>使用了覆盖索引</code>，表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> id, content1 <span class="hljs-keyword">FROM</span> t4;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712071716131.png"></p><!--![](MySQL8高级-架构和优化/image-20220712071716131.png)--><ul><li><strong>Using index condition：</strong>叫作  <code>Index Condition Pushdown Optimization （索引下推优化）</code><ul><li><code>如果没有索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>主键值进行回表</code>，返回完整的记录给server层，server层再判断其他的搜索条件是否成立。如果成立则保留该记录，否则跳过该记录，然后向存储引擎层要下一条记录。</li><li><code>如果使用了索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; &#39;z&#39;</code>条件的第一条二级索引记录。<code>不着急执行回表</code>，而是在这条记录上先判断一下所有关于<code>idx_content1</code>索引中包含的条件是否成立，也就是<code>content1 &gt; &#39;z&#39; AND content1 LIKE &#39;%a&#39;</code>是否成立。如果这些条件不成立，则直接跳过该二级索引记录，去找下一条二级索引记录；如果这些条件成立，则执行回表操作，返回完整的记录给server层。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- content1列上有索引idx_content1</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t4 <span class="hljs-keyword">WHERE</span> content1 <span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-keyword">AND</span> content1 <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710180257692.png"></p><!--![](MySQL8高级-架构和优化/image-20220710180257692.png)--><p><strong>注意：</strong>如果这里的查询条件<code>只有content1 &gt; &#39;z&#39;</code>，那么找到满足条件的索引后也会进行一次索引下推的操作，判断content1 &gt; ‘z’是否成立（这是源码中为了编程方便做的冗余判断）</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712012108900.png"></p><!--![](MySQL8高级-架构和优化/image-20220712012108900.png)--><ul><li><strong>Using join buffer：</strong>在连接查询时，当<code>被驱动表（t2）不能有效的利用索引时</code>，MySQL会提前申请一块内存空间（join buffer）存储驱动表的数据，来加快查询速度</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN  <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t1, t2 <span class="hljs-keyword">WHERE</span> t1.content <span class="hljs-operator">=</span> t2.content;<br># 创建了索引就不会出现<span class="hljs-keyword">Using</span> <span class="hljs-keyword">join</span> buffer！<br><span class="hljs-keyword">create</span> index idx_content <span class="hljs-keyword">on</span> t2(content);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710182356817.png"></p><!--![](MySQL8高级-架构和优化/image-20220710182356817.png)--><p>下面这个例子就是被驱动表使用了索引，此时Extra中就没有Using join buffer了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp, t_dept <span class="hljs-keyword">WHERE</span> t_dept.id <span class="hljs-operator">=</span> t_emp.deptId;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710182524371.png"></p><!--![](MySQL8高级-架构和优化/image-20220710182524371.png)--><blockquote><p><code>课外阅读：</code>在没有索引的情况下，为了优化多表连接，减少磁盘IO读取次数和数据遍历次数，MySQL为我们提供了很多不同的连接缓存的优化算法，可参考<a href="https://blog.csdn.net/qq_35423190/article/details/120504960">https://blog.csdn.net/qq_35423190/article/details/120504960</a></p><ul><li><code>Using join buffer (hash join)</code><strong>8.0新增：</strong>连接缓存（hash连接） <code>速度更快</code></li><li><code>Using join buffer (Block Nested Loop)</code><strong>从5.7开始</strong>：连接缓存（块嵌套循环）</li></ul></blockquote><h2 id="3、准备数据"><a href="#3、准备数据" class="headerlink" title="3、准备数据"></a>3、准备数据</h2><p>在做优化之前，要准备大量数据。接下来创建两张表，并往员工表里插入50W数据，部门表中插入1W条数据。</p><p>怎么快速插入50w条数据呢？ <code>存储过程</code></p><p>怎么保证插入的数据不重复？<code>函数</code></p><p><strong>部门表：</strong></p><ul><li><p>id：自增长</p></li><li><p>deptName：随机字符串，允许重复</p></li><li><p>address：随机字符串，允许重复</p></li><li><p>CEO：1-50w之间的任意数字</p></li></ul><p><strong>员工表：</strong></p><ul><li>id：自增长</li><li>empno：可以使用随机数字，或者<code>从1开始的自增数字</code>，不允许重复</li><li>name：随机生成，允许姓名重复</li><li>age：区间随机数</li><li>deptId：1-1w之间随机数</li></ul><p><strong>总结：</strong>需要产生随机字符串和区间随机数的函数。</p><h3 id="3-1、创建表"><a href="#3-1、创建表" class="headerlink" title="3.1、创建表"></a>3.1、创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `dept` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`deptName` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`address` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>ceo <span class="hljs-type">INT</span> <span class="hljs-keyword">NULL</span> ,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `emp` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`empno` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br>`name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`age` <span class="hljs-type">INT</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`deptId` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>#<span class="hljs-keyword">CONSTRAINT</span> `fk_dept_id` <span class="hljs-keyword">FOREIGN</span> KEY (`deptId`) <span class="hljs-keyword">REFERENCES</span> `t_dept` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="3-2、创建函数"><a href="#3-2、创建函数" class="headerlink" title="3.2、创建函数"></a>3.2、创建函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看mysql是否允许创建函数：</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;log_bin_trust_function_creators&#x27;</span>;<br><span class="hljs-comment">-- 命令开启：允许创建函数设置：（global-所有session都生效）</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> log_bin_trust_function_creators<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 随机产生字符串</span><br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> rand_string(n <span class="hljs-type">INT</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>)<br><span class="hljs-keyword">BEGIN</span>    <br><span class="hljs-keyword">DECLARE</span> chars_str <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br><span class="hljs-keyword">DECLARE</span> return_str <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br>WHILE i <span class="hljs-operator">&lt;</span> n DO  <br><span class="hljs-keyword">SET</span> return_str <span class="hljs-operator">=</span>CONCAT(return_str,<span class="hljs-built_in">SUBSTRING</span>(chars_str,<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span><span class="hljs-number">52</span>),<span class="hljs-number">1</span>));  <br><span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">END</span> WHILE;<br><span class="hljs-keyword">RETURN</span> return_str;<br><span class="hljs-keyword">END</span> $$<br><br><span class="hljs-comment">-- 假如要删除</span><br><span class="hljs-comment">-- drop function rand_string;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用于随机产生区间数字</span><br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> rand_num (from_num <span class="hljs-type">INT</span> ,to_num <span class="hljs-type">INT</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>)<br><span class="hljs-keyword">BEGIN</span>   <br> <span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;  <br> <span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> <span class="hljs-built_in">FLOOR</span>(from_num <span class="hljs-operator">+</span>RAND()<span class="hljs-operator">*</span>(to_num <span class="hljs-operator">-</span>from_num<span class="hljs-operator">+</span><span class="hljs-number">1</span>));<br><span class="hljs-keyword">RETURN</span> i;  <br><span class="hljs-keyword">END</span>$$<br><br><span class="hljs-comment">-- 假如要删除</span><br><span class="hljs-comment">-- drop function rand_num;</span><br></code></pre></td></tr></table></figure><h3 id="3-3、创建存储过程"><a href="#3-3、创建存储过程" class="headerlink" title="3.3、创建存储过程"></a>3.3、创建存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 插入员工数据</span><br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span>  insert_emp(<span class="hljs-keyword">START</span> <span class="hljs-type">INT</span>, max_num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span>  <br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;   <br>#<span class="hljs-keyword">set</span> autocommit <span class="hljs-operator">=</span><span class="hljs-number">0</span> 把autocommit设置成<span class="hljs-number">0</span>  <br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <br>REPEAT  <br><span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (empno, NAME, age, deptid ) <span class="hljs-keyword">VALUES</span> ((<span class="hljs-keyword">START</span><span class="hljs-operator">+</span>i) ,rand_string(<span class="hljs-number">6</span>), rand_num(<span class="hljs-number">30</span>,<span class="hljs-number">50</span>), rand_num(<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>));  <br>UNTIL i <span class="hljs-operator">=</span> max_num  <br><span class="hljs-keyword">END</span> REPEAT;  <br><span class="hljs-keyword">COMMIT</span>;  <br><span class="hljs-keyword">END</span>$$<br> <br><span class="hljs-comment">-- 删除</span><br><span class="hljs-comment">-- DELIMITER ;</span><br><span class="hljs-comment">-- drop PROCEDURE insert_emp;</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment">-- 插入部门数据</span><br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> insert_dept(max_num <span class="hljs-type">INT</span>)<br><span class="hljs-keyword">BEGIN</span>  <br><span class="hljs-keyword">DECLARE</span> i <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;   <br><span class="hljs-keyword">SET</span> autocommit <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <br>REPEAT  <br><span class="hljs-keyword">SET</span> i <span class="hljs-operator">=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept ( deptname,address,ceo ) <span class="hljs-keyword">VALUES</span> (rand_string(<span class="hljs-number">8</span>),rand_string(<span class="hljs-number">10</span>),rand_num(<span class="hljs-number">1</span>,<span class="hljs-number">500000</span>));  <br>UNTIL i <span class="hljs-operator">=</span> max_num  <br><span class="hljs-keyword">END</span> REPEAT;  <br><span class="hljs-keyword">COMMIT</span>;  <br><span class="hljs-keyword">END</span>$$<br> <br><span class="hljs-comment">-- 删除</span><br><span class="hljs-comment">-- DELIMITER ;</span><br><span class="hljs-comment">-- drop PROCEDURE insert_dept;</span><br></code></pre></td></tr></table></figure><h3 id="3-4、调用存储过程"><a href="#3-4、调用存储过程" class="headerlink" title="3.4、调用存储过程"></a>3.4、调用存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 执行存储过程，往dept表添加1万条数据</span><br><span class="hljs-keyword">CALL</span> insert_dept(<span class="hljs-number">10000</span>); <br><br><span class="hljs-comment">-- 执行存储过程，往emp表添加50万条数据，编号从100000开始</span><br><span class="hljs-keyword">CALL</span> insert_emp(<span class="hljs-number">100000</span>,<span class="hljs-number">500000</span>); <br></code></pre></td></tr></table></figure><h3 id="3-5、批量删除表索引"><a href="#3-5、批量删除表索引" class="headerlink" title="3.5、批量删除表索引"></a>3.5、批量删除表索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 批量删除某个表上的所有索引 建议使用可视化工具执行</span><br>DELIMITER $$<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> `proc_drop_index`(dbname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>),tablename <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">DECLARE</span> done <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">DECLARE</span> ct <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">DECLARE</span> _index <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">DECLARE</span> _cur <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> index_name <span class="hljs-keyword">FROM</span> information_schema.STATISTICS <span class="hljs-keyword">WHERE</span> table_schema<span class="hljs-operator">=</span>dbname <span class="hljs-keyword">AND</span> table_name<span class="hljs-operator">=</span>tablename <span class="hljs-keyword">AND</span> seq_in_index<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> index_name <span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;PRIMARY&#x27;</span>  ;<br><span class="hljs-keyword">DECLARE</span> CONTINUE HANDLER <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">NOT</span> FOUND <span class="hljs-keyword">set</span> done<span class="hljs-operator">=</span><span class="hljs-number">2</span> ;      <br><span class="hljs-keyword">OPEN</span> _cur;<br><span class="hljs-keyword">FETCH</span> _cur <span class="hljs-keyword">INTO</span> _index;<br>WHILE  _index<span class="hljs-operator">&lt;&gt;</span><span class="hljs-string">&#x27;&#x27;</span> DO <br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@str</span> <span class="hljs-operator">=</span> CONCAT(&quot;drop index &quot;,_index,&quot; on &quot;,tablename ); <br><span class="hljs-keyword">PREPARE</span> sql_str <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@str</span> ;<br><span class="hljs-keyword">EXECUTE</span> sql_str;<br><span class="hljs-keyword">DEALLOCATE</span> <span class="hljs-keyword">PREPARE</span> sql_str;<br><span class="hljs-keyword">SET</span> _index<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span>; <br><span class="hljs-keyword">FETCH</span> _cur <span class="hljs-keyword">INTO</span> _index; <br><span class="hljs-keyword">END</span> WHILE;<br><span class="hljs-keyword">CLOSE</span> _cur;<br><span class="hljs-keyword">END</span>$$<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 执行批量删除：dbname 库名称, tablename 表名称</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;dbname&quot;,&quot;tablename&quot;); <br></code></pre></td></tr></table></figure><h3 id="3-6、开启SQL执行时间的显示"><a href="#3-6、开启SQL执行时间的显示" class="headerlink" title="3.6、开启SQL执行时间的显示"></a>3.6、开启SQL执行时间的显示</h3><p><code>为了方便后面的测试中随时查看SQL运行的时间，测试索引优化后的效果，我们开启profiling</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 显示sql语句执行时间</span><br><span class="hljs-keyword">SET</span> profiling <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">SHOW</span> VARIABLES  <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%profiling%&#x27;</span>;<br><span class="hljs-keyword">SHOW</span> PROFILES;<br></code></pre></td></tr></table></figure><h2 id="4、单表索引失效案例"><a href="#4、单表索引失效案例" class="headerlink" title="4、单表索引失效案例"></a>4、单表索引失效案例</h2><p>MySQL中<code>提高性能</code>的一个最有效的方式是对数据表<code>设计合理的索引</code>。索引提供了高效访问数据的方法，并且加快查询的速度，因此索引对查询的速度有着至关重要的影响。</p><p><strong>我们创建索引后，用不用索引，最终是优化器说了算。<code>优化器会基于开销选择索引，怎么开销小就怎么来。</code>不是基于规则，也不是基于语义。</strong></p><p><strong>另外SQL语句是否使用索引，和数据库的版本、数据量、数据选择度（查询中选择的列数）运行环境都有关系。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_name <span class="hljs-keyword">ON</span> emp(`name`);<br></code></pre></td></tr></table></figure><h3 id="4-1、计算、函数导致索引失效"><a href="#4-1、计算、函数导致索引失效" class="headerlink" title="4.1、计算、函数导致索引失效"></a>4.1、计算、函数导致索引失效</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 显示查询分析</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.name  <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;abc%&#x27;</span>;<br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">LEFT</span>(emp.name,<span class="hljs-number">3</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">--索引失效</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710212756603.png"></p><!--![](MySQL8高级-架构和优化/image-20220710212756603.png)--><h3 id="4-2、LIKE以-开头索引失效"><a href="#4-2、LIKE以-开头索引失效" class="headerlink" title="4.2、LIKE以%开头索引失效"></a>4.2、LIKE以%开头索引失效</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%ab%&#x27;</span>; <span class="hljs-comment">--索引失效</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710213641577.png"></p><!--![](MySQL8高级-架构和优化/image-20220710213641577.png)--><blockquote><p><strong>拓展：Alibaba《Java开发手册》</strong></p><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。 电商中全文检索es 不应该mysql</p></blockquote><h3 id="4-3、不等于-或者-索引失效"><a href="#4-3、不等于-或者-索引失效" class="headerlink" title="4.3、不等于(!&#x3D; 或者&lt;&gt;)索引失效"></a>4.3、不等于(!&#x3D; 或者&lt;&gt;)索引失效</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abc&#x27;</span> ;<br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.name <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;abc&#x27;</span> ; <span class="hljs-comment">--索引失效</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710214317491.png"></p><!--![](MySQL8高级-架构和优化/image-20220710214317491.png)--><h3 id="4-4、IS-NOT-NULL-和-IS-NULL"><a href="#4-4、IS-NOT-NULL-和-IS-NULL" class="headerlink" title="4.4、IS NOT NULL 和 IS NULL"></a>4.4、IS NOT NULL 和 IS NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.name <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.name <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">--索引失效</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710214840703.png"></p><!--![](MySQL8高级-架构和优化/image-20220710214840703.png)--><p><strong>注意：</strong>当数据库中的数据的索引列的<code>NULL值达到比较高的比例的时候</code>，即使在IS NOT NULL 的情况下 MySQL的查询优化器会选择使用索引，<code>此时type的值是range（范围查询）</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将 id&gt;20000 的数据的 name 值改为 NULL</span><br><span class="hljs-keyword">UPDATE</span> emp <span class="hljs-keyword">SET</span> `name` <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">WHERE</span> `id` <span class="hljs-operator">&gt;</span> <span class="hljs-number">20000</span>;<br><br><span class="hljs-comment">-- 执行查询分析，可以发现 IS NOT NULL 使用了索引</span><br><span class="hljs-comment">-- 具体多少条记录的值为NULL可以使索引在IS NOT NULL的情况下生效，由查询优化器的算法决定</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.name <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220711175040606.png"></p><!--![](MySQL8高级-架构和优化/image-20220711175040606.png)--><p><strong>测试完将name的值改回来</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> emp <span class="hljs-keyword">SET</span> `name` <span class="hljs-operator">=</span> rand_string(<span class="hljs-number">6</span>) <span class="hljs-keyword">WHERE</span> `id` <span class="hljs-operator">&gt;</span> <span class="hljs-number">20000</span>;<br></code></pre></td></tr></table></figure><h3 id="4-5、类型转换导致索引失效"><a href="#4-5、类型转换导致索引失效" class="headerlink" title="4.5、类型转换导致索引失效"></a>4.5、类型转换导致索引失效</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123&#x27;</span>; <br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> name<span class="hljs-operator">=</span> <span class="hljs-number">123</span>; <span class="hljs-comment">--索引失效</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220710215217274.png"></p><!--![](MySQL8高级-架构和优化/image-20220710215217274.png)--><h3 id="4-6、全值匹配我最爱"><a href="#4-6、全值匹配我最爱" class="headerlink" title="4.6、全值匹配我最爱"></a>4.6、全值匹配我最爱</h3><p><strong>准备：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 首先删除之前创建的索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);<br><span class="hljs-keyword">drop</span> index idx_name <span class="hljs-keyword">on</span> emp;<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>为以下查询语句创建哪种索引效率最高</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询分析</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.age <span class="hljs-operator">=</span> <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> deptid <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcd&#x27;</span>;<br><span class="hljs-comment">-- 执行SQL</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.age <span class="hljs-operator">=</span> <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> deptid <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcd&#x27;</span>;<br><span class="hljs-comment">-- 查看执行时间</span><br><span class="hljs-keyword">SHOW</span> PROFILES;<br></code></pre></td></tr></table></figure><p><strong>创建索引并重新执行以上测试：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建索引：分别创建以下三种索引的一种，并分别进行以上查询分析</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_age <span class="hljs-keyword">ON</span> emp(age);<br><span class="hljs-keyword">CREATE</span> INDEX idx_age_deptid <span class="hljs-keyword">ON</span> emp(age,deptid);<br><span class="hljs-keyword">CREATE</span> INDEX idx_age_deptid_name <span class="hljs-keyword">ON</span> emp(age,deptid,`name`);<br></code></pre></td></tr></table></figure><p><strong>结论：</strong>可以发现最高效的查询应用了联合索引 <code>idx_age_deptid_name</code> </p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220711190731030.png"></p><!--![](MySQL8高级-架构和优化/image-20220711190731030.png)--><h3 id="4-7、最佳左前缀法则"><a href="#4-7、最佳左前缀法则" class="headerlink" title="4.7、最佳左前缀法则"></a>4.7、最佳左前缀法则</h3><p><strong>准备：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 首先删除之前创建的索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);<br><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_age_deptid_name <span class="hljs-keyword">ON</span> emp(age,deptid,`name`);<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>以下这些SQL语句能否命中 <code>idx_age_deptid_name</code> 索引，可以匹配多少个索引字段</p><p><strong>测试：</strong></p><ul><li>如果索引了多列，要遵守最左前缀法则。即查询从<code>索引的最左前列</code>开始并且不跳过索引中的列。</li><li>过滤条件要使用索引，必须按照<code>索引建立时的顺序，依次满足</code>，一旦跳过某个字段，索引后面的字段都无法被使用。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.age<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcd&#x27;</span> ;<br><span class="hljs-comment">-- EXPLAIN结果：</span><br><span class="hljs-comment">-- key_len：5 只使用了age索引</span><br><span class="hljs-comment">-- 索引查找的顺序为 age、deptid、name，查询条件中不包含deptid，无法使用deptid和name索引</span><br><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.deptid<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcd&#x27;</span>;<br><span class="hljs-comment">-- EXPLAIN结果：</span><br><span class="hljs-comment">-- type： ALL， 执行了全表扫描</span><br><span class="hljs-comment">-- key_len： NULL， 索引失效</span><br><span class="hljs-comment">-- 索引查找的顺序为 age、deptid、name，查询条件中不包含age，无法使用整个索引</span><br><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.age <span class="hljs-operator">=</span> <span class="hljs-number">30</span> <span class="hljs-keyword">AND</span> emp.deptid<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcd&#x27;</span>;<br><span class="hljs-comment">-- EXPLAIN结果：</span><br><span class="hljs-comment">-- 索引查找的顺序为 age、deptid、name，匹配所有索引字段</span><br><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.deptid<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcd&#x27;</span> <span class="hljs-keyword">AND</span> emp.age <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><span class="hljs-comment">-- EXPLAIN结果：</span><br><span class="hljs-comment">-- 索引查找的顺序为 age、deptid、name，匹配所有索引字段</span><br></code></pre></td></tr></table></figure><h3 id="4-8、索引中范围条件右边的列失效"><a href="#4-8、索引中范围条件右边的列失效" class="headerlink" title="4.8、索引中范围条件右边的列失效"></a>4.8、索引中范围条件右边的列失效</h3><p><strong>准备：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 首先删除之前创建的索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);<br></code></pre></td></tr></table></figure><p><strong>问题：</strong>为以下查询语句创建哪种索引效率最高</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.age<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">AND</span> emp.deptId<span class="hljs-operator">&gt;</span><span class="hljs-number">1000</span> <span class="hljs-keyword">AND</span> emp.name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abc&#x27;</span>; <br></code></pre></td></tr></table></figure><p><strong>测试1：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建索引并执行以上SQL语句的EXPLAIN</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_age_deptid_name <span class="hljs-keyword">ON</span> emp(age,deptid,`name`);<br><span class="hljs-comment">-- key_len：10， 只是用了 age 和 deptid索引，name失效</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>当我们修改deptId的范围条件的时候，例如deptId&gt;100，那么整个索引失效，MySQL的优化器基于成本计算后认为没必要使用索引了，所以就进行了全表扫描。<code>（注意：因为表中的数据是随机生成的，因此实际测试中根据具体数据的不同测试的结果也会不一样，最终是否使用索引由优化器决定）</code></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220711215826013.png"></p><!--![](MySQL8高级-架构和优化/image-20220711215826013.png)--><p><strong>测试2：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建索引并执行以上SQL语句的EXPLAIN（将deptid索引的放在最后）</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_age_name_deptid <span class="hljs-keyword">ON</span> emp(age,`name`,deptid);<br><span class="hljs-comment">-- 使用了完整的索引</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712080350120.png"></p><!--![](MySQL8高级-架构和优化/image-20220712080350120.png)--><p><strong>补充：</strong>以上两个索引都存在的时候，MySQL优化器会自动选择最好的方案</p><h2 id="5、关联查询优化"><a href="#5、关联查询优化" class="headerlink" title="5、关联查询优化"></a>5、关联查询优化</h2><h3 id="5-1、数据准备"><a href="#5-1、数据准备" class="headerlink" title="5.1、数据准备"></a>5.1、数据准备</h3><p>创建两张表，并分插入16条和20条数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 分类</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `class` (<br>`id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`card` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>);<br><span class="hljs-comment">-- 图书</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `book` (<br>`bookid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`card` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY</span> KEY (`bookid`)<br>);<br> <br><span class="hljs-comment">-- 插入16条记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> class(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br> <br><span class="hljs-comment">-- 插入20条记录</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(card) <span class="hljs-keyword">VALUES</span>(<span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">1</span> <span class="hljs-operator">+</span> (RAND() <span class="hljs-operator">*</span> <span class="hljs-number">20</span>)));<br></code></pre></td></tr></table></figure><h3 id="5-2、左外连接"><a href="#5-2、左外连接" class="headerlink" title="5.2、左外连接"></a>5.2、左外连接</h3><p><strong>没有创建索引前的测试：</strong>进行了<code>全表扫描</code>，查询次数为<code>16*20</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> class <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> book <span class="hljs-keyword">ON</span> class.card <span class="hljs-operator">=</span> book.card;<br><span class="hljs-comment">-- 左表class：驱动表、右表book：被驱动表</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712194001008.png"></p><!--![](MySQL8高级-架构和优化/image-20220712194001008.png)--><p><strong>测试1：</strong>在驱动表上创建索引：进行了<code>全索引扫描</code>，查询次数是<code>16*20</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_class_card <span class="hljs-keyword">ON</span> class(card);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712194239217.png"></p><!--![](MySQL8高级-架构和优化/image-20220712194239217.png)--><p><strong>测试2：</strong>在被驱动表上创建索引：可以避免全表扫描，查询次数是<code>16*1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 首先删除之前创建的索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;class&quot;);<br><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_book_card <span class="hljs-keyword">ON</span> book(card);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712194515757.png"></p><!--![](MySQL8高级-架构和优化/image-20220712194515757.png)--><p><strong>测试3：</strong>同时给两张表添加索引：充分利用了索引，查询次数是<code>16*1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 已经有了book索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_class_card <span class="hljs-keyword">ON</span> class(card);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712194722843.png"></p><!--![](MySQL8高级-架构和优化/image-20220712194722843.png)--><blockquote><p><strong>结论：</strong></p><p>针对两张表的连接条件涉及的列，索引要创建在被驱动表上，驱动表尽量是小表</p><ul><li><p>如果驱动表上没有where过滤条件</p><ul><li>当驱动表的连接条件没有索引时，驱动表是全表扫描</li><li>当针对驱动表的连接条件建立索引时，驱动表依然要进行全索引扫描</li><li>因此，此时建立在驱动表上的连接条件上的索引是没有太大意义的</li></ul></li><li><p>如果驱动表上有where过滤条件，那么针对过滤条件创建的索引是有必要的</p></li></ul></blockquote><h3 id="5-3、内连接"><a href="#5-3、内连接" class="headerlink" title="5.3、内连接"></a>5.3、内连接</h3><p><strong>测试：</strong>将前面外连接中的LEFT JOIN 变成 INNER JOIN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 换成inner join</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> class <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> book <span class="hljs-keyword">ON</span> class.card<span class="hljs-operator">=</span>book.card;<br><span class="hljs-comment">-- 交换class和book的位置</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> book <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> class <span class="hljs-keyword">ON</span> class.card<span class="hljs-operator">=</span>book.card;<br></code></pre></td></tr></table></figure><p><strong>都有索引的情况下：</strong>查询优化器自动选择数据量小的表做为驱动表</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712195140151.png"></p><!--![](MySQL8高级-架构和优化/image-20220712195140151.png)--><p><strong>class表有索引的情况下：</strong>book表是驱动表</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712205137594.png"></p><!--![](MySQL8高级-架构和优化/image-20220712205137594.png)--><p><strong>book表有索引的情况下：</strong>class表是驱动表</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712204913627.png"></p><!--![](MySQL8高级-架构和优化/image-20220712204913627.png)--><p><strong>都没有索引的情况下：</strong>选择数据量小的表做为驱动表</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712205030216.png"></p><!--![](MySQL8高级-架构和优化/image-20220712205030216.png)--><blockquote><p><strong>结论：</strong>发现即使交换表的位置，MySQL优化器也会自动选择驱动表，自动选择驱动表的原则是：索引创建在被驱动表上，驱动表是小表。</p></blockquote><h3 id="5-4、扩展掌门人的练习"><a href="#5-4、扩展掌门人的练习" class="headerlink" title="5.4、扩展掌门人的练习"></a>5.4、扩展掌门人的练习</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 首先删除之前创建的索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);<br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;dept&quot;);<br></code></pre></td></tr></table></figure><p><strong>1.三表左连接方式:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 员工表(t_emp)、部门表(t_dept)、ceo(t_emp)表 关联查询</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> emp.name, ceo.name <span class="hljs-keyword">AS</span> ceoname <br><span class="hljs-keyword">FROM</span> emp<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> emp ceo <span class="hljs-keyword">ON</span> dept.ceo <span class="hljs-operator">=</span> ceo.id;<br></code></pre></td></tr></table></figure><p>一趟查询，用到了主键索引，<code>效果最佳</code></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712210059275.png"></p><!--![](MySQL8高级-架构和优化/image-20220712210059275.png)--><p><strong>2.子查询方式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> emp.name,<br>(<span class="hljs-keyword">SELECT</span> emp.name <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp.id <span class="hljs-operator">=</span> dept.ceo) <span class="hljs-keyword">AS</span> ceoname<br><span class="hljs-keyword">FROM</span> emp <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id;<br></code></pre></td></tr></table></figure><p>两趟查询，用到了主键索引，<code>跟第一种比，效果稍微差点</code>。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712210641833.png"></p><!--![](MySQL8高级-架构和优化/image-20220712210641833.png)--><p><strong>3.临时表连接方式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> emp_with_ceo_id.name, emp.name <span class="hljs-keyword">AS</span> ceoname <br><span class="hljs-keyword">FROM</span> <br>( <br><span class="hljs-keyword">SELECT</span> emp.name, dept.ceo <br><span class="hljs-keyword">FROM</span> emp <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id <br>) emp_with_ceo_id<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> emp <span class="hljs-keyword">ON</span> emp_with_ceo_id.ceo <span class="hljs-operator">=</span> emp.id;<br></code></pre></td></tr></table></figure><p>查询一趟，<code>MySQL查询优化器将衍生表查询转换成了连接表查询</code>，速度堪比第一种方式</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712211307003.png"></p><!--![](MySQL8高级-架构和优化/image-20220712211307003.png)--><p><strong>MySQL5.5查询结果：</strong>两趟查询，先查询a,b产生衍生表ab,衍生表作为驱动表，c作为被驱动表，使用到c表主键。效果比后面一种要好一点。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/3c5034f7-69f3-4381-9354-70f4a4220165.jpg"></p><!--![](MySQL8高级-架构和优化/3c5034f7-69f3-4381-9354-70f4a4220165.jpg)--><p><strong>4、临时表连接方式2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> emp.name, ceo.ceoname <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span><br>( <br><span class="hljs-keyword">SELECT</span> emp.deptId <span class="hljs-keyword">AS</span> deptId, emp.name <span class="hljs-keyword">AS</span> ceoname <br><span class="hljs-keyword">FROM</span> emp <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> dept <span class="hljs-keyword">ON</span> emp.id <span class="hljs-operator">=</span> dept.ceo <br>) ceo<br><span class="hljs-keyword">ON</span> emp.deptId <span class="hljs-operator">=</span> ceo.deptId;<br></code></pre></td></tr></table></figure><p>查询一趟，<code>MySQL查询优化器将衍生表查询转换成了连接表查询</code>，但是只有一个表使用了索引，数据检索的次数稍多，<code>性能最差</code>。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220712211909850.png"></p><!--![](MySQL8高级-架构和优化/image-20220712211909850.png)--><p><strong>MySQL5.5查询结果：</strong>两趟查询，先查询b, a产生衍生表ab,衍生表作为被驱动表，衍生表无法建立索引，也就无法优化; 所以，这种语句是性能最差的。</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/f3725755-bbbf-44da-99c7-20fc04d86c5d.jpg"></p><!--![](MySQL8高级-架构和优化/f3725755-bbbf-44da-99c7-20fc04d86c5d.jpg)--><h3 id="5-5、总结"><a href="#5-5、总结" class="headerlink" title="5.5、总结"></a>5.5、总结</h3><ul><li><p>保证被驱动表的JOIN字段已经创建了索引。</p></li><li><p>需要JOIN 的字段，数据类型保持绝对一致。</p></li><li><p>LEFT JOIN 时，选择小表作为驱动表，大表作为被驱动表 。减少外层循环的次数。</p></li><li><p>INNER JOIN 时，MySQL会自动将小结果集的表选为驱动表 。选择相信MySQL优化策略。</p></li><li><p>能够直接多表关联的尽量直接关联，不用子查询。(减少查询的趟数)</p></li><li><p>衍生表建不了索引（MySQL5.5）</p></li></ul><h2 id="6、子查询优化"><a href="#6、子查询优化" class="headerlink" title="6、子查询优化"></a>6、子查询优化</h2><p><strong>查询非掌门人</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 不推荐</span><br><span class="hljs-comment">-- 查询员工，这些员工的id没在（掌门人id列表中）</span><br><span class="hljs-comment">-- 【查询不是CEO的员工】</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp emp <span class="hljs-keyword">WHERE</span> emp.id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> <br>(<span class="hljs-keyword">SELECT</span> dept.ceo <span class="hljs-keyword">FROM</span> t_dept dept <span class="hljs-keyword">WHERE</span> dept.ceo <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220809115231228.png"></p><!--![](MySQL8高级-架构和优化/image-20220809115231228.png)--><p>注意：使用大表测试更加直观！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 推荐</span><br><span class="hljs-comment">-- 按照集合查询</span><br><span class="hljs-keyword">SELECT</span> emp.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t_emp emp <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept dept <span class="hljs-keyword">ON</span> emp.id <span class="hljs-operator">=</span> dept.ceo <span class="hljs-keyword">WHERE</span> dept.id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220809115259956.png"></p><!--![](MySQL8高级-架构和优化/image-20220809115259956.png)--><p>也可以为ceo添加一个索引字段</p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220809115203460.png"></p><!--![](MySQL8高级-架构和优化/image-20220809115203460.png)--><blockquote><p><strong>结论：</strong>尽量不要使用NOT IN 或者 NOT EXISTS，用LEFT JOIN xxx ON xx &#x3D; xx WHERE xx IS NULL替代</p></blockquote><h2 id="7、排序优化"><a href="#7、排序优化" class="headerlink" title="7、排序优化"></a>7、排序优化</h2><h3 id="7-1、索引失效的情况"><a href="#7-1、索引失效的情况" class="headerlink" title="7.1、索引失效的情况"></a>7.1、索引失效的情况</h3><blockquote><p><strong>以下三种情况不走索引：</strong></p><ol><li><p>无过滤，不索引</p></li><li><p>顺序错，不索引</p></li><li><p>方向反，不索引</p></li></ol></blockquote><p><strong>准备：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除现有索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);<br><span class="hljs-comment">-- 创建索引</span><br><span class="hljs-keyword">CREATE</span> INDEX idx_age_deptid_name <span class="hljs-keyword">ON</span> emp (age,deptid,`name`);<br></code></pre></td></tr></table></figure><p><strong>无过滤，不索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 没有使用索引：</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age,deptid;<br><br><span class="hljs-comment">-- 使用了索引：order by想使用索引，必须有过滤条件，索引才能生效，limit也可以看作是过滤条件</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age,deptid LIMIT <span class="hljs-number">10</span>; <br></code></pre></td></tr></table></figure><p><strong>顺序错，不索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 排序使用了索引：</span><br><span class="hljs-comment">-- 注意：key_len = 5是where语句使用age索引的标记，order by语句使用索引不在key_len中体现。             </span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> deptid;<br><br><span class="hljs-comment">-- 排序使用了索引：</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> deptid, `name`; <br><br><span class="hljs-comment">-- 排序没有使用索引：因为索引列中不存在empno</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> deptid, empno;<br><br><span class="hljs-comment">-- 排序没有使用索引：order by 后的排序条件的顺序，与索引顺序不一致</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `name`, deptid;<br><br><span class="hljs-comment">-- 排序没有使用索引：出现的顺序要和复合索引中的列的顺序一致！</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> deptid<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age;<br></code></pre></td></tr></table></figure><p><strong>方向反，不索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 排序使用了索引：排序条件和索引一致，并方向相同，可以使用索引</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> deptid <span class="hljs-keyword">DESC</span>, `name` <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-comment">-- 没有使用索引：两个排序条件方向相反</span><br>EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">=</span><span class="hljs-number">45</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> deptid <span class="hljs-keyword">ASC</span>, `name` <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h3 id="7-2、索引优化案例"><a href="#7-2、索引优化案例" class="headerlink" title="7.2、索引优化案例"></a>7.2、索引优化案例</h3><blockquote><p>排序优化的目的是，去掉 Extra 中的 using filesort（手工排序）</p></blockquote><p><strong>准备：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除现有索引</span><br><span class="hljs-keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);<br><span class="hljs-comment">-- 这个例子结合 show profiles; 查看运行时间</span><br><span class="hljs-keyword">SET</span> profiling <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><strong>需求：</strong>查询 年龄为30岁的，且员工编号小于101000的用户，按用户名称排序 </p><p><strong>测试1：</strong>很显然，type 是 ALL，即最坏的情况。Extra 里还出现了 Using filesort,也是最坏的情况。优化是必须的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age <span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">AND</span> empno <span class="hljs-operator">&lt;</span><span class="hljs-number">101000</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `name`;<br><span class="hljs-comment">-- 然后查看一下SQL的执行时间</span><br></code></pre></td></tr></table></figure><p><code>性能测试：</code><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713083659641.png"></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713011923316.png"></p><!--![](MySQL8高级-架构和优化/image-20220713083659641.png)![](MySQL8高级-架构和优化/image-20220713011923316.png)--><p><strong>优化思路：</strong> 尽量让where的过滤条件和排序使用上索引</p><p><strong>step1：</strong> 我们建一个三个字段的组合索引可否？ </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX idx_age_empno_name <span class="hljs-keyword">ON</span> emp (age,empno,`name`);<br></code></pre></td></tr></table></figure><p>最后的name索引没有用到，出现了Using filesort。原因是，因为empno是一个范围过滤，所以索引后面的字段不会再使用索引了。所以我们建一个3值索引是没有意义的 </p><p><code>性能测试：</code><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713083739538.png"></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713013325047.png"></p><!--![](MySQL8高级-架构和优化/image-20220713083739538.png)![](MySQL8高级-架构和优化/image-20220713013325047.png)--><p><strong>step2：</strong>那么我们先删掉这个索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX idx_age_empno_name <span class="hljs-keyword">ON</span> emp;<br></code></pre></td></tr></table></figure><p>为了去掉filesort我们可以把索引建成，也就是说empno 和name这个两个字段我只能二选其一。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX idx_age_name <span class="hljs-keyword">ON</span> emp(age,`name`);<br></code></pre></td></tr></table></figure><p>这样我们优化掉了 using filesort。但是经过测试，性能反而下降</p><p><code>性能测试：</code><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713083832940.png"></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713082858826.png">&#96;</p><!--![](MySQL8高级-架构和优化/image-20220713083832940.png)![](MySQL8高级-架构和优化/image-20220713082858826.png)--><p><strong>step3：</strong>如果我们选择那个范围过滤，而放弃排序上的索引呢?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX idx_age_name <span class="hljs-keyword">ON</span> emp;<br><span class="hljs-keyword">CREATE</span> INDEX idx_age_empno <span class="hljs-keyword">ON</span> emp(age,empno);<br></code></pre></td></tr></table></figure><p>执行原始的sql语句，查看性能，结果竟然有 filesort的 sql 运行速度，超过了已经优化掉 filesort的 sql，而且快了好多倍。何故？</p><p><code>性能测试：</code><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713083927522.png"></p><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713083429530.png">&#96;</p><!--![](MySQL8高级-架构和优化/image-20220713083927522.png)![](MySQL8高级-架构和优化/image-20220713083429530.png)--><p><strong>原因：</strong>所有的排序都是在条件过滤之后才执行的，所以，如果条件过滤掉大部分数据的话，剩下几百几千条数据进行排序其实并不是很消耗性能，即使索引优化了排序，但实际提升性能很有限。 相对的 <code>empno&lt;101000</code> 这个条件，如果没有用到索引的话，要对几万条的数据进行扫描，这是非常消耗性能的，所以索引放在这个字段上性价比最高，是最优选择。</p><blockquote><p><strong>结论：</strong>当【范围条件】和【group by 或者 order by】的字段出现二选一时，优先观察条件字段的过滤数量，如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。反之，亦然。</p><p>也可以将选择权交给MySQL：索引同时存在，mysql自动选择最优的方案：（对于这个例子，mysql选择idx_age_empno），但是，随着数据量的变化，选择的索引也会随之变化的。</p></blockquote><h3 id="7-3、双路排序和单路排序"><a href="#7-3、双路排序和单路排序" class="headerlink" title="7.3、双路排序和单路排序"></a>7.3、双路排序和单路排序</h3><p>如果排序没有使用索引，引起了filesort（手工排序），那么filesort有两种算法</p><ul><li>双路排序</li><li>单路排序</li></ul><p><strong>双路排序（慢）</strong></p><p><code>MySQL 4.1之前是使用双路排序，</code>字面意思就是<code>两次扫描磁盘</code>，最终得到数据。</p><ul><li><p>首先，根据行指针<code>从磁盘</code>取<code>排序字段</code>，在buffer进行排序。</p></li><li><p>再按照排序字段的顺序<code>从磁盘</code>取<code>其他字段</code>。</p></li></ul><p><code>取一批数据，要对磁盘进行两次扫描。</code>众所周知，IO是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序。</p><p><strong>单路排序（快）</strong></p><ul><li><p>从磁盘读取查询需要的<code>所有字段</code>，按照order by列在buffer对它们进行排序。</p></li><li><p>然后扫描排序后的列表进行输出。</p></li></ul><p>它的效率更快一些，因为<code>只读取一次磁盘</code>，避免了第二次读取数据。<code>并且把随机IO变成了顺序IO</code>。但是它会<code>使用更多的空间</code>， 因为它把每一行都保存在内存中了。</p><p><strong>结论及引申出的问题</strong></p><ul><li>单路比多路要多占用更多内存空间</li><li>因为单路是把所有字段都取出，所以有可能取出的数据的总大小超出了<code>sort_buffer_size</code>的容量，导致每次只能取<code>sort_buffer_size</code>容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排……从而多次I&#x2F;O。</li><li><code>单路本来想省一次I/O操作，反而导致了大量的I/O操作，反而得不偿失。</code></li></ul><p><strong>优化策略</strong></p><ul><li><p><code>减少select 后面的查询的字段：</code>Order by时<code>select * 是一个大忌</code>。查询字段过多会占用sort_buffer_size的容量。</p></li><li><p><code>增大sort_buffer_size参数的设置：</code>当然，要根据系统的能力去提高，因为这个参数是针对每个进程（connection）的 1M-8M之间调整。 MySQL8.0，InnoDB存储引擎默认值是1048576字节，1MB。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%sort_buffer_size%&#x27;</span>; <span class="hljs-comment">--默认1MB</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/ec4536a6-8738-4aeb-9edf-0e7d42187d86.png"></p><!--![](MySQL8高级-架构和优化/ec4536a6-8738-4aeb-9edf-0e7d42187d86.png)--><ul><li><code>增大max_length_for_sort_data参数的设置：</code>MySQL根据max_length_for_sort_data变量来确定使用哪种算法，默认值是4096字节，如果需要返回的列的总长度大于max_length_for_sort_data，使用双路排序算法，否则使用单路排序算法。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I&#x2F;O活动和低的处理器使用率。1024-8192之间调整。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%max_length_for_sort_data%&#x27;</span>; <span class="hljs-comment">--默认4K</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713124733970.png"></p><!--![](MySQL8高级-架构和优化/image-20220713124733970.png)--><p><strong>举例：</strong></p><p>1、如果数据总量很小（单路一次就可以读取所有数据），单条记录大小很大（大于4K，默认会使用双路排序），此时，可以增加max_length_for_sort_data的值，增加sort_buffer_size的值，让服务器默认使用单路排序。</p><p>2、如果数据总量很大（单路很多次IO才可以），单条记录大小很小（小于4K，默认会使用单路排序），此时，可以减小max_length_for_sort_data的值，让服务器默认使用双路排序。</p><h2 id="8、分组优化"><a href="#8、分组优化" class="headerlink" title="8、分组优化"></a>8、分组优化</h2><ul><li><code>group by 使用索引的原则几乎跟order by一致</code>。但是group by 即使没有过滤条件用到索引，也可以直接使用索引（Order By 必须有过滤条件才能使用上索引）</li><li>包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li></ul><h2 id="9、覆盖索引优化"><a href="#9、覆盖索引优化" class="headerlink" title="9、覆盖索引优化"></a>9、覆盖索引优化</h2><blockquote><p><strong>总结</strong></p><ul><li>禁止使用select *，禁止查询与业务无关字段</li><li>尽量利用覆盖索引</li></ul></blockquote><h2 id="10、优化小口诀"><a href="#10、优化小口诀" class="headerlink" title="10、优化小口诀"></a>10、优化小口诀</h2><blockquote><p>全值匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>like百分写最右，覆盖索引不写*；<br>不等空值还有or，索引失效要少用；<br>var引号不能丢，sql高级也不难；</p></blockquote><h1 id="第06章-慢查询日志"><a href="#第06章-慢查询日志" class="headerlink" title="第06章 慢查询日志"></a>第06章 慢查询日志</h1><h2 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h2><p>一种日志记录，查看哪些SQL超出了我们的最大忍耐时间值。</p><h2 id="2、开启慢查询日志参数"><a href="#2、开启慢查询日志参数" class="headerlink" title="2、开启慢查询日志参数"></a>2、开启慢查询日志参数</h2><h3 id="2-1、开启slow-query-log"><a href="#2-1、开启slow-query-log" class="headerlink" title="2.1、开启slow_query_log"></a>2.1、开启slow_query_log</h3><p>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <br></code></pre></td></tr></table></figure><p>然后我们再来查看下慢查询日志是否开启，以及慢查询日志文件的位置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%slow_query_log%&#x27;</span>; <br></code></pre></td></tr></table></figure><p><img src="/2024/04/28/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8%E9%AB%98%E7%BA%A7-%E6%9E%B6%E6%9E%84%E5%92%8C%E4%BC%98%E5%8C%96/image-20220713130039824.png"></p><!--![](MySQL8高级-架构和优化/image-20220713130039824.png)--><h3 id="2-2、修改long-query-time阈值"><a href="#2-2、修改long-query-time阈值" class="headerlink" title="2.2、修改long_query_time阈值"></a>2.2、修改long_query_time阈值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%long_query_time%&#x27;</span>; <span class="hljs-comment">-- 查看值：默认10秒</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> long_query_time<span class="hljs-operator">=</span><span class="hljs-number">0.1</span>; <span class="hljs-comment">-- 设置一个比较短的时间，便于测试</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>需要重新登录客户端</strong>使上面的设置生效</li><li>假如运行时间正好等于long_query_time的情况，并不会被记录下来。</li><li>也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。</li></ul><h3 id="2-3、日志分析工具"><a href="#2-3、日志分析工具" class="headerlink" title="2.3、日志分析工具"></a>2.3、日志分析工具</h3><p><strong>执行耗时sql：</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> emp;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> emp;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> deptid &gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><strong>查询慢查询记录数：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Slow_queries%&#x27;</span>; <br></code></pre></td></tr></table></figure><p><strong>查询日志：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">注意这个地方是容器中的<br>vim /var/lib/mysql/atguigu-slow.log<br></code></pre></td></tr></table></figure><p><strong>mysqldumpslow：</strong></p><p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。退出mysql命令行，执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查看mysqldumpslow的帮助信息</span><br>mysqldumpslow <span class="hljs-comment">--help</span><br><br><span class="hljs-comment">-- 工作常用参考</span><br><span class="hljs-comment">-- 1.得到返回记录集最多的10个SQL</span><br>mysqldumpslow <span class="hljs-operator">-</span>s r <span class="hljs-operator">-</span>t <span class="hljs-number">10</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>atguigu<span class="hljs-operator">-</span>slow.log<br><span class="hljs-comment">-- 2.得到访问次数最多的10个SQL</span><br>mysqldumpslow <span class="hljs-operator">-</span>s c <span class="hljs-operator">-</span>t <span class="hljs-number">10</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>atguigu<span class="hljs-operator">-</span>slow.log<br><span class="hljs-comment">-- 3.得到按照时间排序的前10条里面含有左连接的查询语句</span><br>mysqldumpslow <span class="hljs-operator">-</span>s t <span class="hljs-operator">-</span>t <span class="hljs-number">10</span> <span class="hljs-operator">-</span>g &quot;left join&quot; <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>atguigu<span class="hljs-operator">-</span>slow.log<br><span class="hljs-comment">-- 4.另外建议在使用这些命令时结合 | 和more 使用 ，否则语句过多有可能出现爆屏情况</span><br>mysqldumpslow <span class="hljs-operator">-</span>s r <span class="hljs-operator">-</span>t <span class="hljs-number">10</span> <span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>lib<span class="hljs-operator">/</span>mysql<span class="hljs-operator">/</span>atguigu<span class="hljs-operator">-</span>slow.log <span class="hljs-operator">|</span> more<br></code></pre></td></tr></table></figure><ul><li><p>-a: 不将数字抽象成N，字符串抽象成S</p></li><li><p>-s: 是表示按照何种方式排序；</p><ul><li><p>c: sql语句的访问次数</p></li><li><p>l: 锁定时间</p></li><li><p>r: 返回数据记录集的总数量</p></li><li><p>t: 查询时间</p></li><li><p>al:平均锁定时间</p></li><li><p>ar:平均返回记录数</p></li><li><p>at:平均查询时间</p></li></ul></li><li><p>-t: 即为返回前面多少条的数据；</p></li><li><p>-g: 后边搭配一个正则匹配模式，大小写不敏感的；</p></li></ul><h1 id="第07章-View视图"><a href="#第07章-View视图" class="headerlink" title="第07章 View视图"></a>第07章 View视图</h1><h2 id="1、是什么-1"><a href="#1、是什么-1" class="headerlink" title="1、是什么"></a>1、是什么</h2><ul><li>将一段查询sql封装为一个虚拟的表。 </li><li>这个虚拟表只保存了sql逻辑，不会保存任何查询结果。</li></ul><h2 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h2><ul><li>封装复杂sql语句，提高复用性</li><li>逻辑放在数据库上面，更新不需要发布程序，面对频繁的需求变更更灵活</li></ul><h2 id="3、适用场景"><a href="#3、适用场景" class="headerlink" title="3、适用场景"></a>3、适用场景</h2><ul><li>共用查询结果</li><li>报表</li></ul><h2 id="4、语法"><a href="#4、语法" class="headerlink" title="4、语法"></a>4、语法</h2><h3 id="4-1、创建"><a href="#4-1、创建" class="headerlink" title="4.1、创建"></a>4.1、创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name <br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<br><br><span class="hljs-comment">-- 例如：求所有人物对应的掌门名称</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> v_ceo <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> emp.name, ceo.name <span class="hljs-keyword">AS</span> ceoname <br><span class="hljs-keyword">FROM</span> t_emp emp<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_dept dept <span class="hljs-keyword">ON</span> emp.deptid <span class="hljs-operator">=</span> dept.id <br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> t_emp ceo <span class="hljs-keyword">ON</span> dept.ceo <span class="hljs-operator">=</span> ceo.id;<br></code></pre></td></tr></table></figure><h3 id="4-2、使用"><a href="#4-2、使用" class="headerlink" title="4.2、使用"></a>4.2、使用</h3><p><strong>查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> view_name; <br><br><span class="hljs-comment">-- 例如：</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> v_ceo; <br></code></pre></td></tr></table></figure><p><strong>更新</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> view_name <br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span><br><br><span class="hljs-comment">-- 建议直接删除重新创建</span><br></code></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_name;<br><br><span class="hljs-comment">-- 例如：</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> v_ceo;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL语句</title>
    <link href="/2024/04/21/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/mysql%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/04/21/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/mysql%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>DQL</p><p>数据查询语句</p><p>DDL</p><p>库表操作语句</p><p>DML</p><p>数据操作语句</p><h1 id="1、数据库的基本操作"><a href="#1、数据库的基本操作" class="headerlink" title="1、数据库的基本操作"></a>1、数据库的基本操作</h1><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database 数据库名;<br></code></pre></td></tr></table></figure><h3 id="查看所有的数据库"><a href="#查看所有的数据库" class="headerlink" title="查看所有的数据库"></a>查看所有的数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases; #有一个s，代表多个数据库<br></code></pre></td></tr></table></figure><h3 id="查看某个数据库的详细定义语句"><a href="#查看某个数据库的详细定义语句" class="headerlink" title="查看某个数据库的详细定义语句"></a>查看某个数据库的详细定义语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create database 数据库名;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create database 数据库名\G<br></code></pre></td></tr></table></figure><h3 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改数据库字符集和校对规则<br>ALTER DATABASE 数据库名称 CHARACTER SET 字符集名称 COLLATE 字符集对应校对规则;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER DATABASE atguigu_chapter3_two CHARACTER SET utf8 COLLATE utf8_general_ci;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>注意，</strong>&#x3D;&#x3D;修改数据库编码只会影响之后创建的表的默认编码，之前创建的表不会受影响。</p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></td></tr></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名;<br></code></pre></td></tr></table></figure><h1 id="2、数据表相关操作"><a href="#2、数据表相关操作" class="headerlink" title="2、数据表相关操作"></a>2、数据表相关操作</h1><h3 id="查看某个数据库的所有表格"><a href="#查看某个数据库的所有表格" class="headerlink" title="查看某个数据库的所有表格"></a>查看某个数据库的所有表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名;<br><br>show tables;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables from 数据库名;<br></code></pre></td></tr></table></figure><h3 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 数据表名称(<br>字段名  数据类型,<br>    字段名  数据类型<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table teacher(<br>tid int,<br>    tname varchar(5),<br>    salary double,<br>    weight double(5,2),<br>    birthday date,<br>    gender enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>    blood enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;),<br>tel char(11)<br>);<br></code></pre></td></tr></table></figure><h3 id="查看表的详细定义信息"><a href="#查看表的详细定义信息" class="headerlink" title="查看表的详细定义信息"></a>查看表的详细定义信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table 表名称;<br>show create table 表名称;<br></code></pre></td></tr></table></figure><h3 id="修改数据表编码"><a href="#修改数据表编码" class="headerlink" title="修改数据表编码"></a>修改数据表编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名称 CHARSET=新字符集 COLLATE=新校对规则;<br></code></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc 表名称;<br>describe 表名称;<br></code></pre></td></tr></table></figure><h3 id="删除表格，包括表结构和里面的数据"><a href="#删除表格，包括表结构和里面的数据" class="headerlink" title="删除表格，包括表结构和里面的数据"></a>删除表格，包括表结构和里面的数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table 表名称;<br></code></pre></td></tr></table></figure><h3 id="修改表结构：删除字段"><a href="#修改表结构：删除字段" class="headerlink" title="修改表结构：删除字段"></a>修改表结构：删除字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop 【column】 字段名称; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table teacher drop column weight;<br></code></pre></td></tr></table></figure><h3 id="修改表结构：增加字段"><a href="#修改表结构：增加字段" class="headerlink" title="修改表结构：增加字段"></a>修改表结构：增加字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 add 【column】 字段名称 数据类型; <br>alter table 表名称 add 【column】 字段名称 数据类型 first;<br>alter table 表名称 add 【column】 字段名称 数据类型 after 另一个字段;<br></code></pre></td></tr></table></figure><h3 id="修改表结构：修改字段的数据类型"><a href="#修改表结构：修改字段的数据类型" class="headerlink" title="修改表结构：修改字段的数据类型"></a>修改表结构：修改字段的数据类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 【column】 字段名称 新的数据类型; <br></code></pre></td></tr></table></figure><h3 id="修改表结构：修改字段的名称"><a href="#修改表结构：修改字段的名称" class="headerlink" title="修改表结构：修改字段的名称"></a>修改表结构：修改字段的名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 change 【column】 旧字段名称 新的字段名称 新的数据类型; <br></code></pre></td></tr></table></figure><h3 id="修改表结构：修改字段位置"><a href="#修改表结构：修改字段位置" class="headerlink" title="修改表结构：修改字段位置"></a>修改表结构：修改字段位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 【column】 字段名称 数据类型 first;<br>alter table 表名称 modify 【column】 字段名称 数据类型 after 另一个字段;<br></code></pre></td></tr></table></figure><h3 id="修改表名称（重命名表）"><a href="#修改表名称（重命名表）" class="headerlink" title="修改表名称（重命名表）"></a>修改表名称（重命名表）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 旧表名 rename 【to】 新表名;<br>rename table 旧表名称 to 新表名称;<br></code></pre></td></tr></table></figure><h2 id="添加语句"><a href="#添加语句" class="headerlink" title="添加语句"></a>添加语句</h2><h3 id="（1）添加一条记录到某个表中"><a href="#（1）添加一条记录到某个表中" class="headerlink" title="（1）添加一条记录到某个表中"></a>（1）添加一条记录到某个表中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 values(值列表); #值列表中的值的顺序、类型、个数必须与表结构一一对应<br></code></pre></td></tr></table></figure><h3 id="（2）添加一条记录到某个表中"><a href="#（2）添加一条记录到某个表中" class="headerlink" title="（2）添加一条记录到某个表中"></a>（2）添加一条记录到某个表中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 (字段列表) values(值列表); #值列表中的值的顺序、类型、个数必须与(字段列表)一一对应<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into teacher(tid,tname,salary,phone) values(3,&#x27;王五&#x27;,16000,&#x27;15789546586&#x27;);<br></code></pre></td></tr></table></figure><h3 id="（3）添加多条记录到某个表中"><a href="#（3）添加多条记录到某个表中" class="headerlink" title="（3）添加多条记录到某个表中"></a>（3）添加多条记录到某个表中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 values(值列表),(值列表),(值列表); #值列表中的值的顺序、类型、个数必须与表结构一一对应<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 (字段列表) values(值列表),(值列表),(值列表); #值列表中的值的顺序、类型、个数必须与(字段列表)一一对应<br></code></pre></td></tr></table></figure><h2 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h2><h3 id="修改所有行"><a href="#修改所有行" class="headerlink" title="修改所有行"></a>修改所有行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update 表名称 set 字段名 = 值, 字段名 = 值; #给所有行修改<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改所有人的薪资，都涨了1000<br>update teacher set salary = salary + 1000 ; <br></code></pre></td></tr></table></figure><h3 id="修改部分行"><a href="#修改部分行" class="headerlink" title="修改部分行"></a>修改部分行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update 表名称 set 字段名 = 值, 字段名 = 值 where 条件; #给满足条件的行修改<br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除部分行的数据"><a href="#删除部分行的数据" class="headerlink" title="删除部分行的数据"></a>删除部分行的数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from 表名称 where 条件;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from teacher where tname = &#x27;天琪&#x27;;<br></code></pre></td></tr></table></figure><h3 id="删除整张表的数据，但表结构留下"><a href="#删除整张表的数据，但表结构留下" class="headerlink" title="删除整张表的数据，但表结构留下"></a>删除整张表的数据，但表结构留下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from 表名称;<br></code></pre></td></tr></table></figure><h3 id="截断表，清空表中的数据，只有表结构"><a href="#截断表，清空表中的数据，只有表结构" class="headerlink" title="截断表，清空表中的数据，只有表结构"></a>截断表，清空表中的数据，只有表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">truncate 表名称;<br></code></pre></td></tr></table></figure><p>truncate表和delete表的区别：</p><p>delete是一条一条删除记录的。如果在事务中，事务提交之前支持回滚。（后面会讲事务）</p><p>truncate是把整个表drop，新建一张，效率更高。就算在事务中，也无法回滚。</p>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基础</title>
    <link href="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-MySQL数据库概述"><a href="#第1章-MySQL数据库概述" class="headerlink" title="第1章 MySQL数据库概述"></a>第1章 MySQL数据库概述</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><ul><li>数据库是什么？<ul><li>存储数据的地方</li><li>DB：数据库（Database）</li></ul></li><li>为什么要用数据库？<ul><li>因为应用程序产生的数据是在内存中的，如果程序退出或者是断电了，则数据就会消失。使用数据库是为了能够永久保存数据。当然这里指的是非内存数据库。</li></ul></li><li>数据的持久化？<ul><li>数据存储在内存中，虽然效率更高，但是一旦程序崩溃或断定，数据就会丢失</li><li>将数据写到可掉电式设备中，通常按一定格式写到文件中，才能永久保存</li></ul></li><li>用普通文件存储行不行？<ul><li>把数据写入到硬盘上的文件中，当然可以实现持久化的目标，但是不利于后期的检索和管理等。</li></ul></li><li>MySQL、Oracle、SqlServer是什么？<ul><li>MySQL、Oracle、SqlServer都是数据库管理系统（DBMS，Database Management System）是一种操纵和管理数据库的大型软件，例如建立、使用和维护数据库。</li></ul></li></ul><h2 id="1-2-表的关系"><a href="#1-2-表的关系" class="headerlink" title="1.2 表的关系"></a>1.2 表的关系</h2><p>在关系数据库管理系统中，很多表之间是有关系的，表之间的关系分为一对一关系、一对多关系和多对多关系。</p><p>1．一对一</p><p>该关系中第一个表中的一个行只可以与第二个表中的一个行相关，且第二个表中的一个行也只可以与第一个表中的一个行相关。</p><p>例如，”人员信息表”,”身份证表”,一个人只能有一个身份证号,反过来一个身份证号只能对应一个人</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-6772.png"></p><!--![](/MySQL8.0_SQL笔记/image-6772.png)--><p>2．一对多</p><p>第一个表中的一个行可以与第二个表中的一个或多个行相关，但第二个表中的一个行只可以与第一个表中的一个行相关。</p><p>例如，“商品分类表”和“商品信息表”。一个商品分类对应多个商品,反过来一个商品只属于一个分类,形成了一对多</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-6856.png"></p><!--![](MySQL8.0_SQL笔记/image-6856-17314082712371.png)--><p>3．多对多</p><p>该关系中第一个表中的一个行可以与第二个表中的一个或多个行相关。第二个表中的一个行也可以与第一个表中的一个或多个行相关。通常两个表的多对多关系会借助第三张表，转换为两个一对多的关系。</p><p>例如，选课系统的“学生信息表”和“课程信息表”是多对多关系。一个学生可以选择多门课，一门课程可以被多个学生选择，即“学生信息表”中一条记录可以与“课程信息表”多条记录对应，反过来“课程信息表”的一条记录也可以与“学生信息表”中多条记录对应。它们之间借助第三张“选课信息表”实现关联关系，而“学生信息表”与“选课信息表”是一对多关系，“课程信息表”与“选课信息表”也是一对多关系。“选课信息表”中“学号”字段与“学生信息表”中“学号”字段意义相同。“课程信息表”中“课程编号”字段与“课程信息表”中“课程编号”字段意义相同。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20211127202949314.png"></p><!--![](MySQL8.0_SQL笔记/image-20211127202949314-17314082762733.png)--><h1 id="第2章-MySQL卸载、安装、登录"><a href="#第2章-MySQL卸载、安装、登录" class="headerlink" title="第2章 MySQL卸载、安装、登录"></a>第2章 MySQL卸载、安装、登录</h1><h1 id="第3章-客户端使用演示"><a href="#第3章-客户端使用演示" class="headerlink" title="第3章 客户端使用演示"></a>第3章 客户端使用演示</h1><h2 id="3-1-命令行客户端"><a href="#3-1-命令行客户端" class="headerlink" title="3.1 命令行客户端"></a>3.1 命令行客户端</h2><h3 id="3-1-1-数据库"><a href="#3-1-1-数据库" class="headerlink" title="3.1.1 数据库"></a>3.1.1 数据库</h3><p>1、查看所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure><p>2、创建自己的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database 数据库名;<br><br>#创建atguigudb数据库<br>create database atguigudb;<br></code></pre></td></tr></table></figure><p>3、删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除atguigudb数据库<br>drop database atguigudb;<br></code></pre></td></tr></table></figure><p>4、使用自己的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名;<br><br>#使用atguigudb数据库<br>use atguigudb;<br></code></pre></td></tr></table></figure><p>说明：如果没有使用use语句，后面针对数据库的操作也没有加“数据名”的限定，那么会报“ERROR 1046 (3D000): No database selected”（没有选择数据库）</p><p>使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另一个数据库操作，那么要重新use。</p><h3 id="3-1-2-数据表"><a href="#3-1-2-数据表" class="headerlink" title="3.1.2 数据表"></a>3.1.2 数据表</h3><p>1、查看某个库的所有表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables;  #要求前面有use语句<br><br>show tables from 数据库名;<br></code></pre></td></tr></table></figure><p>2、创建新的表格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>字段名 数据类型<br>);<br></code></pre></td></tr></table></figure><p>说明：如果是最后一个字段，后面就用加逗号，因为逗号的作用是分割每个字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建学生表<br>create table student(<br>id int,<br>    name varchar(20)  #说名字最长不超过20个字符<br>);<br></code></pre></td></tr></table></figure><p>3、查看定义好的表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc 表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc student;<br></code></pre></td></tr></table></figure><p>4、添加一条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 values(值列表);<br><br>#添加两条记录到student表中<br>insert into student values(1,&#x27;张三&#x27;);<br>insert into student values(2,&#x27;李四&#x27;);<br></code></pre></td></tr></table></figure><p>5、查看一个表的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from 表名称;<br></code></pre></td></tr></table></figure><p>6、删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table 表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除学生表<br>drop table student;<br></code></pre></td></tr></table></figure><h3 id="3-1-3-导入数据"><a href="#3-1-3-导入数据" class="headerlink" title="3.1.3 导入数据"></a>3.1.3 导入数据</h3><p>在命令行客户端&#x3D;&#x3D;登录mysql&#x3D;&#x3D;，使用source指令导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; source d:\练习脚本.sql<br></code></pre></td></tr></table></figure><p>注意：在使用命令行导入SQL脚本之前，请使用记事本或NotePad++等文本编辑器打开SQL脚本查看SQL脚本中是否有USE语句，如果没有，那么在命令行中需要先使用USE语句指定具体的数据库，否则会报“No database selected”的错误。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20220222174512444.png"></p><!--![](MySQL8.0_SQL笔记/image-20220222174512444-17314082876785.png)--><h3 id="3-1-4-导出数据"><a href="#3-1-4-导出数据" class="headerlink" title="3.1.4 导出数据"></a>3.1.4 导出数据</h3><p>在命令行客户端不登录mysql，使用mysqldump命令。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mysqldump -u用戶名 -p密码 数据库名 &gt; 脚本名.sql<br>mysqldump -u用戶名 -p密码 数据库名 表名 &gt; 脚本名.sql<br></code></pre></td></tr></table></figure><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20220207094511797.png"></p><!--![](MySQL8.0_SQL笔记/image-20220222174512444-17314082918317.png)--><h3 id="3-2-可视化工具导出数据"><a href="#3-2-可视化工具导出数据" class="headerlink" title="3.2 可视化工具导出数据"></a>3.2 可视化工具导出数据</h3><p>第一步：选择要导出的数据库。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20220207094654634.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20220207094813606.png"></p><!--![](MySQL8.0_SQL笔记/image-20220207094654634-17314083001339.png)![](MySQL8.0_SQL笔记/image-20220207094813606-173140830706611.png)--><h1 id="第4章-SQL语句"><a href="#第4章-SQL语句" class="headerlink" title="第4章 SQL语句"></a>第4章 SQL语句</h1><p>SQL：结构化查询语言，（Structure Query Language），专门用来操作&#x2F;访问数据库的通用语言。</p><h2 id="4-1-SQL的分类"><a href="#4-1-SQL的分类" class="headerlink" title="4.1 SQL的分类"></a>4.1 SQL的分类</h2><ol><li>数据查询语言（Data Query Language, DQL）<ul><li><strong>SELECT</strong>：用于从数据库表中查询数据。SELECT语句可以返回表中的特定列，所有列，或者通过计算得到的结果。它还可以结合WHERE、ORDER BY、GROUP BY等子句来对查询结果进行过滤、排序和分组。</li></ul></li><li>数据定义语言（Data Definition Language, DDL）<ul><li><strong>CREATE</strong>：用于创建新的数据库、表、索引、视图等对象。</li><li><strong>ALTER</strong>：用于修改已存在的数据库对象的结构，如修改表结构（增加、删除或修改列）。</li><li><strong>DROP</strong>：用于删除数据库、表、索引、视图等对象。</li><li><strong>TRUNCATE</strong>：用于删除表中的所有行，但不删除表本身，也不记录个别行删除的日志。</li></ul></li><li>数据操纵语言（Data Manipulation Language, DML）<ul><li><strong>INSERT</strong>：用于向表中插入新的行。</li><li><strong>UPDATE</strong>：用于更新表中已存在的行。</li><li><strong>DELETE</strong>：用于从表中删除行。</li></ul></li><li>数据控制语言（Data Control Language, DCL）<ul><li><strong>GRANT</strong>：用于授予用户或角色对数据库对象的访问权限。</li><li><strong>REVOKE</strong>：用于撤销用户或角色之前被授予的权限。</li><li><strong>COMMIT</strong>：用于提交当前事务，使得自从事务开始以来所做的所有更改都成为永久性的。</li><li><strong>ROLLBACK</strong>：用于回滚当前事务，取消自从事务开始以来所做的所有更改。</li></ul></li><li>事务控制语言（Transaction Control Language, TCL）<ul><li>尽管DCL中的COMMIT和ROLLBACK也被用于事务控制，但TCL更广泛地指代那些控制事务的SQL语句。它还包括SAVEPOINT（用于在事务中设置保存点，以便在必要时回滚到该点）等语句</li></ul></li></ol><h2 id="4-2-SQL语法规范"><a href="#4-2-SQL语法规范" class="headerlink" title="4.2 SQL语法规范"></a>4.2 SQL语法规范</h2><p>（1）mysql的sql语法不区分大小写</p><p>A：数据库的表中的数据是默认不区分大小写</p><p>B：sql中的关键字，比如：create,insert等，不区分大小写。但是大家习惯上把关键字都“大写”。</p><p>（2）命名时：尽量使用26个英文字母大小写，数字0-9，下划线，不要使用其他符号</p><p>（3）建议不要使用mysql的关键字等来作为表名、字段名、数据库名等，如果不小心使用，请在SQL语句中使用&#96;（飘号）引起来</p><p>（4）数据库和表名、字段名等对象名中间不要包含空格、如果字段由多个单词组成则中间使用下划线连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database my atguigu;<br><br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;atguigu&#x27; at line 1<br></code></pre></td></tr></table></figure><p>（5）同一个mysql软件中，数据库不能同名，同一个库中，表不能重名，同一个表中，字段不能重名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| atguigudb          |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br>5 rows in set (0.00 sec)<br><br>mysql&gt; create database atguigudb;<br>ERROR 1007 (HY000): Can&#x27;t create database &#x27;atguigudb&#x27;; database exists<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show tables;<br>+---------------------+<br>| Tables_in_atguigudb |<br>+---------------------+<br>| student             |<br>| temp                |<br>+---------------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; create table temp(id int);<br>ERROR 1050 (42S01): Table &#x27;temp&#x27; already exists<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">mysql&gt; create table tt(<br>    -&gt;  id int,<br>    -&gt;  id int<br>    -&gt; );<br><span class="hljs-keyword">ERROR </span>1060 (42S21): Duplicate（重复） column name &#x27;id&#x27;<br></code></pre></td></tr></table></figure><h2 id="4-3-SQL脚本中如何加注释"><a href="#4-3-SQL脚本中如何加注释" class="headerlink" title="4.3 SQL脚本中如何加注释"></a>4.3 SQL脚本中如何加注释</h2><p>SQL脚本中如何加注释</p><ul><li><p>单行注释：#注释内容（mysql特有的）</p></li><li><p>单行注释：–空格注释内容    其中–后面的空格必须有</p></li><li><p>多行注释：&#x2F;* 注释内容 *&#x2F;</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tt(<br>id int, #编号<br>    `name` varchar(20), -- 姓名<br>    gender enum(&#x27;男&#x27;,&#x27;女&#x27;)<br>    /*<br>    性别只能从男或女中选择一个，<br>    不能两个都选，或者选择男和女之外的<br>    */<br>);<br></code></pre></td></tr></table></figure><h2 id="4-4-mysql脚本中的标点符号"><a href="#4-4-mysql脚本中的标点符号" class="headerlink" title="4.4 mysql脚本中的标点符号"></a>4.4 mysql脚本中的标点符号</h2><p>mysql脚本中标点符号的要求如下：</p><ul><li><p>本身成对的标点符号必须成对，例如：()，’’，””。</p></li><li><p>所有标点符号必须英文状态下半角输入方式下输入。</p></li></ul><p>几个特殊的标点符号：</p><ul><li><p>小括号()：在创建表、添加数据、函数使用、子查询、计算表达式等等会用（）表示某个部分是一个整体结构。</p></li><li><p>单引号’’：字符串和日期类型的数据值使用单引号’’引起来，数值类型的不需要加标点符号。</p></li><li><p>双引号””：列的别名可以使用双引号””，给表名取别名&#x3D;&#x3D;不要使用&#x3D;&#x3D;双引号。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table tt(<br>    id int<br>    ;<br>    <br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27; at line 2<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>c char<br>);<br>insert into temp values(&#x27;尚) ; #缺一半单引号<br>                        <br>insert into temp values(‘尚’) ;  #标点符号是中文<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+------+------+<br>| id   | name |<br>+------+------+<br>|    1 | 张三 |<br>|    2 | 李四 |<br>+------+------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select id &quot;学号&quot;,name &quot;姓名&quot; from student;<br>+------+------+<br>| 学号 | 姓名 |<br>+------+------+<br>|    1 | 张三 |<br>|    2 | 李四 |<br>+------+------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1 id="第5章-DQL"><a href="#第5章-DQL" class="headerlink" title="第5章 DQL"></a>第5章 DQL</h1><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类，DQL（数据查询语言）。</p><h2 id="5-1-SELECT语句"><a href="#5-1-SELECT语句" class="headerlink" title="5.1 SELECT语句"></a>5.1 SELECT语句</h2><p>SELECT语句是用于查看计算结果、或者查看从数据表中筛选出的数据的。</p><p>SELECT语句的基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT 常量;<br>SELECT 表达式;<br>SELECT 函数;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT <span class="hljs-number">1</span>; <br>SELECT <span class="hljs-number">9</span>/<span class="hljs-number">2</span>;<br>SELECT <span class="hljs-title function_">NOW</span><span class="hljs-params">()</span>; <br></code></pre></td></tr></table></figure><p>如果要从数据表中筛选数据，需要加FROM子句。FROM指定数据来源。字段列表筛选列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT 字段列表 FROM 表名称;<br></code></pre></td></tr></table></figure><p>如果要从数据表中根据条件筛选数据，需要加FROM和WHERE子句。WHERE筛选行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SELECT 字段列表 FROM 表名称 WHERE 条件;<br></code></pre></td></tr></table></figure><p>完整的SELECT语句后面可以跟7个子句，后面会逐一讲解。</p><h2 id="5-2-使用别名"><a href="#5-2-使用别名" class="headerlink" title="5.2 使用别名"></a>5.2 使用别名</h2><p>在当前select语句中给某个字段或表达式计算结果，或表等取个临时名称，便于当前select语句的编写和理解。这个临时名称称为别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select 字段名1 as &quot;别名1&quot;, 字段名2 as &quot;别名2&quot; from 表名称 as 别名;<br></code></pre></td></tr></table></figure><ul><li>列的别名有空格时，请加双引号。**&#x3D;&#x3D;列的别名&#x3D;&#x3D;中没有空格时，双引号可以加也可以不加**。</li><li>&#x3D;&#x3D;<strong>表的别名<font color="red">不能</font>加双引号</strong>&#x3D;&#x3D;，表的别名中间不能包含空格。</li><li>as大小写都可以，as也完全可以省略。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">mysql&gt; select * from student;<br>+------+------+<br>| id   | name |<br>+------+------+<br>|    <span class="hljs-number">1</span> | 张三 |<br>|    <span class="hljs-number">2</span> | 李四 |<br>+------+------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; select id <span class="hljs-string">&quot;学号&quot;</span>,name <span class="hljs-string">&quot;姓名&quot;</span> from student;<br>+------+------+<br>| 学号 | 姓名 |<br>+------+------+<br>|    <span class="hljs-number">1</span> | 张三 |<br>|    <span class="hljs-number">2</span> | 李四 |<br>+------+------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; select id 学号,name 姓名 from student;<br>+------+------+<br>| 学号 | 姓名 |<br>+------+------+<br>|    <span class="hljs-number">1</span> | 张三 |<br>|    <span class="hljs-number">2</span> | 李四 |<br>+------+------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; select id 学 号,name 姓 名 from student; <br>ERROR <span class="hljs-number">1064</span> (<span class="hljs-number">42000</span>): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version <span class="hljs-keyword">for</span> the right syntax to use n<br>ear <span class="hljs-string">&#x27;号,name 姓 名 from student&#x27;</span> at line <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="5-3-结果去重"><a href="#5-3-结果去重" class="headerlink" title="5.3 结果去重"></a>5.3 结果去重</h2><p>mysql可以在查询结果中使用distinct关键字去重。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct 字段列表 from 表名称 【where 条件】; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct did from t_employee;<br></code></pre></td></tr></table></figure><h1 id="第6章-运算符"><a href="#第6章-运算符" class="headerlink" title="第6章 运算符"></a>第6章 运算符</h1><h2 id="6-1-算术运算符（掌握）"><a href="#6-1-算术运算符（掌握）" class="headerlink" title="6.1 算术运算符（掌握）"></a>6.1 算术运算符（掌握）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">加：+<br>在MySQL +就是求和，没有字符串拼接<br>减：-<br>乘：*<br>除：/   div（只保留整数部分）<br>div：两个数相除只保留整数部分<br>/：数学中的除<br>模：%   mod<br><br>mysql中没有 +=等运算符<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#select 表达式<br>select 1+1;<br>update t_employee set salary = salary+100 where eid=27;<br><br>select 9/2, 9 div 2;<br><br>mysql&gt; select 9/2, 9 div 2;<br>+--------+---------+<br>| 9/2    | 9 div 2 |<br>+--------+---------+<br>| 4.5000 |       4 |<br>+--------+---------+<br>1 row in set (0.00 sec)<br><br>select 9.5 / 1.5 , 9.5 div 1.5;<br><br>mysql&gt; select 9.5 / 1.5 , 9.5 div 1.5;<br>+-----------+-------------+<br>| 9.5 / 1.5 | 9.5 div 1.5 |<br>+-----------+-------------+<br>|   6.33333 |           6 |<br>+-----------+-------------+<br>1 row in set (0.00 sec)<br><br>select 9 % 2, 9 mod 2;<br>select 9.5 % 1.5 , 9.5 mod 1.5;<br><br>select &#x27;hello&#x27; + &#x27;world&#x27;;<br>mysql&gt; select &#x27;hello&#x27; + &#x27;world&#x27;;<br>+-------------------+<br>| &#x27;hello&#x27; + &#x27;world&#x27; |<br>+-------------------+<br>|                 0 |<br>+-------------------+<br>1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="6-2-比较运算符（掌握）"><a href="#6-2-比较运算符（掌握）" class="headerlink" title="6.2 比较运算符（掌握）"></a>6.2 比较运算符（掌握）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">大于：&gt;<br>小于：&lt;<br>大于等于：&gt;=<br>小于等于：&gt;=<br>等于：=   不能用于null判断<br>不等于：!=  或 &lt;&gt;  不能用于null判断<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询薪资高于15000的员工姓名和薪资<br>select ename,salary from t_employee where salary&gt;15000;<br><br>mysql&gt; select ename,salary from t_employee where salary&gt;15000;<br>+--------+--------+<br>| ename  | salary |<br>+--------+--------+<br>| 孙洪亮 |  28000 |<br>| 贾宝玉 |  15700 |<br>| 黄冰茹 |  15678 |<br>| 李冰冰 |  18760 |<br>| 谢吉娜 |  18978 |<br>| 舒淇格 |  16788 |<br>| 章嘉怡 |  15099 |<br>+--------+--------+<br>7 rows in set (0.00 sec)<br><br>#查询薪资正好是9000的员工姓名和薪资<br>select ename,salary from t_employee where salary = 9000;<br>select ename,salary from t_employee where salary == 9000;#错误，不支持==  #注意Java中判断用==，mysql判断用=<br><br>mysql&gt; select ename,salary from t_employee where salary == 9000;<br>ERROR 1064 (42000): You have an error in your SQL syntax;<br> check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;== 9000&#x27; at line 1<br> <br>#查询籍贯native_place不是北京的<br>select * from t_employee where native_place != &#x27;北京&#x27;;<br>select * from t_employee where native_place &lt;&gt; &#x27;北京&#x27;;<br><br>#查询员工表中部门编号不是1<br>select * from t_employee where did != 1;<br>select * from t_employee where did &lt;&gt; 1;<br><br>#查询奖金比例是NULL<br>select * from t_employee where commission_pct = null; <br><br>mysql&gt; select * from t_employee where commission_pct = null; #无法用=null判断<br>Empty set (0.00 sec)<br>#mysql中只要有null值参与运算和比较，结果就是null，底层就是0，表示条件不成立。<br><br>#查询奖金比例是NULL<br>select * from t_employee where commission_pct &lt;=&gt; null; <br>select * from t_employee where commission_pct is null; <br><br>#查询“李冰冰”、“周旭飞”、“李易峰”这几个员工的信息<br>select * from t_employee where ename in (&#x27;李冰冰&#x27;,&#x27;周旭飞&#x27;,&#x27;李易峰&#x27;);<br><br>#查询部门编号为2、3的员工信息<br>select * from t_employee where did in(2,3);<br><br>#查询部门编号不是2、3的员工信息<br>select * from t_employee where did not in(2,3);<br><br>#查询薪资在[10000,15000]之间<br>select * from t_employee where salary between 10000 and 15000;<br><br>#查询姓名中第二个字是&#x27;冰&#x27;的员工<br>select * from t_employee where ename like &#x27;冰&#x27;; #这么写等价于 ename=&#x27;冰&#x27;<br>select * from t_employee where ename like &#x27;_冰%&#x27;; <br>#这么写匹配的是第二个字是冰，后面可能没有第三个字，或者有好几个字<br><br>update t_employee set ename = &#x27;王冰&#x27; where ename = &#x27;李冰冰&#x27;;<br><br>select * from t_employee where ename like &#x27;_冰_&#x27;; <br>#这么写匹配的是第二个字是冰，后面有第三个字，且只有三个字<br><br>#查询员工的姓名、薪资、奖金比例、实发工资<br>#实发工资 = 薪资 + 薪资 * 奖金比例<br>select ename as 姓名,<br>salary as 薪资,<br>commission_pct as 奖金比例,<br>salary + salary * commission_pct as 实发工资<br>from t_employee;<br><br>#NULL在mysql中比较和计算都有特殊性，所有的计算遇到的null都是null。<br>#实发工资 = 薪资 + 薪资 * 奖金比例<br>select ename as 姓名,<br>salary as 薪资,<br>commission_pct as 奖金比例,<br>salary + salary * ifnull(commission_pct,0) as 实发工资<br>from t_employee;<br></code></pre></td></tr></table></figure><h2 id="6-3-区间或集合范围比较运算符（掌握）"><a href="#6-3-区间或集合范围比较运算符（掌握）" class="headerlink" title="6.3 区间或集合范围比较运算符（掌握）"></a>6.3 区间或集合范围比较运算符（掌握）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">区间范围：between x  and  y  [x,y]<br>    not between x  and  y<br>集合范围：in (x,x,x)<br>    not  in(x,x,x)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询薪资在[10000,15000]<br>select * from t_employee where salary&gt;=10000 &amp;&amp; salary&lt;=15000;<br>select * from t_employee where salary between 10000 and 15000;<br><br>#查询籍贯在这几个地方的<br>select * from t_employee where native_place in (&#x27;北京&#x27;, &#x27;浙江&#x27;, &#x27;江西&#x27;);<br><br>#查询薪资不在[10000,15000]<br>select * from t_employee where salary not between 10000 and 15000;<br><br>#查询籍贯不在这几个地方的<br>select * from t_employee where native_place not in (&#x27;北京&#x27;, &#x27;浙江&#x27;, &#x27;江西&#x27;);<br></code></pre></td></tr></table></figure><h2 id="6-4-模糊匹配比较运算符（掌握）"><a href="#6-4-模糊匹配比较运算符（掌握）" class="headerlink" title="6.4 模糊匹配比较运算符（掌握）"></a>6.4 模糊匹配比较运算符（掌握）</h2><p>%：代表任意个字符</p><p>_：代表一个字符，如果两个下划线代表两个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询名字中包含&#x27;冰&#x27;字<br>select * from t_employee where ename like &#x27;%冰%&#x27;;<br><br>#查询名字以‘雷&#x27;结尾的<br>select * from t_employee where ename like &#x27;%雷&#x27;;<br><br>#查询名字以’李&#x27;开头<br>select * from t_employee where ename like &#x27;李%&#x27;;<br><br>#查询名字有冰这个字，但是冰的前面只能有1个字<br>select * from t_employee where ename like &#x27;_冰%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询当前mysql数据库的字符集情况<br>show variables like &#x27;%character%&#x27;;<br></code></pre></td></tr></table></figure><h2 id="6-5-逻辑运算符（掌握）"><a href="#6-5-逻辑运算符（掌握）" class="headerlink" title="6.5 逻辑运算符（掌握）"></a>6.5 逻辑运算符（掌握）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">逻辑与：&amp;&amp; 或 and<br>逻辑或：|| 或 or<br>逻辑非：! 或 not<br>逻辑异或： xor<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询薪资高于15000，并且性别是男的员工<br>select * from t_employee where salary&gt;15000 and gender=&#x27;男&#x27;;<br>select * from t_employee where salary&gt;15000 &amp;&amp; gender=&#x27;男&#x27;;<br><br>select * from t_employee where salary&gt;15000 &amp; gender=&#x27;男&#x27;;#错误 &amp;按位与<br>select * from t_employee where (salary&gt;15000) &amp; (gender=&#x27;男&#x27;);<br><br>#查询薪资高于15000，或者did为1的员工<br>select  * from t_employee where salary&gt;15000 or did = 1;<br>select  * from t_employee where salary&gt;15000 || did = 1;<br><br>#查询薪资不在[15000,20000]范围的<br>select  * from t_employee where salary not between 15000 and 20000;<br>select  * from t_employee where !(salary between 15000 and 20000);<br><br>#查询薪资高于15000，或者did为1的员工，两者只能满足其一<br>select  * from t_employee where salary&gt;15000 xor did = 1;<br>select  * from t_employee where (salary&gt;15000) ^ (did = 1);<br></code></pre></td></tr></table></figure><h2 id="6-6-关于null值的问题（掌握）"><a href="#6-6-关于null值的问题（掌握）" class="headerlink" title="6.6 关于null值的问题（掌握）"></a>6.6 关于null值的问题（掌握）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#（1）判断时<br>xx is null<br>xx is not null<br>xx &lt;=&gt; null<br><br>#(2)计算时<br>ifnull(xx,代替值)  当xx是null时，用代替值计算<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询奖金比例为null的员工<br>select * from t_employee where commission_pct = null;  #失败<br>select * from t_employee where commission_pct = NULL; #失败<br>select * from t_employee where commission_pct = &#x27;NULL&#x27;; #失败<br><br>select * from t_employee where commission_pct is null;   #成功<br>select * from t_employee where commission_pct &lt;=&gt; null;  #成功  &lt;=&gt;安全等于<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工的实发工资，实发工资 = 薪资 + 薪资 * 奖金比例<br>select ename , salary + salary * commission_pct &quot;实发工资&quot; from t_employee; #失败，当commission_pct为null，结果都为null<br><br>select ename ,salary , commission_pct, salary + salary * ifnull(commission_pct,0) &quot;实发工资&quot; from t_employee;<br></code></pre></td></tr></table></figure><h2 id="6-7-位运算符（了解）"><a href="#6-7-位运算符（了解）" class="headerlink" title="6.7 位运算符（了解）"></a>6.7 位运算符（了解）</h2><p>基本不用，知道一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">左移：&lt;&lt;<br>右移：&gt;&gt;<br>按位与：&amp;<br>按位或：|<br>按位异或：^<br>按位取反：~<br></code></pre></td></tr></table></figure><h1 id="第7章-系统预定义函数"><a href="#第7章-系统预定义函数" class="headerlink" title="第7章 系统预定义函数"></a>第7章 系统预定义函数</h1><p>函数：代表一个独立的可复用的功能。</p><p>和Java中的方法有所不同，不同点在于：MySQL中的函数必须有返回值，参数可以有可以没有。</p><p>MySQL中函数分为：</p><p>（1）系统预定义函数：MySQL数据库管理软件给我提供好的函数，直接用就可以，任何数据库都可以用公共的函数。</p><ul><li>分组函数：或者又称为聚合函数，多行函数，表示会对表中的多行记录一起做一个“运算”，得到一个结果。<ul><li>求平均值的avg，求最大值的max，求最小值的min，求总和sum，求个数的count等</li></ul></li><li>单行函数：表示会对表中的每一行记录分别计算，有n行得到还是n行结果<ul><li>数学函数、字符串函数、日期时间函数、条件判断函数、窗口函数等</li></ul></li></ul><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20211201084442467.png"></p><!--![](MySQL8.0_SQL笔记/image-20211201084442467-173140832022413.png)--><p>（2）用户自定义函数：由开发人员自己定义的，通过CREATE FUNCTION语句定义，是属于某个数据库的对象。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20211201083845550.png"></p><!--![](MySQL8.0_SQL笔记/image-20211201083845550-173140832428815.png)--><h2 id="7-1-分组函数"><a href="#7-1-分组函数" class="headerlink" title="7.1 分组函数"></a>7.1 分组函数</h2><p>调用完函数后，结果的行数变少了，可能得到一行，可能得到少数几行。</p><p>分组函数有合并计算过程。</p><p><strong>常用分组函数类型</strong></p><ul><li><strong>AVG(x)</strong> ：求平均值</li><li>**SUM(x)**：求总和</li><li><strong>MAX(x)</strong> ：求最大值</li><li><strong>MIN(x)</strong> ：求最小值</li><li>**COUNT(x) **：统计记录数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示分组函数，聚合函数，多行函数<br>#统计t_employee表的员工的数量<br>SELECT COUNT(*) FROM t_employee;<br>SELECT COUNT(1) FROM t_employee;<br>SELECT COUNT(eid) FROM t_employee;<br>SELECT COUNT(commission_pct) FROM t_employee;<br><br>/*<br>count(*)或count(常量值)：都是统计实际的行数。<br>count(字段/表达式)：只统计“字段/表达式”部分非NULL值的行数。<br>*/<br><br>#找出t_employee表中最高的薪资值<br>SELECT MAX(salary) FROM t_employee;<br><br>#找出t_employee表中最低的薪资值<br>SELECT MIN(salary) FROM t_employee;<br><br>#统计t_employee表中平均薪资值<br>SELECT AVG(salary) FROM t_employee;<br><br>#统计所有人的薪资总和，财务想看一下，一个月要准备多少钱发工资<br>SELECT SUM(salary) FROM t_employee; #没有考虑奖金<br>SELECT SUM(salary+salary*IFNULL(commission_pct,0)) FROM t_employee; <br><br>#找出年龄最小、最大的员工的出生日期<br>SELECT MAX(birthday),MIN(birthday) FROM t_employee;<br><br>#查询最新入职的员工的入职日期<br>SELECT MAX(hiredate) FROM t_employee;<br></code></pre></td></tr></table></figure><h2 id="7-2-单行函数（了解，用的时候查，太多了，演示一小部分）"><a href="#7-2-单行函数（了解，用的时候查，太多了，演示一小部分）" class="headerlink" title="7.2 单行函数（了解，用的时候查，太多了，演示一小部分）"></a>7.2 单行函数（了解，用的时候查，太多了，演示一小部分）</h2><p>调用完函数后，记录数不变，一行计算完之后还是一行。</p><h3 id="1、数学函数"><a href="#1、数学函数" class="headerlink" title="1、数学函数"></a>1、数学函数</h3><p>以下表格中也只是列出了一部分</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>CEIL(x)</td><td>返回大于x的最小整数值</td></tr><tr><td>FLOOR(x)</td><td>返回小于x的最大整数值</td></tr><tr><td>MOD(x,y)</td><td>返回x&#x2F;y的模</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>ROUND(x,y)</td><td>返回参数x的四舍五入的有y位的小数的值</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>FORMAT(x,y)</td><td>强制保留小数点后y位，整数部分超过三位的时候以逗号分割，并且返回的结果是文本类型的</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根</td></tr><tr><td>POW(x,y)</td><td>返回x的y次方</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#单行函数<br>#演示数学函数<br>#在“t_employee”表中查询员工无故旷工一天扣多少钱，<br>#分别用CEIL、FLOOR、ROUND、TRUNCATE函数。<br>#假设本月工作日总天数是22天，<br>#旷工一天扣的钱=salary/22。<br>SELECT ename,salary/22,CEIL(salary/22),<br>FLOOR(salary/22),ROUND(salary/22,2),<br>TRUNCATE(salary/22,2) FROM t_employee; <br><br><br>#查询公司平均薪资，并对平均薪资分别<br>#使用CEIL、FLOOR、ROUND、TRUNCATE函数<br>SELECT AVG(salary),CEIL(AVG(salary)),<br>FLOOR(AVG(salary)),ROUND(AVG(salary)),<br>TRUNCATE(AVG(salary),2) FROM t_employee;<br></code></pre></td></tr></table></figure><h3 id="2、字符串函数"><a href="#2、字符串函数" class="headerlink" title="2、字符串函数"></a>2、字符串函数</h3><p>下面列出部分字符串函数：</p><table><thead><tr><th>函数</th><th>功能描述</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,……Sn)</td><td>连接S1,S2,……Sn为一个字符串</td></tr><tr><td>CONCAT_WS(s,S1,S2,……Sn)</td><td>同CONCAT(S1,S2,…)函数，但每个字符串之间要加上s</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>LOCATE(str1,str)或  POSITION(str1 in str)或  INSTR(str,str1)</td><td>返回子字符串str1在str中的开始位置</td></tr><tr><td>UPPER(s)或UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s)或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(s,n)</td><td>返回字符串s最左边的n个字符</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串s最右边的n个字符</td></tr><tr><td>LPAD(str,len,pad)</td><td>用字符串pad对str最左边进行填充直到str的长度达到len</td></tr><tr><td>RPAD(str,len,pad)</td><td>用字符串pad对str最右边进行填充直到str的长度达到len</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM([BOTH] s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM([LEADING] s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM([TRAILING]s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>INSERT(str,index,len,instr)</td><td>将字符串str从index位置开始len个字符的替换为字符串instr</td></tr><tr><td>REPLACE(str,a,b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>REPEAT(str,n)</td><td>返回str重复n次的结果</td></tr><tr><td>REVERSE(s)</td><td>将字符串反转</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2</td></tr><tr><td>SUBSTRING(s,index,len)</td><td>返回从字符串s的index位置截取len个字符</td></tr><tr><td>SUBSTRING_INDEX(str, 分隔符，count)</td><td>如果count是正数，那么从左往右数，第n个分隔符的左边的全部内容。例如，substring_index(“<a href="http://www.atguigu.com" ,".",1)是"www".如果count是负数,那么从右边开始数,第n个分隔符右边的所有内容.例如,substring_index("www.atguigu.com",".",-1)是"com". ">www.atguigu.com&quot;,&quot;.&quot;,1)是&quot;www&quot;。如果count是负数，那么从右边开始数，第n个分隔符右边的所有内容。例如，substring_index(&quot;www.atguigu.com&quot;,&quot;.&quot;,-1)是&quot;com&quot;。</a></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#字符串函数<br>#mysql中不支持 + 拼接字符串，需要调用函数来拼接<br>#（1）在“t_employee”表中查询员工姓名ename和电话tel，<br>#并使用CONCAT函数，CONCAT_WS函数。<br>SELECT CONCAT(ename,tel),CONCAT_WS(&#x27;-&#x27;,ename,tel) FROM t_employee;<br><br><br>#（2）在“t_employee”表中查询薪资高于15000的男员工姓名，<br>#并把姓名处理成“张xx”的样式。<br>#LEFT（s，n）函数表示取字符串s最左边的n个字符，<br>#而RPAD（s，len，p）函数表示在字符串s的右边填充p使得字符串长度达到len。<br>SELECT  RPAD(LEFT(ename,1),3,&#x27;x&#x27;),salary<br>FROM t_employee<br>WHERE salary&gt;15000 AND gender =&#x27;男&#x27;;<br><br>#（3）在“t_employee”表中查询薪资高于10000的男员工姓名、<br>#姓名包含的字符数和占用的字节数。<br>SELECT ename,CHAR_LENGTH(ename) AS 占用字符数,LENGTH(ename) AS 占用字节数量<br>FROM t_employee<br>WHERE salary&gt;10000 AND gender =&#x27;男&#x27;;<br><br><br>#（4）在“t_employee”表中查询薪资高于10000的男员工姓名和邮箱email，<br>#并把邮箱名“@”字符之前的字符串截取出来。<br>SELECT ename,email,<br>SUBSTRING(email,1, POSITION(&#x27;@&#x27; IN email)-1)<br>FROM t_employee<br>WHERE salary &gt; 10000 AND gender =&#x27;男&#x27;;<br><br>#mysql中 SUBSTRING截取字符串位置，下标从1开始，不是和Java一样从0开始。<br>#mysql中 position等指定字符串中某个字符，子串的位置也不是从0开始，都是从1开始。<br><br>SELECT TRIM(&#x27;    hello   world   &#x27;); #默认是去掉前后空白符<br>SELECT CONCAT(&#x27;[&#x27;,TRIM(&#x27;    hello   world   &#x27;),&#x27;]&#x27;); #默认是去掉前后空白符<br>SELECT TRIM(BOTH &#x27;&amp;&#x27; FROM &#x27;&amp;&amp;&amp;&amp;hello   world&amp;&amp;&amp;&amp;&#x27;); #去掉前后的&amp;符号<br>SELECT TRIM(LEADING &#x27;&amp;&#x27; FROM &#x27;&amp;&amp;&amp;&amp;hello   world&amp;&amp;&amp;&amp;&#x27;); #去掉开头的&amp;符号<br>SELECT TRIM(TRAILING &#x27;&amp;&#x27; FROM &#x27;&amp;&amp;&amp;&amp;hello   world&amp;&amp;&amp;&amp;&#x27;); #去掉结尾的&amp;符号<br></code></pre></td></tr></table></figure><h3 id="3、日期时间函数"><a href="#3、日期时间函数" class="headerlink" title="3、日期时间函数"></a>3、日期时间函数</h3><table><thead><tr><th>函数</th><th>功能描述</th></tr></thead><tbody><tr><td>CURDATE()或CURRENT_DATE()</td><td>返回当前系统日期</td></tr><tr><td>CURTIME()或CURRENT_TIME()</td><td>返回当前系统时间</td></tr><tr><td>NOW()&#x2F;SYSDATE()&#x2F;CURRENT_TIMESTAMP()&#x2F;  LOCALTIME()&#x2F;LOCALTIMESTAMP()</td><td>返回当前系统日期时间</td></tr><tr><td>UTC_DATE()&#x2F;UTC_TIME()</td><td>返回当前UTC日期值&#x2F;时间值</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>返回一个UNIX时间戳</td></tr><tr><td>YEAR(date)&#x2F;MONTH(date)&#x2F;DAY(date)&#x2F;  HOUR(time)&#x2F;MINUTE(time)&#x2F;SECOND(time)</td><td>返回具体的时间值</td></tr><tr><td>EXTRACT(type FROM date)</td><td>从日期中提取一部分值</td></tr><tr><td>DAYOFMONTH(date)&#x2F;DAYOFYEAR(date)</td><td>返回一月&#x2F;年中第几天</td></tr><tr><td>WEEK(date)&#x2F;WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFWEEK()</td><td>返回周几，注意，周日是1，周一是2，…周六是7</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周一是0，周二是1，…周日是6</td></tr><tr><td>DAYNAME(date)</td><td>返回星期，MONDAY,TUESDAY,…SUNDAY</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份，January,…</td></tr><tr><td>DATEDIFF(date1,date2)&#x2F;TIMEDIFF(time1,time2)</td><td>返回date1-date2的日期间隔&#x2F;返回time1-time2的时间间隔</td></tr><tr><td>DATE_ADD(date,INTERVAL expr type)或ADDDATE&#x2F;DATE_SUB&#x2F;SUBDATE</td><td>返回与给定日期相差INTERVAL时间段的日期</td></tr><tr><td>ADDTIME(time,expr)&#x2F;SUBTIME(time,expr)</td><td>返回给定时间加上&#x2F;减去expr的时间值</td></tr><tr><td>DATE_FORMAT(datetime,fmt)&#x2F;  TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化日期datetime值&#x2F;时间time值</td></tr><tr><td>STR_TO_DATE(str,fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr><tr><td>GET_FORMAT(val_type,format_type)</td><td>返回日期时间字符串的显示格式</td></tr></tbody></table><p>函数中日期时间类型说明</p><table><thead><tr><th>参数类型</th><th>描述</th><th>参数类型</th><th>描述</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>YEAR_MONTH</td><td>年月</td></tr><tr><td>MONTH</td><td>月</td><td>DAY_HOUR</td><td>日时</td></tr><tr><td>DAY</td><td>日</td><td>DAY_MINUTE</td><td>日时分</td></tr><tr><td>HOUR</td><td>时</td><td>DAY_SECOND</td><td>日时分秒</td></tr><tr><td>MINUTE</td><td>分</td><td>HOUR_MINUTE</td><td>时分</td></tr><tr><td>SECOND</td><td>秒</td><td>HOUR_SECOND</td><td>时分秒</td></tr><tr><td>WEEK</td><td>星期</td><td>MINUTE_SECOND</td><td>分秒</td></tr><tr><td>QUARTER</td><td>一刻</td><td></td><td></td></tr></tbody></table><p>函数中format参数说明</p><table><thead><tr><th>格式符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,…）</td><td>%m</td><td>两位数字表示月份（01,02,03，…）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.,Feb.,…）</td><td>%c</td><td>数字表示月份（1,2,3…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示表示月中的天数（01,02,…）</td></tr><tr><td>%e</td><td>数字形式表示月中的天数（1,2,3,…）</td><td>%p</td><td>AM或PM</td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制（01,02,03,…）</td><td>%h和%I</td><td>两位数字表示小时，12小时制（01,02,03,…）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制（1,2,3,…）</td><td>%l</td><td>数字表示小时，12小时制（1,2,3,…）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02,…）</td><td>%S和%s</td><td>两位数字表示秒（00,01,02,…）</td></tr><tr><td>%T</td><td>时间，24小时制（hh:mm:ss）</td><td>%r</td><td>时间，12小时制（hh:mm:ss）后加AM或PM</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday,…）</td><td>%a</td><td>一周中的星期缩写（Sun.,Mon.,Tues.,…）</td></tr><tr><td>%w</td><td>以数字表示周中的天数（0&#x3D;Sunday,1&#x3D;Monday,…）</td><td>%j</td><td>以3位数字表示年中的天数（001,002,…）</td></tr><tr><td>%U</td><td>以数字表示的的第几周（1,2,3,…）  其中Sunday为周中的第一天</td><td>%u</td><td>以数字表示年中的年份（1,2,3,…）  其中Monday为周中第一天</td></tr><tr><td>%V</td><td>一年中第几周（01~53），周日为每周的第一天，和%X同时使用</td><td>%X</td><td>4位数形式表示该周的年份，周日为每周第一天，和%V同时使用</td></tr><tr><td>%v</td><td>一年中第几周（01~53），周一为每周的第一天，和%x同时使用</td><td>%x</td><td>4位数形式表示该周的年份，周一为每周第一天，和%v同时使用</td></tr><tr><td>%%</td><td>表示%</td><td></td><td></td></tr></tbody></table><p>GET_FORMAT函数中val_type 和format_type参数说明</p><table><thead><tr><th>值类型</th><th>格式化类型</th><th>显示格式字符串</th></tr></thead><tbody><tr><td>DATE</td><td>EUR</td><td>%d.%m.%Y</td></tr><tr><td>DATE</td><td>INTERVAL</td><td>%Y%m%d</td></tr><tr><td>DATE</td><td>ISO</td><td>%Y-%m-%d</td></tr><tr><td>DATE</td><td>JIS</td><td>%Y-%m-%d</td></tr><tr><td>DATE</td><td>USA</td><td>%m.%d.%Y</td></tr><tr><td>TIME</td><td>EUR</td><td>%H.%i.%s</td></tr><tr><td>TIME</td><td>INTERVAL</td><td>%H%i%s</td></tr><tr><td>TIME</td><td>ISO</td><td>%H:%i:%s</td></tr><tr><td>TIME</td><td>JIS</td><td>%H:%i:%s</td></tr><tr><td>TIME</td><td>USA</td><td>%h:%i:%s %p</td></tr><tr><td>DATETIME</td><td>EUR</td><td>%Y-%m-%d %H.%i.%s</td></tr><tr><td>DATETIME</td><td>INTERVAL</td><td>%Y%m%d %H%i%s</td></tr><tr><td>DATETIME</td><td>ISO</td><td>%Y-%m-%d %H:%i:%s</td></tr><tr><td>DATETIME</td><td>JIS</td><td>%Y-%m-%d %H:%i:%s</td></tr><tr><td>DATETIME</td><td>USA</td><td>%Y-%m-%d %H.%i.%s</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#日期时间函数<br>/*<br>获取系统日期时间值<br>获取某个日期或时间中的具体的年、月等值<br>获取星期、月份值，可以是当天的星期、当月的月份<br>获取一年中的第几个星期，一年的第几天<br>计算两个日期时间的间隔<br>获取一个日期或时间间隔一定时间后的另个日期或时间<br>和字符串之间的转换<br>*/<br>#（1）获取系统日期。CURDATE（）和CURRENT_DATE（）函数都可以获取当前系统日期。将日期值“+0”会怎么样？<br>SELECT CURDATE(),CURRENT_DATE();<br><br>#（2）获取系统时间。CURTIME（）和CURRENT_TIME（）函数都可以获取当前系统时间。将时间值“+0”会怎么样？<br>SELECT CURTIME(),CURRENT_TIME();<br><br>#（3）获取系统日期时间值。CURRENT_TIMESTAMP（）、LOCALTIME（）、SYSDATE（）和NOW（）<br>SELECT CURRENT_TIMESTAMP(),LOCALTIME(),SYSDATE(),NOW();<br><br>#（4）获取当前UTC（世界标准时间）日期或时间值。<br>#本地时间是根据地球上不同时区所处的位置调整 UTC 得来的，<br>#例如，北京时间比UTC时间晚8个小时。<br>#UTC_DATE(),CURDATE(),UTC_TIME(), CURTIME()<br>SELECT UTC_DATE(),CURDATE(),UTC_TIME(), CURTIME();<br><br><br>#（5）获取UNIX时间戳。<br>SELECT UNIX_TIMESTAMP(),UNIX_TIMESTAMP(&#x27;2022-1-1&#x27;);<br><br>#（6）获取具体的时间值，比如年、月、日、时、分、秒。<br>#分别是YEAR（date）、MONTH（date）、DAY（date）、HOUR（time）、MINUTE（time）、SECOND（time）。<br>SELECT YEAR(CURDATE()),MONTH(CURDATE()),DAY(CURDATE());<br>SELECT HOUR(CURTIME()),MINUTE(CURTIME()),SECOND(CURTIME());<br><br><br>#（7）获取日期时间的指定值。EXTRACT（type FROM date/time）函数<br>SELECT EXTRACT(YEAR_MONTH FROM CURDATE());<br><br>#（8）获取两个日期或时间之间的间隔。<br>#DATEDIFF（date1，date2）函数表示返回两个日期之间间隔的天数。<br>#TIMEDIFF（time1，time2）函数表示返回两个时间之间间隔的时分秒。<br><br>#查询今天距离员工入职的日期间隔天数<br>SELECT ename,DATEDIFF(CURDATE(),hiredate) FROM t_employee;<br><br>#查询现在距离中午放学还有多少时间<br>SELECT TIMEDIFF(CURTIME(),&#x27;12:0:0&#x27;);<br><br>#（9）在“t_employee”表中查询本月生日的员工姓名、生日。<br>SELECT ename,birthday<br>FROM t_employee<br>WHERE MONTH(CURDATE()) = MONTH(birthday);<br><br><br>#(10)#查询入职时间超过5年的<br>SELECT ename,hiredate,DATEDIFF(CURDATE(),hiredate) <br>FROM t_employee<br>WHERE DATEDIFF(CURDATE(),hiredate)  &gt; 365*5;<br></code></pre></td></tr></table></figure><h3 id="4、加密函数"><a href="#4、加密函数" class="headerlink" title="4、加密函数"></a>4、加密函数</h3><p>列出了部分的加密函数。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>password(str)</td><td>返回字符串str的加密版本，41位长的字符串<font color="red">（mysql8不再支持）</font></td></tr><tr><td>md5(str)</td><td>返回字符串str的md5值，也是一种加密方式</td></tr><tr><td>SHA(str)</td><td>返回字符串str的sha算法加密字符串，40位十六进制值的密码字符串</td></tr><tr><td>SHA2(str,hash_length)</td><td>返回字符串str的sha算法加密字符串，密码字符串的长度是hash_length&#x2F;4。hash_length可以是224、256、384、512、0，其中0等同于256。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#加密函数<br>/*<br>当用户需要对数据进行加密时，<br>比如做登录功能时，给用户的密码加密等。<br>*/<br>#password函数在mysql8已经移除了<br>SELECT PASSWORD(&#x27;123456&#x27;);<br><br>#使用md5加密<br>SELECT MD5(&#x27;123456&#x27;),SHA(&#x27;123456&#x27;),sha2(&#x27;123456&#x27;,0);<br><br>SELECT CHAR_LENGTH(MD5(&#x27;123456&#x27;)),SHA(&#x27;123456&#x27;),sha2(&#x27;123456&#x27;,0);<br><br><br>CREATE TABLE t_user(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(20),<br>PASSWORD VARCHAR(100)<br>);<br><br>INSERT INTO t_user VALUES(NULL,&#x27;chai&#x27;,MD5(&#x27;123456&#x27;));<br><br>SELECT * FROM t_user <br>WHERE username=&#x27;chai&#x27; AND PASSWORD =MD5(&#x27;123456&#x27;);<br><br><br>SELECT * FROM t_user <br>WHERE username=&#x27;chai&#x27; AND PASSWORD =&#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><h3 id="5、系统信息函数"><a href="#5、系统信息函数" class="headerlink" title="5、系统信息函数"></a>5、系统信息函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>database()</td><td>返回当前数据库名</td></tr><tr><td>version()</td><td>返回当前数据库版本</td></tr><tr><td>user()</td><td>返回当前登录用户名</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#其他函数<br>SELECT USER();<br>SELECT VERSION();<br>SELECT DATABASE();<br></code></pre></td></tr></table></figure><h3 id="6、条件判断函数"><a href="#6、条件判断函数" class="headerlink" title="6、条件判断函数"></a>6、条件判断函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value,t,f)</td><td>如果value是真，返回t,否则返回f</td></tr><tr><td>IFNULL(value1,value2)</td><td>如果value1不为空，返回value1,否则返回value2</td></tr><tr><td>CASE WHEN 条件1  THEN result1 WHEN 条件2  THEN result2 … ELSE resultn END</td><td>依次判断条件，哪个条件满足了，就返回对应的result,所有条件都不满足就返回ELSE的result。如果没有单独的ELSE子句，当所有WHEN后面的条件都不满足时则返回NULL值结果。等价于Java中if…else if….</td></tr><tr><td>CASE expr WHEN 常量值1  THEN 值1  WHEN 常量值2  THEN 值2 …  ELSE 值n END</td><td>判断表达式expr与哪个常量值匹配，找到匹配的就返回对应值，都不匹配就返回ELSE的值。如果没有单独的ELSE子句，当所有WHEN后面的常量值都不匹配时则返回NULL值结果。等价于Java中switch….case</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#条件判断函数<br>/*<br>这个函数不是筛选记录的函数，<br>而是根据条件不同显示不同的结果的函数。<br>*/<br>#如果薪资大于20000，显示高薪，否则显示正常<br>SELECT ename,salary,IF(salary&gt;20000,&#x27;高薪&#x27;,&#x27;正常&#x27;)<br>FROM t_employee;<br><br>#计算实发工资<br>#实发工资 = 薪资 + 薪资 * 奖金比例<br>SELECT ename,salary,commission_pct,<br>salary + salary * commission_pct<br>FROM t_employee;<br>#如果commission_pct是，计算完结果是NULL<br><br>SELECT ename,salary,commission_pct,<br>salary + salary * IFNULL(commission_pct,0) AS 实发工资<br>FROM t_employee;<br><br><br>SELECT ename,salary,commission_pct,<br>ROUND(salary + salary * IFNULL(commission_pct,0),2) AS 实发工资<br>FROM t_employee;<br><br>#查询员工编号，姓名，薪资，等级，等级根据薪资判断，<br>#如果薪资大于20000，显示“羡慕级别”，<br>#如果薪资15000-20000，显示“努力级别”，<br>#如果薪资10000-15000，显示“平均级别”<br>#如果薪资10000以下，显示“保底级别”<br>/*mysql中没有if...elseif函数，有case 函数。<br>等价于if...elseif <br>*/<br>SELECT eid,ename,salary,<br>CASE WHEN salary&gt;20000 THEN &#x27;羡慕级别&#x27;<br>     WHEN salary&gt;15000 THEN &#x27;努力级别&#x27;<br>     WHEN salary&gt;10000 THEN &#x27;平均级别&#x27;<br>     ELSE &#x27;保底级别&#x27;<br>END AS &quot;等级&quot;<br>FROM t_employee;  <br><br>#在“t_employee”表中查询入职7年以上的<br>#员工姓名、工作地点、轮岗的工作地点数量情况。<br>/*<br>计算工作地点的数量，转换为求 work_place中逗号的数量+1。<br> work_place中逗号的数量 = work_place的总字符数 -  work_place去掉,的字符数<br> work_place去掉, ，使用replace函数<br>*/<br>SELECT work_place, <br>CHAR_LENGTH(work_place)-CHAR_LENGTH(REPLACE(work_place,&#x27;,&#x27;,&#x27;&#x27;))<br>FROM t_employee;<br> <br> #类似于Java中switch...case<br>SELECT ename,work_place,<br>CASE (CHAR_LENGTH(work_place)-CHAR_LENGTH(REPLACE(work_place,&#x27;,&#x27;,&#x27;&#x27;))+1)<br>WHEN 1 THEN &#x27;只在一个地方工作&#x27;<br>WHEN 2 THEN &#x27;在两个地方来回奔波&#x27;<br>WHEN 3 THEN &#x27;在三个地方流动&#x27;<br>ELSE &#x27;频繁出差&#x27;<br>END AS &quot;工作地点数量情况&quot;<br>FROM t_employee<br>WHERE DATEDIFF(CURDATE(),hiredate)  &gt; 365*7;<br></code></pre></td></tr></table></figure><h3 id="7、其他函数"><a href="#7、其他函数" class="headerlink" title="7、其他函数"></a>7、其他函数</h3><p>从5.7.8版本之后开始支持JSON数据类型，并提供了操作JSON类型的数据的相关函数。</p><p>MySQL提供了非常丰富的空间函数以支持各种空间数据的查询和处理。</p><p>这两类函数基础阶段不讲，如果项目中有用到查询API使用。</p><h2 id="7-3-窗口函数"><a href="#7-3-窗口函数" class="headerlink" title="7.3 窗口函数"></a>7.3 窗口函数</h2><p>窗口函数也叫OLAP函数（Online Anallytical Processing，联机分析处理），可以对数据进行实时分析处理。窗口函数是每条记录都会分析，有几条记录执行完还是几条，因此也属于单行函数。</p><table><thead><tr><th>函数分类</th><th>函数</th><th>功能描述</th></tr></thead><tbody><tr><td>序号函数</td><td>ROW_NUMBER()</td><td>顺序排序，每行按照不同的分组逐行编号，例如：1,2,3,4</td></tr><tr><td></td><td>RANK()</td><td>并列排序，每行按照不同的分组进行编号，同一个分组中排序字段值出现重复值时，并列排序并跳过重复序号，例如：1,1,3</td></tr><tr><td></td><td>DENSE_RANK()</td><td>并列排序，每行按照不同的分组进行编号，同一个分组中排序字段值出现重复值时，并列排序不跳过重复序号，例如：1,1,2</td></tr></tbody></table><p>窗口函数的语法格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">函数名([参数列表]) OVER ()<br>函数名([参数列表]) OVER (子句)<br></code></pre></td></tr></table></figure><p>over关键字用来指定窗口函数的窗口范围。如果OVER后面是空（），则表示SELECT语句筛选的所有行是一个窗口。OVER后面的（）中支持以下4种语法来设置窗口范围。</p><ul><li>WINDOW：给窗口指定一个别名；</li><li>PARTITION BY子句：一个窗口范围还可以分为多个区域。按照哪些字段进行分区&#x2F;分组，窗口函数在不同的分组上分别处理分析；</li><li>ORDER BY子句：按照哪些字段进行排序，窗口函数将按照排序后结果进行分析处理；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#（1）在“t_employee”表中查询薪资在[8000,10000]之间的员工姓名和薪资并给每一行记录编序号<br>SELECT ROW_NUMBER() OVER () AS &quot;row_num&quot;,ename,salary<br>FROM t_employee WHERE salary BETWEEN 8000 AND 10000;<br><br>#（2）计算每一个部门的平均薪资与全公司的平均薪资的差值。<br>SELECT  did,AVG(salary) OVER() AS avg_all,<br>AVG(salary) OVER(PARTITION BY did) AS avg_did,<br>ROUND(AVG(salary) OVER()-AVG(salary) OVER(PARTITION BY did),2) AS deviation<br>FROM  t_employee;<br><br><br>#（3）在“t_employee”表中查询女员工姓名，部门编号，薪资，查询结果按照部门编号分组后在按薪资升序排列，并分别使用ROW_NUMBER（）、RANK（）、DENSE_RANK（）三个序号函数给每一行记录编序号。<br>SELECT ename,did,salary,gender,<br>ROW_NUMBER() OVER (PARTITION BY did ORDER BY salary) AS &quot;row_num&quot;,<br>RANK() OVER (PARTITION BY did ORDER BY salary) AS &quot;rank_num&quot; ,<br>DENSE_RANK() OVER (PARTITION BY did ORDER BY salary) AS &quot;ds_rank_num&quot; <br>FROM t_employee WHERE gender=&#x27;女&#x27;;<br><br>#或<br><br>SELECT ename,did,salary,<br>ROW_NUMBER() OVER w AS &quot;row_num&quot;,<br>RANK() OVER w AS &quot;rank_num&quot; ,<br>DENSE_RANK() OVER w AS &quot;ds_rank_num&quot; <br>FROM t_employee WHERE gender=&#x27;女&#x27;<br>WINDOW w AS (PARTITION BY did ORDER BY salary);<br><br><br>#（4）在“t_employee”表中查询每个部门最低3个薪资值的女员工姓名，部门编号，薪资值。<br>SELECT ROW_NUMBER() OVER () AS &quot;rn&quot;,temp.*<br>FROM(SELECT ename,did,salary,<br>ROW_NUMBER() OVER w AS &quot;row_num&quot;,<br>RANK() OVER w AS &quot;rank_num&quot; ,<br>DENSE_RANK() OVER w AS &quot;ds_rank_num&quot; <br>FROM t_employee WHERE gender=&#x27;女&#x27;<br>WINDOW w AS (PARTITION BY did ORDER BY salary))temp <br>WHERE temp.rank_num&lt;=3;<br><br>#或<br>SELECT ROW_NUMBER() OVER () AS &quot;rn&quot;,temp.*<br>FROM(SELECT ename,did,salary,<br>ROW_NUMBER() OVER w AS &quot;row_num&quot;,<br>RANK() OVER w AS &quot;rank_num&quot; ,<br>DENSE_RANK() OVER w AS &quot;ds_rank_num&quot; <br>FROM t_employee WHERE gender=&#x27;女&#x27;<br>WINDOW w AS (PARTITION BY did ORDER BY salary))temp <br>WHERE temp.ds_rank_num&lt;=3;<br><br><br>#（5）在“t_employee”表中查询每个部门薪资排名前3的员工姓名，部门编号，薪资值。<br>SELECT temp.*<br>FROM(SELECT ename,did,salary,<br>DENSE_RANK() OVER w AS &quot;ds_rank_num&quot; <br>FROM t_employee<br>WINDOW w AS (PARTITION BY did ORDER BY salary DESC))temp <br>WHERE temp.ds_rank_num&lt;=3;<br><br>#（6）在“t_employee”表中查询全公司薪资排名前3的员工姓名，部门编号，薪资值。<br>SELECT temp.*<br>FROM(SELECT ename,did,salary,<br>DENSE_RANK() OVER w AS &quot;ds_rank_num&quot; <br>FROM t_employee<br>WINDOW w AS (ORDER BY salary DESC))temp <br>WHERE temp.ds_rank_num&lt;=3;<br></code></pre></td></tr></table></figure><h1 id="第8章-关联查询（联合查询）"><a href="#第8章-关联查询（联合查询）" class="headerlink" title="第8章 关联查询（联合查询）"></a>第8章 关联查询（联合查询）</h1><h2 id="8-1-什么是关联查询"><a href="#8-1-什么是关联查询" class="headerlink" title="8.1 什么是关联查询"></a>8.1 什么是关联查询</h2><p>关联查询：两个或更多个表一起查询。</p><p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。</p><p>比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p><h2 id="8-2-关联查询结果分为几种情况"><a href="#8-2-关联查询结果分为几种情况" class="headerlink" title="8.2 关联查询结果分为几种情况"></a>8.2 关联查询结果分为几种情况</h2><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20211201000449563.png"></p><!--![](MySQL8.0_SQL笔记/image-20211201083845550.png)--><h2 id="8-3-关联查询的SQL有几种情况"><a href="#8-3-关联查询的SQL有几种情况" class="headerlink" title="8.3  关联查询的SQL有几种情况"></a>8.3  关联查询的SQL有几种情况</h2><p>1、内连接：inner join  … on</p><p>结果：A表 ∩ B表</p><p>2、左连接：A left join B on</p><p>（2）A表全部</p><p>（3）A表- A∩B</p><p>3、右连接：A right join B on</p><p>（4）B表全部</p><p>（5）B表-A∩B</p><p>4、全外连接：full outer join … on，但是mysql不支持这个关键字，mysql使用union（合并）结果的方式代替</p><p>（6）A表∪B表：    （2） A表结果  union （4）B表的结果</p><p>（7）A∪B - A∩B     （3）A表- A∩B结果 union （5）B表-A∩B结果</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/A%E2%88%A9B.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/A%E8%A1%A8.png" alt="A表"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/A%E8%A1%A8-%EF%BC%88A%E2%88%A9B%EF%BC%89.png" alt="A表-（A∩B）"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/B%E8%A1%A8.png" alt="B表"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/B%E8%A1%A8-%EF%BC%88A%E2%88%A9B%EF%BC%89.png" alt="B表-（A∩B）"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/A%E8%A1%A8%E2%88%AAB%E8%A1%A8.png" alt="A表∪B表"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/%EF%BC%88A%E8%A1%A8%E2%88%AAB%E8%A1%A8%EF%BC%89-%EF%BC%88A%E2%88%A9B%EF%BC%89.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-3779.png"></p><!--![](/MySQL8.0_SQL笔记/A∩B.png)![A表](MySQL8.0_SQL笔记/A表.png)![A表-（A∩B）](/MySQL8.0_SQL笔记/A表-（A∩B）.png)![B表](/MySQL8.0_SQL笔记/B表.png)![B表-（A∩B）](/MySQL8.0_SQL笔记/B表-（A∩B）.png)![A表∪B表](/MySQL8.0_SQL笔记/A表∪B表.png)![](/MySQL8.0_SQL笔记/（A表∪B表）-（A∩B）.png)![](/MySQL8.0_SQL笔记/image-3779.png)--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>（1）凡是联合查询的两个表，必须有“关联字段”，<br>关联字段是逻辑意义一样，数据类型一样，名字可以一样也可以不一样的两个字段。<br>比如：t_employee （A表）中did和t_department（B表）中的did。<br><br>发现关联字段其实就是“可以”建外键的字段。当然联合查询不要求一定建外键。<br><br>（2）联合查询必须写关联条件，关联条件的个数 = n - 1.<br>n是联合查询的表的数量。<br>如果2个表一起联合查询，关联条件数量是1，<br>如果3个表一起联合查询，关联条件数量是2，<br>如果4个表一起联合查询，关联条件数量是3，<br>。。。。<br>否则就会出现笛卡尔积现象，这是应该避免的。<br><br>（3）关联条件可以用on子句编写，也可以写到where中。<br>但是建议用on单独编写，这样呢，可读性更好。<br><br>每一个join后面都要加on子句<br>A inner|left|right join  B on 条件<br>A inner|left|right join  B on 条件 inner|left|right jon C on 条件<br></code></pre></td></tr></table></figure><h3 id="1、内连接"><a href="#1、内连接" class="headerlink" title="1、内连接"></a>1、内连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示内连接，结果是A∩B<br>/*<br>观察数据：<br>t_employee  看成A表<br>t_department 看成B表<br>此时t_employee （A表）中有 李红和周洲的did是NULL，没有对应部门，<br>    t_department（B表）中有 测试部，在员工表中找不到对应记录的。<br>*/<br><br>#查询所有员工的姓名，部门编号，部门名称<br>#如果员工没有部门的，不要<br>#如果部门没有员工的，不要<br>/*<br>员工的姓名在t_employee （A表）中<br>部门的编号，在t_employee （A表）和t_department（B表）都有<br>部门名称在t_department（B表）中<br>所以需要联合两个表一起查询。<br>*/<br>SELECT ename,did,dname<br>FROM t_employee INNER JOIN t_department;<br>#错误Column &#x27;did&#x27; in field list is ambiguous<br>#因为did在两个表中都有，名字相同，它不知道取哪个表中字段了<br>#有同学说，它俩都是部门编号，随便取一个不就可以吗？<br>#mysql不这么认为，有可能存在两个表都有did，但是did的意义不同的情况。<br>#为了避免这种情况，需要在编写sql的时候，明确指出是用哪个表的did<br><br>SELECT ename,t_department.did,dname<br>FROM t_employee INNER JOIN t_department;<br>#语法对，结果不太对<br>#结果出现“笛卡尔积”现象， A表记录 * B表记录<br>/*<br>（1）凡是联合查询的两个表，必须有“关联字段”，<br>关联字段是逻辑意义一样，数据类型一样，名字可以一样也可以不一样的两个字段。<br>比如：t_employee （A表）中did和t_department（B表）中的did。<br><br>发现关联字段其实就是可以建外键的字段。当然联合查询不要求一定建外键。<br><br>（2）联合查询必须写关联条件，关联条件的个数 = n - 1.<br>n是联合查询的表的数量。<br>如果2个表一起联合查询，关联条件数量是1，<br>如果3个表一起联合查询，关联条件数量是2，<br>如果4个表一起联合查询，关联条件数量是3，<br>。。。。<br>否则就会出现笛卡尔积现象，这是应该避免的。<br><br>（3）关联条件可以用on子句编写，也可以写到where中。<br>但是建议用on单独编写，这样呢，可读性更好。<br><br>每一个join后面都要加on子句<br>A inner|left|right join  B on 条件<br>A inner|left|right join  B on 条件 inner|left|right jon C on 条件<br>*/<br><br><br>SELECT ename,t_department.did,dname<br>FROM t_employee INNER JOIN t_department <br>ON t_employee.did = t_department.did;<br><br>SELECT *<br>FROM t_employee INNER JOIN t_department <br>ON t_employee.did = t_department.did;<br><br><br>#查询部门编号为1的女员工的姓名、部门编号、部门名称、薪资等情况<br>SELECT ename,gender,t_department.did,dname,salary<br>FROM t_employee INNER JOIN t_department <br>ON t_employee.did = t_department.did<br>WHERE t_department.did = 1 AND gender = &#x27;女&#x27;;<br><br>#查询部门编号为1的员工姓名、部门编号、部门名称、薪资、职位编号、职位名称等情况<br>SELECT ename,gender,t_department.did,dname,salary,job_id,jname<br>FROM t_employee INNER JOIN t_department ON t_employee.did = t_department.did<br> INNER JOIN t_job ON t_employee.`job_id` = t_job.`jid`<br>WHERE t_department.did = 1;<br><br></code></pre></td></tr></table></figure><h3 id="2、左连接"><a href="#2、左连接" class="headerlink" title="2、左连接"></a>2、左连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示左连接<br>/*<br>(2)A<br>（3）A-A∩B<br>*/<br>/*<br>观察数据：<br>t_employee  看成A表<br>t_department 看成B表<br>此时t_employee （A表）中有 李红和周洲的did是NULL，没有对应部门，<br>    t_department（B表）中有 测试部，在员工表中找不到对应记录的。<br>*/<br>#查询所有员工，包括没有指定部门的员工，他们的姓名、薪资、部门编号、部门名称<br>SELECT ename,salary,t_department.did,dname<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did;<br>#查询的是A结果  A left join B<br><br>#查询没有部门的员工信息<br>SELECT ename,salary,t_department.did,dname<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE t_employee.did IS NULL;<br>#查询的结果是A - A∩B<br>#此时的where条件，建议写子表的关联字段is null，这样更准确一点。<br>#如果要建外键，它们肯定有子表和父表的角色，写子表的关联字段is null<br>#因为父表中这个字段一般是主键，不会为null。<br><br></code></pre></td></tr></table></figure><h3 id="3、右连接"><a href="#3、右连接" class="headerlink" title="3、右连接"></a>3、右连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>右连接<br>（4）B<br>（5）B - A∩B<br>*/<br>#演示右连接<br>/*<br>观察数据：<br>t_employee  看成A表<br>t_department 看成B表<br>此时t_employee （A表）中有 李红和周洲的did是NULL，没有对应部门，<br>    t_department（B表）中有 测试部，在员工表中找不到对应记录的。<br>*/<br>#查询所有部门，包括没有对应员工的部门，他们的姓名、薪资、部门编号、部门名称<br>SELECT ename,salary,t_department.did,dname<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did;<br>#查询的是B结果  A RIGHT join B<br><br>#查询没有员工部门的信息<br>SELECT ename,salary,t_department.did,dname<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE t_employee.did IS NULL;<br>#查询的结果是B - A∩B<br>#此时的where条件，建议写子表的关联字段is null，这样更准确一点。<br>#如果要建外键，它们肯定有子表和父表的角色，写子表的关联字段is null<br>#因为父表中这个字段一般是主键，不会为null。<br><br><br><br>#查询所有员工，包括没有指定部门的员工，他们的姓名、薪资、部门编号、部门名称<br>SELECT ename,salary,t_department.did,dname<br>FROM t_department RIGHT JOIN t_employee<br>ON t_employee.did = t_department.did;<br>#查询的是B结果  A RIGHT join B<br><br>#查询没有部门的员工信息<br>SELECT ename,salary,t_department.did,dname<br>FROM t_department RIGHT JOIN t_employee<br>ON t_employee.did = t_department.did<br>WHERE t_employee.did IS NULL;<br>#查询的结果是B - A∩B  A right join B<br>#此时的where条件，建议写子表的关联字段is null，这样更准确一点。<br>#如果要建外键，它们肯定有子表和父表的角色，写子表的关联字段is null<br>#因为父表中这个字段一般是主键，不会为null。<br></code></pre></td></tr></table></figure><h3 id="4、union"><a href="#4、union" class="headerlink" title="4、union"></a>4、union</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>union实现<br>（6）A∪B<br>（7）A∪B - A∩B<br>    A-A∩B  ∪  B-A∩B<br>*/<br>#演示用union合并两个查询结果实现A∪B 和A∪B - A∩B<br>/*<br>union合并时要注意：<br>（1）两个表要查询的结果字段是一样的<br>（2）UNION ALL表示直接合并结果，如果有重复的记录一并显示<br>   ALL去掉表示合并结果时，如果有重复记录，去掉。<br>（3）要实现A∪B的结果，那么必须是合并 查询是A表结果和查询是B表结果的select语句。<br>同样要实现A∪B - A∩B的结果，那么必须是合并查询是A-A∩B结果和查询是B-A∩B的select语句。<br>*/<br><br>#查询所有员工和所有部门，包括没有指定部门的员工和没有分配员工的部门。<br>SELECT *<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did<br><br>UNION <br><br>SELECT *<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did;<br><br><br>#以下union会报错<br>SELECT * FROM t_employee<br>UNION<br>SELECT * FROM t_department;<br>/*<br>错误代码： 1222<br>The used SELECT statements have a different number of columns<br>两个Select语句的列数是不同的。<br><br>column：列，表中的字段。<br>columns：很多的字段，即字段列表<br>select 字段列表 from 表名称;<br>*/<br><br><br>#联合 查询结果是A表的select 和查询结果是A∩B的select语句，是得不到A∪B<br>SELECT *<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did<br><br>UNION <br><br>SELECT *<br>FROM t_employee INNER JOIN t_department<br>ON t_employee.did = t_department.did;<br><br>#查询那些没有分配部门的员工和没有指定员工的部门，即A表和B表在对方那里找不到对应记录的数据。<br>SELECT *<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE t_employee.did IS NULL<br><br>UNION <br><br>SELECT *<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE t_employee.did IS NULL;<br></code></pre></td></tr></table></figure><h2 id="8-4-联合查询字段列表问题"><a href="#8-4-联合查询字段列表问题" class="headerlink" title="8.4 联合查询字段列表问题"></a>8.4 联合查询字段列表问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询字段的问题<br>#查询每一个员工及其所在部门的信息<br>#要求：显示员工的编号，姓名，部门编号，部门名称<br>SELECT eid,ename,did,dname<br>FROM t_employee INNER JOIN t_department<br>ON t_employee.did = t_department.did;<br>/*<br>错误代码： 1052<br>Column &#x27;did&#x27; in field list is ambiguous（模糊不清的；引起歧义的）<br>*/<br><br>SELECT eid,ename,t_employee.did,dname<br>FROM t_employee INNER JOIN t_department<br>ON t_employee.did = t_department.did;<br><br><br>#查询每一个员工及其所在部门的信息<br>#要求，显示员工的编号，姓名，部门表的所有字段<br>SELECT eid,ename,t_department.*<br>FROM t_employee INNER JOIN t_department<br>ON t_employee.did = t_department.did;<br></code></pre></td></tr></table></figure><h2 id="8-5-自连接"><a href="#8-5-自连接" class="headerlink" title="8.5 自连接"></a>8.5 自连接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示特殊的联合查询/关联查询/多表查询：自连接<br>#物理上，是一张表<br>#逻辑上，是两张表<br>/*<br>分析表结构：t_employee表<br>mid：是表示存储员工的领导编号。即该员工归谁管。领导编号其实就是“领导”作为员工身份的员工编号<br>   例如：eid为3的员工邓超远，他的mid是7，表示他的领导是员工编号为7的员工。<br>   eid为7的员工是贾宝玉，他的eid是7，贾宝玉作为员工来说，他的编号是7，作为领导来说，他的编号也是7。<br><br>mid的取值范围受到eid字段的限制。mid的值选择必须是eid现有值范围。<br><br>可以理解为mid和eid是关联字段，如果要建外键，可以在mid字段上建外键。<br>foreign key(mid) references t_employee(eid)   <br><br>此时t_employee既是子表也是父表。<br>员工表t_employee建立了外键：<br>CONSTRAINT `t_employee_ibfk_3` FOREIGN KEY (`mid`) REFERENCES `t_employee` (`eid`) ON DELETE SET NULL ON UPDATE CASCADE<br>*/<br>#查询每一个员工自己的编号、名字、薪资和他的领导的编号、姓名、薪资。<br>SELECT emp.eid,emp.ename,emp.salary,  mgr.eid,mgr.ename,mgr.salary<br>FROM t_employee AS emp INNER JOIN t_employee AS mgr<br>ON emp.mid = mgr.eid; <br>#把t_employee当成两张表，通过取别名的方式<br>#t_employee AS emp 把员工表 当成员工表<br># t_employee AS mgr 把员工表  当成存储领导信息的领导表<br>#emp.mid = mgr.eid; 员工表的领导编号就是领导表的员工编号<br></code></pre></td></tr></table></figure><h1 id="第9章-select的7大子句"><a href="#第9章-select的7大子句" class="headerlink" title="第9章 select的7大子句"></a>第9章 select的7大子句</h1><h2 id="9-1-7大子句顺序"><a href="#9-1-7大子句顺序" class="headerlink" title="9.1 7大子句顺序"></a>9.1 7大子句顺序</h2><p>（1）from：从哪些表中筛选</p><p>（2）inner|left|right …  on：关联多表查询时，去除笛卡尔积</p><p>（3）where：从表中筛选的条件</p><p>（4）group by：分组依据</p><p>（5）having：在分组统计结果中再次筛选（with rollup)</p><p>（6）order by：排序</p><p>（7）limit：分页</p><p>必须按照（1）-（7）的顺序编写子句。</p><h2 id="9-2-演示"><a href="#9-2-演示" class="headerlink" title="9.2 演示"></a>9.2 演示</h2><h3 id="9-2-1-from子句"><a href="#9-2-1-from子句" class="headerlink" title="9.2.1 from子句"></a>9.2.1 from子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1、from子句<br>SELECT * <br>FROM t_employee; #表示从某个表中筛选数据<br></code></pre></td></tr></table></figure><h3 id="9-2-2-on子句"><a href="#9-2-2-on子句" class="headerlink" title="9.2.2 on子句"></a>9.2.2 on子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#2、on子句<br>/*<br>（1）on必须配合join使用<br>（2）on后面只写关联条件<br>所谓关联条件是两个表的关联字段的关系<br>（3）有n张表关联，就有n-1个关联条件<br>两张表关联，就有1个关联条件<br>三张表关联，就有2个关联条件<br>*/<br>SELECT *<br>FROM t_employee INNER JOIN t_department<br>ON t_employee.did = t_department.did;  #1个关联条件<br><br>#查询员工的编号，姓名，职位编号，职位名称，部门编号，部门名称<br>#需要t_employee员工表，t_department部门表，t_job职位表<br>SELECT eid,ename,t_job.job_id,t_job.job_name, `t_department`.`did`,`t_department`.`dname`<br>FROM t_employee INNER JOIN t_department INNER JOIN t_job<br>ON t_employee.did = t_department.did AND t_employee.job_id = t_job.job_id;<br><br></code></pre></td></tr></table></figure><h3 id="9-2-3-where子句"><a href="#9-2-3-where子句" class="headerlink" title="9.2.3 where子句"></a>9.2.3 where子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#3、where子句，在查询结果中筛选<br>#查询女员工的信息，以及女员工的部门信息<br>SELECT *<br>FROM t_employee INNER JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE gender = &#x27;女&#x27;;<br></code></pre></td></tr></table></figure><h3 id="9-2-4-group-by子句"><a href="#9-2-4-group-by子句" class="headerlink" title="9.2.4 group by子句"></a>9.2.4 group by子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#4、group by分组<br>#查询所有员工的平均薪资<br>SELECT AVG(salary) FROM t_employee;<br><br>#查询每一个部门的平均薪资<br>SELECT did,ROUND(AVG(salary),2 )<br>FROM t_employee<br>GROUP BY did;<br><br>#查询每一个部门的平均薪资，显示部门编号，部门的名称，该部门的平均薪资<br>SELECT t_department.did,dname,ROUND(AVG(salary),2 )<br>FROM t_department LEFT JOIN t_employee<br>ON t_department.did = t_employee.did<br>GROUP BY t_department.did;<br><br>#查询每一个部门的平均薪资，显示部门编号，部门的名称，该部门的平均薪资<br>#要求，如果没有员工的部门，平均薪资不显示null，显示0<br>SELECT t_department.did,dname,IFNULL(ROUND(AVG(salary),2),0)<br>FROM t_department LEFT JOIN t_employee<br>ON t_department.did = t_employee.did<br>GROUP BY t_department.did;<br><br>#查询每一个部门的女员工的平均薪资，显示部门编号，部门的名称，该部门的平均薪资<br>#要求，如果没有员工的部门，平均薪资不显示null，显示0<br>SELECT t_department.did,dname,IFNULL(ROUND(AVG(salary),2),0)<br>FROM t_department LEFT JOIN t_employee<br>ON t_department.did = t_employee.did<br>WHERE gender = &#x27;女&#x27;<br>GROUP BY t_department.did;<br></code></pre></td></tr></table></figure><p>问题1：合计，WITH ROLLUP，加在group by后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#问题1：合计，WITH ROLLUP，加在group by后面<br>#按照部门统计人数<br>SELECT did, COUNT(*) FROM t_employee GROUP BY did;<br>#按照部门统计人数，并合计总数<br>SELECT did, COUNT(*) FROM t_employee GROUP BY did WITH ROLLUP;<br>SELECT IFNULL(did,&#x27;合计&#x27;), COUNT(*) FROM t_employee GROUP BY did WITH ROLLUP;<br>SELECT IFNULL(did,&#x27;合计&#x27;) AS &quot;部门编号&quot; , COUNT(*)  AS &quot;人数&quot; FROM t_employee GROUP BY did WITH ROLLUP;<br><br></code></pre></td></tr></table></figure><p>问题2：是否可以按照多个字段分组统计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#问题2：是否可以按照多个字段分组统计<br>#按照不同的部门，不同的职位，分别统计男和女的员工人数<br>SELECT did, job_id, gender, COUNT(*)<br>FROM t_employee <br>GROUP BY did, job_id, gender;<br></code></pre></td></tr></table></figure><p>问题4：分组统计时，select后面字段列表的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#问题4：分组统计时，select后面字段列表的问题<br>SELECT eid,ename, did, COUNT(*) FROM t_employee; <br>#eid,ename, did此时和count(*)，不应该出现在select后面<br><br>SELECT eid,ename, did, COUNT(*) FROM t_employee GROUP BY did; <br>#eid,ename此时和count(*)，不应该出现在select后面<br><br>SELECT  did, COUNT(*) FROM t_employee GROUP BY did;<br>#分组统计时，select后面只写和分组统计有关的字段，其他无关字段不要出现，否则会引起歧义<br></code></pre></td></tr></table></figure><h3 id="9-2-5-having子句"><a href="#9-2-5-having子句" class="headerlink" title="9.2.5 having子句"></a>9.2.5 having子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#5、having<br>/*<br>having子句也写条件<br>where的条件是针对原表中的记录的筛选。where后面不能出现分组函数。<br>having子句是对统计结果（分组函数计算后）的筛选。having可以加分组函数。<br>*/<br>#查询每一个部门的女员工的平均薪资，显示部门编号，部门的名称，该部门的平均薪资<br>#要求，如果没有员工的部门，平均薪资不显示null，显示0<br>#最后只显示平均薪资高于12000的部门信息<br>SELECT t_department.did,dname,IFNULL(ROUND(AVG(salary),2),0)<br>FROM t_department LEFT JOIN t_employee<br>ON t_department.did = t_employee.did<br>WHERE gender = &#x27;女&#x27;<br>GROUP BY t_department.did<br>HAVING IFNULL(ROUND(AVG(salary),2),0) &gt;12000;<br><br><br>#查询每一个部门的男和女员工的人数<br>SELECT did,gender,COUNT(*)<br>FROM t_employee<br>GROUP BY did,gender;<br><br>#查询每一个部门的男和女员工的人数，显示部门编号，部门的名称，性别，人数<br>SELECT t_department.did,dname,gender,COUNT(eid)<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>GROUP BY t_department.did,gender;<br><br>#查询每一个部门薪资超过10000的男和女员工的人数，显示部门编号，部门的名称，性别，人数<br>#只显示人数低于3人<br>SELECT t_department.did,dname,gender,COUNT(eid)<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE salary &gt; 10000<br>GROUP BY t_department.did,gender<br>HAVING COUNT(eid) &lt; 3;<br></code></pre></td></tr></table></figure><h3 id="9-2-6-order-by子句"><a href="#9-2-6-order-by子句" class="headerlink" title="9.2.6 order by子句"></a>9.2.6 order by子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#6、排序 order by<br>/*<br>升序和降序，默认是升序<br>asc代表升序<br>desc 代表降序<br>*/<br>#查询员工信息，按照薪资从高到低<br>SELECT * FROM t_employee<br>ORDER BY salary DESC;<br><br>#查询每一个部门薪资超过10000的男和女员工的人数，显示部门编号，部门的名称，性别，人数<br>#只显示人数低于3人，按照人数升序排列<br>SELECT t_department.did,dname,gender,COUNT(eid)<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE salary &gt; 10000<br>GROUP BY t_department.did,gender<br>HAVING COUNT(eid) &lt; 3<br>ORDER BY COUNT(eid);<br><br><br>#查询员工的薪资，按照薪资从低到高，薪资相同按照员工编号从高到低<br>SELECT *<br>FROM t_employee<br>ORDER BY salary ASC , eid DESC;<br></code></pre></td></tr></table></figure><h3 id="9-2-7-limit子句"><a href="#9-2-7-limit子句" class="headerlink" title="9.2.7 limit子句"></a>9.2.7 limit子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示limit子句<br>/*<br>limit子句是用于分页显示结果。<br>limit m,n<br>n：表示最多该页显示几行<br>m：表示从第几行开始取记录，第一个行的索引是0<br>m = (page-1)*n  page表示第几页<br><br>每页最多显示5条，n=5<br>第1页，page=1，m = (1-1)*5 = 0;  limit 0,5<br>第2页，page=2，m = (2-1)*5 = 5;  limit 5,5<br>第3页，page=3，m = (3-1)*5 = 10;  limit 10,5<br>*/<br>#查询员工表的数据，分页显示，每页显示5条记录<br>#第1页<br>SELECT * FROM t_employee LIMIT 0,5;<br>#第2页<br>SELECT * FROM t_employee LIMIT 5,5;<br>#第3页<br>SELECT * FROM t_employee LIMIT 10,5;<br>#第4页<br>SELECT * FROM t_employee LIMIT 15,5;<br>#第5页<br>SELECT * FROM t_employee LIMIT 20,5;<br>#第6页<br>SELECT * FROM t_employee LIMIT 25,5;<br><br><br>#查询所有的男员工信息，分页显示，每页显示3条，第2页<br>#limit m,n  n=3,page=2,m=(page-1)*n=3<br>SELECT *<br>FROM t_employee<br>WHERE gender =&#x27;男&#x27;<br>LIMIT 3,3<br><br>#查询每一个编号为偶数的部门，显示部门编号，名称，员工数量，<br>#只显示员工数量&gt;=2的结果，按照员工数量升序排列，<br>#每页显示2条，显示第1页<br>SELECT t_department.did,dname,COUNT(eid)<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>WHERE t_department.did%2=0<br>GROUP BY t_department.did<br>HAVING COUNT(eid)&gt;=2<br>ORDER BY COUNT(eid)<br>LIMIT 0,2;<br></code></pre></td></tr></table></figure><h1 id="第10章-子查询"><a href="#第10章-子查询" class="headerlink" title="第10章 子查询"></a>第10章 子查询</h1><h2 id="10-1-SELECT的SELECT中嵌套子查询"><a href="#10-1-SELECT的SELECT中嵌套子查询" class="headerlink" title="10.1 SELECT的SELECT中嵌套子查询"></a>10.1 SELECT的SELECT中嵌套子查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>子查询：嵌套在另一个SQL语句中的查询。<br>SELECT语句可以嵌套在另一个SELECT中，UPDATE，DELETE，INSERT，CREATE语句等。<br><br>(1)SELECT的SELECT中嵌套子查询<br>*/<br><br>#（1）在“t_employee”表中查询每个人薪资和公司平均薪资的差值，<br>#并显示员工薪资和公司平均薪资相差5000元以上的记录。<br>SELECT ename AS &quot;姓名&quot;,<br>salary AS &quot;薪资&quot;,<br> ROUND((SELECT AVG(salary) FROM t_employee),2) AS &quot;全公司平均薪资&quot;,<br> ROUND(salary-(SELECT AVG(salary) FROM t_employee),2) AS &quot;差值&quot;<br>FROM t_employee<br>WHERE ABS(ROUND(salary-(SELECT AVG(salary) FROM t_employee),2))&gt;5000;<br><br>#（2）在“t_employee”表中查询每个部门平均薪资和公司平均薪资的差值。<br>SELECT did,AVG(salary),<br>AVG(salary)-(SELECT AVG(salary) FROM t_employee)<br>FROM t_employee<br>GROUP BY did;<br></code></pre></td></tr></table></figure><h2 id="10-2-SELECT的WHERE或HAVING中嵌套子查询"><a href="#10-2-SELECT的WHERE或HAVING中嵌套子查询" class="headerlink" title="10.2 SELECT的WHERE或HAVING中嵌套子查询"></a>10.2 SELECT的WHERE或HAVING中嵌套子查询</h2><p>当子查询结果作为外层另一个SQL的过滤条件，通常把子查询嵌入到WHERE或HAVING中。根据子查询结果的情况，分为如下三种情况。</p><ul><li>当子查询的结果是单列单个值，那么可以直接使用比较运算符，如“&lt;”、“&lt;&#x3D;”、“&gt;”、“&gt;&#x3D;”、“&#x3D;”、“!&#x3D;”等与子查询结果进行比较。</li><li>当子查询的结果是单列多个值，那么可以使用比较运算符IN或NOT IN进行比较。</li><li>当子查询的结果是单列多个值，还可以使用比较运算符, 如“&lt;”、“&lt;&#x3D;”、“&gt;”、“&gt;&#x3D;”、“&#x3D;”、“!&#x3D;”等搭配ANY、ALL等关键字与查询结果进行比较。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>子查询嵌套在where后面。<br>在where或having后面的子查询结果是：<br>（1）单个值，那么可以用=，&gt;,&lt;,&gt;=,&lt;=,!=这样的运算符和子查询的结果做比较<br>（2）多个值，那么需要用in,not in, &gt;all,&gt;any....形式做比较<br> 如“&lt;”、“&lt;=”、“&gt;”、“&gt;=”、“=”、“!=”等搭配ANY、SOME、ALL等关键字与查询结果进行比较<br><br>*/<br>#（1）在“t_employee”表中查询薪资最高的员工姓名（ename）和薪资（salary）。<br>#SELECT ename,MAX(salary) FROM t_employee;#错误<br>#取表中第一行员工的姓名和全公司最高的薪资值一起显示。<br><br>SELECT ename,salary<br>FROM t_employee<br>WHERE salary = (SELECT MAX(salary) FROM t_employee);<br><br>#（2）在“t_employee”表中查询比全公司平均薪资高的男员工姓名和薪资。<br>SELECT ename,salary<br>FROM t_employee<br>WHERE salary &gt; (SELECT AVG(salary) FROM t_employee) AND gender = &#x27;男&#x27;;<br><br>#（3）在“t_employee”表中查询和“白露”，“谢吉娜”同一部门的员工姓名和电话。<br>SELECT ename,tel,did<br>FROM t_employee<br>WHERE did IN(SELECT did FROM t_employee WHERE ename=&#x27;白露&#x27; || ename=&#x27;谢吉娜&#x27;);<br><br>SELECT ename,tel,did<br>FROM t_employee<br>WHERE did =ANY(SELECT did FROM t_employee WHERE ename=&#x27;白露&#x27; || ename=&#x27;谢吉娜&#x27;);<br><br><br>#（4）在“t_employee”表中查询薪资比“白露”，“李诗雨”，“黄冰茹”三个人的薪资都要高的员工姓名和薪资。<br>SELECT ename,salary<br>FROM t_employee<br>WHERE salary &gt;ALL(SELECT salary FROM t_employee WHERE ename IN(&#x27;白露&#x27;,&#x27;李诗雨&#x27;,&#x27;黄冰茹&#x27;));<br><br><br>#（5）查询“t_employee”和“t_department”表，按部门统计平均工资，<br>#显示部门平均工资比全公司的总平均工资高的部门编号、部门名称、部门平均薪资，<br>#并按照部门平均薪资升序排列。<br>SELECT t_department.did,dname,AVG(salary)<br>FROM t_employee RIGHT JOIN t_department<br>ON t_employee.did = t_department.did<br>GROUP BY t_department.did<br>HAVING AVG(salary) &gt;(SELECT AVG(salary) FROM t_employee)<br>ORDER BY AVG(salary);<br></code></pre></td></tr></table></figure><h2 id="10-3-SELECT中的EXISTS型子查询"><a href="#10-3-SELECT中的EXISTS型子查询" class="headerlink" title="10.3 SELECT中的EXISTS型子查询"></a>10.3 SELECT中的EXISTS型子查询</h2><p>EXISTS型子查询也是存在外层SELECT的WHERE子句中，不过它和上面的WHERE型子查询的工作模式不相同，所以这里单独讨论它。</p><p>如果EXISTS关键字后面的参数是一个任意的子查询，系统将对子查询进行运算以判断它是否返回行，如果至少返回一行，那么EXISTS的结果为true，此时外层查询语句将进行查询；如果子查询没有返回任何行，那么EXISTS的结果为false，此时外层查询语句不进行查询。EXISTS和NOT EXISTS的结果只取决于是否返回行，而不取决于这些行的内容，所以这个子查询输入列表通常是无关紧要的。</p><p>如果EXISTS关键字后面的参数是一个关联子查询，即子查询的WHERE条件中包含与外层查询表的关联条件，那么此时将对外层查询表做循环，即在筛选外层查询表的每一条记录时，都看这条记录是否满足子查询的条件，如果满足就再用外层查询的其他WHERE条件对该记录进行筛选，否则就丢弃这行记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#exist型子查询<br>/*<br>（1）exists()中的子查询和外面的查询没有联合的情况下，<br>如果exists()中的子查询没有返回任何行，那么外面的子查询就不查了。<br>（2）exists()中的子查询与外面的查询有联合工作的情况下，<br>循环进行把外面查询表的每一行记录的值，代入()中子查询，如果可以查到结果，<br>就留下外面查询的这条记录，否则就舍去。<br>*/<br><br>#（1）查询“t_employee”表中是否存在部门编号为NULL的员工，<br>#如果存在，查询“t_department”表的部门编号、部门名称。<br>SELECT * FROM t_department <br>WHERE EXISTS(SELECT * FROM t_employee  WHERE did IS NULL);<br><br>#（2）查询“t_department”表是否存在与“t_employee”表相同部门编号的记录，<br>#如果存在，查询这些部门的编号和名称。<br>SELECT * FROM t_department<br>WHERE EXISTS(SELECT * FROM t_employee WHERE t_employee.did = t_department.did);<br><br>#查询结果等价于下面的sql<br>SELECT DISTINCT t_department.*<br>FROM t_department INNER JOIN t_employee<br>ON t_department.did = t_employee.did;<br></code></pre></td></tr></table></figure><h2 id="10-4-SELECT的FROM中嵌套子查询"><a href="#10-4-SELECT的FROM中嵌套子查询" class="headerlink" title="10.4 SELECT的FROM中嵌套子查询"></a>10.4 SELECT的FROM中嵌套子查询</h2><p>当子查询结果是多列的结果时，通常将子查询放到FROM后面，然后采用给子查询结果取别名的方式，把子查询结果当成一张“动态生成的临时表”使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#子查询嵌套在from后面<br>/*<br>当一个查询要基于另一个查询结果来筛选的时候，<br>另一个查询还是多行多列的结果，那么就可以把这个查询结果当成一张临时表，<br>放在from后面进行再次筛选。<br><br>*/<br><br>#（1）在“t_employee”表中，查询每个部门的平均薪资，<br>#然后与“t_department”表联合查询<br>#所有部门的部门编号、部门名称、部门平均薪资。<br><br>SELECT did,AVG(salary) FROM t_employee GROUP BY did;<br><br>+------+-------------+<br>| did  | AVG(salary) |<br>+------+-------------+<br>|    1 |  11479.3125 |<br>|    2 |       13978 |<br>|    3 |    37858.25 |<br>|    4 |       12332 |<br>|    5 |       11725 |<br>+------+-------------+<br>5 ROWS IN SET (0.00 sec)<br><br>#用上面的查询结果，当成一张临时表，与t_department部门表做联合查询<br>#要给这样的子查询取别名的方式来当临时表用，不取别名是不可以的。<br>#而且此时的别名不能加&quot;&quot;<br>#字段的别名可以加&quot;&quot;，表的别名不能加&quot;&quot;<br><br>SELECT t_department.did ,dname,AVG(salary)<br>FROM t_department LEFT JOIN (SELECT did,AVG(salary) FROM t_employee GROUP BY did) temp<br>ON t_department.did = temp.did;<br>#错误，from后面的t_department和temp表都没有salary字段，<br>#SELECT t_department.did ,dname,AVG(salary)出现AVG(salary)是错误的<br><br>SELECT t_department.did ,dname,pingjun<br>FROM t_department LEFT JOIN (SELECT did,AVG(salary) AS pingjun FROM t_employee GROUP BY did) temp<br>ON t_department.did = temp.did;<br><br><br>#（2）在“t_employee”表中查询每个部门中薪资排名前2的员工姓名、部门编号和薪资。<br>SELECT * FROM (<br>SELECT ename,did,salary,<br>DENSE_RANK() over (PARTITION BY did ORDER BY salary DESC) AS paiming<br>FROM t_employee) temp<br>WHERE temp.paiming &lt;=2;<br></code></pre></td></tr></table></figure><h1 id="第11章-MySQL支持的数据类型"><a href="#第11章-MySQL支持的数据类型" class="headerlink" title="第11章 MySQL支持的数据类型"></a>第11章 MySQL支持的数据类型</h1><h2 id="11-1-数值类型：包括整数和小数"><a href="#11-1-数值类型：包括整数和小数" class="headerlink" title="11.1 数值类型：包括整数和小数"></a>11.1 数值类型：包括整数和小数</h2><p>数值类型主要用来存储数字，不同的数值类型提供不同的取值范围，可以存储的值范围越大，所需要的存储空间也越大。MySQL支持所有标准SQL中的数值类型，其中包括严格数据类型（INTEGER、SMALLINT、DECIMAL、NUMERIC）和近似数值类型（FLOAT、REAL、DOUBLE PRECISION）。MySQL还扩展了TINYINT、MEDIUMINT和BIGINT等3种不同长度的整数类型，并增加了BIT类型，用来存储位数据。</p><p>对于MySQL中的数值类型，还要做如下说明：</p><ul><li><p>关键字INT是INTEGER的同义词。</p></li><li><p>关键字DEC和FIXED是DECIMAL的同义词。</p></li><li><p>NUMERIC和DECIMAL类型被视为相同的数据类型。</p></li><li><p>DOUBLE视为DOUBLE PRECISION的同义词，并在REAL_AS_FLOAT SQL模式未启用的情况下，将REAL也视为DOUBLE PRECISION的同义词。</p></li></ul><h3 id="1、整数类型"><a href="#1、整数类型" class="headerlink" title="1、整数类型"></a>1、整数类型</h3><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-6588.png"></p><!--![](/MySQL8.0_SQL笔记/image-6588.png)--><p>说明：</p><p>对于整数类型，MySQL还支持在类型名称后面加小括号(M)，而小括号中的M表示显示宽度，M的取值范围是(0, 255)。int(M)这个M在字段的属性中指定了unsigned（无符号）和zerofill（零填充）的情况下才有意义。表示当整数值不够M位时，用0填充。如果整数值超过M位但是没有超过当前数据类型的范围时，就按照实际位数存储。当M宽度超过当前数据类型可存储数值范围的最大宽度时，也是以实际存储范围为准。</p><p>MySQL8之前，int没有指定(M)，默认显示(11)。最多能存储和显示11位整数。从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性，默认显示int。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示整数类型<br>#创建一个表格，表格的名称“t_int”，<br>#包含两个字段i1和i2，分别是int和int(2)类型<br>#create table t_int(i1 int,i2 int(2));<br>create table t_int(<br>i1 int,<br>i2 int(2)  #没有unsigned zerofill，(2)没有意义<br>);<br><br>#查看当前数据库的所有表格<br>show tables;<br>show tables from 数据库名;<br><br>#查看表结构<br>desc 表名称;<br>desc t_int;<br><br>mysql&gt; desc t_int;<br>+-------+------+------+-----+---------+-------+<br>| Field | Type | Null | Key | Default | Extra |<br>+-------+------+------+-----+---------+-------+<br>| i1    | int  | YES  |     | NULL    |       |<br>| i2    | int  | YES  |     | NULL    |       |<br>+-------+------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>#创建一个表格，表格的名称“t_int2”，<br>#包含两个字段i1和i2，分别是int和int(2)类型<br>create table t_int2(<br>i1 int,<br>i2 int(2) unsigned zerofill<br>);<br><br>mysql&gt; desc t_int2;<br>+-------+--------------------------+------+-----+---------+-------+<br>| Field | Type                     | Null | Key | Default | Extra |<br>+-------+--------------------------+------+-----+---------+-------+<br>| i1    | int                      | YES  |     | NULL    |       |<br>| i2    | int(2) unsigned zerofill | YES  |     | NULL    |       |<br>+-------+--------------------------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>#添加数据到表格中<br>insert into 表名称 values(值列表);<br>insert into t_int values(1234,1234);<br>insert into t_int2 values(1234,1234);<br><br>#查询数据<br>select * from 表名称;<br>select * from t_int;<br>select * from t_int2;<br><br>#添加数据到表格中<br>insert into 表名称 values(值列表);<br>insert into t_int values(1,1);<br>insert into t_int2 values(1,1);<br><br>insert into t_int values(12222228854225548778455,12222228854225548778455);<br>mysql&gt; insert into t_int values(12222228854225548778455,12222228854225548778455);<br>ERROR 1264 (22003): Out of range value for column &#x27;i1&#x27; at row <br><br></code></pre></td></tr></table></figure><h3 id="2、bit类型"><a href="#2、bit类型" class="headerlink" title="2、bit类型"></a>2、bit类型</h3><p>bit类型，如果没有指定(M)，默认是1位。这个1位，那么表示只能存1位的二进制值。这里(M)是表示二进制的位数。M范围从1到64。</p><p>对于位类型字段，之前版本直接使用SELECT语句将不会看到结果，而在MySQL8版本中默认以“0X”开头的十六进制形式显示，可以通过BIN()函数显示为二进制格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示bit类型，存储二进制，只有0和1<br>#创建一个表格<br>create table t_bit(<br>b1 bit,  #没有指定(M)，默认是1位二进制<br>b2 bit(4) #能够存储4位二进制0000~1111<br>);<br><br>#查看表结构<br>desc t_bit;<br><br>mysql&gt; desc t_bit;<br>+-------+--------+------+-----+---------+-------+<br>| Field | Type   | Null | Key | Default | Extra |<br>+-------+--------+------+-----+---------+-------+<br>| b1    | bit(1) | YES  |     | NULL    |       |<br>| b2    | bit(4) | YES  |     | NULL    |       |<br>+-------+--------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>#添加记录<br>insert into t_bit values(1,1);<br><br>#查看数据<br>select * from t_bit;<br><br>mysql&gt; select * from t_bit;<br>+------------+------------+<br>| b1         | b2         |<br>+------------+------------+<br>| 0x01       | 0x01       |  #0x开头表示十六进制<br>+------------+------------+<br>1 row in set (0.00 sec)<br><br>#显示二进制值，需要使用bin函数<br>select bin(b1),bin(b2) from t_bit;<br><br>mysql&gt; select bin(b1),bin(b2) from t_bit;<br>+---------+---------+<br>| bin(b1) | bin(b2) |<br>+---------+---------+<br>| 1       | 1       |<br>+---------+---------+<br>1 row in set (0.00 sec)<br><br>#添加记录<br>insert into t_bit values(2,2);<br><br>mysql&gt; insert into t_bit values(2,2); <br>#values()中是十进制值，需要转为二进制存储，2对应10，超过1位，b1存不下<br>ERROR 1406 (22001): Data too long for column &#x27;b1&#x27; at row 1<br><br>#添加记录<br>insert into t_bit values(1,8);<br><br>#查看数据<br>select * from t_bit;<br><br>mysql&gt; select * from t_bit;<br>+------------+------------+<br>| b1         | b2         |<br>+------------+------------+<br>| 0x01       | 0x01       |<br>| 0x01       | 0x08       |<br>+------------+------------+<br>2 rows in set (0.00 sec)<br><br><br>#显示二进制值，需要使用bin函数<br>select bin(b1),bin(b2) from t_bit;<br><br>mysql&gt; select bin(b1),bin(b2) from t_bit;<br>+---------+---------+<br>| bin(b1) | bin(b2) |<br>+---------+---------+<br>| 1       | 1       |<br>| 1       | 1000    |<br>+---------+---------+<br>2 rows in set (0.00 sec)<br><br>#添加记录<br>insert into t_bit values(1,16); #16的二进制10000<br>mysql&gt; insert into t_bit values(1,16);<br>ERROR 1406 (22001): Data too long for column &#x27;b2&#x27; at row 1<br></code></pre></td></tr></table></figure><h3 id="3、小数类型"><a href="#3、小数类型" class="headerlink" title="3、小数类型"></a>3、小数类型</h3><p>MySQL中使用浮点数和定点数来表示小数。浮点数有两种类型：单精度浮点数（FLOAT）和双精度浮点数（DOUBLE），定点数只有DECIMAL。浮点数和定点数都可以用(M，D)来表示。</p><ul><li>M是精度，表示该值总共显示M位，包括整数位和小数位，对于FLOAT和DOUBLE类型来说，M取值范围为0<del>255，而对于DECIMAL来说，M取值范围为0</del>65。</li><li>D是标度，表示小数的位数，取值范围为0~30，同时必须&lt;&#x3D;M。</li></ul><p>浮点型FLOAT(M，D) 和DOUBLE(M，D)是非标准用法，如果考虑到数据库迁移，则最好不要使用，而且从MySQL 8.0.17开始，FLOAT(M，D) 和DOUBLE(M，D)用法在官方文档中已经明确不推荐使用，将来可能被移除。另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。FLOAT和DOUBLE类型在不指定（M，D）时，默认会按照实际的精度来显示。DECIMAL类型在不指定（M，D）时，默认为（10，0），即只保留整数部分。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。如果用户插入数据的小数部分位数超过D位，MySQL会四舍五入处理，但是如果用户插入数据的整数部分位数超过“M-D”位，则会报“Out of range”的错误。</p><p>DECIMAL实际是以字符串形式存放的，在对精度要求比较高的时候（如货币、科学数据等）使用DECIMAL类型会比较好。浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的数据范围，它的缺点是会引起精度问题。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-8326.png"></p><!--![](MySQL8.0_SQL笔记/image-8326-173140863277637.png)--><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示小数类型<br>#创建表格<br>create table t_double(<br>d1 double,<br>d2 double(5,2)  #-999.99~999.99<br>);<br><br>#查看表结构<br>desc t_double;<br><br>#添加数据<br>insert into t_double values(2.5,2.5);<br><br>#查看数据<br>select * from t_double;<br>mysql&gt; select * from t_double;<br>+------+------+<br>| d1   | d2   |<br>+------+------+<br>|  2.5 | 2.50 |#d2字段小数点后不够2位用0补充<br>+------+------+<br>1 row in set (0.00 sec)<br><br>#添加数据<br>insert into t_double values(2.5526,2.5526);<br>insert into t_double values(2.5586,2.5586);<br><br>mysql&gt; select * from t_double;<br>+--------+------+<br>| d1     | d2   |<br>+--------+------+<br>|    2.5 | 2.50 |<br>| 2.5526 | 2.55 |#小数点后有截断现象，并且会四舍五入<br>| 2.5586 | 2.56 |#小数点后有截断现象，并且会四舍五入<br>+--------+------+<br>3 rows in set (0.00 sec)<br><br><br>#添加数据<br>insert into t_double values(12852.5526,12852.5526);<br><br>#d2字段整数部分超过(5-2=3)位，添加失败<br>mysql&gt; insert into t_double values(12852.5526,12852.5526); <br>ERROR 1264 (22003): Out of range value for column &#x27;d2&#x27; at row 1<br><br><br>#创建表格<br>create table t_decimal(<br>d1 decimal,  #没有指定(M,D)默认是(10,0)<br>d2 decimal(5,2)<br>);<br><br><br>#查看表结构<br>desc t_decimal;<br>mysql&gt; desc t_decimal;<br>+-------+---------------+------+-----+---------+-------+<br>| Field | Type          | Null | Key | Default | Extra |<br>+-------+---------------+------+-----+---------+-------+<br>| d1    | decimal(10,0) | YES  |     | NULL    |       |<br>| d2    | decimal(5,2)  | YES  |     | NULL    |       |<br>+-------+---------------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>#添加数据<br>insert into t_decimal values(2.5,2.5);<br><br>#查看数据<br>select * from t_decimal;<br>mysql&gt; select * from t_decimal;<br>+------+------+<br>| d1   | d2   |<br>+------+------+<br>|    3 | 2.50 |  #d1字段小数点后截断<br>+------+------+<br>1 row in set (0.00 sec)<br><br>insert into t_decimal values(12852.5526,12852.5526);<br><br>把小数赋值给整数类型的字段时，会截断小数部分，考虑四舍五入<br>insert into t_int2 values(1.5,1.5);<br></code></pre></td></tr></table></figure><h2 id="11-2-字符串类型"><a href="#11-2-字符串类型" class="headerlink" title="11.2 字符串类型"></a>11.2 字符串类型</h2><p>MySQL的字符串类型有CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM、SET等。MySQL的字符串类型可以用来存储文本字符串数据，还可以存储二进制字符串。</p><p>文本字符串类型：</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-547156.png" alt="image-20211127210547156"></p><!--![image-20211127210547156](image-547156.png)--><p>二进制字符串类型：</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-8685.png" alt="image-20211127210608685"></p><!--![image-20211127210608685](image-8685.png)--><h3 id="1、char和varchar"><a href="#1、char和varchar" class="headerlink" title="1、char和varchar"></a>1、char和varchar</h3><p>CHAR(M)为固定长度的字符串， M表示最多能存储的字符数，取值范围是0~255个字符，如果未指定(M)表示只能存储1个字符。例如CHAR(4)定义了一个固定长度的字符串列，其包含的字符个数最大为4，如果存储的值少于4个字符，右侧将用空格填充以达到指定的长度，当查询显示CHAR值时，尾部的空格将被删掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>c1 char,<br>    c2 char(3)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;男&#x27;,&#x27;女&#x27;);#成功<br><br>insert into temp values(&#x27;尚硅谷&#x27;,&#x27;尚硅谷&#x27;);#失败<br>ERROR 1406 (22001): Data too long for column &#x27;c1&#x27; at row 1<br><br>insert into temp values(&#x27;男&#x27;,&#x27;尚硅谷&#x27;);#成功<br></code></pre></td></tr></table></figure><p>VARCHAR(M)为可变长度的字符串，M表示最多能存储的字符数，M的范围由最长的行的大小（通常是65535）和使用的字符集确定。例如utf8mb4字符编码单个字符所需最长字节值为4个字节，所以M的范围是[0, 16383]。而VARCHAR类型的字段实际占用的空间为字符串的实际长度加1或2个字节，这1或2个字节用于描述字符串值的实际字节数，即字符串值在[0,255]个字节范围内，那么额外增加1个字节，否则需要额外增加2个字节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>name varchar  #错误<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>name varchar(3)  #最多不超过3个字符<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;尚硅谷&#x27;);<br><br>insert into temp values(&#x27;尚硅谷真好&#x27;);#ERROR 1406 (22001): Data too long for column &#x27;name&#x27; at row 1<br><br>insert into temp values(&#x27;好&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table temp;<br>create table temp(<br>name varchar(65535)<br>);<br>#ERROR 1074 (42000): Column length too big for column &#x27;name&#x27; (max = 21845); use BLOB or TEXT instead<br>因为当前的表是UTF8，一个汉字占3个字节<br></code></pre></td></tr></table></figure><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-6463.png" alt="image-20211127210826463"></p><!--![image-20211127210826463](image-6463.png)--><p>例如，身份证号、手机号码、QQ号、用户名username、密码password、银行卡号等固定长度的文本字符串适合使用CHAR类型，而评论、朋友圈、微博不定长度的文本字符串更适合使用VARCHAR类型。</p><p>另外，存储引擎对于选择CHAR和VARCHAR是有影响的。</p><ul><li>对于MyISAM存储引擎，最好使用固定长度的数据列代替可变长度的数据列。这样可以使整个表静态化，从而使数据检索更快，用空间换时间。</li><li>对于InnoDB存储引擎，使用可变长度的数据列，因为InnoDB数据表的存储格式不分固定长度和可变长度，因此使用CHAR不一定比使用VARCHAR更好，但由于VARCHAR是按照实际的长度存储的，比较节省空间，所以对磁盘I&#x2F;O和数据存储总量比较好。</li></ul><h3 id="2、Enum和Set类型"><a href="#2、Enum和Set类型" class="headerlink" title="2、Enum和Set类型"></a>2、Enum和Set类型</h3><p>无论是数值类型、日期类型、普通的文本类型，可取值的范围都非常大，但是有时候我们指定在固定的几个值范围内选择一个或多个，那么就需要使用ENUM枚举类型和SET集合类型了。比如性别只有“男”或“女”；上下班交通方式可以有“地铁”、“公交”、“出租车”、“自行车”、“步行”等。枚举和集合类型字段声明的语法格式如下：</p><p>字段名ENUM（‘值1’，‘值2’，…‘值n’）</p><p>字段名 SET（‘值1’，‘值2’，…‘值n’）</p><p>ENUM类型的字段在赋值时，只能在指定的枚举列表中取值，而且一次只能取一个。枚举列表最多可以有65535个成员。ENUM值在内部用整数表示，每个枚举值均有一个索引值， MySQL存储的就是这个索引编号。例如，定义ENUM类型的列(‘first’, ‘second’, ‘third’)。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-43925.png" alt="image-20211127211743925"></p><!--![image-20211127211743925](image-43925.png)--><p>SET类型的字段在赋值时，可从定义的值列表中选择1个或多个值的组合。SET列最多可以有64个成员。SET值在内部也用整数表示，分别是1，2，4，8……，都是2的n次方值，因为这些整数值对应的二进制都是只有1位是1，其余是0。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-889.png" alt="image-20211127211806889"></p><!--![image-20211127211806889](image-889.png)--><p>演示枚举类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>gender enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>    hobby set(&#x27;睡觉&#x27;,&#x27;打游戏&#x27;,&#x27;泡妞&#x27;,&#x27;写代码&#x27;)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;男&#x27;,&#x27;睡觉,打游戏&#x27;); #成功<br><br>insert into temp values(&#x27;男,女&#x27;,&#x27;睡觉,打游戏&#x27;); #失败<br>#ERROR 1265 (01000): Data truncated for column &#x27;gender&#x27; at row 1<br><br>insert into temp values(&#x27;妖&#x27;,&#x27;睡觉,打游戏&#x27;);#失败<br>ERROR 1265 (01000): Data truncated for column &#x27;gender&#x27; at row 1<br><br>insert into temp values(&#x27;男&#x27;,&#x27;睡觉,打游戏,吃饭&#x27;);<br>ERROR 1265 (01000): Data truncated for column &#x27;hobby&#x27; at row 1<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#文本类型中的枚举和集合<br>#枚举：固定的几个字符串值，从中选择一个<br>#集合：固定的几个字符串值，从中选择任意几个<br><br>create table t_enum_set(<br>gender enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>hobby set(&#x27;游戏&#x27;,&#x27;睡觉&#x27;,&#x27;打代码&#x27;,&#x27;运动&#x27;)<br>);<br><br>#查看表结构<br>desc t_enum_set;<br><br>mysql&gt; desc t_enum_set;<br>+--------+------------------------------------+------+-----+---------+-------+<br>| Field  | Type                               | Null | Key | Default | Extra |<br>+--------+------------------------------------+------+-----+---------+-------+<br>| gender | enum(&#x27;男&#x27;,&#x27;女&#x27;)                    | YES  |     | NULL    |       |<br>| hobby  | set(&#x27;游戏&#x27;,&#x27;睡觉&#x27;,&#x27;打代码&#x27;,&#x27;运动&#x27;) | YES  |     | NULL    |       |<br>+--------+------------------------------------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br><br>#添加数据<br>insert into t_enum_set<br>values(&#x27;男&#x27;,&#x27;游戏&#x27;);<br><br>#查看数据<br>select * from t_enum_set;<br><br>#添加数据<br>insert into t_enum_set<br>values(&#x27;男,女&#x27;,&#x27;游戏,睡觉&#x27;);<br><br>mysql&gt; insert into t_enum_set<br>    -&gt; values(&#x27;男,女&#x27;,&#x27;游戏,睡觉&#x27;);<br>ERROR 1265 (01000): Data truncated for column &#x27;gender&#x27; at row 1<br><br>#添加数据<br>insert into t_enum_set<br>values(&#x27;男&#x27;,&#x27;游戏,睡觉&#x27;);<br><br>#添加数据<br>insert into t_enum_set<br>values(&#x27;妖&#x27;,&#x27;游戏,睡觉&#x27;);<br>mysql&gt; insert into t_enum_set<br>    -&gt; values(&#x27;妖&#x27;,&#x27;游戏,睡觉&#x27;);<br>ERROR 1265 (01000): Data truncated for column &#x27;gender&#x27; at row 1<br><br>#添加数据<br>insert into t_enum_set<br>values(&#x27;男&#x27;,&#x27;游戏,睡觉,做饭&#x27;);<br>mysql&gt; insert into t_enum_set<br>    -&gt; values(&#x27;男&#x27;,&#x27;游戏,睡觉,做饭&#x27;);<br>ERROR 1265 (01000): Data truncated for column &#x27;hobby&#x27; at row 1<br><br><br>insert into t_enum_set<br>values(2, 2);<br><br>mysql&gt; select * from t_enum_set;<br>+--------+-----------+<br>| gender | hobby     |<br>+--------+-----------+<br>| 男     | 游戏      |<br>| 男     | 游戏,睡觉 |<br>| 女     | 睡觉      |<br>+--------+-----------+<br>3 rows in set (0.00 sec)<br><br><br>insert into t_enum_set<br>values(2, 5);<br>#5 可以看出 1和4的组合，00001 和 0100，0101<br><br><br>insert into t_enum_set<br>values(2, 7);<br>mysql&gt; select * from t_enum_set;<br>+--------+------------------+<br>| gender | hobby            |<br>+--------+------------------+<br>| 男     | 游戏             |<br>| 男     | 游戏,睡觉        |<br>| 女     | 睡觉             |<br>| 女     | 游戏,打代码      |<br>| 女     | 游戏,睡觉,打代码 |<br>+--------+------------------+<br>5 rows in set (0.00 sec)<br><br>insert into t_enum_set<br>values(2, 15);<br>mysql&gt; select * from t_enum_set;<br>+--------+-----------------------+<br>| gender | hobby                 |<br>+--------+-----------------------+<br>| 男     | 游戏                  |<br>| 男     | 游戏,睡觉             |<br>| 女     | 睡觉                  |<br>| 女     | 游戏,打代码           |<br>| 女     | 游戏,睡觉,打代码      |<br>| 女     | 游戏,睡觉,打代码,运动 |<br>+--------+-----------------------+<br>6 rows in set (0.00 sec)<br><br><br>insert into t_enum_set<br>values(2, 25);<br>mysql&gt; insert into t_enum_set<br>    -&gt; values(2, 25);<br>ERROR 1265 (01000): Data truncated for column &#x27;hobby&#x27; at row 1<br></code></pre></td></tr></table></figure><h3 id="3、BINARY和VARBINARY类型"><a href="#3、BINARY和VARBINARY类型" class="headerlink" title="3、BINARY和VARBINARY类型"></a>3、BINARY和VARBINARY类型</h3><p>BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是0~255个字节，如果未指定(M)表示只能存储1个字节。例如BINARY (8)，表示最多能存储8个字节，如果字段值不足(M)个字节，将在右边填充’\0’以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长度限制65535，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要1或2个字节来存储数据的字节数。VARBINARY类型和VARCHAR类型一样必须指定(M)，否则报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示二进制字符串类型binary和varbinary<br>#创建表格<br>create table t_binary(<br>b1 binary, #没有指定(M)，默认是(1)<br>b2 varbinary #没有指定(M)，报错，必须指定(M)<br>);<br>ERROR 1064 (42000): You have an error in your SQL syntax; <br>check the manual that corresponds to your MySQL server <br>version for the right syntax to use near &#x27;)&#x27; at line 4<br><br><br>create table t_binary(<br>b1 binary, #默认(1)，最多能存储一个字节<br>b2 binary(6), #最多能存储6个字节，不够6个用\u0000补全<br>b3 varbinary(6) #(6)，最多能存储6个字节<br>);<br><br>#查看表结构<br>desc t_binary;<br><br>mysql&gt; desc t_binary;<br>+-------+--------------+------+-----+---------+-------+<br>| Field | Type         | Null | Key | Default | Extra |<br>+-------+--------------+------+-----+---------+-------+<br>| b1    | binary(1)    | YES  |     | NULL    |       |<br>| b2    | binary(6)    | YES  |     | NULL    |       |<br>| b3    | varbinary(6) | YES  |     | NULL    |       |<br>+-------+--------------+------+-----+---------+-------+<br>3 rows in set (0.01 sec)<br><br><br>#添加数据<br>insert into t_binary<br>values(&#x27;a&#x27;,&#x27;a&#x27;,&#x27;a&#x27;);<br><br>#查看数据<br>select * from t_binary;<br>#显示16进制形式的值<br><br>mysql&gt; select * from t_binary;<br>+------------+----------------+------------+<br>| b1         | b2             | b3         |<br>+------------+----------------+------------+<br>| 0x61       | 0x610000000000 | 0x61       |<br>+------------+----------------+------------+<br>1 row in set (0.00 sec)<br><br>#&#x27;a&#x27;的编码值是97（十进制），对应十六进制（61）<br>#0x610000000000 补够6个字节<br><br>#添加数据<br>insert into t_binary<br>values(&#x27;尚&#x27;,&#x27;尚&#x27;,&#x27;尚&#x27;);<br><br>mysql&gt; insert into t_binary<br>    -&gt; values(&#x27;尚&#x27;,&#x27;尚&#x27;,&#x27;尚&#x27;);<br>ERROR 1406 (22001): Data too long for column &#x27;b1&#x27; at row 1<br>#&#x27;尚&#x27;无论在GBK还是UTF8编码下都不可能是1个字节<br><br>#添加数据<br>insert into t_binary<br>values(&#x27;a&#x27;,&#x27;尚硅谷&#x27;,&#x27;尚硅谷&#x27;);<br><br>mysql&gt; select * from t_binary;<br>+------------+----------------+----------------+<br>| b1         | b2             | b3             |<br>+------------+----------------+----------------+<br>| 0x61       | 0x610000000000 | 0x61           |<br>| 0x61       | 0xC9D0B9E8B9C8 | 0xC9D0B9E8B9C8 |  #此时客户端是GBK，尚硅谷编码为6个字节<br>+------------+----------------+----------------+<br>2 rows in set (0.00 sec)<br><br>#添加数据<br>insert into t_binary<br>values(&#x27;a&#x27;,&#x27;尚硅谷真好&#x27;,&#x27;尚硅谷尚硅谷真好&#x27;);<br><br>mysql&gt; insert into t_binary<br>    -&gt; values(&#x27;a&#x27;,&#x27;尚硅谷真好&#x27;,&#x27;尚硅谷尚硅谷真好&#x27;);<br>ERROR 1406 (22001): Data too long for column &#x27;b2&#x27; at row 1<br></code></pre></td></tr></table></figure><h3 id="4、二进制字符串和文本字符串"><a href="#4、二进制字符串和文本字符串" class="headerlink" title="4、二进制字符串和文本字符串"></a>4、二进制字符串和文本字符串</h3><ul><li><p>二进制字符串是存储客户端给服务器端传输的字符串的原始二进制值，而文本字符串则会按照表和字段的字符集编码方式对客户端给服务器传输的字符串进行转码处理。</p></li><li><p>二进制字符串严格区分大小写（因为大小写字符的编码值不同），文本字符串在大多数字符集和校对规则中不区分大小写。</p></li></ul><p>（1）此时在sqlyog客户端查看“t_binary”的数据，发现乱码。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-9215.png" alt="image-20211129113339215"></p><!--![image-20211129113339215](MySQL8.0_SQL笔记/image-9215.png)--><p>因为命令行客户端的编码默认是GBK，而服务器端t_binary表的编码是“utf8mb4”，如果是binary等这种二进制字符串的话，客户端传给服务器端的字符编码的二进制（基于GBK编码的），服务器接收后是“原样”存储，不转码的，所以表格中存储的是“尚硅谷”基于GBK编码的二进制值，在可视化工具中（UTF8编码）显示不了。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-8420.png"></p><!--![](MySQL8.0_SQL笔记/image-8420.png)--><p>如果是char和varchar类型等这种文本字符串的话，客户端传给服务器端的字符编码的二进制（基于GBK编码的），并且会把编码方式一并告诉服务器端，服务器接收后会进行转码，存储为utf8的二进制值。例如：t_char表显示正常。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-0653.png"></p><!--![](MySQL8.0_SQL笔记/image-0653.png)--><p>（2）当我们在可视化工具中，在t_binary表中添加“尚硅谷”时，“尚硅谷”以utf8mb4编码处理，一个汉字是3个字节，“尚硅谷”就有9个字节，而b2和b3最多能存6个字节。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-7292.png"></p><!--![](MySQL8.0_SQL笔记/image-7292.png)--><p>当我们在可视化工具中，在t_binary表中添加“尚硅”时，“尚硅”以utf8mb4编码处理，一个汉字是3个字节，“尚硅”就有6个字节。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-1993.png"></p><!--![](/MySQL8.0_SQL笔记/image-1993.png)--><p>在命令行客户端，在t_binary表中添加“尚硅”时，“尚硅”以GBK编码处理，一个汉字是2个字节，“尚硅”就有4个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">#添加数据<br>insert into t_binary<br><span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;尚硅&#x27;</span>,<span class="hljs-string">&#x27;尚硅&#x27;</span>)</span>;<br></code></pre></td></tr></table></figure><p>在命令行查看数据，两条“尚硅”记录值不一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from t_binary;<br>+------------+----------------+----------------+<br>| b1         | b2             | b3             |<br>+------------+----------------+----------------+<br>| 0x61       | 0x610000000000 | 0x61           |<br>| 0x61       | 0xC9D0B9E8B9C8 | 0xC9D0B9E8B9C8 |<br>| 0x61       | 0xE5B09AE7A185 | 0xE5B09AE7A185 |   #可视化工具中添加的，基于UTF8的  尚硅<br>| 0x61       | 0xC9D0B9E80000 | 0xC9D0B9E8     |   #命令行添加的，基于GBK   尚硅<br>+------------+----------------+----------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（3）分别在t_char表和t_bianary表查询  查询’a’的记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">#查询表中b1字段值为<span class="hljs-string">&#x27;a&#x27;</span>的记录<br>select * from t_binary <span class="hljs-type">where</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>#查询表中b1字段值为<span class="hljs-string">&#x27;A&#x27;</span>的记录<br>select * from t_binary <span class="hljs-type">where</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>mysql&gt; select * from t_binary <span class="hljs-type">where</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>+------------+----------------+----------------+<br>| b1         | b2             | b3             |<br>+------------+----------------+----------------+<br>| <span class="hljs-number">0x61</span>       | <span class="hljs-number">0x610000000000</span> | <span class="hljs-number">0x61</span>           |<br>| <span class="hljs-number">0x61</span>       | <span class="hljs-number">0xC9D0B9E8B9C8</span> | <span class="hljs-number">0xC9D0B9E8B9C8</span> |<br>| <span class="hljs-number">0x61</span>       | <span class="hljs-number">0xE5B09AE7A185</span> | <span class="hljs-number">0xE5B09AE7A185</span> |<br>| <span class="hljs-number">0x61</span>       | <span class="hljs-number">0xC9D0B9E80000</span> | <span class="hljs-number">0xC9D0B9E8</span>     |<br>+------------+----------------+----------------+<br><span class="hljs-number">4</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; select * from t_binary <span class="hljs-type">where</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br><br>#在<span class="hljs-type">char</span>和varchar类型的表格中查询<br>#查询表中c1字段值为<span class="hljs-string">&#x27;a&#x27;</span>的记录<br>select * from t_char <span class="hljs-type">where</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>#查询表中c1字段值为<span class="hljs-string">&#x27;A&#x27;</span>的记录<br>select * from t_char <span class="hljs-type">where</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>mysql&gt; select * from t_char <span class="hljs-type">where</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>+------+------+------+<br>| c1   | c2   | c3   |<br>+------+------+------+<br>| a    | a    | a    |<br>+------+------+------+<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; select * from t_char <span class="hljs-type">where</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>+------+------+------+<br>| c1   | c2   | c3   |<br>+------+------+------+<br>| a    | a    | a    |<br>+------+------+------+<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br></code></pre></td></tr></table></figure><h3 id="5、BLOB和TEXT类型"><a href="#5、BLOB和TEXT类型" class="headerlink" title="5、BLOB和TEXT类型"></a>5、BLOB和TEXT类型</h3><p>BLOB是一个二进制大对象，用来存储可变数量的二进制字符串，分为TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB四种类型。TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT四种文本类型，它们分别对应于以上四种BLOB类型，具有相同的最大长度和存储要求。</p><p>BLOB类型与TEXT类型的区别如下：</p><p>（1）BLOB类型存储的是二进制字符串，TEXT类型存储的是文本字符串。BLOB类型还可以存储图片和声音等二进制数据。</p><p>（2）BLOB类型没有字符集，并且排序和比较基于列值字节的数值，TEXT类型有一个字符集，并且根据字符集对值进行排序和比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示blob和text<br>#blob系列是大的二进制数据类型<br>#text系列是大的文本字符串类型<br>#创建表格<br>create table t_blob_text(<br>b blob,<br>t text<br>);<br><br>#查看表结构<br>desc t_blob_text;<br>mysql&gt; desc t_blob_text;<br>+-------+------+------+-----+---------+-------+<br>| Field | Type | Null | Key | Default | Extra |<br>+-------+------+------+-----+---------+-------+<br>| b     | blob | YES  |     | NULL    |       |<br>| t     | text | YES  |     | NULL    |       |<br>+-------+------+------+-----+---------+-------+<br>2 rows in set (0.01 sec)<br><br>#添加数据<br>insert into t_blob_text<br>values(&#x27;a&#x27;,&#x27;a&#x27;);<br><br>insert into t_blob_text<br>values(&#x27;尚硅谷&#x27;,&#x27;尚硅谷&#x27;);<br><br>#查看数据<br>select * from t_blob_text;<br><br>mysql&gt; select * from t_blob_text;<br>+----------------+--------+<br>| b              | t      |<br>+----------------+--------+<br>| 0x61           | a      |<br>| 0xC9D0B9E8B9C8 | 尚硅谷 |<br>+----------------+--------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>BLOB类型的数据支持存储图片等数据。存储图片等数据需要借助图形界面工具来实现，下面以SQLyog图形界面工具为例演示操作步骤。</p><p>第1步，选择“t_blob_text”数据表，双击要编辑的BLOB类型的字段b单元格</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-4497.png"></p><!--![](/MySQL8.0_SQL笔记/image-4497.png)--><p>第2步，选择“从文件导入”按钮，打开“Open File”对话框，选择图片文件。默认情况下“从文件导入”按钮不可用，去掉“设置为空”前面的对勾，就可以了.</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-8441.png"></p><!--![](/MySQL8.0_SQL笔记/image-8441.png)--><p>第3步，导入图片成功，</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-3606.png"></p><!--![](/MySQL8.0_SQL笔记/image-3606.png)--><p>注意， BLOB类型的数据除了受到类型本身大小的限制外，还会受到服务器端“max_allowed_packet”变量值限定的字节值大小限制。如果从客户端给服务器端上传的BLOB数据大小超过该值时会报错。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-8862.png"></p><!--![](/MySQL8.0_SQL笔记/image-8862.png)--><p>如果确实需要上传并存储更大的图片，可以停止MySQL服务并修改my.ini配置文件的“max_allowed_packet”值大小来解决这个问题，例如将“max_allowed_packet”的默认值4M修改为“max_allowed_packet&#x3D;16M”</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-3824.png"></p><!--![](/MySQL8.0_SQL笔记/image-3824.png)--><p>如果图片大小超过blob类型，还需要修改字段的数据类型为mediumblob或longblob类型。</p><h2 id="11-3-日期时间类型"><a href="#11-3-日期时间类型" class="headerlink" title="11.3 日期时间类型"></a>11.3 日期时间类型</h2><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-7635.png"></p><!--![](/MySQL8.0_SQL笔记/image-7635.png)--><ul><li>如果仅仅是表示年份信息，可以只使用YEAR类型，这样更节省空间，格式为“YYYY”，例如“2022”。YEAR允许的值范围是1901<del>2155。YEAR还有格式为“YY”2位数字的形式，值是00</del>69，表示2000<del>2069年，值是70</del>99，表示1970~1999年，从MySQL5.5.27开始，2位格式的YEAR已经不推荐使用。YEAR默认格式就是“YYYY”，没必要写成YEAR(4)，从MySQL 8.0.19开始，不推荐使用指定显示宽度的YEAR(4)数据类型。这个0年，如果是以整数的0添加的话，那么是0000年，如果是以日期&#x2F;字符串的’0’添加的话，是2000年。</li><li>如果要表示年月日，可以使用DATE类型，格式为“YYYY-MM-DD”，例如“2022-02-04”。</li><li>如果要表示时分秒，可以使用TIME类型，格式为“HH:MM:SS”，例如“10:08:08”。</li><li>如果要表示年月日时分秒的完整日期时间，可以使用DATATIME类型，格式为“YYYY-MM-DD HH:MM:SS”，例如“2022-02-04 10:08:08”。</li><li>如果需要经常插入或更新日期时间为系统日期时间，则通常使用TIMESTAMP类型，格式为“YYYY-MM-DD HH:MM:SS”，例如“2022-02-04 10:08:08”。TIMESTAMP与DATETIME的区别在于TIMESTAMP的取值范围小，只支持1970-01-01 00:00:01 UTC至2038-01-19 03:14:07 UTC范围的日期时间值，其中UTC是世界标准时间，并且TIMESTAMP类型的日期时间值在存储时会将当前时区的日期时间值转换为时间标准时间值，检索时再转换回当前时区的日期时间值，这会更友好。而DATETIME则只能反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。另外，TIMESTAMP的属性受MySQL版本和服务器SQLMode的影响很大。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>d1 datetime,<br>d2 timestamp<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;2021-9-2 14:45:52&#x27;,&#x27;2021-9-2 14:45:52&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改当前的时区<br>set time_zone = &#x27;+9:00&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;202192144552&#x27;,&#x27;202192144552&#x27;);<br>#ERROR 1292 (22007): Incorrect datetime value: &#x27;202192144552&#x27; for column &#x27;d1&#x27; at row 1<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;20210902144552&#x27;,&#x27;20210902144552&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(&#x27;2021&amp;9&amp;2 14%45%52&#x27;,&#x27;2021#9#2 14@45@52&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br>d year<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(2021);<br>insert into temp values(85);<br>insert into temp values(22);<br>insert into temp values(69);<br>insert into temp values(0);<br>insert into temp values(&#x27;0&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from temp;<br>+------+<br>| d    |<br>+------+<br>| 2021 |<br>| 1985 |<br>| 2022 |<br>+------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="11-5-其他类型"><a href="#11-5-其他类型" class="headerlink" title="11.5  其他类型"></a>11.5  其他类型</h2><p>1、JSON类型</p><p>在MySQL5.7之前，如果需要在数据库中存储JSON数据只能使用VARCHAR或TEXT字符串类型。从5.7.8版本之后开始支持JSON数据类型。</p><p>2、空间类型</p><p>MySQL 空间类型扩展支持地理特征的生成、存储和分析。这里的地理特征表示世界上具有位置的任何东西，可以是一个实体，例如一座山；可以是空间，例如一座办公楼；也可以是一个可定义的位置，例如一个十字路口等等。现在的应用程序开发中空间数据的存储越来越多了，例如，钉钉的打卡位置是否在办公区域范围内，滴滴打车的位置、路线等。MySQL提供了非常丰富的空间函数以支持各种空间数据的查询和处理。</p><p>MySQL中使用Geometry（几何）来表示所有地理特征。Geometry指一个点或点的集合，代表世界上任何具有位置的事物。MySQL的空间数据类型（Spatial Data Type）对应于OpenGIS类，包括GEOMETRY、POINT、LINESTRING、POLYGON等单值类型以及MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION存放不同几何值的集合类型。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-1863.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-3697.png"></p><!--![](/MySQL8.0_SQL笔记/image-1863.png)![](/MySQL8.0_SQL笔记/image-3697.png)--><h1 id="第12章-DDL"><a href="#第12章-DDL" class="headerlink" title="第12章 DDL"></a>第12章 DDL</h1><p>虽说图形界面工具可以直接创建库、创建表、修改库和表的结构，但是如果批量修改，还是编写DDL语句的脚本，执行脚本更快更方便。</p><h2 id="12-1-和数据库相关的"><a href="#12-1-和数据库相关的" class="headerlink" title="12.1 和数据库相关的"></a>12.1 和数据库相关的</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database 数据库名;<br></code></pre></td></tr></table></figure><h3 id="查看所有的数据库"><a href="#查看所有的数据库" class="headerlink" title="查看所有的数据库"></a>查看所有的数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases; #有一个s，代表多个数据库<br></code></pre></td></tr></table></figure><h3 id="查看某个数据库的详细定义语句"><a href="#查看某个数据库的详细定义语句" class="headerlink" title="查看某个数据库的详细定义语句"></a>查看某个数据库的详细定义语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create database 数据库名;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create database 数据库名\G<br></code></pre></td></tr></table></figure><h3 id="修改数据库编码"><a href="#修改数据库编码" class="headerlink" title="修改数据库编码"></a>修改数据库编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改数据库字符集和校对规则<br>ALTER DATABASE 数据库名称 CHARACTER SET 字符集名称 COLLATE 字符集对应校对规则;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER DATABASE atguigu_chapter3_two CHARACTER SET utf8 COLLATE utf8_general_ci;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>注意，</strong>&#x3D;&#x3D;修改数据库编码只会影响之后创建的表的默认编码，之前创建的表不会受影响。</p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database 数据库名;<br></code></pre></td></tr></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名;<br></code></pre></td></tr></table></figure><h3 id="SQL示例演示"><a href="#SQL示例演示" class="headerlink" title="SQL示例演示"></a>SQL示例演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示和数据库相关的DDL语句<br>#查看当前登录用户（有权限）查看的所有的数据库<br>show databases;<br><br>#如何创建数据库<br>create database 数据库名称;<br><br>#例如，创建数据库bookstore<br>create database bookstore;<br><br>#查看数据库的定义<br>show create database 数据库名;<br><br>#例如，查看bookstore数据库的定义信息<br>show create database bookstore;<br>show create database bookstore\G<br><br>*************************** 1. row ***************************<br>       Database: bookstore<br>Create Database: CREATE DATABASE `bookstore` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */<br>1 row in set (0.00 sec)<br><br>#修改数据库的编码字符集和校对规则<br>alter database 数据库名称 CHARACTER SET 字符集名称 COLLATE 校对规则<br><br>#修改bookstore数据库的字符集和校对规则<br>alter database bookstore CHARACTER SET Latin1 COLLATE Latin1_general_ci;<br>#Latin1字符集不支持中文<br><br>mysql&gt; show create database bookstore;<br>+-----------+--------------------------------------------+<br>| Database  | Create Database                           |<br>+-----------+----------------------------------------------------+<br>| bookstore | CREATE DATABASE `bookstore` /*!40100 DEFAULT CHARACTER SET latin1 COLLATE latin1_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */ |<br>+-----------+---------------------------------+<br>1 row in set (0.00 sec)<br><br><br>#使用数据库<br>use 数据库名;<br><br>#例如：使用bookstore数据库<br>use bookstore;<br><br>#创建表格<br>create table temp(<br>s char<br>);<br><br>#添加数据<br>insert into temp values(&#x27;a&#x27;);<br><br>#查询数据<br>mysql&gt; select * from temp;<br>+------+<br>| s    |<br>+------+<br>| a    |<br>+------+<br>1 row in set (0.00 sec)<br><br>#添加数据<br>insert into temp values(&#x27;尚&#x27;);<br><br>mysql&gt; insert into temp values(&#x27;尚&#x27;);<br>ERROR 1366 (HY000): Incorrect string value: &#x27;\xC9\xD0&#x27; for column &#x27;s&#x27; at row 1<br><br>#删除数据库<br>drop database 数据库名称;<br><br>#例如：删除bookstore数据库<br>drop database bookstore;<br></code></pre></td></tr></table></figure><h2 id="12-2-和数据表相关的"><a href="#12-2-和数据表相关的" class="headerlink" title="12.2 和数据表相关的"></a>12.2 和数据表相关的</h2><h3 id="查看某个数据库的所有表格"><a href="#查看某个数据库的所有表格" class="headerlink" title="查看某个数据库的所有表格"></a>查看某个数据库的所有表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use 数据库名;<br><br>show tables;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables from 数据库名;<br></code></pre></td></tr></table></figure><h3 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 数据表名称(<br>字段名  数据类型,<br>    字段名  数据类型<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table teacher(<br>tid int,<br>    tname varchar(5),<br>    salary double,<br>    weight double(5,2),<br>    birthday date,<br>    gender enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>    blood enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;),<br>tel char(11)<br>);<br></code></pre></td></tr></table></figure><h3 id="查看表的详细定义信息"><a href="#查看表的详细定义信息" class="headerlink" title="查看表的详细定义信息"></a>查看表的详细定义信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table 表名称;<br>show create table 表名称\G<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show create table teacher\G<br>*************************** 1. row ***************************<br>       Table: teacher<br>Create Table: CREATE TABLE `teacher` (<br>  `tid` int(11) DEFAULT NULL,<br>  `tname` varchar(5) DEFAULT NULL,<br>  `salary` double DEFAULT NULL,<br>  `weight` double(5,2) DEFAULT NULL,<br>  `birthday` date DEFAULT NULL,<br>  `gender` enum(&#x27;男&#x27;,&#x27;女&#x27;) DEFAULT NULL,<br>  `blood` enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) DEFAULT NULL,<br>  `tel` char(11) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="修改数据表编码"><a href="#修改数据表编码" class="headerlink" title="修改数据表编码"></a>修改数据表编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名称 CHARSET=新字符集 COLLATE=新校对规则;<br></code></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc 表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc teacher;<br>+----------+------------------------+------+-----+---------+-------+<br>| Field    | Type                   | Null | Key | Default | Extra |<br>+----------+------------------------+------+-----+---------+-------+<br>| tid      | int(11)                | YES  |     | NULL    |       |<br>| tname    | varchar(5)             | YES  |     | NULL    |       |<br>| salary   | double                 | YES  |     | NULL    |       |<br>| weight   | double(5,2)            | YES  |     | NULL    |       |<br>| birthday | date                   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;)         | YES  |     | NULL    |       |<br>| blood    | enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) | YES  |     | NULL    |       |<br>| tel      | char(11)               | YES  |     | NULL    |       |<br>+----------+------------------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="删除表格，包括表结构和里面的数据"><a href="#删除表格，包括表结构和里面的数据" class="headerlink" title="删除表格，包括表结构和里面的数据"></a>删除表格，包括表结构和里面的数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table 表名称;<br></code></pre></td></tr></table></figure><h3 id="修改表结构：删除字段"><a href="#修改表结构：删除字段" class="headerlink" title="修改表结构：删除字段"></a>修改表结构：删除字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop 【column】 字段名称; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table teacher drop column weight;<br></code></pre></td></tr></table></figure><h3 id="修改表结构：增加字段"><a href="#修改表结构：增加字段" class="headerlink" title="修改表结构：增加字段"></a>修改表结构：增加字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 add 【column】 字段名称 数据类型; <br>alter table 表名称 add 【column】 字段名称 数据类型 first;<br>alter table 表名称 add 【column】 字段名称 数据类型 after 另一个字段;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table teacher add weight double(5,2);<br>alter table teacher drop column weight;<br><br>alter table teacher add weight double(5,2) first;<br>alter table teacher drop column weight;<br><br>alter table teacher add weight double(5,2) after salary;<br>alter table teacher drop column weight;<br></code></pre></td></tr></table></figure><h3 id="修改表结构：修改字段的数据类型"><a href="#修改表结构：修改字段的数据类型" class="headerlink" title="修改表结构：修改字段的数据类型"></a>修改表结构：修改字段的数据类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 【column】 字段名称 新的数据类型; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc teacher;<br>+----------+------------------------+------+-----+---------+-------+<br>| Field    | Type                   | Null | Key | Default | Extra |<br>+----------+------------------------+------+-----+---------+-------+<br>| tid      | int(11)                | YES  |     | NULL    |       |<br>| tname    | varchar(5)             | YES  |     | NULL    |       |<br>| salary   | double                 | YES  |     | NULL    |       |<br>| weight   | double(5,2)            | YES  |     | NULL    |       |<br>| birthday | date                   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;)        | YES  |     | NULL    |       |<br>| blood    | enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) | YES  |     | NULL    |       |<br>| tel      | char(11)               | YES  |     | NULL    |       |<br>+----------+------------------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br>mysql&gt; alter table teacher modify column weight double;<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc teacher;<br>+----------+------------------------+------+-----+---------+-------+<br>| Field    | Type                   | Null | Key | Default | Extra |<br>+----------+------------------------+------+-----+---------+-------+<br>| tid      | int(11)                | YES  |     | NULL    |       |<br>| tname    | varchar(5)             | YES  |     | NULL    |       |<br>| salary   | double                 | YES  |     | NULL    |       |<br>| weight   | double                 | YES  |     | NULL    |       |<br>| birthday | date                   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;)        | YES  |     | NULL    |       |<br>| blood    | enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) | YES  |     | NULL    |       |<br>| tel      | char(11)               | YES  |     | NULL    |       |<br>+----------+------------------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><h3 id="修改表结构：修改字段的名称"><a href="#修改表结构：修改字段的名称" class="headerlink" title="修改表结构：修改字段的名称"></a>修改表结构：修改字段的名称</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 change 【column】 旧字段名称 新的字段名称 新的数据类型; <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc teacher;<br>+----------+------------------------+------+-----+---------+-------+<br>| Field    | Type                   | Null | Key | Default | Extra |<br>+----------+------------------------+------+-----+---------+-------+<br>| tid      | int(11)                | YES  |     | NULL    |       |<br>| tname    | varchar(5)             | YES  |     | NULL    |       |<br>| salary   | double                 | YES  |     | NULL    |       |<br>| weight   | double                 | YES  |     | NULL    |       |<br>| birthday | date                   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;)        | YES  |     | NULL    |       |<br>| blood    | enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) | YES  |     | NULL    |       |<br>| tel      | char(11)               | YES  |     | NULL    |       |<br>+----------+------------------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br>mysql&gt; alter table teacher change tel phone char(11);<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc teacher;<br>+----------+------------------------+------+-----+---------+-------+<br>| Field    | Type                   | Null | Key | Default | Extra |<br>+----------+------------------------+------+-----+---------+-------+<br>| tid      | int(11)                | YES  |     | NULL    |       |<br>| tname    | varchar(5)             | YES  |     | NULL    |       |<br>| salary   | double                 | YES  |     | NULL    |       |<br>| weight   | double                 | YES  |     | NULL    |       |<br>| birthday | date                   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;)        | YES  |     | NULL    |       |<br>| blood    | enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) | YES  |     | NULL    |       |<br>| phone    | char(11)               | YES  |     | NULL    |       |<br>+----------+------------------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="修改表结构：修改字段位置"><a href="#修改表结构：修改字段位置" class="headerlink" title="修改表结构：修改字段位置"></a>修改表结构：修改字段位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 【column】 字段名称 数据类型 first;<br>alter table 表名称 modify 【column】 字段名称 数据类型 after 另一个字段;<br></code></pre></td></tr></table></figure><h3 id="修改表名称（重命名表）"><a href="#修改表名称（重命名表）" class="headerlink" title="修改表名称（重命名表）"></a>修改表名称（重命名表）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 旧表名 rename 【to】 新表名;<br>rename table 旧表名称 to 新表名称;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table teacher rename to t_tea;<br>rename table t_tea to teacher;<br></code></pre></td></tr></table></figure><h3 id="上课SQL示例演示"><a href="#上课SQL示例演示" class="headerlink" title="上课SQL示例演示"></a>上课SQL示例演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示和数据表相关的DDL语句<br>#为了方便接下来的演示，最好在前面确定针对哪个数据库的表格演示<br>#使用数据库<br>use atguigu;<br><br>#查看当前登录用户在本库下能够看到的所有表格<br>show tables;<br><br>#如果前面没有use语句，或者在当前use语句下，要查看另一个数据库的表格。<br>show tables from 数据库名;<br><br>#例如：查看当前数据库的表格<br>show tables;<br>#例如：在当前use atguigu;下面，查看mysql库的表格<br>show tables from mysql;<br><br>#创建表格<br>create table 表名称(<br>字段名1 数据类型1,<br>字段名2 数据类型2  #如果后面没有其他字段或约束的定义，后面就不用加,<br>);<br><br>#例如：创建一个teacher表<br>/*<br>包含编号、姓名、性别、出生日期、薪资、电话号码<br>*/<br>create table teacher(<br>id int,<br>name varchar(20),<br>gender enum(&#x27;男&#x27;,&#x27;女&#x27;),<br>birthday date,<br>salary double,<br>tel varchar(11)<br>);<br><br>#查看表结构<br>desc 表名称;<br>describe 表名称;<br><br>#例如：查看teacher表的结构<br>desc teacher;<br>describe teacher;<br><br>mysql&gt; describe teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double          | YES  |     | NULL    |       |<br>| tel      | varchar(11)     | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>6 rows in set (0.00 sec)<br><br>#查看表格的详细定义<br>show create table 表名称;<br><br>#例如：查看teacher表的定义语句<br>show create table teacher;<br><br>mysql&gt; show create table teacher\G<br>*************************** 1. row ***************************<br>       Table: teacher<br>Create Table: CREATE TABLE `teacher` (<br>  `id` int DEFAULT NULL,<br>  `name` varchar(20) DEFAULT NULL,<br>  `gender` enum(&#x27;男&#x27;,&#x27;女&#x27;) DEFAULT NULL,<br>  `birthday` date DEFAULT NULL,<br>  `salary` double DEFAULT NULL,<br>  `tel` varchar(11) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br>1 row in set (0.00 sec)<br><br>#修改表结构<br>#增加一个字段<br>alter table 表名称 add column 字段名 数据类型;<br>#column表示列，字段，可以省略<br><br>#例如：给teacher表增加一个address varchar(100)字段<br>alter table teacher add column address varchar(100);<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double          | YES  |     | NULL    |       |<br>| tel      | varchar(11)     | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>7 rows in set (0.00 sec)<br><br><br>#在某个字段后面增加一个字段<br>alter table 表名称 add column 字段名 数据类型 after 另一个字段;<br>#column表示列，字段，可以省略<br><br>#例如：给teacher表增加一个cardid char(18)字段，增加到name后面<br>alter table teacher add column cardid char(18) after name;<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| cardid   | char(18)        | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double          | YES  |     | NULL    |       |<br>| tel      | varchar(11)     | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br>#增加一个字段，称为第一个字段<br>alter table 表名称 add column 字段名 数据类型 first;<br>#column表示列，字段，可以省略<br><br>#例如：给teacher表增加一个age int字段，增加到id前面<br>alter table teacher add column age int first;<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| age      | int             | YES  |     | NULL    |       |<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| cardid   | char(18)        | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double          | YES  |     | NULL    |       |<br>| tel      | varchar(11)     | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>9 rows in set (0.01 sec)<br><br><br>#删除字段<br>alter table 表名称 drop column 字段名;<br>#column可以省略<br><br>#例如：删除teacher表的age字段<br>alter table teacher drop column age;<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| cardid   | char(18)        | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double          | YES  |     | NULL    |       |<br>| tel      | varchar(11)     | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br>#修改字段的数据类型<br>alter table 表名称 modify column 字段名 新的数据类型;<br><br>#例如：修改teacher表的salary字段，数据类型修改为double(10,2)<br>alter table teacher modify column salary double(10,2);<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| cardid   | char(18)        | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double(10,2)    | YES  |     | NULL    |       |<br>| tel      | varchar(11)     | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br>#修改字段的名称<br>alter table 表名称 change column 旧字段名 新的字段名 数据类型;<br><br>#例如：修改teacher表的tel字段，字段名修改为telphone<br>alter table teacher change column tel telphone char(18);<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| cardid   | char(18)        | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| salary   | double(10,2)    | YES  |     | NULL    |       |<br>| telphone | char(18)        | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>8 rows in set (0.01 sec)<br><br>#修改字段的顺序<br>alter table 表名称 modify column 字段名 数据类型 after 另一个字段;<br>alter table 表名称 modify column 字段名 数据类型 first;<br><br>#例如，把teacher表的salary调整到telphone后面<br>alter table teacher modify column salary double(10,2) after telphone;<br><br>mysql&gt; desc teacher;<br>+----------+-----------------+------+-----+---------+-------+<br>| Field    | Type            | Null | Key | Default | Extra |<br>+----------+-----------------+------+-----+---------+-------+<br>| id       | int             | YES  |     | NULL    |       |<br>| name     | varchar(20)     | YES  |     | NULL    |       |<br>| cardid   | char(18)        | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| birthday | date            | YES  |     | NULL    |       |<br>| telphone | char(18)        | YES  |     | NULL    |       |<br>| salary   | double(10,2)    | YES  |     | NULL    |       |<br>| address  | varchar(100)    | YES  |     | NULL    |       |<br>+----------+-----------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br><br><br>#修改表名称<br>rename table 旧表名称 to 新表名称;<br>alter table 表名称 rename 新表名称;<br><br><br>#把teacher表重命名为jiaoshi<br>rename table teacher to jiaoshi;<br><br>#把jiaoshi表重命名为teacher<br>alter table jiaoshi rename teacher;<br><br><br>#删除表结构（数据一并删除）<br>drop table 表名称;<br><br>#删除teacher表格<br>drop table teacher;<br><br></code></pre></td></tr></table></figure><h1 id="第13章-DML"><a href="#第13章-DML" class="headerlink" title="第13章 DML"></a>第13章 DML</h1><h2 id="13-1-添加语句"><a href="#13-1-添加语句" class="headerlink" title="13.1 添加语句"></a>13.1 添加语句</h2><h3 id="（1）添加一条记录到某个表中"><a href="#（1）添加一条记录到某个表中" class="headerlink" title="（1）添加一条记录到某个表中"></a>（1）添加一条记录到某个表中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 values(值列表); #值列表中的值的顺序、类型、个数必须与表结构一一对应<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc teacher;<br>+----------+------------------------+------+-----+---------+-------+<br>| Field    | Type                   | Null | Key | Default | Extra |<br>+----------+------------------------+------+-----+---------+-------+<br>| tid      | int(11)                | YES  |     | NULL    |       |<br>| tname    | varchar(5)             | YES  |     | NULL    |       |<br>| salary   | double                 | YES  |     | NULL    |       |<br>| weight   | double                 | YES  |     | NULL    |       |<br>| birthday | date                   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;男&#x27;,&#x27;女&#x27;)        | YES  |     | NULL    |       |<br>| blood    | enum(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;AB&#x27;,&#x27;O&#x27;) | YES  |     | NULL    |       |<br>| phone    | char(11)               | YES  |     | NULL    |       |<br>+----------+------------------------+------+-----+---------+-------+<br>8 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into teacher values(1,&#x27;张三&#x27;,15000,120.5,&#x27;1990-5-1&#x27;,&#x27;男&#x27;,&#x27;O&#x27;,&#x27;13789586859&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into teacher values(2,&#x27;李四&#x27;,15000,&#x27;1990-5-1&#x27;,&#x27;男&#x27;,&#x27;O&#x27;,&#x27;13789586859&#x27;); #缺体重weight的值<br><br>ERROR 1136 (21S01): Column（列） count（数量） doesn&#x27;t match（不匹配） value（值） count（数量) at row 1<br></code></pre></td></tr></table></figure><h3 id="（2）添加一条记录到某个表中"><a href="#（2）添加一条记录到某个表中" class="headerlink" title="（2）添加一条记录到某个表中"></a>（2）添加一条记录到某个表中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 (字段列表) values(值列表); #值列表中的值的顺序、类型、个数必须与(字段列表)一一对应<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into teacher(tid,tname,salary,phone) values(3,&#x27;王五&#x27;,16000,&#x27;15789546586&#x27;);<br></code></pre></td></tr></table></figure><h3 id="（3）添加多条记录到某个表中"><a href="#（3）添加多条记录到某个表中" class="headerlink" title="（3）添加多条记录到某个表中"></a>（3）添加多条记录到某个表中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 values(值列表),(值列表),(值列表); #值列表中的值的顺序、类型、个数必须与表结构一一对应<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into 表名称 (字段列表) values(值列表),(值列表),(值列表); #值列表中的值的顺序、类型、个数必须与(字段列表)一一对应<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into teacher (tid,tname,salary,phone) <br>values(4,&#x27;赵六&#x27;,16000,&#x27;15789546586&#x27;),<br>(5,&#x27;汪飞&#x27;,18000,&#x27;15789548886&#x27;),<br>(6,&#x27;天琪&#x27;,19000,&#x27;15909546586&#x27;);<br></code></pre></td></tr></table></figure><h3 id="（4）示例演示"><a href="#（4）示例演示" class="headerlink" title="（4）示例演示"></a>（4）示例演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示基本的，简单的DML语句<br>#基于tempdb数据库演示<br>create database tempdb;<br>use tempdb;<br><br>#创建teacher表<br>create table teacher(<br>id int,<br>name varchar(20),<br>gender enum(&#x27;m&#x27;,&#x27;f&#x27;),<br>birthday date,<br>salary double,<br>tel varchar(11)<br>);<br><br>#查看teacher表结构<br>mysql&gt; desc teacher;<br>+----------+---------------+------+-----+---------+-------+<br>| Field    | Type          | Null | Key | Default | Extra |<br>+----------+---------------+------+-----+---------+-------+<br>| id       | int           | YES  |     | NULL    |       |<br>| name     | varchar(20)   | YES  |     | NULL    |       |<br>| gender   | enum(&#x27;m&#x27;,&#x27;f&#x27;) | YES  |     | NULL    |       |<br>| birthday | date          | YES  |     | NULL    |       |<br>| salary   | double        | YES  |     | NULL    |       |<br>| tel      | char(18)      | YES  |     | NULL    |       |<br>+----------+---------------+------+-----+---------+-------+<br>6 rows in set (0.01 sec)<br><br><br>#添加数据<br>#（1）第一种情况，给所有字段赋值<br>insert into 表名称 values(值列表);  <br>#这种情况要求(值列表)的每一个值的类型、顺序与表结构一一对应<br>#表中有几个字段，(值列表)必须有几个值，不能多也不能少<br>#值如果是字符串或日期类型，需要加单引号<br><br>#例如：添加一条记录到teacher表<br>insert into teacher values<br>(1,&#x27;张三&#x27;,&#x27;m&#x27;,&#x27;1998-7-8&#x27;,15000.0,&#x27;18256953685&#x27;);<br><br>#例如：添加一条记录到teacher表<br>insert into teacher values<br>(2,&#x27;李四&#x27;,&#x27;f&#x27;,&#x27;1998-7-8&#x27;,15000.0); #少了电话号码<br><br>mysql&gt; insert into teacher values<br>    -&gt; (2,&#x27;李四&#x27;,&#x27;f&#x27;,&#x27;1998-7-8&#x27;,15000.0);<br>ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1&#x27;<br>#(值列表)中值的数量和表结构中column列的数量不一致。<br><br>#例如：添加一条记录到teacher表<br>insert into teacher values<br>(2,&#x27;李四&#x27;,&#x27;f&#x27;,&#x27;北京宏福苑&#x27;,15000.0,&#x27;18256953685&#x27;); #把生日写称为地址<br><br>mysql&gt; insert into teacher values<br>    -&gt; (2,&#x27;李四&#x27;,&#x27;f&#x27;,&#x27;北京宏福苑&#x27;,15000.0,&#x27;18256953685&#x27;);<br>ERROR 1292 (22007): Incorrect date value: &#x27;北京宏福苑&#x27; for column &#x27;birthday&#x27; at row 1<br>#日期格式不对<br><br>#（2）第二种情况，给部分字段赋值<br>insert into 表名称 (部分字段列表) values(值列表);<br>#此时(值列表)中的值的数量、格式、顺序与(部分字段列表)对应即可<br><br>#例如：添加一条记录到teacher表，只给id和name字段赋值<br>insert into teacher (id,name) values (2,&#x27;李四&#x27;); <br><br>mysql&gt; select * from teacher;<br>+------+------+--------+------------+--------+-------------+<br>| id   | name | gender | birthday   | salary | tel         |<br>+------+------+--------+------------+--------+-------------+<br>|    1 | 张三 | m      | 1998-07-08 |  15000 | 18256953685 |<br>|    2 | 李四 | NULL   | NULL       |   NULL | NULL        | <br>+------+------+--------+------------+--------+-------------+<br>2 rows in set (0.00 sec)<br>#没有赋值的字段都是默认值，此时默认值是NULL<br>#这种情况，当某个字段设置了“非空NOT NULL”约束，又没有提前指定“默认值”，<br>#那么在添加时没有赋值的话，会报错。明天演示非空约束。<br><br>#（3）一次添加多条记录<br>insert into 表名称  values(值列表1),(值列表2)...;<br>insert into 表名称 (部分字段列表) values(值列表),(值列表2)...;<br>#上面一个insert语句有几个(值列表)就表示添加几行记录。<br>#每一个值列表直接使用逗号分隔<br><br>#添加多条记录到teacher表<br>insert into teacher (id,name) values<br> (3,&#x27;王五&#x27;),<br> (4,&#x27;宋鑫&#x27;),<br> (5,&#x27;赵志浩&#x27;),<br> (6,&#x27;杨业行&#x27;),<br> (7,&#x27;牛钰琪&#x27;);<br> <br> #查看数据<br> mysql&gt; select * from teacher;<br>+------+--------+--------+------------+--------+-------------+<br>| id   | name   | gender | birthday   | salary | tel         |<br>+------+--------+--------+------------+--------+-------------+<br>|    1 | 张三   | m      | 1998-07-08 |  15000 | 18256953685 |<br>|    2 | 李四   | NULL   | NULL       |   NULL | NULL        |<br>|    3 | 王五   | NULL   | NULL       |   NULL | NULL        |<br>|    4 | 宋鑫   | NULL   | NULL       |   NULL | NULL        |<br>|    5 | 赵志浩 | NULL   | NULL       |   NULL | NULL        |<br>|    6 | 杨业行 | NULL   | NULL       |   NULL | NULL        |<br>|    7 | 牛钰琪 | NULL   | NULL       |   NULL | NULL        |<br>+------+--------+--------+------------+--------+-------------+<br>7 rows in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><h2 id="13-2-修改语句"><a href="#13-2-修改语句" class="headerlink" title="13.2 修改语句"></a>13.2 修改语句</h2><h3 id="修改所有行"><a href="#修改所有行" class="headerlink" title="修改所有行"></a>修改所有行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update 表名称 set 字段名 = 值, 字段名 = 值; #给所有行修改<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改所有人的薪资，都涨了1000<br>update teacher set salary = salary + 1000 ; <br></code></pre></td></tr></table></figure><h3 id="修改部分行"><a href="#修改部分行" class="headerlink" title="修改部分行"></a>修改部分行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update 表名称 set 字段名 = 值, 字段名 = 值 where 条件; #给满足条件的行修改<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改天琪的薪资降低5000<br>update teacher set salary = salary-5000 where tname = &#x27;天琪&#x27;;<br></code></pre></td></tr></table></figure><h2 id="13-3-删除"><a href="#13-3-删除" class="headerlink" title="13.3 删除"></a>13.3 删除</h2><h3 id="删除部分行的数据"><a href="#删除部分行的数据" class="headerlink" title="删除部分行的数据"></a>删除部分行的数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from 表名称 where 条件;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from teacher where tname = &#x27;天琪&#x27;;<br></code></pre></td></tr></table></figure><h3 id="删除整张表的数据，但表结构留下"><a href="#删除整张表的数据，但表结构留下" class="headerlink" title="删除整张表的数据，但表结构留下"></a>删除整张表的数据，但表结构留下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from 表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from teacher;<br></code></pre></td></tr></table></figure><h3 id="截断表，清空表中的数据，只有表结构"><a href="#截断表，清空表中的数据，只有表结构" class="headerlink" title="截断表，清空表中的数据，只有表结构"></a>截断表，清空表中的数据，只有表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">truncate 表名称;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">truncate teacher;<br></code></pre></td></tr></table></figure><p>truncate表和delete表的区别：</p><p>delete是一条一条删除记录的。如果在事务中，事务提交之前支持回滚。（后面会讲事务）</p><p>truncate是把整个表drop，新建一张，效率更高。就算在事务中，也无法回滚。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#同学问：是否可以删除salary字段的值，字段留着，值删掉<br>#可以实现，但是不是用delete，用update<br><br>#同学问：是否可以删除salary字段，连同字段和这个字段的数据都是删除<br>#可以实现，但是不是用delete，用alter table 表名称 drop column 字段名;<br><br>#同学问：只删除某个单元格的值<br>#可以实现，但是不是用delete，用update<br></code></pre></td></tr></table></figure><h2 id="13-4-UPDATE中嵌套子查询"><a href="#13-4-UPDATE中嵌套子查询" class="headerlink" title="13.4 UPDATE中嵌套子查询"></a>13.4 UPDATE中嵌套子查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#子查询也可以嵌套在update语句中<br>#（1）修改“t_employee”表中部门编号（did）和<br>#“测试部”部门编号（did）相同的员工薪资为原来薪资的1.5倍。<br>UPDATE t_employee<br>SET salary = salary * 1.5<br>WHERE did = (SELECT did FROM t_department WHERE dname = &#x27;测试部&#x27;);<br><br>#（2）修改“t_employee”表中did为NULL的员工信息，<br>#将他们的did值修改为“测试部”的部门编号。<br>#子查询select did from t_department where dname = &#x27;测试部&#x27;<br>#这种子查询必须是单个值，否则无法赋值<br><br>UPDATE t_employee <br>SET did = (SELECT did FROM t_department WHERE dname = &#x27;测试部&#x27;)<br>WHERE did IS NULL;<br><br>#（3）修改“t_employee”表中“李冰冰”的薪资值等于“孙红梅”的薪资值。<br>#这里使用子查询先在“t_employee”表中查询出“孙红梅”的薪资。<br>#select salary from t_employee where ename = &#x27;孙红梅&#x27;;<br><br>UPDATE t_employee<br>SET salary = (SELECT salary FROM t_employee WHERE ename = &#x27;孙红梅&#x27;)<br>WHERE ename = &#x27;李冰冰&#x27;;<br>#You can&#x27;t specify target table &#x27;t_employee&#x27; for update in FROM clause&#x27;<br><br>UPDATE t_employee<br>SET salary = (SELECT salary FROM(SELECT salary FROM t_employee WHERE ename = &#x27;孙红梅&#x27;)temp)<br>WHERE ename = &#x27;李冰冰&#x27;;<br>#当update的表和子查询的表是同一个表时，需要将子查询的结果用临时表的方式表示<br>#即再套一层子查询，使得update和最外层的子查询不是同一张表<br><br>#（4）修改“t_employee”表“李冰冰”的薪资与她所在部门的平均薪资一样。<br>#子查询，查询李冰冰的部门编号 <br>#select did from t_employee where ename = &#x27;李冰冰&#x27;;<br><br>#子查询第二层，查询李冰冰所在部门的平均薪资<br>#select avg(salary) from t_employee where did = (select did from t_employee where ename = &#x27;李冰冰&#x27;);<br><br>#子查询第三层，把第二层的子查询结果当成临时表再查一下结果<br>#目的使得和外层的update不是同一张表<br>SELECT pingjun FROM (SELECT AVG(salary) pingjun FROM t_employee WHERE did = (SELECT did FROM t_employee WHERE ename = &#x27;李冰冰&#x27;) temp)<br><br>#update更新<br>UPDATE t_employee<br>SET salary = <br>(SELECT pingjun FROM <br>(SELECT AVG(salary) pingjun FROM t_employee WHERE did = <br>(SELECT did FROM t_employee WHERE ename = &#x27;李冰冰&#x27;) ) temp)<br>WHERE ename = &#x27;李冰冰&#x27;;<br></code></pre></td></tr></table></figure><h2 id="13-5-DELETE中嵌套子查询"><a href="#13-5-DELETE中嵌套子查询" class="headerlink" title="13.5 DELETE中嵌套子查询"></a>13.5 DELETE中嵌套子查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#delete语句中也可以嵌套子查询<br>#（1）从“t_employee”表中删除“测试部”的员工记录。<br>DELETE FROM t_employee <br>WHERE did = (SELECT did FROM t_department WHERE dname = &#x27;测试部&#x27;);<br><br><br>#（2）从“t_employee”表中删除和“李冰冰”同一个部门的员工记录。<br>#子查询 “李冰冰”的部门编号<br>#select did from t_employee where ename = &#x27;李冰冰&#x27;;<br><br>DELETE FROM t_employee WHERE did = (SELECT did FROM t_employee WHERE ename = &#x27;李冰冰&#x27;);<br>#You can&#x27;t specify target table &#x27;t_employee&#x27; for update in FROM clause&#x27;<br>#删除和子查询是同一张表<br><br>DELETE FROM t_employee WHERE did = (SELECT did FROM (SELECT did FROM t_employee WHERE ename = &#x27;李冰冰&#x27;)temp);<br></code></pre></td></tr></table></figure><h2 id="13-6-使用子查询复制表结构和数据"><a href="#13-6-使用子查询复制表结构和数据" class="headerlink" title="13.6 使用子查询复制表结构和数据"></a>13.6 使用子查询复制表结构和数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示通过子查询复制表，<br>#（1）复制表结构<br>#（2）复制一条或多条记录<br>#（3）同时复制表结构和记录<br>#仅仅是复制表结构，可以用create语句<br>CREATE TABLE department LIKE t_department;<br><br>#使用INSERT语句+子查询，复制数据，此时INSERT不用写values<br>INSERT INTO department (SELECT * FROM t_department WHERE did&lt;=3);<br><br>#同时复制表结构+数据<br>CREATE TABLE d_department AS (SELECT * FROM t_department);<br>#如果select后面是部分字段，复制的新表就只有这一部分字段<br></code></pre></td></tr></table></figure><h1 id="第14章-约束"><a href="#第14章-约束" class="headerlink" title="第14章 约束"></a>第14章 约束</h1><h2 id="14-1-约束的作用"><a href="#14-1-约束的作用" class="headerlink" title="14.1 约束的作用"></a>14.1 约束的作用</h2><p>约束是为了保证数据的完整性，数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是应防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p><p>数据的完整性要从以下四个方面考虑：</p><ul><li>实体完整性（Entity Integrity）：例如，同一个表中，不能存在两条完全相同无法区分的记录</li><li>域完整性（Domain Integrity）：例如：年龄范围0-120，性别范围“男&#x2F;女”</li><li>引用完整性（Referential Integrity）：例如：员工所在部门，在部门表中要能找到这个部门</li><li>用户自定义完整性（User-defined Integrity）：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li></ul><h2 id="14-2-约束的类型"><a href="#14-2-约束的类型" class="headerlink" title="14.2 约束的类型"></a>14.2 约束的类型</h2><h3 id="1、约束类型"><a href="#1、约束类型" class="headerlink" title="1、约束类型"></a>1、约束类型</h3><ul><li>键约束：主键约束、外键约束、唯一键,检查约束约束</li><li>Not NULL约束：非空约束</li><li>Check约束：检查约束</li><li>Default约束：默认值约束</li></ul><p>自增是键约束字段的一个额外的属性。</p><h3 id="2、表级约束和列级约束"><a href="#2、表级约束和列级约束" class="headerlink" title="2、表级约束和列级约束"></a>2、表级约束和列级约束</h3><p>其中键约束和检查约束是表级约束，即不仅要看约束字段当前单元格的数据，还要看其他单元格的数据。</p><p>非空约束和默认值约束都是列级约束，即约束字段只看当前单元格的数据即可，和其他单元格无关。</p><p>所有的表级约束都可以在“information_schema.table_constraints”表中查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;<br></code></pre></td></tr></table></figure><h3 id="3、约束和索引"><a href="#3、约束和索引" class="headerlink" title="3、约束和索引"></a>3、约束和索引</h3><p>在MySQL中键约束会自动创建索引，提高查询效率。索引的详细讲解在高级部分。</p><p>MySQL高级会给大家讲解索引、存储引擎等，因为高级要给大家分析SQL性能。而基础阶段先不管效率，只要能查出来就行。</p><p>约束和索引不同：</p><p>约束是一个逻辑概念，它不会单独占用物理空间，</p><p>索引是一个物理概念，它是会占用物理空间。</p><p>例如：字典</p><p>字典里面有要求，不能有重复的字（字一样，读音也一样），这是约束。</p><p>字典里面有“目录”，它可以快速的查找某个字，目录需要占用单独的页。</p><h2 id="14-3-非空约束"><a href="#14-3-非空约束" class="headerlink" title="14.3 非空约束"></a>14.3 非空约束</h2><h3 id="1、作用"><a href="#1、作用" class="headerlink" title="1、作用"></a>1、作用</h3><p>限定某个字段&#x2F;某列的值不允许为空</p><h3 id="2、关键字：not-null"><a href="#2、关键字：not-null" class="headerlink" title="2、关键字：not null"></a>2、关键字：not null</h3><h3 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h3><p>（1）只能某个列单独限定非空，不能组合非空</p><p>（2）一个表可以有很多列都分别限定了非空</p><h3 id="4、如何指定非空约束"><a href="#4、如何指定非空约束" class="headerlink" title="4、如何指定非空约束"></a>4、如何指定非空约束</h3><h4 id="（1）建表时"><a href="#（1）建表时" class="headerlink" title="（1）建表时"></a>（1）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名 数据类型 not null,<br>字段名 数据类型 not null,<br>字段名 数据类型<br>);<br></code></pre></td></tr></table></figure><h4 id="（2）建表后（了解）"><a href="#（2）建表后（了解）" class="headerlink" title="（2）建表后（了解）"></a>（2）建表后（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 【column】 字段名 数据类型 not null;<br><br>/*<br>如何该字段已经有值了，给该字段增加非空约束，要求该字段的值不能有NULL值，否则需要先处理NULL值才能加上非空约束<br>*/<br></code></pre></td></tr></table></figure><h3 id="5、如何删除非空约束（了解）"><a href="#5、如何删除非空约束（了解）" class="headerlink" title="5、如何删除非空约束（了解）"></a>5、如何删除非空约束（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 【column】 字段名 数据类型;<br><br>/*<br>说明：<br>如果某个字段有not null非空约束，使用modify修改字段的数据类型、位置、字符集和校对规则、默认值约束时，<br>想要保留非空约束，必须把not null带上，否则会在修改字段的数据类型、位置、字符集和校对规则时，会把非空约束给丢掉。<br>*/<br></code></pre></td></tr></table></figure><h3 id="6、SQL示例演示"><a href="#6、SQL示例演示" class="headerlink" title="6、SQL示例演示"></a>6、SQL示例演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*演示非空约束<br>1、作用：限定某个字段的值不允许为NULL。<br><br>在Java中只有引用数据类型才能赋值为null，基本数据类型不允许为null。<br>但是MySQL中所有的数据类型都可以赋值为NULL，包括int等。<br><br>2、关键字：not null<br><br>3、一个表可以有很多个字段限定非空约束，<br>一个字段加not null，和其他字段无关，它是列级约束。<br>*/<br><br>#创建一个表格，演示NULL值<br>create table not_null_demo(<br>id int,<br>name varchar(20),<br>birthday date<br>);<br><br>insert into not_null_demo values(null,null,null);<br>insert into not_null_demo(id) values(1);<br>select * from not_null_demo;<br>drop table not_null_demo;<br><br>#在创建表的时候，可以指定非空约束<br><br>create table 表名称(<br>字段名 数据类型 not null,<br>字段名 数据类型 not null,<br>字段名 数据类型<br>);<br><br>create table not_null_demo(<br>id int not null,<br>name varchar(20) not null,<br>birthday date  #没有加not null的，允许为NULL<br>);<br><br>#添加NULL值<br>insert into not_null_demo values(null,null,null);<br><br>mysql&gt; insert into not_null_demo values(null,null,null);<br>ERROR 1048 (23000): Column &#x27;id&#x27; cannot be null<br><br>#指定了id字段的值，但是没有指定name字段和birthday字段的值<br>insert into not_null_demo(id) values(1);<br><br>mysql&gt; insert into not_null_demo(id) values(1);<br>ERROR 1364 (HY000): Field &#x27;name&#x27; doesn&#x27;t have a default value&#x27;<br>#此时name设定了NOT NULL，但又没有提前指定默认值，<br>#如果没赋值只能处理为NULL，就违反非空约束<br><br>#总结：在insert添加记录时，必须给所有没有提前指定默认值的非空约束字段赋值。<br><br>insert into not_null_demo(id,name) values(1,&#x27;张三&#x27;);<br>insert into not_null_demo(id,name,birthday) values(2,&#x27;李四&#x27;,&#x27;2000-1-1&#x27;);<br>insert into not_null_demo values(3,&#x27;王五&#x27;,&#x27;2000-2-1&#x27;);<br>insert into not_null_demo values(4,&#x27;赵六&#x27;,null);<br><br>insert into not_null_demo values(4,&#x27;赵六&#x27;); #错误，值列表数量与字段数量不匹配<br>mysql&gt; insert into not_null_demo values(4,&#x27;赵六&#x27;);<br>ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1&#x27;<br><br><br>#在创建表之后，可以给某个字段增加非空约束<br>#alter table 表名称 modify 【column】 字段名 数据类型 not null;<br><br>#例如：给not_null_demo表格的birthday字段加not null约束<br>alter table not_null_demo modify column birthday date not null;<br><br>mysql&gt; alter table not_null_demo modify column birthday date not null;<br>ERROR 1138 (22004): Invalid use of NULL value<br>#失败的原因是因为not_null_demo表中birthday字段现在已经有NULL值。<br>#所以添加不上非空约束。<br>#如果要加，必须先将原来的NULL值修改掉<br><br>mysql&gt; select * from not_null_demo;<br>+----+------+------------+<br>| id | name | birthday   |<br>+----+------+------------+<br>|  1 | 张三 | NULL       |<br>|  2 | 李四 | 2000-01-01 |<br>|  3 | 王五 | 2000-02-01 |<br>|  4 | 赵六 | NULL       |<br>+----+------+------------+<br>4 rows in set (0.01 sec)<br><br>update not_null_demo set birthday = &#x27;2000-5-1&#x27; where id=1 || id = 4;<br><br>mysql&gt; select * from not_null_demo;<br>+----+------+------------+<br>| id | name | birthday   |<br>+----+------+------------+<br>|  1 | 张三 | 2000-05-01 |<br>|  2 | 李四 | 2000-01-01 |<br>|  3 | 王五 | 2000-02-01 |<br>|  4 | 赵六 | 2000-05-01 |<br>+----+------+------------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; alter table not_null_demo modify column birthday date not null;<br>Query OK, 0 rows affected (0.06 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt; desc not_null_demo;<br>+----------+-------------+------+-----+---------+-------+<br>| Field    | Type        | Null | Key | Default | Extra |<br>+----------+-------------+------+-----+---------+-------+<br>| id       | int         | NO   |     | NULL    |       |<br>| name     | varchar(20) | NO   |     | NULL    |       |<br>| birthday | date        | NO   |     | NULL    |       |<br>+----------+-------------+------+-----+---------+-------+<br>3 rows in set (0.01 sec)<br><br>#删除某个字段的非空约束<br>alter table 表名称 modify 【column】 字段名 数据类型;<br><br>#例如：去掉birthday字段的非空约束<br>alter table not_null_demo modify column birthday date;<br><br>mysql&gt; desc not_null_demo;<br>+----------+-------------+------+-----+---------+-------+<br>| Field    | Type        | Null | Key | Default | Extra |<br>+----------+-------------+------+-----+---------+-------+<br>| id       | int         | NO   |     | NULL    |       |<br>| name     | varchar(20) | NO   |     | NULL    |       |<br>| birthday | date        | YES  |     | NULL    |       |<br>+----------+-------------+------+-----+---------+-------+<br>3 rows in set (0.01 sec)<br><br>/*<br>说明：<br>如果某个字段有not null非空约束的话，<br>使用modify修改字段的数据类型、位置、字符集和校对规则时，<br>想要保留非空约束，必须把not null带上，<br>否则会在修改字段的数据类型、位置、字符集和校对规则时，<br>把非空约束给丢掉。<br>*/<br>#例如：修改name字段的数据类型为varchar(30)，本来想要保留not null非空约束的<br>alter table not_null_demo modify column name varchar(30);<br>#此时alter没有加not null，会把name字段的not null约束给丢掉。<br><br>mysql&gt; desc not_null_demo;<br>+----------+-------------+------+-----+---------+-------+<br>| Field    | Type        | Null | Key | Default | Extra |<br>+----------+-------------+------+-----+---------+-------+<br>| id       | int         | NO   |     | NULL    |       |<br>| name     | varchar(30) | YES  |     | NULL    |       |<br>| birthday | date        | YES  |     | NULL    |       |<br>+----------+-------------+------+-----+---------+-------+<br>3 rows in set (0.01 sec)<br><br></code></pre></td></tr></table></figure><h2 id="14-4-唯一键约束"><a href="#14-4-唯一键约束" class="headerlink" title="14.4 唯一键约束"></a>14.4 唯一键约束</h2><h3 id="1、唯一键约束的作用"><a href="#1、唯一键约束的作用" class="headerlink" title="1、唯一键约束的作用"></a>1、唯一键约束的作用</h3><p>单列唯一：用来限制某个字段&#x2F;某列的值不能重复。</p><p>组合唯一：用来限定几个字段的值组合不能重复。</p><h3 id="2、关键字：unique-key"><a href="#2、关键字：unique-key" class="headerlink" title="2、关键字：unique key"></a>2、关键字：unique key</h3><h3 id="3、特点-1"><a href="#3、特点-1" class="headerlink" title="3、特点"></a>3、特点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">（1）一个表可以有很多个唯一键约束，<br>（2）每一个唯一键约束字段都会自动创建索引。<br>（3）唯一键约束允许为空<br>（4）唯一键约束也可以是复合唯一<br>（5）删除唯一键约束的索引来删除唯一键约束<br>索引名默认是字段名，复合唯一默认是第一个字段名。<br>索引名可以通过SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;查看。<br></code></pre></td></tr></table></figure><h3 id="4、如何指定唯一键约束"><a href="#4、如何指定唯一键约束" class="headerlink" title="4、如何指定唯一键约束"></a>4、如何指定唯一键约束</h3><h4 id="（1）建表时-1"><a href="#（1）建表时-1" class="headerlink" title="（1）建表时"></a>（1）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#在建表时，可以指定唯一键约束<br>create table 表名称(<br>字段名 数据类型 unique key,<br>字段名 数据类型 unique key,<br>字段名 数据类型<br>);<br><br>create table 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br>unique key(字段名),<br>unique key(字段名)<br>);<br></code></pre></td></tr></table></figure><h4 id="（2）建表后指定唯一键约束（了解）"><a href="#（2）建表后指定唯一键约束（了解）" class="headerlink" title="（2）建表后指定唯一键约束（了解）"></a>（2）建表后指定唯一键约束（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#如何在建表后添加唯一键约束<br>alter table 表名称 add unique 【key】(字段名);<br></code></pre></td></tr></table></figure><h3 id="4、如何查看唯一键约束？（了解）"><a href="#4、如何查看唯一键约束？（了解）" class="headerlink" title="4、如何查看唯一键约束？（了解）"></a>4、如何查看唯一键约束？（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc 表名称;<br><br>show create table 表名称;<br><br>show index from 表名称; #查看表的索引信息<br><br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;<br></code></pre></td></tr></table></figure><h3 id="5、复合唯一"><a href="#5、复合唯一" class="headerlink" title="5、复合唯一"></a>5、复合唯一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的<br>);<br></code></pre></td></tr></table></figure><h3 id="6、删除唯一键约束（了解）"><a href="#6、删除唯一键约束（了解）" class="headerlink" title="6、删除唯一键约束（了解）"></a>6、删除唯一键约束（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop index 索引名;<br>#删除唯一键约束需要手动删除对应的索引<br></code></pre></td></tr></table></figure><h3 id="7、如何查看唯一键对应的索引"><a href="#7、如何查看唯一键对应的索引" class="headerlink" title="7、如何查看唯一键对应的索引"></a>7、如何查看唯一键对应的索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show index from 表名称;<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;<br></code></pre></td></tr></table></figure><h3 id="8、SQL示例"><a href="#8、SQL示例" class="headerlink" title="8、SQL示例"></a>8、SQL示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*演示唯一键约束<br>1、作用：限定某个字段的值不允许重复。<br>但是如果是NULL值可以重复。<br><br>2、关键字：unique key 其中key可以省略<br><br>3、特点<br>一个表可以有很多个唯一键约束，<br>每一个唯一键约束字段都会自动创建索引。<br>*/<br><br>#在建表时，可以指定唯一键约束<br>create table 表名称(<br>字段名 数据类型 unique key,  #unique key可以直接加在字段后面<br>字段名 数据类型 unique key,<br>字段名 数据类型<br>);<br><br>create table 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br>unique key(字段名), #unique key也可以在字段列表下面单独定义<br>unique key(字段名)<br>);<br><br>#创建一个表格，限定编号、身份证号码和手机号码唯一<br>create table emp(<br>id int unique key,  #表示id字段值不能重复<br>name varchar(20),<br>cardid char(18),<br>tel char(11),<br>unique key(cardid),  #表示cardid字段值不能重复<br>unique key(tel)  #表示tel字段值不能重复<br>);<br><br>#查看表结构<br>desc emp;<br>mysql&gt; desc emp;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| id     | int         | YES  | UNI | NULL    |       |<br>| name   | varchar(20) | YES  |     | NULL    |       |<br>| cardid | char(18)    | YES  | UNI | NULL    |       |<br>| tel    | char(11)    | YES  | UNI | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.01 sec)<br><br>#查看表的定义语句<br>show create table emp;<br><br>mysql&gt; show create table emp\G<br>*************************** 1. row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `id` int DEFAULT NULL,<br>  `name` varchar(20) DEFAULT NULL,<br>  `cardid` char(18) DEFAULT NULL,<br>  `tel` char(11) DEFAULT NULL,<br>  UNIQUE KEY `id` (`id`),<br>  UNIQUE KEY `cardid` (`cardid`),<br>  UNIQUE KEY `tel` (`tel`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br>1 row in set (0.00 sec)<br><br>#添加数据<br>insert into emp values(1,&#x27;张三&#x27;,&#x27;25678544522222&#x27;,&#x27;13589587585&#x27;);<br>insert into emp values(2,&#x27;张三&#x27;,&#x27;25678544522211&#x27;,&#x27;13589587596&#x27;);<br><br>#查询数据<br>select * from emp;<br><br>insert into emp values(3,&#x27;李四&#x27;,&#x27;25678544522233&#x27;,&#x27;13589587596&#x27;);<br>#手机号码重复，报错<br><br>mysql&gt; insert into emp values(3,&#x27;李四&#x27;,&#x27;25678544522233&#x27;,&#x27;13589587596&#x27;);<br>ERROR 1062 (23000): Duplicate（复制、重复） entry（输入） &#x27;13589587596&#x27; for key &#x27;emp.tel&#x27;<br><br><br>insert into emp values<br>(3,&#x27;李四&#x27;,null,null),<br>(4,&#x27;王五&#x27;,null,null);<br><br>mysql&gt; select * from emp;<br>+------+------+----------------+-------------+<br>| id   | name | cardid         | tel         |<br>+------+------+----------------+-------------+<br>|    1 | 张三 | 25678544522222 | 13589587585 |<br>|    2 | 张三 | 25678544522211 | 13589587596 |<br>|    3 | 李四 | NULL           | NULL        | #NULL可以重复<br>|    4 | 王五 | NULL           | NULL        |<br>+------+------+----------------+-------------+<br>4 rows in set (0.00 sec)<br><br><br>#如何查看一个表的索引<br>show index from 表名称;<br><br>#查看emp表的索引<br>show index from emp;<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          0 | id       |            1 | id          | A         |           4 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| emp   |          0 | cardid   |            1 | cardid      | A         |           3 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| emp   |          0 | tel      |            1 | tel         | A         |           3 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>3 rows in set (0.00 sec)<br><br>#删除唯一键约束<br>alter table 表名称 drop index 索引名;<br>#如果在指定唯一键约束时，没有手动定义名字，默认就是字段名;<br>#建议大家在删除时用show index语句查看一下索引名<br><br>#删除emp表的cardid的唯一键约束<br>alter table emp drop index cardid;<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          0 | id       |            1 | id          | A         |           4 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| emp   |          0 | tel      |            1 | tel         | A         |           3 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>2 rows in set (0.01 sec)<br><br>mysql&gt; desc emp;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| id     | int         | YES  | UNI | NULL    |       |<br>| name   | varchar(20) | YES  |     | NULL    |       |<br>| cardid | char(18)    | YES  |     | NULL    |       |<br>| tel    | char(11)    | YES  | UNI | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br><br>#如何在建表后添加唯一键约束<br>alter table 表名称 add unique 【key】(字段名);<br><br>#给emp表的cardid增加唯一键约束<br>alter table emp add unique key(cardid);<br><br>mysql&gt; desc emp;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| id     | int         | YES  | UNI | NULL    |       |<br>| name   | varchar(20) | YES  |     | NULL    |       |<br>| cardid | char(18)    | YES  | UNI | NULL    |       |<br>| tel    | char(11)    | YES  | UNI | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          0 | id       |            1 | id          | A         |           4 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| emp   |          0 | tel      |            1 | tel         | A         |           3 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| emp   |          0 | cardid   |            1 | cardid      | A         |           3 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>3 rows in set (0.01 sec)<br><br>#有一种特殊的唯一键约束，复合唯一<br>#即表示两个或更多个字段值的组合唯一，单个字段看不唯一<br>create table 表名称(<br>字段名1 数据类型,<br>字段名2 数据类型,<br>字段名3 数据类型,<br>字段名4 数据类型,<br>unique key(字段名1,字段名2),  #表示字段名1和字段名2组合不能重复<br>  #字段1和字段2单独看是可以重复的<br>unique key(字段名3),#表示字段3单独不能重复<br>unique key(字段名4)#表示字段3单独不能重复<br>);<br><br><br><br>#学生表<br>create table stu(<br>id int,<br>name varchar(20)<br>);<br><br>#添加学生信息<br>insert into stu values(1,&#x27;张三&#x27;);<br>insert into stu values(2,&#x27;李四&#x27;);<br><br>mysql&gt; select * from stu;<br>+------+------+<br>| id   | name |<br>+------+------+<br>|    1 | 张三 |<br>|    2 | 李四 |<br>+------+------+<br>2 rows in set (0.00 sec)<br><br>#课程表<br>create table course(<br>id int,<br>title varchar(50)<br>);<br><br>#添加课程信息<br>insert into course values(1,&#x27;java&#x27;);<br>insert into course values(2,&#x27;mysql&#x27;);<br><br>mysql&gt; select * from course;<br>+------+-------+<br>| id   | title |<br>+------+-------+<br>|    1 | java  |<br>|    2 | mysql |<br>+------+-------+<br>2 rows in set (0.00 sec)<br><br>#选课表<br>create table xuanke(<br>xid int  unique key, #表示xid不能重复<br>sid int,<br>cid int,<br>score int,<br>unique key(sid,cid) #这么写表示sic和cid的组合不能重复，<br>#单独看sid和cid是可以重复的<br>);<br><br>#添加选课成绩信息<br>insert into xuanke values(1,1,1,89);<br>insert into xuanke values(2,1,2,96);<br>insert into xuanke values(3,2,1,75);<br>insert into xuanke values(4,2,2,96);<br><br>mysql&gt; select * from xuanke;<br>+------+------+------+-------+<br>| xid  | sid  | cid  | score |<br>+------+------+------+-------+<br>|    1 |    1 |    1 |    89 |<br>|    2 |    1 |    2 |    96 |<br>|    3 |    2 |    1 |    75 |<br>|    4 |    2 |    2 |    96 |<br>+------+------+------+-------+<br>4 rows in set (0.00 sec)<br>#单独看sid是可以重复的<br>#单独看cid是可以重复的<br>#组合看sid和cid是不可以重复的<br><br>insert into xuanke values(5,1,1,100); #sid为1和cid为1组合重复<br>mysql&gt; insert into xuanke values(5,1,1,100);<br>ERROR 1062 (23000): Duplicate entry &#x27;1-1&#x27; for key &#x27;xuanke.sid&#x27;<br><br>mysql&gt; desc xuanke;<br>+-------+------+------+-----+---------+-------+<br>| Field | Type | Null | Key | Default | Extra |<br>+-------+------+------+-----+---------+-------+<br>| xid   | int  | YES  | UNI | NULL    |       |<br>| sid   | int  | YES  | MUL | NULL    |       |<br>| cid   | int  | YES  |     | NULL    |       |<br>| score | int  | YES  |     | NULL    |       |<br>+-------+------+------+-----+---------+-------+<br>4 rows in set (0.01 sec)<br><br><br>mysql&gt; show index from xuanke;<br>+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table  | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| xuanke |          0 | xid      |            1 | xid         | A         |           4 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| xuanke |          0 | sid      |            1 | sid         | A         |           2 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>| xuanke |          0 | sid      |            2 | cid         | A         |           4 |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>3 rows in set (0.01 sec)<br>#组合唯一键索引名默认是unique key(字段1， 字段2)的第一个字段名。<br><br>#删除复合唯一键约束<br>alter table xuanke drop index sid;<br><br></code></pre></td></tr></table></figure><h2 id="14-5-主键约束（重要）"><a href="#14-5-主键约束（重要）" class="headerlink" title="14.5 主键约束（重要）"></a>14.5 主键约束（重要）</h2><h3 id="1、主键约束的作用"><a href="#1、主键约束的作用" class="headerlink" title="1、主键约束的作用"></a>1、主键约束的作用</h3><p>用来唯一的确定一条记录</p><h3 id="2、关键字：primary-key"><a href="#2、关键字：primary-key" class="headerlink" title="2、关键字：primary key"></a>2、关键字：primary key</h3><h3 id="3、特点-2"><a href="#3、特点-2" class="headerlink" title="3、特点"></a>3、特点</h3><p>（1）唯一并且非空</p><p>（2）一个表最多只能有一个主键约束</p><p>（3）如果主键是由多列组成，可以使用复合主键</p><p>（4）主键列会自动创建索引（能够根据主键查询的，就根据主键查询，效率更高）</p><p>主键列的唯一并且非空是约束的概念，但是mysql会给每个表的主键列创建索引，会开辟单独的物理空间来存储每一个主键的目录表（Btree结构）。这样设计的意义，可以根据主键快速查询到某一行的记录。</p><p>（5）如果删除主键约束了，主键约束对应的索引就自动删除了。</p><h3 id="4、唯一键约束和主键约束区别"><a href="#4、唯一键约束和主键约束区别" class="headerlink" title="4、唯一键约束和主键约束区别"></a>4、唯一键约束和主键约束区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">4、唯一键约束和主键约束的区别<br>（1）唯一键约束一个表可以有好几个，<br>但是主键约束只有一个<br>（2）唯一键约束本身不带非空限制，如果需要非空，需要单独定义。<br>主键约束不用再定义NOT NULL，自身就带非空限制。<br></code></pre></td></tr></table></figure><h3 id="5、如何指定主键约束"><a href="#5、如何指定主键约束" class="headerlink" title="5、如何指定主键约束"></a>5、如何指定主键约束</h3><h4 id="（1）建表时指定主键约束"><a href="#（1）建表时指定主键约束" class="headerlink" title="（1）建表时指定主键约束"></a>（1）建表时指定主键约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key,<br>    字段名  数据类型,  <br>    字段名  数据类型  <br>);<br>create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    primary key(字段名)<br>);<br></code></pre></td></tr></table></figure><h4 id="（2）建表后增加主键约束（了解）"><a href="#（2）建表后增加主键约束（了解）" class="headerlink" title="（2）建表后增加主键约束（了解）"></a>（2）建表后增加主键约束（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 add primary key(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<br></code></pre></td></tr></table></figure><h3 id="6、复合主键"><a href="#6、复合主键" class="headerlink" title="6、复合主键"></a>6、复合主键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型,<br>    字段名  数据类型,  <br>    字段名  数据类型,<br>    primary key(字段名1,字段名2)  #表示字段1和字段2的组合是唯一的，也可以有更多个字段<br>);<br></code></pre></td></tr></table></figure><h3 id="7、如何删除主键约束？（了解）"><a href="#7、如何删除主键约束？（了解）" class="headerlink" title="7、如何删除主键约束？（了解）"></a>7、如何删除主键约束？（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop primary key;<br></code></pre></td></tr></table></figure><h3 id="8、SQL示例-1"><a href="#8、SQL示例-1" class="headerlink" title="8、SQL示例"></a>8、SQL示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><code class="hljs java">#演示主键约束<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、作用：</span><br><span class="hljs-comment">主键约束是用来唯一的标识一行记录，</span><br><span class="hljs-comment">或者换句话说，表中不允许出现两条无法区分的记录。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">问？唯一键约束不就可以实现吗？</span><br><span class="hljs-comment">答：唯一键约束因为没有限定非空，可能出现两个NULL。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">学号  姓名  身份证号码（唯一键）</span><br><span class="hljs-comment">1  张三  524265198235684255</span><br><span class="hljs-comment">2  李四  524265198235684266</span><br><span class="hljs-comment">3  王五  NULL</span><br><span class="hljs-comment">3  王五  NULL</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、关键字：primary key</span><br><span class="hljs-comment">3、特点</span><br><span class="hljs-comment">（1）每一个表最多只能定义一个主键约束。</span><br><span class="hljs-comment">（2）主键约束，既要求唯一又要求非空</span><br><span class="hljs-comment">可以看成 主键约束 = 非空约束 + 唯一键约束</span><br><span class="hljs-comment">但不完全等价。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4、唯一键约束和主键约束的区别</span><br><span class="hljs-comment">（1）唯一键约束一个表可以有好几个，</span><br><span class="hljs-comment">但是主键约束只有一个</span><br><span class="hljs-comment">（2）唯一键约束本身不带非空限制，如果需要非空，需要单独定义。</span><br><span class="hljs-comment">主键约束不用再定义NOT NULL，自身就带非空限制。</span><br><span class="hljs-comment">*/</span><br><br>#建表时，指定主键约束<br>create table 表名称(<br>字段名 数据类型 primary key,<br>字段名 数据类型 not <span class="hljs-literal">null</span>,<br>字段名 数据类型 not <span class="hljs-literal">null</span> unique key,<br>字段名 数据类型 not <span class="hljs-literal">null</span> unique key,<br>字段名 数据类型 unique key,<br>字段名 数据类型 unique key<br>字段名 数据类型<br>);<br><br>create table 表名称(<br>字段名 数据类型 ,<br>字段名 数据类型 not <span class="hljs-literal">null</span>,<br>字段名 数据类型 not <span class="hljs-literal">null</span> unique key,<br>字段名 数据类型 not <span class="hljs-literal">null</span> unique key,<br>字段名 数据类型 unique key,<br>字段名 数据类型 unique key<br>字段名 数据类型,<br>primary <span class="hljs-title function_">key</span><span class="hljs-params">(字段名)</span>,<br>unique <span class="hljs-title function_">key</span><span class="hljs-params">(字段名)</span><br>);<br><br>mysql&gt; drop database atguigu;<br>Query OK, <span class="hljs-number">19</span> rows <span class="hljs-title function_">affected</span> <span class="hljs-params">(<span class="hljs-number">0.17</span> sec)</span><br><br>mysql&gt; create database atguigu;<br>Query OK, <span class="hljs-number">1</span> row <span class="hljs-title function_">affected</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>mysql&gt; use atguigu;<br>Database changed<br><br>#创建员工表<br>create table <span class="hljs-title function_">emp</span><span class="hljs-params">(</span><br><span class="hljs-params">id <span class="hljs-type">int</span> primary key,</span><br><span class="hljs-params">ename varchar(<span class="hljs-number">20</span>)</span> not <span class="hljs-literal">null</span>,<br>cardid <span class="hljs-title function_">char</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span> unique key not <span class="hljs-literal">null</span>, #非空并且唯一<br>tel <span class="hljs-title function_">char</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span> unique key, #只是唯一，可以为空<br>address <span class="hljs-title function_">varchar</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span> #既可以为<span class="hljs-literal">null</span>，又可以重复<br>);<br><br>#查看表结构<br>desc emp;<br><br>mysql&gt; desc emp;<br>+---------+--------------+------+-----+---------+-------+<br>| Field   | Type         | Null | Key | Default | Extra |<br>+---------+--------------+------+-----+---------+-------+<br>| id      | <span class="hljs-type">int</span>          | NO   | PRI | NULL    |       |<br>| ename   | varchar(<span class="hljs-number">20</span>)  | NO   |     | NULL    |       |<br>| cardid  | <span class="hljs-type">char</span>(<span class="hljs-number">18</span>)     | NO   | UNI | NULL    |       |<br>| tel     | <span class="hljs-type">char</span>(<span class="hljs-number">11</span>)     | YES  | UNI | NULL    |       |<br>| address | varchar(<span class="hljs-number">100</span>) | YES  |     | NULL    |       |<br>+---------+--------------+------+-----+---------+-------+<br><span class="hljs-number">5</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>#添加数据<br>insert into emp <br><span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;524265198235684255&#x27;</span>,<span class="hljs-string">&#x27;18536955456&#x27;</span>,<span class="hljs-literal">null</span>)</span>;<br><br>#添加数据<br>insert into emp <br><span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;524265198235685255&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>)</span>;#tel可以为<span class="hljs-literal">null</span><br><br>mysql&gt; select * from emp;<br>+----+-------+--------------------+-------------+---------+<br>| id | ename | cardid             | tel         | address |<br>+----+-------+--------------------+-------------+---------+<br>|  <span class="hljs-number">1</span> | 张三  | <span class="hljs-number">524265198235684255</span> | <span class="hljs-number">18536955456</span> | NULL    |<br>|  <span class="hljs-number">2</span> | 李四  | <span class="hljs-number">524265198235685255</span> | NULL        | NULL    |<br>+----+-------+--------------------+-------------+---------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#添加数据<br>insert into emp <br><span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;524265198235685895&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>)</span>;<br><br>#添加数据<br>insert into emp <br><span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;524265198235675895&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>)</span>;#主键重复<br><br>mysql&gt; #添加数据<br>mysql&gt; insert into emp<br>    -&gt; values(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;524265198235675895&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);#主键重复<br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;emp.PRIMARY&#x27;</span><br><br><br>#添加数据<br>insert into emp <br><span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;524265198235675775&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>)</span>;#主键为<span class="hljs-literal">null</span><br><br>mysql&gt; insert into emp<br>    -&gt; values(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;524265198235675775&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);#主键为<span class="hljs-literal">null</span><br>ERROR <span class="hljs-number">1048</span> (<span class="hljs-number">23000</span>): Column <span class="hljs-string">&#x27;id&#x27;</span> cannot be <span class="hljs-literal">null</span><br><br><br>#创建一个表，两个字段设置主键<br>create table <span class="hljs-title function_">xuanke</span><span class="hljs-params">(</span><br><span class="hljs-params">sid <span class="hljs-type">int</span> primary key,</span><br><span class="hljs-params">cid <span class="hljs-type">int</span> primary key,</span><br><span class="hljs-params">score <span class="hljs-type">int</span></span><br><span class="hljs-params">)</span>;<br><br>mysql&gt; create table <span class="hljs-title function_">xuanke</span><span class="hljs-params">(</span><br><span class="hljs-params">    -&gt;  sid <span class="hljs-type">int</span> primary key,  #定义两个主键，不是复合主键的意思</span><br><span class="hljs-params">    -&gt;  cid <span class="hljs-type">int</span> primary key,  #定义两个主键，不是复合主键的意思</span><br><span class="hljs-params">    -&gt;  score <span class="hljs-type">int</span></span><br><span class="hljs-params">    -&gt;</span><br><span class="hljs-params">    -&gt; )</span>;<br>ERROR <span class="hljs-number">1068</span> (<span class="hljs-number">42000</span>): Multiple primary key defined<br><br>#组合主键约束<br>#学生表<br>create table <span class="hljs-title function_">stu</span><span class="hljs-params">(</span><br><span class="hljs-params">id <span class="hljs-type">int</span>,</span><br><span class="hljs-params">name varchar(<span class="hljs-number">20</span>)</span><br>);<br><br>#添加学生信息<br>insert into stu <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>)</span>;<br>insert into stu <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>)</span>;<br><br>mysql&gt; select * from stu;<br>+------+------+<br>| id   | name |<br>+------+------+<br>|    <span class="hljs-number">1</span> | 张三 |<br>|    <span class="hljs-number">2</span> | 李四 |<br>+------+------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#课程表<br>create table <span class="hljs-title function_">course</span><span class="hljs-params">(</span><br><span class="hljs-params">id <span class="hljs-type">int</span>,</span><br><span class="hljs-params">title varchar(<span class="hljs-number">50</span>)</span><br>);<br><br>#添加课程信息<br>insert into course <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;java&#x27;</span>)</span>;<br>insert into course <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;mysql&#x27;</span>)</span>;<br><br>mysql&gt; select * from course;<br>+------+-------+<br>| id   | title |<br>+------+-------+<br>|    <span class="hljs-number">1</span> | java  |<br>|    <span class="hljs-number">2</span> | mysql |<br>+------+-------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#定义选课表<br>create table <span class="hljs-title function_">xuanke</span><span class="hljs-params">(</span><br><span class="hljs-params">sid <span class="hljs-type">int</span>,</span><br><span class="hljs-params">cid <span class="hljs-type">int</span>,</span><br><span class="hljs-params">score <span class="hljs-type">int</span>,</span><br><span class="hljs-params">primary key(sid,cid)</span>  #组合/复合主键<br>);<br><br>insert into xuanke <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>)</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">85</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">75</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">45</span>);<br><br>#添加重复主键报错<br>insert into xuanke <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">75</span>)</span>;<br>mysql&gt; insert into xuanke <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">75</span>)</span>;<br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;1-1&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;xuanke.PRIMARY&#x27;</span><br><br><br>#查看一下表的定义<br>show create table emp;<br>show create table xuanke;<br><br>#查看emp表和xuanke表的索引<br>show index from emp;<br>show index from xuanke;<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">1</span> | id          | A         |           <span class="hljs-number">2</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">0</span> | cardid   |            <span class="hljs-number">1</span> | cardid      | A         |           <span class="hljs-number">2</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">0</span> | tel      |            <span class="hljs-number">1</span> | tel         | A         |           <span class="hljs-number">2</span> |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>mysql&gt; show index from xuanke;<br>+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table  | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| xuanke |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">1</span> | sid         | A         |           <span class="hljs-number">2</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| xuanke |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">2</span> | cid         | A         |           <span class="hljs-number">4</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>+--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>#是否可以删除主键约束<br>alter table 表名称 drop primary key;<br>#因为一个表只有一个唯一键约束，所以不用特意指定名字。<br><br>#删除xuanke表的主键约束<br>alter table xuanke drop primary key;<br><br>mysql&gt; show index from xuanke;<br>Empty <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; desc xuanke;<br>+-------+------+------+-----+---------+-------+<br>| Field | Type | Null | Key | Default | Extra |<br>+-------+------+------+-----+---------+-------+<br>| sid   | <span class="hljs-type">int</span>  | NO   |     | NULL    |       |<br>| cid   | <span class="hljs-type">int</span>  | NO   |     | NULL    |       |<br>| score | <span class="hljs-type">int</span>  | YES  |     | NULL    |       |<br>+-------+------+------+-----+---------+-------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#删除主键约束时，对应的索引，键约束删除了，但是主键约束自带的非空约束没有删除。<br>#如果要去掉的话，需要用删除非空约束的方式，单独删除。<br><br>#建表后增加主键约束<br>alter table 表名称 add primary <span class="hljs-title function_">key</span><span class="hljs-params">(字段名)</span>; #表示给<span class="hljs-number">1</span>个字段增加主键约束<br>alter table 表名称 add primary <span class="hljs-title function_">key</span><span class="hljs-params">(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>)</span>; #表示增加的是复合主键<br><br>alter table xuanke add primary <span class="hljs-title function_">key</span><span class="hljs-params">(sid,cid)</span>;<br><br>mysql&gt; desc xuanke;<br>+-------+------+------+-----+---------+-------+<br>| Field | Type | Null | Key | Default | Extra |<br>+-------+------+------+-----+---------+-------+<br>| sid   | <span class="hljs-type">int</span>  | NO   | PRI | NULL    |       |<br>| cid   | <span class="hljs-type">int</span>  | NO   | PRI | NULL    |       |<br>| score | <span class="hljs-type">int</span>  | YES  |     | NULL    |       |<br>+-------+------+------+-----+---------+-------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>#删除emp的主键约束<br>alter table emp drop primary key;<br><br>mysql&gt; desc emp;<br>+---------+--------------+------+-----+---------+-------+<br>| Field   | Type         | Null | Key | Default | Extra |<br>+---------+--------------+------+-----+---------+-------+<br>| id      | <span class="hljs-type">int</span>          | NO   |     | NULL    |       |<br>| ename   | varchar(<span class="hljs-number">20</span>)  | NO   |     | NULL    |       |<br>| cardid  | <span class="hljs-type">char</span>(<span class="hljs-number">18</span>)     | NO   | PRI | NULL    |       | #自动把cardid识别为主键，因为cardid定义了唯一键+非空约束，但是不同于真正的主键<br>| tel     | <span class="hljs-type">char</span>(<span class="hljs-number">11</span>)     | YES  | UNI | NULL    |       |<br>| address | varchar(<span class="hljs-number">100</span>) | YES  |     | NULL    |       |<br>+---------+--------------+------+-----+---------+-------+<br><span class="hljs-number">5</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>show index from emp;<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          <span class="hljs-number">0</span> | cardid   |            <span class="hljs-number">1</span> | cardid      | A         |           <span class="hljs-number">2</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">0</span> | tel      |            <span class="hljs-number">1</span> | tel         | A         |           <span class="hljs-number">2</span> |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#给emp表的id字段增加主键约束<br>alter table emp add primary <span class="hljs-title function_">key</span><span class="hljs-params">(id)</span>;<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">1</span> | id          | A         |           <span class="hljs-number">2</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">0</span> | cardid   |            <span class="hljs-number">1</span> | cardid      | A         |           <span class="hljs-number">2</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">0</span> | tel      |            <span class="hljs-number">1</span> | tel         | A         |           <span class="hljs-number">2</span> |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>#学生问，删除主键约束，可以重复吗？答：是的<br>alter table emp drop primary key;<br>mysql&gt; select * from emp;<br>+----+-------+--------------------+-------------+---------+<br>| id | ename | cardid             | tel         | address |<br>+----+-------+--------------------+-------------+---------+<br>|  <span class="hljs-number">1</span> | 张三  | <span class="hljs-number">524265198235684255</span> | <span class="hljs-number">18536955456</span> | NULL    |<br>|  <span class="hljs-number">2</span> | 李四  | <span class="hljs-number">524265198235685255</span> | NULL        | NULL    |<br>|  <span class="hljs-number">3</span> | 李四  | <span class="hljs-number">524265198235685895</span> | NULL        | NULL    |<br>+----+-------+--------------------+-------------+---------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-string">&#x27;524233198235685895&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>)</span>;<br>mysql&gt; select * from emp;<br>+----+-------+--------------------+-------------+---------+<br>| id | ename | cardid             | tel         | address |<br>+----+-------+--------------------+-------------+---------+<br>|  <span class="hljs-number">3</span> | 王五  | <span class="hljs-number">524233198235685895</span> | NULL        | NULL    |<br>|  <span class="hljs-number">1</span> | 张三  | <span class="hljs-number">524265198235684255</span> | <span class="hljs-number">18536955456</span> | NULL    |<br>|  <span class="hljs-number">2</span> | 李四  | <span class="hljs-number">524265198235685255</span> | NULL        | NULL    |<br>|  <span class="hljs-number">3</span> | 李四  | <span class="hljs-number">524265198235685895</span> | NULL        | NULL    |<br>+----+-------+--------------------+-------------+---------+<br><span class="hljs-number">4</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br></code></pre></td></tr></table></figure><h2 id="14-6-默认值约束"><a href="#14-6-默认值约束" class="headerlink" title="14.6 默认值约束"></a>14.6 默认值约束</h2><h3 id="1、作用-1"><a href="#1、作用-1" class="headerlink" title="1、作用"></a>1、作用</h3><p>给某个字段&#x2F;某列指定默认值，当添加时或修改时，可以使用默认值。</p><h3 id="2、关键字：default"><a href="#2、关键字：default" class="headerlink" title="2、关键字：default"></a>2、关键字：default</h3><h3 id="3、如何给字段加默认值"><a href="#3、如何给字段加默认值" class="headerlink" title="3、如何给字段加默认值"></a>3、如何给字段加默认值</h3><h4 id="（1）建表时-2"><a href="#（1）建表时-2" class="headerlink" title="（1）建表时"></a>（1）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key,<br>    字段名  数据类型  unique key not null,  <br>    字段名  数据类型  unique key,<br>    字段名  数据类型  not null default 默认值, <br>);<br>create table 表名称(<br>字段名  数据类型 default 默认值 ,<br>    字段名  数据类型 not null default 默认值,  <br>    字段名  数据类型 not null default 默认值,,<br>    primary key(字段名),<br>    unique key(字段名)<br>);<br><br>说明：默认值约束一般不在唯一键和主键列上加<br></code></pre></td></tr></table></figure><h4 id="（2）建表后（了解）-1"><a href="#（2）建表后（了解）-1" class="headerlink" title="（2）建表后（了解）"></a>（2）建表后（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 default 默认值;<br><br>#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了<br>#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了<br>alter table 表名称 modify 字段名 数据类型 default 默认值 not null;<br></code></pre></td></tr></table></figure><h3 id="4、如何删除默认值约束（了解）"><a href="#4、如何删除默认值约束（了解）" class="headerlink" title="4、如何删除默认值约束（了解）"></a>4、如何删除默认值约束（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束<br><br>alter table 表名称 modify 字段名 数据类型  not null; #删除默认值约束，保留非空约束<br></code></pre></td></tr></table></figure><h3 id="5、SQL示例"><a href="#5、SQL示例" class="headerlink" title="5、SQL示例"></a>5、SQL示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示默认值约束<br>/*<br>1、作用<br>如果在insert添加数据时，没有给这个字段赋值，它会选择默认值约束指定默认值。<br>如果字段没有定义默认值约束，那么默认就是NULL。<br><br>2、关键字：default<br><br><br>非空和默认值约束是列级约束，只影响某个字段，只看当前单元格，和其他行无关。<br>唯一键约束和主键约束是表级约束，会看该字段所有行的数据，整个表一起看。<br>*/<br><br>#建表时，可以在字段后面给字段指定默认值<br>create table emp(<br>eid int primary key,<br>ename varchar(20) not null,<br>gender enum(&#x27;男&#x27;,&#x27;女&#x27;) default &#x27;男&#x27; not null, #非空并且有默认值<br>address varchar(100) default &#x27;不详&#x27; #可以指定为null<br>);<br><br>insert into emp values(1,&#x27;张三&#x27;);#错误，值的数量和字段的数量不匹配<br><br>mysql&gt; insert into emp values(1,&#x27;张三&#x27;);<br>ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1&#x27;<br><br>insert into emp(eid,ename) values(1,&#x27;张三&#x27;);<br>insert into emp values(2,&#x27;李四&#x27;,default,default);<br>insert into emp values(3,&#x27;王五&#x27;,default,null);<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+---------+<br>| eid | ename | gender | address |<br>+-----+-------+--------+---------+<br>|   1 | 张三  | 男     | 不详    |<br>|   2 | 李四  | 男     | 不详    |<br>|   3 | 王五  | 男     | NULL    |<br>+-----+-------+--------+---------+<br>3 rows in set (0.00 sec)<br><br><br>insert into emp values(4,&#x27;翠花&#x27;,&#x27;女&#x27;,&#x27;北京&#x27;);<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+---------+<br>| eid | ename | gender | address |<br>+-----+-------+--------+---------+<br>|   1 | 张三  | 男     | 不详    |<br>|   2 | 李四  | 男     | 不详    |<br>|   3 | 王五  | 男     | NULL    |<br>|   4 | 翠花  | 女     | 北京    |<br>+-----+-------+--------+---------+<br>4 rows in set (0.00 sec)<br><br>#删除默认值约束<br>alter table 表名称 modify 【column】 字段名 数据类型;<br><br>#查看表结构<br>desc emp;<br>mysql&gt; desc emp;<br>+---------+-----------------+------+-----+---------+-------+<br>| Field   | Type            | Null | Key | Default | Extra |<br>+---------+-----------------+------+-----+---------+-------+<br>| eid     | int             | NO   | PRI | NULL    |       |<br>| ename   | varchar(20)     | NO   |     | NULL    |       |<br>| gender  | enum(&#x27;男&#x27;,&#x27;女&#x27;) | NO   |     | 男      |       |<br>| address | varchar(100)    | YES  |     | 不详    |       |<br>+---------+-----------------+------+-----+---------+-------+<br>4 rows in set (0.01 sec)<br><br>#删除emp表的address的默认值约束<br>alter table emp modify column address varchar(100);<br><br><br>mysql&gt; desc emp;<br>+---------+-----------------+------+-----+---------+-------+<br>| Field   | Type            | Null | Key | Default | Extra |<br>+---------+-----------------+------+-----+---------+-------+<br>| eid     | int             | NO   | PRI | NULL    |       |<br>| ename   | varchar(20)     | NO   |     | NULL    |       |<br>| gender  | enum(&#x27;男&#x27;,&#x27;女&#x27;) | NO   |     | 男      |       |<br>| address | varchar(100)    | YES  |     | NULL    |       |<br>+---------+-----------------+------+-----+---------+-------+<br>4 rows in set (0.01 sec)<br><br>#删除emp表的gender的默认值约束<br>alter table emp modify column gender enum(&#x27;男&#x27;,&#x27;女&#x27;); #同时删掉了非空约束和默认值约束<br><br><br>mysql&gt; desc emp;<br>+---------+-----------------+------+-----+---------+-------+<br>| Field   | Type            | Null | Key | Default | Extra |<br>+---------+-----------------+------+-----+---------+-------+<br>| eid     | int             | NO   | PRI | NULL    |       |<br>| ename   | varchar(20)     | NO   |     | NULL    |       |<br>| gender  | enum(&#x27;男&#x27;,&#x27;女&#x27;) | YES  |     | NULL    |       |<br>| address | varchar(100)    | YES  |     | NULL    |       |<br>+---------+-----------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br><br>#结论：当使用modify修改字段的非空约束、默认值约束、数据类型等信息时<br>#注意，如果要保留的，在modify语句中要体现。<br>#例如：要保留非空约束，就要加not null，否则会丢掉。<br><br><br>#建表给字段增加默认值约束<br>alter table 表名称 modify 【column】 字段名 数据类型 default 默认值;<br><br>#给emp表address增加“不详”默认值<br>alter table emp modify column address varchar(100) default &#x27;不详&#x27;;<br><br>#给emp表gender增加“男”默认值，以及非空<br>alter table emp modify column gender enum(&#x27;男&#x27;,&#x27;女&#x27;) default &#x27;男&#x27; not null;<br><br>mysql&gt; desc emp;<br>+---------+-----------------+------+-----+---------+-------+<br>| Field   | Type            | Null | Key | Default | Extra |<br>+---------+-----------------+------+-----+---------+-------+<br>| eid     | int             | NO   | PRI | NULL    |       |<br>| ename   | varchar(20)     | NO   |     | NULL    |       |<br>| gender  | enum(&#x27;男&#x27;,&#x27;女&#x27;) | NO   |     | 男      |       |<br>| address | varchar(100)    | YES  |     | 不详    |       |<br>+---------+-----------------+------+-----+---------+-------+<br>4 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><h2 id="14-7-自增属性"><a href="#14-7-自增属性" class="headerlink" title="14.7 自增属性"></a>14.7 自增属性</h2><h3 id="1、作用-2"><a href="#1、作用-2" class="headerlink" title="1、作用"></a>1、作用</h3><p>作用：给某个字段自动赋值，这个值是一直往上增加，如果没有特意干扰的，每次自增1.</p><h3 id="2、关键字：auto-increment"><a href="#2、关键字：auto-increment" class="headerlink" title="2、关键字：auto_increment"></a>2、关键字：auto_increment</h3><h3 id="3、特点和要求"><a href="#3、特点和要求" class="headerlink" title="3、特点和要求"></a>3、特点和要求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">（1）一个表只能有一个自增字段，因为一个表只有一个AUTO_INCREMENT属性记录自增字段值<br>（2）并且自增字段只能是key字段，即定义了主键、唯一键等键约束的字段。<br>一般都是给主键和唯一键加自增。<br>（3）自增字段应该是数值类型，一般都是整数类型。<br>（4）如果自增列指定了 0 和 null，会在当前最大值的基础上自增，<br>如果自增列手动指定了具体值，直接赋值为具体值。<br>（5）如果手动修改AUTO_INCREMENT属性值， 必须 &gt; 当前自增字段的最大值<br></code></pre></td></tr></table></figure><h3 id="4、如何指定自增约束"><a href="#4、如何指定自增约束" class="headerlink" title="4、如何指定自增约束"></a>4、如何指定自增约束</h3><h4 id="（1）建表时-3"><a href="#（1）建表时-3" class="headerlink" title="（1）建表时"></a>（1）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key auto_increment,<br>    字段名  数据类型  unique key not null,  <br>    字段名  数据类型  unique key,<br>    字段名  数据类型  not null default 默认值, <br>);<br>create table 表名称(<br>字段名  数据类型 default 默认值 ,<br>    字段名  数据类型 unique key auto_increment,  <br>    字段名  数据类型 not null default 默认值,,<br>    primary key(字段名)<br>);<br></code></pre></td></tr></table></figure><h4 id="（2）建表后（了解）-2"><a href="#（2）建表后（了解）-2" class="headerlink" title="（2）建表后（了解）"></a>（2）建表后（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 auto_increment;<br></code></pre></td></tr></table></figure><h3 id="5、如何删除自增属性（了解）"><a href="#5、如何删除自增属性（了解）" class="headerlink" title="5、如何删除自增属性（了解）"></a>5、如何删除自增属性（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束<br>alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除<br></code></pre></td></tr></table></figure><h3 id="6、演示错误"><a href="#6、演示错误" class="headerlink" title="6、演示错误"></a>6、演示错误</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int auto_increment,<br>    ename varchar(20)<br>);<br>ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key   <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key,<br>    ename varchar(20) unique key auto_increment<br>);<br>ERROR 1063 (42000): Incorrect column specifier for column &#x27;ename&#x27;  因为ename不是整数类型<br></code></pre></td></tr></table></figure><h3 id="7、SQL示例"><a href="#7、SQL示例" class="headerlink" title="7、SQL示例"></a>7、SQL示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs java">#演示自增属性<br><br><br>#创建表<br>create table <span class="hljs-title function_">emp</span><span class="hljs-params">(</span><br><span class="hljs-params">eid <span class="hljs-type">int</span> auto_increment,</span><br><span class="hljs-params">ename varchar(<span class="hljs-number">20</span>)</span><br>);<br><br>mysql&gt; create table <span class="hljs-title function_">emp</span><span class="hljs-params">(</span><br><span class="hljs-params">    -&gt;  eid <span class="hljs-type">int</span> auto_increment,</span><br><span class="hljs-params">    -&gt;  ename varchar(<span class="hljs-number">20</span>)</span><br>    -&gt; );<br>ERROR <span class="hljs-number">1075</span> (<span class="hljs-number">42000</span>): Incorrect table definition; <br>there can be only one auto column and it must be defined as a key<br><br><br>create table <span class="hljs-title function_">emp</span><span class="hljs-params">(</span><br><span class="hljs-params">eid <span class="hljs-type">int</span> primary key auto_increment,</span><br><span class="hljs-params">ename varchar(<span class="hljs-number">20</span>)</span><br>);<br><br>#添加数据<br>insert into <span class="hljs-title function_">emp</span><span class="hljs-params">(ename)</span> values(<span class="hljs-string">&#x27;李四&#x27;</span>);#不给自增字段指定值，也是自增<br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>)</span>; #给自增字段赋值NULL，也是自增<br><br>mysql&gt; select * from emp;<br>+-----+-------+<br>| eid | ename |<br>+-----+-------+<br>|   <span class="hljs-number">1</span> | 李四  |<br>|   <span class="hljs-number">2</span> | 张三  |<br>+-----+-------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;王五&#x27;</span>)</span>; #给自增字段赋值<span class="hljs-number">0</span>，也是自增<br><br>mysql&gt; select * from emp;<br>+-----+-------+<br>| eid | ename |<br>+-----+-------+<br>|   <span class="hljs-number">1</span> | 李四  |<br>|   <span class="hljs-number">2</span> | 张三  |<br>|   <span class="hljs-number">3</span> | 王五  |<br>+-----+-------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(-<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;王五&#x27;</span>)</span>; #给自增字段赋值-<span class="hljs-number">5</span>（&lt;<span class="hljs-number">3</span>)<br><br>mysql&gt; select * from emp;<br>+-----+-------+<br>| eid | ename |<br>+-----+-------+<br>|  -<span class="hljs-number">5</span> | 王五  |<br>|   <span class="hljs-number">1</span> | 李四  |<br>|   <span class="hljs-number">2</span> | 张三  |<br>|   <span class="hljs-number">3</span> | 王五  |<br>+-----+-------+<br><span class="hljs-number">4</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>)</span>;<br><br>mysql&gt; select * from emp;<br>+-----+-------+<br>| eid | ename |<br>+-----+-------+<br>|  -<span class="hljs-number">5</span> | 王五  |<br>|   <span class="hljs-number">1</span> | 李四  |<br>|   <span class="hljs-number">2</span> | 张三  |<br>|   <span class="hljs-number">3</span> | 王五  |<br>|   <span class="hljs-number">4</span> | 赵六  |<br>+-----+-------+<br><span class="hljs-number">5</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#查看表定义<br>show create table emp;<br><br>mysql&gt; show create table emp\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `eid` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `ename` varchar(<span class="hljs-number">20</span>) DEFAULT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`eid`)</span><br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">5</span> DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;柴&#x27;</span>)</span>;#给自增字段赋值<span class="hljs-number">15</span>（&gt;<span class="hljs-number">5</span>）<br><br>mysql&gt; select * from emp;<br>+-----+-------+<br>| eid | ename |<br>+-----+-------+<br>|  -<span class="hljs-number">5</span> | 王五  |<br>|   <span class="hljs-number">1</span> | 李四  |<br>|   <span class="hljs-number">2</span> | 张三  |<br>|   <span class="hljs-number">3</span> | 王五  |<br>|   <span class="hljs-number">4</span> | 赵六  |<br>|  <span class="hljs-number">15</span> | 柴    |<br>+-----+-------+<br><span class="hljs-number">6</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; show create table emp\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `eid` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `ename` varchar(<span class="hljs-number">20</span>) DEFAULT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`eid`)</span><br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">16</span> DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#结论：当手动给自增字段赋值时，<br>#如果这个值大于当前“AUTO_INCREMENT”属性记录的自增值时，会修改“AUTO_INCREMENT”属性值，<br>#下次就从这个值基础上自增<br><br><br><br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;宋&#x27;</span>)</span>;#给自增字段赋值<span class="hljs-number">7</span>（&lt;<span class="hljs-number">16</span>）<br><br><br>mysql&gt; select * from emp;<br>+-----+-------+<br>| eid | ename |<br>+-----+-------+<br>|  -<span class="hljs-number">5</span> | 王五  |<br>|   <span class="hljs-number">1</span> | 李四  |<br>|   <span class="hljs-number">2</span> | 张三  |<br>|   <span class="hljs-number">3</span> | 王五  |<br>|   <span class="hljs-number">4</span> | 赵六  |<br>|   <span class="hljs-number">7</span> | 宋    |<br>|  <span class="hljs-number">15</span> | 柴    |<br>+-----+-------+<br><span class="hljs-number">7</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>mysql&gt; show create table emp\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `eid` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `ename` varchar(<span class="hljs-number">20</span>) DEFAULT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`eid`)</span><br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">16</span> DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#建议大家实际开发中，不要随意修改“AUTO_INCREMENT”的值，让他自动维护。<br><br><br>#修改“AUTO_INCREMENT”的值<br>alter table 表名称 AUTO_INCREMENT = 新值;<br><br>#修改emp表AUTO_INCREMENT值为<span class="hljs-number">18</span><br>alter table <span class="hljs-type">emp</span> <span class="hljs-variable">AUTO_INCREMENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br><br>mysql&gt; show create table emp\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `eid` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `ename` varchar(<span class="hljs-number">20</span>) DEFAULT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`eid`)</span><br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">18</span> DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#修改emp表AUTO_INCREMENT值为<span class="hljs-number">8</span><br>alter table <span class="hljs-type">emp</span> <span class="hljs-variable">AUTO_INCREMENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br>mysql&gt; show create table emp\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `eid` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `ename` varchar(<span class="hljs-number">20</span>) DEFAULT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`eid`)</span><br>) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">16</span> DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#结论，无论是insert语句还是alter语句，AUTO_INCREMENT值都不能修改为&lt;当前自增字段最大的值。<br><br><br>#删除自增属性<br>alter table 表名称 modify 【column】 字段名 数据类型;<br><br>#查看表结构<br>desc emp;<br>mysql&gt; desc emp;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| eid   | <span class="hljs-type">int</span>         | NO   | PRI | NULL    | auto_increment |<br>| ename | varchar(<span class="hljs-number">20</span>) | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>#删除eid字段的自增属性<br>alter table emp modify column eid <span class="hljs-type">int</span>;<br><br>mysql&gt; desc emp;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| eid   | <span class="hljs-type">int</span>         | NO   | PRI | NULL    |       |<br>| ename | varchar(<span class="hljs-number">20</span>) | YES  |     | NULL    |       |<br>+-------+-------------+------+-----+---------+-------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#modify会影响列级约束，默认值、非空等约束，表级约束（主键、唯一键）不受影响。<br><br>#建表后添加自增属性<br>alter table 表名称 modify 【column】 字段名 数据类型 auto_increment;<br><br>#给eid字段的添加自增属性<br>alter table emp modify column eid <span class="hljs-type">int</span> auto_increment;<br><br>mysql&gt; desc emp;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| eid   | <span class="hljs-type">int</span>         | NO   | PRI | NULL    | auto_increment |<br>| ename | varchar(<span class="hljs-number">20</span>) | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br></code></pre></td></tr></table></figure><h2 id="14-8-检查约束"><a href="#14-8-检查约束" class="headerlink" title="14.8 检查约束"></a>14.8 检查约束</h2><h3 id="1、作用-3"><a href="#1、作用-3" class="headerlink" title="1、作用"></a>1、作用</h3><p>检查（CHECK） 约束用于限制字段中的值的范围。如果对单个字段定义 CHECK 约束，那么该字段只允许特定范围的值。如果对一个表定义 CHECK 约束，那么此约束会基于行中其他字段的值在特定的字段中对值进行限制。</p><p>在MySQL 8.0.16版本之前， CREATE TABLE语句支持给单个字段定义CHECK约束的语法，但是不起作用。</p><h3 id="2、关键字：check"><a href="#2、关键字：check" class="headerlink" title="2、关键字：check"></a>2、关键字：check</h3><p>例如MySQL8.0之前，就算给表定义了检查约束，也不起作用。在MySQL8.0.16版本之后，CREATE TABLE语句既支持给单个字段定义列级CHECK约束的语法，还支持定义表级CHECK约束的语法。</p><h3 id="3、如何定义检查约束"><a href="#3、如何定义检查约束" class="headerlink" title="3、如何定义检查约束"></a>3、如何定义检查约束</h3><h4 id="（1）建表时-4"><a href="#（1）建表时-4" class="headerlink" title="（1）建表时"></a>（1）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#在建表时，可以指定检查约束<br>create table 表名称(<br>字段名1 数据类型 check(条件),  #在字段后面直接加检查约束<br>字段名2 数据类型,<br>字段名3 数据类型,<br>check (条件)  #可以限定两个字段之间的取值条件<br>);<br><br>#在建表时，可以指定检查约束<br>create table 表名称(<br>字段名1 数据类型 check(条件) enforced,  #在字段后面直接加检查约束<br>字段名2 数据类型,<br>字段名3 数据类型,<br>check (条件)  enforced #可以限定两个字段之间的取值条件<br>);<br></code></pre></td></tr></table></figure><p>如果省略或指定为ENFORCED，则会创建检查约束并强制执行约束，不满足约束的数据行不能插入成功。</p><p>如果写的是not ENFORCED，则不满足检查约束也没关系。</p><h4 id="（2）建表后（了解）-3"><a href="#（2）建表后（了解）-3" class="headerlink" title="（2）建表后（了解）"></a>（2）建表后（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#如何在建表后添加检查约束，使用add check<br>alter table 表名称 add check(条件);<br></code></pre></td></tr></table></figure><h3 id="4、如何查看一个表的约束（了解）"><a href="#4、如何查看一个表的约束（了解）" class="headerlink" title="4、如何查看一个表的约束（了解）"></a>4、如何查看一个表的约束（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;<br>#information_schema数据库名（系统库）<br>#table_constraints表名称（专门存储各个表的约束）<br>#WHERE条件<br>#table_name = &#x27;表名称&#x27;条件是指定表名称<br></code></pre></td></tr></table></figure><h3 id="5、如何删除检查约束（了解）"><a href="#5、如何删除检查约束（了解）" class="headerlink" title="5、如何删除检查约束（了解）"></a>5、如何删除检查约束（了解）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop check 检查约束名;<br></code></pre></td></tr></table></figure><h3 id="6、SQL示例"><a href="#6、SQL示例" class="headerlink" title="6、SQL示例"></a>6、SQL示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示检查约束<br><br>/*<br>1、作用：<br>限定某个字段值是否满足某个条件。<br><br>2、关键字：check <br><br>3、特点：<br>（1）mysql8.0之前，mysql支持检查约束的语法，但是不起作用。<br>（2）mysql8中检查约束可以定义在字段后面，通常这个只限定单个字段的取值范围，<br>                 也可以定义在字段下面，通常会限定两个字段之前的取值条件。<br>（3）就算是定义在字段后面，虽然此时和其他字段没关系，也是当成表级约束对象，<br>在系统information_schema.table_constraints表中可以看到约束信息。<br>*/<br><br>#创建表格，限定age&gt;=18<br>create table emp(<br>id int primary key auto_increment,<br>name varchar(20) not null,<br>age int check(age&gt;=18)<br>);<br><br>#mysql5.7上面运行<br>insert into emp values(null,&#x27;张三&#x27;,8);<br><br>mysql&gt; select * from emp;<br>+----+------+------+<br>| id | name | age  |<br>+----+------+------+<br>|  1 | 张三 |    8 | #mysql5.7检查约束没有起作用<br>+----+------+------+<br>1 row in set (0.00 sec)<br><br>#mysql8.0.26上面运行<br>mysql&gt; insert into emp values(null,&#x27;张三&#x27;,8);<br>ERROR 3819 (HY000): Check constraint &#x27;emp_chk_1&#x27; is violated.<br><br>#在建表时，可以指定检查约束<br>create table 表名称(<br>字段名1 数据类型 check(条件),  #在字段后面直接加检查约束<br>字段名2 数据类型,<br>字段名3 数据类型,<br>check (条件)  #可以限定两个字段之间的取值条件<br>);<br><br>create table emp(<br>id int primary key auto_increment,<br>name varchar(20) not null,<br>age int check(age&gt;=18), #列级约束<br>birthday date not null, #出生日期<br>hiredate date not null, #入职日期<br>check( year(hiredate)-year(birthday)&gt;=18)  #year(hiredate)表示取出入职日期的年份值<br>);<br><br>#添加数据<br>insert into emp values(null,&#x27;张三&#x27;,23,&#x27;2000-1-1&#x27;,&#x27;2021-11-30&#x27;);#满足条件<br><br>mysql&gt; select * from emp;<br>+----+------+------+------------+------------+<br>| id | name | age  | birthday   | hiredate   |<br>+----+------+------+------------+------------+<br>|  1 | 张三 |   23 | 2000-01-01 | 2021-11-30 |<br>+----+------+------+------------+------------+<br>1 row in set (0.00 sec)<br><br>#添加数据<br>insert into emp values(null,&#x27;张三&#x27;,8,&#x27;2013-1-1&#x27;,&#x27;2021-11-30&#x27;);#不满足条件<br><br>mysql&gt; insert into emp values(null,&#x27;张三&#x27;,8,&#x27;2013-1-1&#x27;,&#x27;2021-11-30&#x27;);<br>ERROR 3819 (HY000): Check constraint &#x27;emp_chk_1&#x27; is violated.<br><br>insert into emp values(null,&#x27;张三&#x27;,28,&#x27;2013-1-1&#x27;,&#x27;2021-11-30&#x27;);#不满足条件<br>mysql&gt; insert into emp values(null,&#x27;张三&#x27;,28,&#x27;2013-1-1&#x27;,&#x27;2021-11-30&#x27;);#不满足条件<br>ERROR 3819 (HY000): Check constraint &#x27;emp_chk_2&#x27; is violated.<br><br><br>#查看表结构<br>desc emp;<br><br>#查看表的定义<br>show create table emp;<br><br>mysql&gt; show create table emp\G<br>*************************** 1. row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `id` int NOT NULL AUTO_INCREMENT,<br>  `name` varchar(20) NOT NULL,<br>  `age` int DEFAULT NULL,<br>  `birthday` date NOT NULL,<br>  `hiredate` date NOT NULL,<br>  PRIMARY KEY (`id`),<br>  CONSTRAINT `emp_chk_1` CHECK ((`age` &gt;= 18)),<br>  CONSTRAINT `emp_chk_2` CHECK (((year(`hiredate`) - year(`birthday`)) &gt;= 18))<br>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br>1 row in set (0.00 sec)<br><br>#查询系统库中约束表查看表的约束<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;<br><br>#查看emp表的约束<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;emp&#x27;;<br>#只有主键、唯一键、外键、检查约束才能这个这个表中看到，默认值、非空这里是看不到。<br><br>mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;emp&#x27;;<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME | TABLE_SCHEMA | TABLE_NAME | CONSTRAINT_TYPE | ENFORCED |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| def                | atguigu           | PRIMARY         | atguigu      | emp        | PRIMARY KEY     | YES      |<br>| def                | atguigu           | emp_chk_1       | atguigu      | emp        | CHECK           | YES      |<br>| def                | atguigu           | emp_chk_2       | atguigu      | emp        | CHECK           | YES      |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>3 rows in set (0.00 sec)<br><br>#如何删除检查约束<br>alter table 表名称 drop check 检查约束名;<br><br>#删除emp表的 age字段的检查约束 ‘emp_chk_1 ’<br>#删除emp表的 hiredate和birthday字段的检查约束 ‘emp_chk_2’<br><br>alter table emp drop check emp_chk_1;<br>alter table emp drop check emp_chk_2;<br><br>mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;emp&#x27;;<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME | TABLE_SCHEMA | TABLE_NAME | CONSTRAINT_TYPE | ENFORCED |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| def                | atguigu           | PRIMARY         | atguigu      | emp        | PRIMARY KEY     | YES      |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; show create table emp\G<br>*************************** 1. row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `id` int NOT NULL AUTO_INCREMENT,<br>  `name` varchar(20) NOT NULL,<br>  `age` int DEFAULT NULL,<br>  `birthday` date NOT NULL,<br>  `hiredate` date NOT NULL,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br>1 row in set (0.00 sec)<br><br>#如何在建表后添加检查约束<br>#使用modify？不起作用<br>alter table 表名称 modify 【column】 字段名 数据类型 check(条件); #列级约束<br>#给age字段添加检查约束 age&gt;=18<br>alter table emp modify age int check(age&gt;=18);#这里语法上没问题，但是没有真正起作用<br>insert into emp values(null,&#x27;李四&#x27;,6,&#x27;1998-5-1&#x27;,&#x27;2021-1-2&#x27;);#添加成功，说明检查约束没有起作用<br><br>#如何在建表后添加检查约束，使用add check<br>alter table 表名称 add check(条件);<br><br>#给age字段添加检查约束 age&gt;=18<br>alter table emp add check(age&gt;=18);<br><br>mysql&gt; alter table emp add check(age&gt;=18);<br>ERROR 3819 (HY000): Check constraint &#x27;emp_chk_1&#x27; is violated.<br>#因为表中有违反  (age&gt;=18)的数据，必须先处理<br><br><br>mysql&gt; select * from emp;<br>+----+------+------+------------+------------+<br>| id | name | age  | birthday   | hiredate   |<br>+----+------+------+------------+------------+<br>|  1 | 张三 |   23 | 2000-01-01 | 2021-11-30 |<br>|  2 | 李四 |    6 | 1998-05-01 | 2021-01-02 |<br>+----+------+------+------------+------------+<br>2 rows in set (0.00 sec)<br><br>update emp set age = 26 where id = 2;<br><br>#给age字段添加检查约束 age&gt;=18<br>alter table emp add check(age&gt;=18);<br>insert into emp values(null,&#x27;李四&#x27;,6,&#x27;1998-5-1&#x27;,&#x27;2021-1-2&#x27;);<br></code></pre></td></tr></table></figure><h2 id="14-9-外键约束（了解）"><a href="#14-9-外键约束（了解）" class="headerlink" title="14.9 外键约束（了解）"></a>14.9 外键约束（了解）</h2><p>外键约束会影响性能，效率，所以很多人不愿意加外键约束。</p><p>学生问题：</p><p>（1）如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否一定要建外键约束？</p><p>答：不是的</p><p>（2）建和不建外键约束有什么区别？</p><p>答：</p><p>建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p><p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的引用完整性，只能依靠程序员的自觉，或者是在Java程序中进行限定。例如：在员工表中，可以添加一个员工的信息，它的部门指定为一个完全不存在的部门。</p><p>（3）那么建和不建外键约束和查询有没有关系？</p><p>答：没有</p><h3 id="1、作用-4"><a href="#1、作用-4" class="headerlink" title="1、作用"></a>1、作用</h3><p>限定某个表的某个字段的引用完整性，</p><p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p><h3 id="2、关键字：foreign-key"><a href="#2、关键字：foreign-key" class="headerlink" title="2、关键字：foreign key"></a>2、关键字：foreign key</h3><h3 id="3、主表和从表-父表和子表"><a href="#3、主表和从表-父表和子表" class="headerlink" title="3、主表和从表&#x2F;父表和子表"></a>3、主表和从表&#x2F;父表和子表</h3><p>主表（父表）：被引用的表，被参考的表</p><p>从表（子表）：引用别人的表，参考别人的表</p><p>例如：员工表的员工所在部门这个字段的值要参考部门表，</p><p>​部门表是主表，员工表是从表。</p><p>例如：学生表、课程表、选课表</p><p>​选课表的学生和课程要分别参考学生表和课程表，</p><p>​学生表和课程表是主表，选课表是从表。</p><h3 id="4、特点"><a href="#4、特点" class="headerlink" title="4、特点"></a>4、特点</h3><p>（1）在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p><p>（2）创建(create)表时就指定外键约束的话，先创建主表，再创建从表</p><p>（3）删表时，先删从表（或先删除外键约束），再删除主表。或者先解除关系，再各自删除。</p><p>（4）从表的外键列，必须引用&#x2F;参考主表的键列（主键或唯一键）</p><p>为什么？因为被依赖&#x2F;被参考的值必须是唯一的</p><p>（5）从表的外键列的数据类型，要与主表被参考&#x2F;被引用的列的数据类型一致，并且逻辑意义一致。</p><p>例如：都是表示部门编号，都是int类型。</p><p>（6）外键列也会自动建立索引（根据外键查询效率很高，很多）</p><p>（7）外键约束的删除，所以不会自动删除，如果要删除对应的索引，必须手动删除</p><h3 id="5、如何指定外键约束"><a href="#5、如何指定外键约束" class="headerlink" title="5、如何指定外键约束"></a>5、如何指定外键约束</h3><h4 id="（1）建表时-5"><a href="#（1）建表时-5" class="headerlink" title="（1）建表时"></a>（1）建表时</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 主表名称(<br>字段1  数据类型  primary key,<br>    字段2  数据类型<br>);<br><br>create table 从表名称(<br>字段1  数据类型  primary key,<br>    字段2  数据类型,<br>    foreign key （从表的某个字段) references 主表名(被参考字段)<br>);<br>#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样<br>#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样<br></code></pre></td></tr></table></figure><h4 id="（2）建表后（了解）-4"><a href="#（2）建表后（了解）-4" class="headerlink" title="（2）建表后（了解）"></a>（2）建表后（了解）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 从表名称 add foreign key (从表的字段) references 主表（被引用字段) 【on update xx】【on delete xx】;<br></code></pre></td></tr></table></figure><h3 id="6、如何查看外键约束名"><a href="#6、如何查看外键约束名" class="headerlink" title="6、如何查看外键约束名"></a>6、如何查看外键约束名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">desc 从表名称; #可以看到外键约束，但看不到外键约束名<br><br>show create table 从表名称; #可以看到外键约束名<br><br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;<br>#information_schema数据库名（系统库）<br>#table_constraints表名称（专门存储各个表的约束）<br>#WHERE条件<br>#table_name = &#x27;表名称&#x27;条件是指定表名称<br></code></pre></td></tr></table></figure><h3 id="7、如何查看外键字段索引"><a href="#7、如何查看外键字段索引" class="headerlink" title="7、如何查看外键字段索引"></a>7、如何查看外键字段索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show index from 表名称; #查看某个表的索引名<br></code></pre></td></tr></table></figure><h3 id="8、如何删除外键约束（了解）"><a href="#8、如何删除外键约束（了解）" class="headerlink" title="8、如何删除外键约束（了解）"></a>8、如何删除外键约束（了解）</h3><p>删除外键约束，不会自动删除外键约束列的索引，需要单独删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">(1)第一步先查看约束名和删除外键约束<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;#查看某个表的约束名<br><br>alter table 从表名 drop foreign key 外键约束名;<br><br>（2）第二步查看索引名和删除索引<br>show index from 表名称; #查看某个表的索引名<br><br>alter table 从表名 drop index 索引名;<br></code></pre></td></tr></table></figure><h3 id="9、SQL演示"><a href="#9、SQL演示" class="headerlink" title="9、SQL演示"></a>9、SQL演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><code class="hljs java">#演示外键约束<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、作用：</span><br><span class="hljs-comment">用来限定子表和父表的引用关系。</span><br><span class="hljs-comment">子表的外键字段值必须在父类被引用字段值的范围内。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、外键约束一定是有两个表的角色。</span><br><span class="hljs-comment">其中一个作为子表（又称为从表），另一个作为父表（又称为主表）。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">子表外键字段的值要从父表被引用字段的值中选择。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">例如：员工表中记录员工信息，其中有一个字段是“部门编号”，表示这个员工所属的部门。</span><br><span class="hljs-comment">      部门的信息是记录在部门表中，</span><br><span class="hljs-comment">  但是员工表的“部门编号”字段的值不能随意填写，需要参考/引用“部门表”的部门记录。</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  员工表是子表，引用别人，受部门表的牵制/范围管辖。</span><br><span class="hljs-comment">  部门表示父表，被别人引用。</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">例如：商品表、用户表、订单表、订单明细表</span><br><span class="hljs-comment">商品表里面记录了商品信息（商品名称、价格、库存量...）</span><br><span class="hljs-comment">用户表里面记录了用户信息（用户名、密码、账户余额...）</span><br><span class="hljs-comment">订单表里面记录了订单信息（订单编号、订单总价格、订单商品总数量、收获地址...）</span><br><span class="hljs-comment">订单明细表记录了订单中每一个明细（商品编号、订单编号、价格、数量....）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">中午下了一个订单，买了“米粉”、“袜子”、“手机贴膜”、“高压锅”</span><br><span class="hljs-comment">订单编号：112122123222222</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">商品表：</span><br><span class="hljs-comment">1    “米粉”    52.5 ....</span><br><span class="hljs-comment">2    “袜子”    23.0 ....</span><br><span class="hljs-comment">3    “手机贴膜”    15.0 ....</span><br><span class="hljs-comment">4    “高压锅”    125.0 ....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">订单明细中：</span><br><span class="hljs-comment">订单编号         商品编号  数量价格....</span><br><span class="hljs-comment">112122123222222  12（盒米粉）  52.5</span><br><span class="hljs-comment">112122123222222  21（打）       23.0</span><br><span class="hljs-comment">112122123222222  31（张）       15.0</span><br><span class="hljs-comment">112122123222222  41（个）       125.0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">订单明细表是子表，商品表和订单表是父表。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3、外键约束要求</span><br><span class="hljs-comment">（1）外键约束必须在子表中定义</span><br><span class="hljs-comment">（2）子表中要定义外键约束的字段的数据类型和逻辑意义，必须和父表中被引用字段的数据类型、逻辑意义一样。</span><br><span class="hljs-comment">例如：员工表中部门编号字段 引用  部门表中的部门编号字段</span><br><span class="hljs-comment">      订单明细表中的订单编号  引用  订单表中订单编号</span><br><span class="hljs-comment">      订单明细表中的商品编号  引用  商品表中商品编号</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">（3）子表中要定义外键约束的字段的名字和父表中被引用字段名称可以不同。</span><br><span class="hljs-comment">（4）父表中被引用的字段必须是键约束字段，一般都是主键或唯一键约束。</span><br><span class="hljs-comment">此时子表和父表的关系可以是一对一或一对多的关系。</span><br><span class="hljs-comment">父表是一，子表是一或多。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">例如：父表（部门表）一条记录，对应子表（员工表）多条记录。</span><br><span class="hljs-comment">  父表（订单表）一条记录，对应子表（订单明细表）一条或多条记录。</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">（5）父表必须先存在，然后才能正确建立子表的外键约束</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4、关键字 foreign key 和 references  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">5、外键约束约束了什么？</span><br><span class="hljs-comment">（1）建表的顺序，先建父表，再建子表</span><br><span class="hljs-comment">（2）删表的顺序，先删子表，再删父表，</span><br><span class="hljs-comment">或者先删掉外键约束，然后分别删除两个表（顺序就随意了）</span><br><span class="hljs-comment">（3）给子表添加数据、修改外键字段的数据，受影响，因为要从父表的被引用字段范围内选值。</span><br><span class="hljs-comment">（4）删除和修改父表的被引用字段的数据，受影响，因为要考虑这个值是否被子表引用了。</span><br><span class="hljs-comment">（5）是否建立外键，和查询无关。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">比喻：孩子的消费行为要受约束，在爸爸的挣钱范围内。</span><br><span class="hljs-comment">      爸爸的行为也要受约束，被依赖，不是那么自由。</span><br><span class="hljs-comment">  双方都会受影响。</span><br><span class="hljs-comment">*/</span><br><br>#建表时，指定外键约束<br>create table <span class="hljs-title function_">dept</span><span class="hljs-params">(</span><br><span class="hljs-params">did <span class="hljs-type">int</span> primary key auto_increment,</span><br><span class="hljs-params">dname varchar(<span class="hljs-number">50</span>)</span> unique key not <span class="hljs-literal">null</span><br>);<br><br>create table <span class="hljs-title function_">emp</span><span class="hljs-params">(</span><br><span class="hljs-params">id <span class="hljs-type">int</span> primary key auto_increment,</span><br><span class="hljs-params">name varchar(<span class="hljs-number">20</span>)</span> not <span class="hljs-literal">null</span>,<br>departmentid <span class="hljs-type">int</span>,  #子表中外键约束的字段名和父表的被引用字段名不要求一致，但是数据类型和逻辑意义要一样<br>#外键约束只能在字段列表下面单独定义，不能在字段后面直接定义<br>foreign <span class="hljs-title function_">key</span> <span class="hljs-params">(departmentid)</span> references <span class="hljs-title function_">dept</span><span class="hljs-params">(did)</span><br>);<br><br>#查看表结构<br>desc dept;<br>desc emp;<br><br>mysql&gt; desc dept;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| did   | <span class="hljs-type">int</span>         | NO   | PRI | NULL    | auto_increment |<br>| dname | varchar(<span class="hljs-number">50</span>) | NO   | UNI | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>mysql&gt; desc emp;<br>+--------------+-------------+------+-----+---------+----------------+<br>| Field        | Type        | Null | Key | Default | Extra          |<br>+--------------+-------------+------+-----+---------+----------------+<br>| id           | <span class="hljs-type">int</span>         | NO   | PRI | NULL    | auto_increment |<br>| name         | varchar(<span class="hljs-number">20</span>) | NO   |     | NULL    |                |<br>| departmentid | <span class="hljs-type">int</span>         | YES  | MUL | NULL    |                |<br>+--------------+-------------+------+-----+---------+----------------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#查看表的定义<br>show create table dept;<br>show create table emp;<br><br><br>mysql&gt; show create table dept\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: dept<br>Create Table: CREATE TABLE `dept` (<br>  `did` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `dname` varchar(<span class="hljs-number">50</span>) NOT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`did`)</span>,<br>  UNIQUE KEY `dname` (`dname`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; show create table emp\G<br>*************************** <span class="hljs-number">1.</span> row ***************************<br>       Table: emp<br>Create Table: CREATE TABLE `emp` (<br>  `id` <span class="hljs-type">int</span> NOT NULL AUTO_INCREMENT,<br>  `name` varchar(<span class="hljs-number">20</span>) NOT NULL,<br>  `departmentid` <span class="hljs-type">int</span> DEFAULT NULL,<br>  PRIMARY <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`id`)</span>,<br>  KEY `departmentid` (`departmentid`),<br>  CONSTRAINT `emp_ibfk_1` FOREIGN <span class="hljs-title function_">KEY</span> <span class="hljs-params">(`departmentid`)</span> REFERENCES `dept` (`did`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>#查看系统库的约束表<br>SELECT * FROM information_schema.table_constraints <span class="hljs-type">WHERE</span> <span class="hljs-variable">table_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名称&#x27;</span>;<br><br>SELECT * FROM information_schema.table_constraints <span class="hljs-type">WHERE</span> <span class="hljs-variable">table_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;emp&#x27;</span>;<br><br>mysql&gt; SELECT * FROM information_schema.table_constraints <span class="hljs-type">WHERE</span> <span class="hljs-variable">table_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;emp&#x27;</span>;<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME | TABLE_SCHEMA | TABLE_NAME | CONSTRAINT_TYPE | ENFORCED |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| def                | atguigu           | PRIMARY         | atguigu      | emp        | PRIMARY KEY     | YES      |<br>| def                | atguigu           | emp_ibfk_1      | atguigu      | emp        | FOREIGN KEY     | YES      |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#添加记录<br>#添加父表信息，没有影响<br>insert into dept <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;财务&#x27;</span>)</span>,(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;教学&#x27;</span>),(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;咨询&#x27;</span>),(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;后勤&#x27;</span>);<br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   <span class="hljs-number">4</span> | 后勤  |<br>|   <span class="hljs-number">3</span> | 咨询  |<br>|   <span class="hljs-number">2</span> | 教学  |<br>|   <span class="hljs-number">1</span> | 财务  |<br>+-----+-------+<br><span class="hljs-number">4</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#添加子表信息，有影响，受到约束<br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">1</span>)</span>;#成功<br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">1</span>)</span>;#成功<br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-number">2</span>)</span>;#成功<br>insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">6</span>)</span>; #失败<br>#因为departmentid=<span class="hljs-number">1</span>或<span class="hljs-number">2</span>，在父表dept中可以找到对应记录<br>#因为departmentid=<span class="hljs-number">6</span>，在父表dept中找不到对应记录<br><br>mysql&gt; insert into emp <span class="hljs-title function_">values</span><span class="hljs-params">(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;赵六&#x27;</span>,<span class="hljs-number">6</span>)</span>;<br>ERROR <span class="hljs-number">1452</span> (<span class="hljs-number">23000</span>): Cannot add（添加） or update（修改） a <span class="hljs-title function_">child</span><span class="hljs-params">(子表） row（记录/行）:</span><br><span class="hljs-params"> a foreign key constraint fails </span><br><span class="hljs-params"> (`atguigu`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`departmentid`)</span> REFERENCES `dept` (`did`))<br><br>mysql&gt; select * from emp;<br>+----+------+--------------+<br>| id | name | departmentid |<br>+----+------+--------------+<br>|  <span class="hljs-number">1</span> | 张三 |            <span class="hljs-number">1</span> |<br>|  <span class="hljs-number">2</span> | 李四 |            <span class="hljs-number">1</span> |<br>|  <span class="hljs-number">3</span> | 王五 |            <span class="hljs-number">2</span> |<br>+----+------+--------------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>#修改子表的外键字段的信息，有影响，受到约束<br>update emp <span class="hljs-type">set</span> <span class="hljs-variable">departmentid</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;#成功<br>#因为departmentid = <span class="hljs-number">3</span>在父表dept中可以找到对应部门<br><br>update emp <span class="hljs-type">set</span> <span class="hljs-variable">departmentid</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; #失败  <br>#因为departmentid = <span class="hljs-number">6</span>在父表dept中找不到对应部门<br><br>mysql&gt; update emp <span class="hljs-type">set</span> <span class="hljs-variable">departmentid</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-type">where</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>ERROR <span class="hljs-number">1452</span> (<span class="hljs-number">23000</span>): Cannot add or update a child row: <br>a foreign key constraint <span class="hljs-title function_">fails</span> <span class="hljs-params">(`atguigu`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`departmentid`)</span> REFERENCES `dept` (`did`))<br><br><br>mysql&gt; select * from emp;<br>+----+------+--------------+<br>| id | name | departmentid |<br>+----+------+--------------+<br>|  <span class="hljs-number">1</span> | 张三 |            <span class="hljs-number">3</span> |<br>|  <span class="hljs-number">2</span> | 李四 |            <span class="hljs-number">1</span> |<br>|  <span class="hljs-number">3</span> | 王五 |            <span class="hljs-number">2</span> |<br>+----+------+--------------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   <span class="hljs-number">4</span> | 后勤  |<br>|   <span class="hljs-number">3</span> | 咨询  |<br>|   <span class="hljs-number">2</span> | 教学  |<br>|   <span class="hljs-number">1</span> | 财务  |<br>+-----+-------+<br><span class="hljs-number">4</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>#修改父表的被引用字段的值，受约束<br>update dept <span class="hljs-type">set</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;#失败<br>#因为did=<span class="hljs-number">1</span>的部门被子表引用<br>update dept <span class="hljs-type">set</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;#成功<br>#因为 did=<span class="hljs-number">4</span>的部门没有被子表引用<br><br>mysql&gt; update dept <span class="hljs-type">set</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>ERROR <span class="hljs-number">1451</span> (<span class="hljs-number">23000</span>): Cannot delete（删除） or update（修改） a parent（父表） row（记录/行）:<br> a foreign key constraint <span class="hljs-title function_">fails</span> <br> <span class="hljs-params">(`atguigu`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`departmentid`)</span> REFERENCES `dept` (`did`))<br><br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   <span class="hljs-number">6</span> | 后勤  |<br>|   <span class="hljs-number">3</span> | 咨询  |<br>|   <span class="hljs-number">2</span> | 教学  |<br>|   <span class="hljs-number">1</span> | 财务  |<br>+-----+-------+<br><span class="hljs-number">4</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#删除父表的记录，受约束<br>delete from dept <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>; #成功<br>#因为 did=<span class="hljs-number">6</span>的部门没有被子表引用<br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   <span class="hljs-number">3</span> | 咨询  |<br>|   <span class="hljs-number">2</span> | 教学  |<br>|   <span class="hljs-number">1</span> | 财务  |<br>+-----+-------+<br><span class="hljs-number">3</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br>#删除父表的记录，受约束<br>delete from dept <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; #失败<br>#因为 did=<span class="hljs-number">1</span>的部门被子表引用<br><br>mysql&gt; delete from dept <span class="hljs-type">where</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>ERROR <span class="hljs-number">1451</span> (<span class="hljs-number">23000</span>): Cannot delete or update a parent row:<br> a foreign key constraint <span class="hljs-title function_">fails</span> <span class="hljs-params">(`atguigu`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`departmentid`)</span> REFERENCES `dept` (`did`))<br><br>#删除子表的数据，不受约束<br>delete from emp <span class="hljs-type">where</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;王五&#x27;</span>; #可以<br><br>mysql&gt; select * from emp;<br>+----+------+--------------+<br>| id | name | departmentid |<br>+----+------+--------------+<br>|  <span class="hljs-number">1</span> | 张三 |            <span class="hljs-number">3</span> |<br>|  <span class="hljs-number">2</span> | 李四 |            <span class="hljs-number">1</span> |<br>+----+------+--------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>#删除父表，受约束<br>drop table dept; #失败<br><br>mysql&gt; drop table dept; #失败<br>ERROR <span class="hljs-number">3730</span> (HY000): Cannot drop table <span class="hljs-string">&#x27;dept&#x27;</span> referenced by a foreign key constraint <span class="hljs-string">&#x27;emp_ibfk_1&#x27;</span> on table <span class="hljs-string">&#x27;emp&#x27;</span>.<br><br>#删除子表，不受约束<br>drop table emp;<br><br>#能不能在建表后添加外键约束，如何可以，怎么写？<br>alter table 子表名 add foreign <span class="hljs-title function_">key</span><span class="hljs-params">(子表的外键字段名)</span> references 父表名(被引用字段);<br><br><br>create table <span class="hljs-title function_">emp</span><span class="hljs-params">(</span><br><span class="hljs-params">id <span class="hljs-type">int</span> primary key auto_increment,</span><br><span class="hljs-params">name varchar(<span class="hljs-number">20</span>)</span> not <span class="hljs-literal">null</span>,<br>departmentid <span class="hljs-type">int</span><br>);<br><br>#给emp表（子表）增加外键约束<br>alter table emp add foreign <span class="hljs-title function_">key</span><span class="hljs-params">(departmentid)</span> references <span class="hljs-title function_">dept</span><span class="hljs-params">(did)</span>;<br><br>#查看emp的约束信息<br>SELECT * FROM information_schema.table_constraints <span class="hljs-type">WHERE</span> <span class="hljs-variable">table_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;emp&#x27;</span>;<br>mysql&gt; SELECT * FROM information_schema.table_constraints <span class="hljs-type">WHERE</span> <span class="hljs-variable">table_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;emp&#x27;</span>;<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| CONSTRAINT_CATALOG | CONSTRAINT_SCHEMA | CONSTRAINT_NAME | TABLE_SCHEMA | TABLE_NAME | CONSTRAINT_TYPE | ENFORCED |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br>| def                | atguigu           | PRIMARY         | atguigu      | emp        | PRIMARY KEY     | YES      |<br>| def                | atguigu           | emp_ibfk_1      | atguigu      | emp        | FOREIGN KEY     | YES      |<br>+--------------------+-------------------+-----------------+--------------+------------+-----------------+----------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br><br>#只有是键约束（主键、唯一键、外键），都会自动创建索引。<br>#查看emp表的索引<br>show index from emp;<br><br>mysql&gt; show index from emp;<br>+-------+------------+--------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name     | Seq_in_index | Column_name  | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+--------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          <span class="hljs-number">0</span> | PRIMARY      |            <span class="hljs-number">1</span> | id           | A         |           <span class="hljs-number">0</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">1</span> | departmentid |            <span class="hljs-number">1</span> | departmentid | A         |           <span class="hljs-number">0</span> |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+--------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.01</span> sec)</span><br>#主键字段索引名是PRIMARY，删除主键时，会自动删除对应索引<br>#唯一键字段索引名是字段名，删除唯一键时，就是通过删除对应的索引方式来删除唯一键约束<br>#外键字段索引名是字段名，删除外键时，<br><br>#删除外键约束<br>alter table 表名称 drop foreign key 外键约束名;<br><br>#删除emp表的departmentid字段的外键约束<br>alter table emp drop foreign key emp_ibfk_1;<br><br>mysql&gt; show index from emp;<br>+-------+------------+--------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name     | Seq_in_index | Column_name  | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+--------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          <span class="hljs-number">0</span> | PRIMARY      |            <span class="hljs-number">1</span> | id           | A         |           <span class="hljs-number">0</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>| emp   |          <span class="hljs-number">1</span> | departmentid |            <span class="hljs-number">1</span> | departmentid | A         |           <span class="hljs-number">0</span> |     NULL |   NULL | YES  | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+--------------+--------------+--------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">2</span> rows in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br>#说明，删除外键约束时，不会自动删除外键字段的索引，因为它们的命名不一样，<br>#如果需要删除对应的索引，需要单独删 <br>alter table 表名称 drop index 索引名;<br><br>#删除emp表的departmentid字段的索引<br>alter table emp drop index departmentid;<br><br>mysql&gt; show index from emp;<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible | Expression |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br>| emp   |          <span class="hljs-number">0</span> | PRIMARY  |            <span class="hljs-number">1</span> | id          | A         |           <span class="hljs-number">0</span> |     NULL |   NULL |      | BTREE      |         |               | YES     | NULL       |<br>+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+---------+------------+<br><span class="hljs-number">1</span> row in <span class="hljs-title function_">set</span> <span class="hljs-params">(<span class="hljs-number">0.00</span> sec)</span><br><br><br><br></code></pre></td></tr></table></figure><h3 id="10、演示问题"><a href="#10、演示问题" class="headerlink" title="10、演示问题"></a>10、演示问题</h3><p>（1）失败：不是键列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int ,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid int,#员工所在的部门<br>    foreign key (deptid) references dept(did)<br>);ERROR 1215 (HY000): Cannot add foreign key constraint  原因是dept的did不是键列<br></code></pre></td></tr></table></figure><p>（2）失败：数据类型不一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    deptid char,#员工所在的部门<br>    foreign key (deptid) references dept(did)<br>);ERROR 1215 (HY000): Cannot add foreign key constraint  原因是从表的deptid字段和主表的did字段的数据类型不一致，并且要它俩的逻辑意义一致<br></code></pre></td></tr></table></figure><p>（3）成功，两个表字段名一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br>did int primary key,#部门编号<br>    dname varchar(50)#部门名称<br>);<br><br>create table emp(<br>eid int primary key,  #员工编号<br>    ename varchar(5),     #员工姓名<br>    did int,#员工所在的部门<br>    foreign key (did) references dept(did)  <br>    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br>    #是否重名没问题，因为两个did在不同的表中<br>);<br></code></pre></td></tr></table></figure><h3 id="11、设置外键约束等级"><a href="#11、设置外键约束等级" class="headerlink" title="11、设置外键约束等级"></a>11、设置外键约束等级</h3><ul><li><p>Cascade方式：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录 </p></li><li><p>Set null方式：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null  </p></li><li><p>No action方式：如果子表中有匹配的记录,则不允许对父表对应候选键进行update&#x2F;delete操作  </p></li><li><p>Restrict方式：同no action, 都是立即检查外键约束</p></li><li><p>Set default方式（在可视化工具SQLyog中可能显示空白）：父表有变更时,子表将外键列设置成一个默认的值，但Innodb不能识别</p></li></ul><p>如果没有指定等级，就相当于Restrict方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>外键约束可以设置约束等级：<br>（1）No action方式：如果子表中有匹配的记录,则不允许对父表对应候选键进行update/delete操作  <br>（2）Restrict方式：同no action, 都是立即检查外键约束<br>（3）Set null方式：在父表上update/delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null  <br>（4）Cascade方式：在父表上update/delete记录时，同步update/delete掉子表的匹配记录 <br>（5）Set default方式（在可视化工具SQLyog中可能显示空白）：父表有变更时,子表将外键列设置成一个默认的值，但Innodb不能识别<br><br>on update No action | Restrict | Set null | Cascade <br>on delete No action | Restrict | Set null | Cascade <br>如果没有写on update 或on delete字句，表示选择了No action | Restrict。<br><br>*/<br>#父表<br>create table dept(<br>did int primary key auto_increment,<br>dname varchar(50) unique key not null<br>);<br><br>insert into dept values(null,&#x27;财务&#x27;),(null,&#x27;教学&#x27;),(null,&#x27;咨询&#x27;),(null,&#x27;后勤&#x27;);<br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   4 | 后勤  |<br>|   3 | 咨询  |<br>|   2 | 教学  |<br>|   1 | 财务  |<br>+-----+-------+<br>4 rows in set (0.00 sec)<br><br>#子表<br>create table emp(<br>id int primary key auto_increment,<br>name varchar(20) not null,<br>departmentid int,<br>foreign key (departmentid) references dept(did) on update cascade on delete set null<br>#on delete set null要求departmentid字段没有not null约束<br>);<br><br>#添加子表时记录和  定义on update cascade on delete set null无关。还是要在主表能找到对应的记录。<br>insert into emp values(null,&#x27;张三&#x27;,1);<br>insert into emp values(null,&#x27;李四&#x27;,2);<br>insert into emp values(null,&#x27;王五&#x27;,1);<br><br>mysql&gt; select * from emp;<br>+----+------+--------------+<br>| id | name | departmentid |<br>+----+------+--------------+<br>|  1 | 张三 |            1 |<br>|  2 | 李四 |            2 |<br>|  3 | 王五 |            1 |<br>+----+------+--------------+<br>3 rows in set (0.00 sec)<br><br>#修改子表， 和  定义on update cascade on delete set null无关。还是要在主表能找到对应的记录。<br>update emp set departmentid = 6 where name = &#x27;王五&#x27;;<br>#失败，因为departmentid = 6在父表dept中找不到对应部门<br><br>#修改父表被引用的did值， 和  定义on update cascade on delete set null有关。<br>update dept set did = 6 where did = 1; <br>#此时did=1的记录被子表引用了，可以修改，并且会同时修改子表的departmentid=1的字段值为6，级联修改<br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   4 | 后勤  |<br>|   3 | 咨询  |<br>|   2 | 教学  |<br>|   6 | 财务  |<br>+-----+-------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+----+------+--------------+<br>| id | name | departmentid |<br>+----+------+--------------+<br>|  1 | 张三 |            6 |<br>|  2 | 李四 |            2 |<br>|  3 | 王五 |            6 |<br>+----+------+--------------+<br>3 rows in set (0.00 sec)<br><br>#删除父表dept被引用的did的记录， 和  定义on update cascade on delete set null有关。<br>delete from dept where did = 6; #did=6的部门在子表中有引用<br><br>mysql&gt; select * from dept;<br>+-----+-------+<br>| did | dname |<br>+-----+-------+<br>|   4 | 后勤  |<br>|   3 | 咨询  |<br>|   2 | 教学  |<br>+-----+-------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+----+------+--------------+<br>| id | name | departmentid |<br>+----+------+--------------+<br>|  1 | 张三 |         NULL |<br>|  2 | 李四 |            2 |<br>|  3 | 王五 |         NULL |<br>+----+------+--------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h1 id="第15章-事务"><a href="#第15章-事务" class="headerlink" title="第15章 事务"></a>第15章 事务</h1><h2 id="15-1-事务的特点"><a href="#15-1-事务的特点" class="headerlink" title="15.1 事务的特点"></a>15.1 事务的特点</h2><p><strong>1、事务处理</strong>（事务操作）：<strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交(commit)，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务回滚(rollback)到最初状态。</strong></p><p>2、事务的ACID属性：</p><p>（1）<strong>原子性（Automicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p><p>（2）<strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p><p>（3）<strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>（4）<strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>原子性：<br>例如：<br>张三给李四转账500<br>张三转账之前余额是1000<br>李四转账之前余额是1000<br>成功：张三账号变为500，李四变为1500，<br>失败：张三账号是1000，李四还是1000.<br><br><br>#一致性<br>例如：<br>张三给李四转账500<br>张三转账之前余额是1000<br>李四转账之前余额是1000<br><br>要么他俩的余额不变， 还是1000，总和就是2000<br>要么他俩的余额有变化，张三500，李四1500，总和仍然是2000<br>错误：<br>张三500，李四1000，总和是1500，结果不对<br>张三1000，李四1500，总和是2500，结果不对<br><br>#隔离性<br>例如：张三要给李四转500，<br>      王五要给李四转500，<br>      张三转账是否成功，和王五是否转账成功无关。<br>      <br>      <br>#持久性：<br>例如：张三要给李四转500，一旦成功提交，就转账成功，撤不回来了。<br>      */<br></code></pre></td></tr></table></figure><h2 id="15-2-事务的开启、提交、回滚"><a href="#15-2-事务的开启、提交、回滚" class="headerlink" title="15.2  事务的开启、提交、回滚"></a>15.2  事务的开启、提交、回滚</h2><p>MySQL默认情况下是自动提交事务。<br>每一条语句都是一个独立的事务，一旦成功就提交了。一条语句失败，单独一条语句不生效，其他语句是生效的。</p><h3 id="15-2-1-手动提交模式"><a href="#15-2-1-手动提交模式" class="headerlink" title="15.2.1 手动提交模式"></a>15.2.1 手动提交模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#开启手动提交事务模式<br>set autocommit = false;  或  set autocommit = 0;<br><br>上面语句执行之后，它之后的所有sql，都需要手动提交才能生效，直到恢复自动提交模式。<br><br>#恢复自动提交模式<br>set autocommit = true; 或 set autocommit = 1;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET autocommit = FALSE;#设置当前连接为手动提交模式<br><br>UPDATE t_employee SET salary = 15000 <br>WHERE ename = &#x27;孙红雷&#x27;;<br><br>COMMIT;#提交<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET autocommit = FALSE;#设置当前连接为手动提交模式<br><br>UPDATE t_employee SET salary = 15000 <br>WHERE ename = &#x27;孙红雷&#x27;;<br><br>#后面没有提交，直接关了连接，那么这句修改没有生效<br></code></pre></td></tr></table></figure><h3 id="15-2-2-自动提交模式下开启事务"><a href="#15-2-2-自动提交模式下开启事务" class="headerlink" title="15.2.2 自动提交模式下开启事务"></a>15.2.2 自动提交模式下开启事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>也可以在自动提交模式下，开启一个事务。<br>(1)start transaction;<br><br>....<br><br>(3)commit; 或 rollback;   <br>在(1)和(3)之间的语句是属于手动提交模式，其他的仍然是自动提交模式。<br>*/<br><br>START TRANSACTION; #开始事务<br><br>UPDATE t_employee SET salary = 0 <br>WHERE ename = &#x27;李冰冰&#x27;; <br><br>#下面没有写commit;那么上面这句update语句没有正式生效。<br>commit;#提交<br><br>START TRANSACTION;<br>DELETE FROM t_employee;<br>ROLLBACK; #回滚<br></code></pre></td></tr></table></figure><h3 id="15-2-3-DDL语句不支持事务"><a href="#15-2-3-DDL语句不支持事务" class="headerlink" title="15.2.3 DDL语句不支持事务"></a>15.2.3 DDL语句不支持事务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#说明：DDL不支持事务<br>#DDL：create,drop,alter等创建库、创建表、删除库、删除表、修改库、修改表结构等这些语句不支持事务。<br>#换句话只对insert,update,delete语句支持事务。<br>TRUNCATE 表名称; 清空整个表的数据，不支持事务。 把表drop掉，新建一张表。<br><br>START TRANSACTION;<br>TRUNCATE t_employee;<br>ROLLBACK; #回滚  无效<br></code></pre></td></tr></table></figure><h2 id="15-3-事务的隔离级别"><a href="#15-3-事务的隔离级别" class="headerlink" title="15.3 事务的隔离级别"></a>15.3 事务的隔离级别</h2><p><strong>数据库事务的隔离性</strong>：数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。<strong>一个事务与其他事务隔离的程度称为隔离级别。</strong>数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱。</p><ul><li>脏读：一个事务读取了另一个事务未提交数据；</li><li>不可重复读：同一个事务中前后两次读取同一条记录不一样。因为被其他事务修改了并且提交了。</li><li>幻读：一个事务读取了另一个事务新增、删除的记录情况，记录数不一样，像是出现幻觉。</li></ul><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。 之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li></ul><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/1599461151424.png" alt="1599461151424"></p><ul><li><p><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新&#x2F;修改</strong>了该字段。 之后, T1再次读取同一个字段, 值就不同了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一个事物读到了另一个事物更改后提交的数据<br></code></pre></td></tr></table></figure></li></ul><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/1599461170319.png" alt="1599461170319"></p><ul><li><p><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入&#x2F;删除</strong>了一些新的行。 之后, 如果 T1 再次读取同一个表, 就会多&#x2F;少几行。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一个事物读取数据感知到了 另一个事物对数据的增删<br></code></pre></td></tr></table></figure></li></ul><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/1599461184631.png" alt="1599461184631"></p><p><em><strong>不可重复度和幻读区别：</strong></em> </p><p>不可重复读的重点是修改，幻读的重点在于新增或者删除。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">mysql支持四个隔离级别：</span><br><span class="hljs-comment">read-uncommitted：会出现脏读、不可重复读、幻读</span><br><span class="hljs-comment">read-committed：可以避免脏读，会出现不可重复读、幻读</span><br><span class="hljs-comment">repeatable-read：可以避免脏读、不可重复读、幻读。但是两个事务不能操作（写update,delete）同一个行。</span><br><span class="hljs-comment">serializable：可以避免脏读、不可重复读、幻读。但是两个事务不能操作（写update,delete）同一个表。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">修改隔离级别：</span><br><span class="hljs-comment">set transaction_isolation=&#x27;隔离级别&#x27;;  </span><br><span class="hljs-comment">#mysql8之前 transaction_isolation变量名是 tx_isolation</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">查看隔离级别：</span><br><span class="hljs-comment">select @@transaction_isolation;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>数据库提供的 4 种事务隔离级别：</strong></p><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>read-uncommitted</td><td>允许A事务读取其他事务未提交和已提交的数据。会出现脏读、不可重复读、幻读问题</td></tr><tr><td>read-committed</td><td>只允许A事务读取其他事务已提交的数据。可以避免脏读，但仍然会出现不可重复读、幻读问题</td></tr><tr><td>repeatable-read</td><td>确保事务可以多次从一个字段中读取相同的值。在这个事务持续期间，禁止其他事务对这个字段进行更新。可以避免脏读和不可重复读。但是幻读问题仍然存在。注意：mysql中使用了MVCC多版本控制技术，在这个级别也可以避免幻读。</td></tr><tr><td>serializable</td><td>确保事务可以从一个表中读取相同的行，相同的记录。在这个事务持续期间，禁止其他事务对该表执行插入、更新、删除操作。所有并发问题都可以避免，但性能十分低下。</td></tr></tbody></table><ul><li>Oracle 支持的 2 种事务隔离级别：<strong>READ-COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: READ COMMITED 。</li><li>Mysql 支持 4 种事务隔离级别。 Mysql 默认的事务隔离级别为: <strong>REPEATABLE-READ</strong>。在mysql中REPEATABLE READ的隔离级别也可以避免幻读了。</li></ul><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-5521.png" alt="image-20211202002655521"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-64.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-841.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-23256.png"></p><!--![image-20211202002655521](/MySQL8.0_SQL笔记/image-5521.png)![](/MySQL8.0_SQL笔记/image-64.png)![](/MySQL8.0_SQL笔记/image-841.png)![](/MySQL8.0_SQL笔记/image-23256.png)--><h1 id="第16章-用户管理"><a href="#第16章-用户管理" class="headerlink" title="第16章 用户管理"></a>第16章 用户管理</h1><h2 id="16-1-用户管理的目标"><a href="#16-1-用户管理的目标" class="headerlink" title="16.1 用户管理的目标"></a>16.1 用户管理的目标</h2><p>1、登录验证：主机IP地址+用户名+密码三重验证</p><p>IP地址可以是一个明确的IP（例如：192.168.1.25），可以是某个IP段（例如：192.168.1.%)，可以是任意IP地址（%)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -h mysql服务器的IP地址 -P端口号 -u用户名 -p<br>Enter password: ******<br></code></pre></td></tr></table></figure><p>用户的IP是客户端主机的IP和mysql服务器的IP地址不一样。</p><h3 id="演示用户的创建"><a href="#演示用户的创建" class="headerlink" title="演示用户的创建"></a>演示用户的创建</h3><p>例如：mysql服务器的IP地址是192.168.31.152，使用下面的命令登录是错误的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -h192.168.31.23 -P端口号 -u用户名 -p<br>Enter password: ******<br></code></pre></td></tr></table></figure><p>因为mysql服务器不在192.168.31.23上。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20211201195333403.png"></p><!--![](/MySQL8.0_SQL笔记/image-20211201195333403.png)--><p>刚才创建了一个用户：</p><p>用户名：yan，主机：192.168.31.%，表示可以从192.168.31段的其他客户端都可以连接到192.168.31.152机器上的mysql服务。</p><p>用户名：lin，主机：%，表示可以从任意一台主机的客户端都可以连接到192.168.31.152机器上的mysql服务。</p><p>用户名：chai，主机：192.168.31.23，表示只能从192.168.31.23主机的客户端，连接到192.168.31.152机器上的mysql服务。</p><p>2、权限管理</p><ul><li>全局权限</li><li>数据库权限</li><li>数据表权限</li><li>字段权限</li><li>存储过程或函数子程序的权限</li></ul><p>对用户的操作进行逐级权限验证，如果上一级有这个权限，下一级就不用验证了。</p><h2 id="16-2-用户管理演示"><a href="#16-2-用户管理演示" class="headerlink" title="16.2  用户管理演示"></a>16.2  用户管理演示</h2><p>当具有权限管理的用户通过SQLyog图形界面工具连接MySQL服务之前，可以按照如下步骤进行用户和权限管理。</p><p>第1步，选择工具栏中的用户管理器工具按钮，打开用户管理界面。</p><p> <img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-20211201004001116.png"></p><!-- ![](/MySQL8.0_SQL笔记/image-20211201004001116.png)--><p>第2步，如果要创建新用户，选择“添加新用户”按钮，弹出新用户信息填写窗口。用户名和主机文本框必须填写，其他项可以不填写，按照默认值处理。如果密码和再一次输入密码框为空，表示密码为空。如果要设置密码必须保证密码框和再一次输入密码框输入相同字符，并在Plugin选择合适的插件“caching_sha2_password”或“mysql_native_password”，默认是“caching_sha2_password”插件。如果需要还可以在下面填写用户资源限制参数，默认值是0表示不限制。</p><p> <img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-4348.png"></p><!--![](/MySQL8.0_SQL笔记/image-4348.png)--><p>​    第3步，如果要修改用户信息，可以直接在“用户”下拉列表中选择用户，然后在右边直接修改用户信息。</p><p> <img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-4021884.png"></p><!--![](/MySQL8.0_SQL笔记/image-4021884.png)--><p>第4步，如果是对已有的用户进行授权操作，或撤销已有用户的授权，可以直接在“用户”下拉列表中选择用户，然后在左下方选择权限等级，右边对应权限打对勾表示授予该项权限，不打对勾表示不授予该项权限。</p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-8884.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-3078.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-38719.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-6096.png"></p><p><img src="/2024/04/12/%E6%8A%80%E6%9C%AF%E6%A0%88/MySQL/MySQL8.0_SQL%E7%AC%94%E8%AE%B0/image-4099.png"></p><!--![](/MySQL8.0_SQL笔记/image-8884.png)![](/MySQL8.0_SQL笔记/image-3078.png)![](/MySQL8.0_SQL笔记/image-38719.png)![](/MySQL8.0_SQL笔记/image-6096.png)![](image-4099.png)--><h1 id="第17章-MySQL8的部分新特性"><a href="#第17章-MySQL8的部分新特性" class="headerlink" title="第17章 MySQL8的部分新特性"></a>第17章 MySQL8的部分新特性</h1><h2 id="1、系统表全部为InnoDB表"><a href="#1、系统表全部为InnoDB表" class="headerlink" title="1、系统表全部为InnoDB表"></a>1、系统表全部为InnoDB表</h2><p>从 MySQL 8.0 开始，mysql 系统表和数据字典表使用 InnoDB 存储引擎，存储在 MySQL 数据目录下的 mysql.ibd 表空间文件中。在 MySQL 5.7 之前，这些系统表使用 MyISAM 存储引擎，存储在 mysql 数据库文件目录下各自的表空间文件中。关于数据库存储引擎的详细内容，在MySQL高级课程讲解。</p><p>在MySQL5.7版本中查看系统表类型，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; #MySQL5.7<br>mysql&gt; #查看系统表类型<br>mysql&gt; SELECT DISTINCT(ENGINE) FROM information_schema.tables;<br>+----------------------+<br>| ENGINE             |<br>+----------------------+<br>| MEMORY             |<br>| InnoDB             |<br>| MyISAM             |<br>| CSV                |<br>| PERFORMANCE_SCHEMA |<br>| NULL               |<br>+----------------------+<br>6 rows in set (0.04 sec)<br></code></pre></td></tr></table></figure><p>在MySQL8.0版本中查看系统表类型，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; #MySQL8.0<br>mysql&gt; #查看系统表类型<br>mysql&gt; SELECT DISTINCT(ENGINE) FROM information_schema.tables;<br>+--------------------+<br>| ENGINE                |<br>+--------------------+<br>| InnoDB                |<br>| NULL                  |<br>| PERFORMANCE_SCHEMA |<br>| CSV                   |<br>+--------------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>系统表全部换成事务型的InnoDB表，默认的MySQL实例将不包含任何MyISAM表，除非手动创建MyISAM表。</p><h2 id="2、默认字符集改为utf8mb4"><a href="#2、默认字符集改为utf8mb4" class="headerlink" title="2、默认字符集改为utf8mb4"></a>2、默认字符集改为utf8mb4</h2><p>在8.0版本之前，MySQL默认的字符集为Latin1，而8.0版本默认字符集为utf8mb4。</p><p>Latin1是ISO-8859-1的别名，有些环境下写作Latin-1。ISO-8859-1编码是单字节编码，不支持中文等多字节字符，但向下兼容ASCII。</p><p>MySQL中utf8字符集，它是utf8mb3的别称，使用三个字节编码表示一个字符。自MySQL4.1版本被引入，能够支持绝大多数语言的字符，但依然有些字符不能正确编码，如emoji表情字符等，为此MySQL5.5引入了utf8mb4字符集。在MySQL5.7对utf8mb4进行了大幅优化，并丰富了校验字符集。mb4就是“most byte 4”的意思，专门用来兼容四字节的Unicode，utf8mb4编码是utf8编码的超集，兼容utf8，并且能存储4字节的表情字符。如果原来某些库和表的字符集是utf8，可以直接修改为utf8mb4，不需要做其他转换。但是从uft8mb4转回utf8就会有问题。</p><p>使用SHOW语句查看MySQL5.7版本数据库的默认编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; #查看MySQL5.7数据库的默认编码<br>mysql&gt; SHOW VARIABLES LIKE &#x27;character_set_database&#x27;;<br>+------------------------+--------+<br>| Variable_name            | Value  |<br>+------------------------+--------+<br>| character_set_database | latin1 |<br>+------------------------+--------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>使用SHOW语句查看MySQL8.0版本数据库的默认编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; #查看MySQL8.0数据库的默认编码<br>mysql&gt; SHOW VARIABLES LIKE &#x27;character_set_database&#x27;;<br>+------------------------+---------+<br>| Variable_name            | Value   |<br>+------------------------+---------+<br>| character_set_database | utf8mb4 |<br>+------------------------+---------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>字符集校对规则是在字符集内用于字符比较和排序的一套规则，比如有的规则区分大小写，有的则无视。校对规则特征：</p><ul><li>两个不同的字符集不能有相同的校对规则。</li><li>每个字符集有一个默认校对规则。</li><li>校对规则存在命名约定，以其相关的字符集名开始，中间包括一个语言名，并且以_ci、_cs或_bin结尾。其中_ci表示大小写不敏感、_cs表示大小写敏感、bin表示直接比较字符的二进制编码，即区分大小写。</li></ul><p>使用SHOW语句查看utf8mb4字符集的部分校对规则如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW COLLATION LIKE &#x27;utf8mb4_0900%&#x27;;<br>+-----------+---------+-----+---------+----------+---------+--------------+<br>| Collation  | Charset | Id  | Default | Compiled | Sortlen | Pad_attribute|<br>+-------------------+---------+-----+---------+----------+-------+--------+<br>|utf8mb4_0900_ai_ci| utf8mb4 | 255 | Yes    | Yes     |   0 | NO PAD        |<br>|utf8mb4_0900_as_ci| utf8mb4 | 305 |         | Yes     |   0 | NO PAD        |<br>|utf8mb4_0900_as_cs| utf8mb4 | 278 |         | Yes     |   0 | NO PAD        |<br>|utf8mb4_0900_bin| utf8mb4 | 309 |         | Yes     |   1 | NO PAD        |<br>+-------------------+---------+-----+---------+----------+---------+------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、支持检查约束（见上面检查约束）"><a href="#3、支持检查约束（见上面检查约束）" class="headerlink" title="3、支持检查约束（见上面检查约束）"></a>3、支持检查约束（见上面检查约束）</h2><h2 id="4、支持窗口函数（见上面窗口函数）"><a href="#4、支持窗口函数（见上面窗口函数）" class="headerlink" title="4、支持窗口函数（见上面窗口函数）"></a>4、支持窗口函数（见上面窗口函数）</h2><h2 id="5、用户管理"><a href="#5、用户管理" class="headerlink" title="5、用户管理"></a>5、用户管理</h2><p>在MySQL 8.x中，默认的身份认证插件是“caching_sha2_password”，替代了之前的“mysql_native_password”。可以通过系统变量default_authentication_plugin和mysql数据库中的user表来看到这个变化。</p><p>在MySQL8之前默认的身份插件是“mysql_native_password”，即MySQL用户的密码使用PASSWORD函数进行加密。在MySQL 8.x中，默认的身份认证插件是“caching_sha2_password”，替代了之前的“mysql_native_password”，PASSWORD函数被弃用了。</p><p>在MySQL版本5.6.6版本起，在mysql.user表中添加了“password_expired”字段，它允许设置密码是否失效。如果“password_lifetime”字段值不为NULL，那么从MySQL服务启动时间开始，经过“password_lifetime”字段值的时间间隔之后，密码就过期了，即“password_expired”字段就为“Y”。任何密码超期的账号想要连接服务器端进行数据库操作都必须更改密码。MySQL8.0版本允许数据库管理员手动设置账户密码过期时间。</p><p>从MySQL 8.x版本开始允许限制重复使用以前的密码。</p><p>在MySQL8之前，如果要给多个用户授予相同的角色，需要为每个用户单独授权。在MySQL8之后，可以为多个用户赋予统一的角色，然后给角色授权即可，角色可以看成是一些权限的集合，这样就无须为每个用户单独授权。如果角色的权限修改，将会使得该角色下的所有用户的权限都跟着修改，这就非常方便。</p><p>mysql的密码字段有变化：</p><ul><li><p>mysql5.7之前mysql系统库的user表，密码字段名是password</p></li><li><p>mysql5.7版本mysql系统库的user表，密码字段名是authentication_string</p></li><li><p>mysql8.0版本mysql系统库的user表，密码字段名是authentication_string，另外用户管理还有角色概念，mysql系统库中有default_roles表。</p></li></ul><h2 id="6、其他新特性（略）"><a href="#6、其他新特性（略）" class="headerlink" title="6、其他新特性（略）"></a>6、其他新特性（略）</h2><p>通用表达式、计算列、DDL操作支持原子性、数据字典合并等等。</p><p>通用表达式简称为CTE（Common Table Expressions）。CTE是命名的临时结果集，作用范围是当前语句。CTE可以理解为一个可以复用的子查询，但是和子查询又有区别，一个CTE可以引用其他CTE，CTE还可以是自引用(递归CTE)，也可以在同一查询中多次引用，但子查询不可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH [RECURSIVE]<br> cte_name [(col_name [, col_name] ...)] AS (subquery)<br> [, cte_name [(col_name [, col_name] ...)] AS (subquery)] ...<br></code></pre></td></tr></table></figure><p>通用表达式以“WITH”开头，如果“WITH”后面加“RECURSIVE”就表示接下来在通用表达式中需要递归引用自己，否则就不递归引用。每一个通用表达式都需要有一个名字，它相当于是子查询结果集的名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#（1）在“t_employee”表中查询每个人薪资和公司平均薪资的的差值。<br>WITH temp AS (SELECT ROUND(AVG(salary),2) AS pingjun FROM t_employee)<br>SELECT ename AS &quot;员工姓名&quot;,<br>    salary AS &quot;薪资&quot;,<br>    pingjun &quot;公司平均薪资&quot;,<br>    ROUND(salary - pingjun,2) &quot;差值&quot;<br>FROM t_employee,temp<br>HAVING ABS(差值)&gt;5000;<br><br>#（2）查询薪资低于9000的员工编号，员工姓名，员工薪资，领导编号，领导姓名，领导薪资<br>WITH <br>emp AS (SELECT eid,ename,salary,`mid` FROM t_employee WHERE salary &lt;9000),<br>mgr(meid,mename,msalary) AS (SELECT eid,ename,salary FROM t_employee)<br>  <br>SELECT eid AS &quot;员工薪资&quot;,<br>ename AS &quot;员工姓名&quot;,<br>salary AS &quot;员工薪资&quot;,<br>meid AS &quot;领导编号&quot;,<br>mename AS &quot;领导姓名&quot;,<br>msalary AS &quot;领导薪资&quot;<br>FROM emp INNER JOIN mgr ON emp.mid = mgr.meid;<br><br>#（3）查询eid为21的员工，和他所有领导，直到最高领导。<br>CREATE TABLE emp AS (SELECT eid,ename,salary,tel,`mid` FROM t_employee WHERE salary &lt; 10000);<br>UPDATE emp SET MID=19 WHERE eid=21; <br>UPDATE emp SET MID=17 WHERE eid=19; <br>UPDATE emp SET MID=16 WHERE eid=17; <br>UPDATE emp SET MID=15 WHERE eid=16;<br>UPDATE emp SET MID=4 WHERE eid=15; <br>UPDATE emp SET MID=NULL WHERE eid=4;<br>SELECT * FROM emp;<br><br><br>WITH RECURSIVE cte<br>AS ( <br>SELECT eid,ename,`mid`<br> FROM emp<br> WHERE eid = 21<br><br>UNION ALL<br><br> SELECT emp.eid,emp.ename,emp.mid<br> FROM emp INNER JOIN cte<br> ON emp.eid = cte.mid<br> WHERE emp.eid IS NOT NULL<br>)<br>SELECT * FROM cte;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术栈</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
